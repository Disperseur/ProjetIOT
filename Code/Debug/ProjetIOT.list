
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005664  08005664  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800566c  0800566c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800566c  0800566c  0000666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005674  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000000c  08005680  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005680  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e8e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa3  00000000  00000000  00020eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00024970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001246  00000000  00000000  000260d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021249  00000000  00000000  0002731e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc66  00000000  00000000  00048567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce74b  00000000  00000000  000641cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  0013295c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00138b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005490 	.word	0x08005490

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005490 	.word	0x08005490

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
//    debug_led(0);

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <debug_init+0x10>)
 80004c2:	f000 f868 	bl	8000596 <debug_str>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	080054a8 	.word	0x080054a8

080004d0 <debug_led>:

void debug_led (int val) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	2102      	movs	r1, #2
 80004e0:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <debug_led+0x20>)
 80004e2:	f001 fd5b 	bl	8001f9c <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	48000400 	.word	0x48000400

080004f4 <debug_char>:

void debug_char (char c) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 80004fe:	2300      	movs	r3, #0
 8000500:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 8000506:	f107 010c 	add.w	r1, r7, #12
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
 800050e:	2201      	movs	r2, #1
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <debug_char+0x2c>)
 8000512:	f003 ff4f 	bl	80043b4 <HAL_UART_Transmit>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200002b4 	.word	0x200002b4

08000524 <debug_hex>:

void debug_hex (u1_t b) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    debug_char("0123456789ABCDEF"[b>>4]);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	091b      	lsrs	r3, r3, #4
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <debug_hex+0x34>)
 8000538:	5c9b      	ldrb	r3, [r3, r2]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ffda 	bl	80004f4 <debug_char>
    debug_char("0123456789ABCDEF"[b&0xF]);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	f003 030f 	and.w	r3, r3, #15
 8000546:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <debug_hex+0x34>)
 8000548:	5cd3      	ldrb	r3, [r2, r3]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ffd2 	bl	80004f4 <debug_char>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	080054d8 	.word	0x080054d8

0800055c <debug_uint>:
    }
    debug_char('\r');
    debug_char('\n');
}

void debug_uint (u4_t v) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    for(s1_t n=24; n>=0; n-=8) {
 8000564:	2318      	movs	r3, #24
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e00c      	b.n	8000584 <debug_uint+0x28>
        debug_hex(v>>n);
 800056a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	fa22 f303 	lsr.w	r3, r2, r3
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffd4 	bl	8000524 <debug_hex>
    for(s1_t n=24; n>=0; n-=8) {
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3b08      	subs	r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000588:	2b00      	cmp	r3, #0
 800058a:	daee      	bge.n	800056a <debug_uint+0xe>
    }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
    while(*str) {
 800059e:	e006      	b.n	80005ae <debug_str+0x18>
        debug_char(*str++);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffa3 	bl	80004f4 <debug_char>
    while(*str) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f4      	bne.n	80005a0 <debug_str+0xa>
    }
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <debug_val>:

void debug_val (const char* label, u4_t val) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    debug_str(label);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ffe3 	bl	8000596 <debug_str>
    debug_uint(val);
 80005d0:	6838      	ldr	r0, [r7, #0]
 80005d2:	f7ff ffc3 	bl	800055c <debug_uint>
    debug_char('\r');
 80005d6:	200d      	movs	r0, #13
 80005d8:	f7ff ff8c 	bl	80004f4 <debug_char>
    debug_char('\n');
 80005dc:	200a      	movs	r0, #10
 80005de:	f7ff ff89 	bl	80004f4 <debug_char>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b31      	ldr	r3, [pc, #196]	@ (80006c8 <MX_GPIO_Init+0xdc>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a30      	ldr	r2, [pc, #192]	@ (80006c8 <MX_GPIO_Init+0xdc>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0xdc>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_GPIO_Init+0xdc>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a2a      	ldr	r2, [pc, #168]	@ (80006c8 <MX_GPIO_Init+0xdc>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0xdc>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f648 0180 	movw	r1, #34944	@ 0x8880
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f001 fcae 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2102      	movs	r1, #2
 8000644:	4821      	ldr	r0, [pc, #132]	@ (80006cc <MX_GPIO_Init+0xe0>)
 8000646:	f001 fca9 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 800064a:	f648 0380 	movw	r3, #34944	@ 0x8880
 800064e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000666:	f001 fb2f 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_Pin|DIO0_Pin|DIO1_Pin;
 800066a:	23c1      	movs	r3, #193	@ 0xc1
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	@ (80006cc <MX_GPIO_Init+0xe0>)
 8000680:	f001 fb22 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	480c      	ldr	r0, [pc, #48]	@ (80006cc <MX_GPIO_Init+0xe0>)
 800069c:	f001 fb14 	bl	8001cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2006      	movs	r0, #6
 80006a6:	f001 fa5a 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006aa:	2006      	movs	r0, #6
 80006ac:	f001 fa73 	bl	8001b96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2017      	movs	r0, #23
 80006b6:	f001 fa52 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006ba:	2017      	movs	r0, #23
 80006bc:	f001 fa6b 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400

080006d0 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	461a      	mov	r2, r3
 8000702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f001 fc47 	bl	8001f9c <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b08c      	sub	sp, #48	@ 0x30
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <hal_pin_rst+0x16>
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d116      	bne.n	800075a <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 800072c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000730:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f001 fac0 	bl	8001cc8 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	461a      	mov	r2, r3
 800074c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000754:	f001 fc22 	bl	8001f9c <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8000758:	e00e      	b.n	8000778 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 800075a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800075e:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000772:	f001 faa9 	bl	8001cc8 <HAL_GPIO_Init>
    }
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3730      	adds	r7, #48	@ 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b40      	cmp	r3, #64	@ 0x40
 800078e:	d102      	bne.n	8000796 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fd89 	bl	80012a8 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	2b80      	cmp	r3, #128	@ 0x80
 800079a:	d102      	bne.n	80007a2 <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fd83 	bl	80012a8 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 80007c2:	2300      	movs	r3, #0
 80007c4:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 80007c6:	2300      	movs	r3, #0
 80007c8:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	f107 010c 	add.w	r1, r7, #12
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <hal_spi+0x38>)
 80007e0:	f002 fe33 	bl	800344a <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 80007e4:	7a3b      	ldrb	r3, [r7, #8]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000204 	.word	0x20000204

080007f4 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <hal_ticks>:

u4_t hal_ticks () {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 800080a:	f000 f8b1 	bl	8000970 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <hal_ticks+0x58>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <hal_ticks+0x5c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800081a:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <hal_ticks+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	2b02      	cmp	r3, #2
 8000828:	d10d      	bne.n	8000846 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <hal_ticks+0x5c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	2b02      	cmp	r3, #2
 8000836:	d106      	bne.n	8000846 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <hal_ticks+0x5c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800083e:	807b      	strh	r3, [r7, #2]
    		t++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8000846:	f000 f8a3 	bl	8000990 <hal_enableIRQs>
    return (t<<16)|cnt;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	041a      	lsls	r2, r3, #16
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	4313      	orrs	r3, r2
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000028 	.word	0x20000028
 8000860:	20000268 	.word	0x20000268

08000864 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 800086c:	f7ff ffca 	bl	8000804 <hal_ticks>
 8000870:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dc01      	bgt.n	8000884 <deltaticks+0x20>
 8000880:	2300      	movs	r3, #0
 8000882:	e008      	b.n	8000896 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	141b      	asrs	r3, r3, #16
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <deltaticks+0x2e>
 800088c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000890:	e001      	b.n	8000896 <deltaticks+0x32>
    return (u2_t)d;
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	b29b      	uxth	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 80008a6:	bf00      	nop
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffdb 	bl	8000864 <deltaticks>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f9      	bne.n	80008a8 <hal_waitUntil+0xa>
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <hal_checkTimer+0x78>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <hal_checkTimer+0x78>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 0202 	bic.w	r2, r2, #2
 80008d6:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ffc3 	bl	8000864 <deltaticks>
 80008de:	4603      	mov	r3, r0
 80008e0:	81fb      	strh	r3, [r7, #14]
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d809      	bhi.n	80008fc <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <hal_checkTimer+0x78>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <hal_checkTimer+0x78>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0202 	bic.w	r2, r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
        return 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e018      	b.n	800092e <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <hal_checkTimer+0x78>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000902:	89fa      	ldrh	r2, [r7, #14]
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <hal_checkTimer+0x78>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	440a      	add	r2, r1
 800090a:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <hal_checkTimer+0x78>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <hal_checkTimer+0x78>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f042 0202 	orr.w	r2, r2, #2
 800091a:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <hal_checkTimer+0x78>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6a1a      	ldr	r2, [r3, #32]
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <hal_checkTimer+0x78>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0201 	orr.w	r2, r2, #1
 800092a:	621a      	str	r2, [r3, #32]
        return 0;
 800092c:	2300      	movs	r3, #0
    }
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000268 	.word	0x20000268

0800093c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d104      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000958:	6053      	str	r3, [r2, #4]
    }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000268 	.word	0x20000268
 800096c:	20000028 	.word	0x20000028

08000970 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <hal_disableIRQs+0x1c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a03      	ldr	r2, [pc, #12]	@ (800098c <hal_disableIRQs+0x1c>)
 8000980:	6013      	str	r3, [r2, #0]
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000028 	.word	0x20000028

08000990 <hal_enableIRQs>:

void hal_enableIRQs () {
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <hal_enableIRQs+0x24>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3b01      	subs	r3, #1
 800099a:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <hal_enableIRQs+0x24>)
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <hal_enableIRQs+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a6:	b662      	cpsie	i
}
 80009a8:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000028 	.word	0x20000028

080009b8 <hal_sleep>:

void hal_sleep () {
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 80009bc:	bf30      	wfi
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 80009cc:	2208      	movs	r2, #8
 80009ce:	2100      	movs	r1, #0
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <hal_init+0x28>)
 80009d2:	f004 fd30 	bl	8005436 <memset>
    hal_disableIRQs();
 80009d6:	f7ff ffcb 	bl	8000970 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 80009da:	f7ff fe79 	bl	80006d0 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 80009de:	f7ff fee4 	bl	80007aa <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 80009e2:	f7ff ff07 	bl	80007f4 <hal_time_init>
    hal_enableIRQs();
 80009e6:	f7ff ffd3 	bl	8000990 <hal_enableIRQs>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000028 	.word	0x20000028

080009f4 <hal_failed>:

void hal_failed () {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 80009f8:	f7ff ffba 	bl	8000970 <hal_disableIRQs>
    hal_sleep();
 80009fc:	f7ff ffdc 	bl	80009b8 <hal_sleep>
    while(1);
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <hal_failed+0xc>

08000a04 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	095b      	lsrs	r3, r3, #5
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <getNocrc>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	09db      	lsrs	r3, r3, #7
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <getIh>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <LMIC_init>:
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}


void LMIC_init (void) {
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <LMIC_init+0x18>)
 8000ab2:	2240      	movs	r2, #64	@ 0x40
 8000ab4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000030 	.word	0x20000030

08000ac8 <hellofunc>:


// counter
static int cnt = 0;
static osjob_t hellojob;
static void hellofunc (osjob_t* j) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	// say hello
	debug_str("hello world!\r\n");
 8000ad0:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <hellofunc+0x50>)
 8000ad2:	f7ff fd60 	bl	8000596 <debug_str>
	// log counter
	debug_val("cnt = ", cnt);
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <hellofunc+0x54>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4810      	ldr	r0, [pc, #64]	@ (8000b20 <hellofunc+0x58>)
 8000ade:	f7ff fd6f 	bl	80005c0 <debug_val>
	// toggle LED
	debug_led(++cnt & 1);
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <hellofunc+0x54>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b1c <hellofunc+0x54>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <hellofunc+0x54>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fceb 	bl	80004d0 <debug_led>
	// reschedule task every second
	os_setTimedCallback(j, os_getTime()+sec2osticks(1), hellofunc);
 8000afa:	f000 f8b1 	bl	8000c60 <os_getTime>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <hellofunc+0x5c>)
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f8f5 	bl	8000cf8 <os_setTimedCallback>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	080055d0 	.word	0x080055d0
 8000b1c:	200001dc 	.word	0x200001dc
 8000b20:	080055e0 	.word	0x080055e0
 8000b24:	08000ac9 	.word	0x08000ac9

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fec6 	bl	80018be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f82b 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f7ff fd59 	bl	80005ec <MX_GPIO_Init>
  MX_SPI3_Init();
 8000b3a:	f000 fc8b 	bl	8001454 <MX_SPI3_Init>
  MX_TIM7_Init();
 8000b3e:	f000 fda7 	bl	8001690 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000b42:	f000 fe03 	bl	800174c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8000b46:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <main+0x54>)
 8000b48:	f003 f96e 	bl	8003e28 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <main+0x58>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <main+0x58>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b5a:	601a      	str	r2, [r3, #0]
  osjob_t initjob;
  // initialize runtime env
  os_init();
 8000b5c:	f000 f86e 	bl	8000c3c <os_init>
  // initialize debug library
  debug_init();
 8000b60:	f7ff fcac 	bl	80004bc <debug_init>
  // setup initial job
  // os_setCallback(&initjob, initfunc);
  os_setCallback(&hellojob, hellofunc);
 8000b64:	4907      	ldr	r1, [pc, #28]	@ (8000b84 <main+0x5c>)
 8000b66:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <main+0x60>)
 8000b68:	f000 f8a0 	bl	8000cac <os_setCallback>
  // execute scheduled jobs and events
  os_runloop();
 8000b6c:	f000 f8fa 	bl	8000d64 <os_runloop>
  // (not reached)
  return 0;
 8000b70:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000268 	.word	0x20000268
 8000b80:	20000204 	.word	0x20000204
 8000b84:	08000ac9 	.word	0x08000ac9
 8000b88:	200001e0 	.word	0x200001e0

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b096      	sub	sp, #88	@ 0x58
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2244      	movs	r2, #68	@ 0x44
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f004 fc4b 	bl	8005436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bb2:	f001 fa31 	bl	8002018 <HAL_PWREx_ControlVoltageScaling>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bbc:	f000 f838 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bcc:	2360      	movs	r3, #96	@ 0x60
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bdc:	2328      	movs	r3, #40	@ 0x28
 8000bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000be0:	2307      	movs	r3, #7
 8000be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fa67 	bl	80020c4 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000bfc:	f000 f818 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2303      	movs	r3, #3
 8000c06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fe67 	bl	80028ec <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c24:	f000 f804 	bl	8000c30 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3758      	adds	r7, #88	@ 0x58
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8000c40:	2208      	movs	r2, #8
 8000c42:	2100      	movs	r1, #0
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <os_init+0x20>)
 8000c46:	f004 fbf6 	bl	8005436 <memset>
    hal_init();
 8000c4a:	f7ff febd 	bl	80009c8 <hal_init>
    radio_init();
 8000c4e:	f000 fab7 	bl	80011c0 <radio_init>
    LMIC_init();
 8000c52:	f7ff ff2b 	bl	8000aac <LMIC_init>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001ec 	.word	0x200001ec

08000c60 <os_getTime>:

ostime_t os_getTime () {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    return hal_ticks();
 8000c64:	f7ff fdce 	bl	8000804 <hal_ticks>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8000c78:	e00d      	b.n	8000c96 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d105      	bne.n	8000c90 <unlinkjob+0x22>
            *pnext = job->next;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	601a      	str	r2, [r3, #0]
            return 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e007      	b.n	8000ca0 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ed      	bne.n	8000c7a <unlinkjob+0xc>
        }
    }
    return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <os_setCallback>:
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
    hal_enableIRQs();
}

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8000cb6:	f7ff fe5b 	bl	8000970 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <os_setCallback+0x48>)
 8000cbe:	f7ff ffd6 	bl	8000c6e <unlinkjob>
    // fill-in job
    job->func = cb;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <os_setCallback+0x48>)
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e002      	b.n	8000cda <os_setCallback+0x2e>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f8      	bne.n	8000cd4 <os_setCallback+0x28>
    *pnext = job;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8000ce8:	f7ff fe52 	bl	8000990 <hal_enableIRQs>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001f0 	.word	0x200001f0

08000cf8 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8000d04:	f7ff fe34 	bl	8000970 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8000d08:	68f9      	ldr	r1, [r7, #12]
 8000d0a:	4815      	ldr	r0, [pc, #84]	@ (8000d60 <os_setTimedCallback+0x68>)
 8000d0c:	f7ff ffaf 	bl	8000c6e <unlinkjob>
    // fill-in job
    job->deadline = time;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <os_setTimedCallback+0x68>)
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e00e      	b.n	8000d46 <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	dd04      	ble.n	8000d40 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	601a      	str	r2, [r3, #0]
            break;
 8000d3e:	e006      	b.n	8000d4e <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1ec      	bne.n	8000d28 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8000d54:	f7ff fe1c 	bl	8000990 <hal_enableIRQs>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200001ec 	.word	0x200001ec

08000d64 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8000d6e:	f7ff fdff 	bl	8000970 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <os_runloop+0x68>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <os_runloop+0x26>
            j = OS.runnablejobs;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <os_runloop+0x68>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a11      	ldr	r2, [pc, #68]	@ (8000dcc <os_runloop+0x68>)
 8000d86:	6053      	str	r3, [r2, #4]
 8000d88:	e016      	b.n	8000db8 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <os_runloop+0x68>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d010      	beq.n	8000db4 <os_runloop+0x50>
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <os_runloop+0x68>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd91 	bl	80008c0 <hal_checkTimer>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d007      	beq.n	8000db4 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <os_runloop+0x68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <os_runloop+0x68>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e001      	b.n	8000db8 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8000db4:	f7ff fe00 	bl	80009b8 <hal_sleep>
        }
        hal_enableIRQs();
 8000db8:	f7ff fdea 	bl	8000990 <hal_enableIRQs>
        if(j) { // run job callback
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0d3      	beq.n	8000d6a <os_runloop+0x6>
            j->func(j);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
    while(1) {
 8000dca:	e7ce      	b.n	8000d6a <os_runloop+0x6>
 8000dcc:	200001ec 	.word	0x200001ec

08000dd0 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fc87 	bl	80006f4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fce2 	bl	80007b8 <hal_spi>
    hal_spi(data);
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fcde 	bl	80007b8 <hal_spi>
    hal_pin_nss(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fc79 	bl	80006f4 <hal_pin_nss>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <readReg>:

static u1_t readReg (u1_t addr) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fc6d 	bl	80006f4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fcc8 	bl	80007b8 <hal_spi>
    u1_t val = hal_spi(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fcc5 	bl	80007b8 <hal_spi>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff fc5e 	bl	80006f4 <hal_pin_nss>
    return val;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <readBuf>:
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
}

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8000e42:	b590      	push	{r4, r7, lr}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	6039      	str	r1, [r7, #0]
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fc4e 	bl	80006f4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fca9 	bl	80007b8 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e00a      	b.n	8000e82 <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	18d4      	adds	r4, r2, r3
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fca0 	bl	80007b8 <hal_spi>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3f0      	bcc.n	8000e6c <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fc32 	bl	80006f4 <hal_pin_nss>
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}

08000e98 <opmode>:

static void opmode (u1_t mode) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ffb1 	bl	8000e0a <readReg>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff ff86 	bl	8000dd0 <writeReg>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <opmodeLora>:

static void opmodeLora() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff ff74 	bl	8000dd0 <writeReg>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <configLoraModem>:
#endif
    writeReg(RegOpMode, u);
}

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 8000ef6:	4b54      	ldr	r3, [pc, #336]	@ (8001048 <configLoraModem+0x158>)
 8000ef8:	89db      	ldrh	r3, [r3, #14]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd82 	bl	8000a04 <getSf>
 8000f00:	4603      	mov	r3, r0
 8000f02:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8000f10:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <configLoraModem+0x158>)
 8000f12:	89db      	ldrh	r3, [r3, #14]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fd85 	bl	8000a24 <getBw>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d010      	beq.n	8000f42 <configLoraModem+0x52>
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	dc13      	bgt.n	8000f4c <configLoraModem+0x5c>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <configLoraModem+0x3e>
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <configLoraModem+0x48>
 8000f2c:	e00e      	b.n	8000f4c <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e00b      	b.n	8000f50 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	e006      	b.n	8000f50 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e001      	b.n	8000f50 <configLoraModem+0x60>
        default:
            ASSERT(0);
 8000f4c:	f7ff fd52 	bl	80009f4 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8000f50:	4b3d      	ldr	r3, [pc, #244]	@ (8001048 <configLoraModem+0x158>)
 8000f52:	89db      	ldrh	r3, [r3, #14]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fd77 	bl	8000a48 <getCr>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d81f      	bhi.n	8000fa0 <configLoraModem+0xb0>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <configLoraModem+0x78>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000f83 	.word	0x08000f83
 8000f70:	08000f8d 	.word	0x08000f8d
 8000f74:	08000f97 	.word	0x08000f97
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e010      	b.n	8000fa4 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e00b      	b.n	8000fa4 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f043 0306 	orr.w	r3, r3, #6
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	e006      	b.n	8000fa4 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e001      	b.n	8000fa4 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8000fa0:	f7ff fd28 	bl	80009f4 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <configLoraModem+0x158>)
 8000fa6:	89db      	ldrh	r3, [r3, #14]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fd6f 	bl	8000a8c <getIh>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00e      	beq.n	8000fd2 <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <configLoraModem+0x158>)
 8000fbe:	89db      	ldrh	r3, [r3, #14]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd63 	bl	8000a8c <getIh>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2022      	movs	r0, #34	@ 0x22
 8000fce:	f7ff feff 	bl	8000dd0 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f7ff fefa 	bl	8000dd0 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8000fdc:	793b      	ldrb	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	3370      	adds	r3, #112	@ 0x70
 8000fe8:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <configLoraModem+0x158>)
 8000fec:	89db      	ldrh	r3, [r3, #14]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd3c 	bl	8000a6c <getNocrc>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d103      	bne.n	8001002 <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	4619      	mov	r1, r3
 8001006:	201e      	movs	r0, #30
 8001008:	f7ff fee2 	bl	8000dd0 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 800100c:	2304      	movs	r3, #4
 800100e:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8001010:	793b      	ldrb	r3, [r7, #4]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d002      	beq.n	800101c <configLoraModem+0x12c>
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d10b      	bne.n	8001034 <configLoraModem+0x144>
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <configLoraModem+0x158>)
 800101e:	89db      	ldrh	r3, [r3, #14]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fcff 	bl	8000a24 <getBw>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8001034:	797b      	ldrb	r3, [r7, #5]
 8001036:	4619      	mov	r1, r3
 8001038:	2026      	movs	r0, #38	@ 0x26
 800103a:	f7ff fec9 	bl	8000dd0 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000030 	.word	0x20000030

0800104c <configChannel>:

static void configChannel () {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8001052:	4c1b      	ldr	r4, [pc, #108]	@ (80010c0 <configChannel+0x74>)
 8001054:	68a4      	ldr	r4, [r4, #8]
 8001056:	2500      	movs	r5, #0
 8001058:	4622      	mov	r2, r4
 800105a:	462b      	mov	r3, r5
 800105c:	0b51      	lsrs	r1, r2, #13
 800105e:	04d0      	lsls	r0, r2, #19
 8001060:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <configChannel+0x78>)
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	f7ff f8b1 	bl	80001cc <__aeabi_uldivmod>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8001072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c02      	lsrs	r2, r0, #16
 8001080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001084:	0c0b      	lsrs	r3, r1, #16
 8001086:	b2d3      	uxtb	r3, r2
 8001088:	4619      	mov	r1, r3
 800108a:	2006      	movs	r0, #6
 800108c:	f7ff fea0 	bl	8000dd0 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8001090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0a02      	lsrs	r2, r0, #8
 800109e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010a2:	0a0b      	lsrs	r3, r1, #8
 80010a4:	b2d3      	uxtb	r3, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	2007      	movs	r0, #7
 80010aa:	f7ff fe91 	bl	8000dd0 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 80010ae:	783b      	ldrb	r3, [r7, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	2008      	movs	r0, #8
 80010b4:	f7ff fe8c 	bl	8000dd0 <writeReg>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}
 80010c0:	20000030 	.word	0x20000030
 80010c4:	01e84800 	.word	0x01e84800

080010c8 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 80010d2:	f7ff fefb 	bl	8000ecc <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fe97 	bl	8000e0a <readReg>
 80010dc:	4603      	mov	r3, r0
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db01      	blt.n	80010e8 <rxlora+0x20>
 80010e4:	f7ff fc86 	bl	80009f4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff fed5 	bl	8000e98 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d108      	bne.n	8001106 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80010f4:	210a      	movs	r1, #10
 80010f6:	201d      	movs	r0, #29
 80010f8:	f7ff fe6a 	bl	8000dd0 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80010fc:	2170      	movs	r1, #112	@ 0x70
 80010fe:	201e      	movs	r0, #30
 8001100:	f7ff fe66 	bl	8000dd0 <writeReg>
 8001104:	e003      	b.n	800110e <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8001106:	f7ff fef3 	bl	8000ef0 <configLoraModem>
        // configure frequency
        configChannel();
 800110a:	f7ff ff9f 	bl	800104c <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 800110e:	2121      	movs	r1, #33	@ 0x21
 8001110:	200c      	movs	r0, #12
 8001112:	f7ff fe5d 	bl	8000dd0 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8001116:	2140      	movs	r1, #64	@ 0x40
 8001118:	2023      	movs	r0, #35	@ 0x23
 800111a:	f7ff fe59 	bl	8000dd0 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <rxlora+0xf0>)
 8001120:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00b      	beq.n	8001140 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8001128:	2033      	movs	r0, #51	@ 0x33
 800112a:	f7ff fe6e 	bl	8000e0a <readReg>
 800112e:	4603      	mov	r3, r0
 8001130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	2033      	movs	r0, #51	@ 0x33
 800113a:	f7ff fe49 	bl	8000dd0 <writeReg>
 800113e:	e00a      	b.n	8001156 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8001140:	2033      	movs	r0, #51	@ 0x33
 8001142:	f7ff fe62 	bl	8000e0a <readReg>
 8001146:	4603      	mov	r3, r0
 8001148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	2033      	movs	r0, #51	@ 0x33
 8001152:	f7ff fe3d 	bl	8000dd0 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <rxlora+0xf0>)
 8001158:	7c1b      	ldrb	r3, [r3, #16]
 800115a:	4619      	mov	r1, r3
 800115c:	201f      	movs	r0, #31
 800115e:	f7ff fe37 	bl	8000dd0 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8001162:	2134      	movs	r1, #52	@ 0x34
 8001164:	2039      	movs	r0, #57	@ 0x39
 8001166:	f7ff fe33 	bl	8000dd0 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 800116a:	21c0      	movs	r1, #192	@ 0xc0
 800116c:	2040      	movs	r0, #64	@ 0x40
 800116e:	f7ff fe2f 	bl	8000dd0 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8001172:	21ff      	movs	r1, #255	@ 0xff
 8001174:	2012      	movs	r0, #18
 8001176:	f7ff fe2b 	bl	8000dd0 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <rxlora+0xf4>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	43db      	mvns	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	2011      	movs	r0, #17
 8001188:	f7ff fe22 	bl	8000dd0 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff faa6 	bl	80006de <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d108      	bne.n	80011aa <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <rxlora+0xf0>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fb7e 	bl	800089e <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 80011a2:	2006      	movs	r0, #6
 80011a4:	f7ff fe78 	bl	8000e98 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 80011a8:	e002      	b.n	80011b0 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 80011aa:	2005      	movs	r0, #5
 80011ac:	f7ff fe74 	bl	8000e98 <opmode>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000030 	.word	0x20000030
 80011bc:	08005608 	.word	0x08005608

080011c0 <radio_init>:
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}

// get random seed from wideband noise rssi
void radio_init () {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80011c6:	f7ff fbd3 	bl	8000970 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff faa3 	bl	8000716 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80011d0:	f7ff fd46 	bl	8000c60 <os_getTime>
 80011d4:	4603      	mov	r3, r0
 80011d6:	3320      	adds	r3, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fb60 	bl	800089e <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80011de:	2002      	movs	r0, #2
 80011e0:	f7ff fa99 	bl	8000716 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80011e4:	f7ff fd3c 	bl	8000c60 <os_getTime>
 80011e8:	4603      	mov	r3, r0
 80011ea:	33a0      	adds	r3, #160	@ 0xa0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fb56 	bl	800089e <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fe50 	bl	8000e98 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80011f8:	2042      	movs	r0, #66	@ 0x42
 80011fa:	f7ff fe06 	bl	8000e0a <readReg>
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d001      	beq.n	800120c <radio_init+0x4c>
 8001208:	f7ff fbf4 	bl	80009f4 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 800120c:	2002      	movs	r0, #2
 800120e:	f7ff ff5b 	bl	80010c8 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8001212:	bf00      	nop
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fdf8 	bl	8000e0a <readReg>
 800121a:	4603      	mov	r3, r0
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	2b05      	cmp	r3, #5
 8001222:	d1f7      	bne.n	8001214 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e02c      	b.n	8001284 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	e023      	b.n	8001278 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8001230:	bf00      	nop
 8001232:	202c      	movs	r0, #44	@ 0x2c
 8001234:	f7ff fde9 	bl	8000e0a <readReg>
 8001238:	4603      	mov	r3, r0
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	71bb      	strb	r3, [r7, #6]
 8001240:	79bc      	ldrb	r4, [r7, #6]
 8001242:	202c      	movs	r0, #44	@ 0x2c
 8001244:	f7ff fde1 	bl	8000e0a <readReg>
 8001248:	4603      	mov	r3, r0
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	429c      	cmp	r4, r3
 8001250:	d0ef      	beq.n	8001232 <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <radio_init+0xe4>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	b25a      	sxtb	r2, r3
 800125e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001262:	4313      	orrs	r3, r2
 8001264:	b25b      	sxtb	r3, r3
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <radio_init+0xe4>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	460a      	mov	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3301      	adds	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b07      	cmp	r3, #7
 800127c:	ddd8      	ble.n	8001230 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	ddcf      	ble.n	800122a <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <radio_init+0xe4>)
 800128c:	2210      	movs	r2, #16
 800128e:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe01 	bl	8000e98 <opmode>

    hal_enableIRQs();
 8001296:	f7ff fb7b 	bl	8000990 <hal_enableIRQs>
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001f4 	.word	0x200001f4

080012a8 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 80012b2:	f7ff fcd5 	bl	8000c60 <os_getTime>
 80012b6:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fda6 	bl	8000e0a <readReg>
 80012be:	4603      	mov	r3, r0
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da74      	bge.n	80013b0 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 80012c6:	2012      	movs	r0, #18
 80012c8:	f7ff fd9f 	bl	8000e0a <readReg>
 80012cc:	4603      	mov	r3, r0
 80012ce:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 80012d0:	7a7b      	ldrb	r3, [r7, #9]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a59      	ldr	r2, [pc, #356]	@ (8001444 <radio_irq_handler+0x19c>)
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e05c      	b.n	800139e <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d04f      	beq.n	800138e <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <radio_irq_handler+0x19c>)
 80012f0:	89db      	ldrh	r3, [r3, #14]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fb96 	bl	8000a24 <getBw>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 80012fe:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <radio_irq_handler+0x19c>)
 8001300:	89db      	ldrh	r3, [r3, #14]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fb7e 	bl	8000a04 <getSf>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <radio_irq_handler+0x1a0>)
 800130e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 800131a:	4a4a      	ldr	r2, [pc, #296]	@ (8001444 <radio_irq_handler+0x19c>)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8001320:	201d      	movs	r0, #29
 8001322:	f7ff fd72 	bl	8000e0a <readReg>
 8001326:	4603      	mov	r3, r0
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8001330:	2022      	movs	r0, #34	@ 0x22
 8001332:	f7ff fd6a 	bl	8000e0a <readReg>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	e004      	b.n	8001346 <radio_irq_handler+0x9e>
 800133c:	2013      	movs	r0, #19
 800133e:	f7ff fd64 	bl	8000e0a <readReg>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8001346:	4b3f      	ldr	r3, [pc, #252]	@ (8001444 <radio_irq_handler+0x19c>)
 8001348:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 800134c:	2010      	movs	r0, #16
 800134e:	f7ff fd5c 	bl	8000e0a <readReg>
 8001352:	4603      	mov	r3, r0
 8001354:	4619      	mov	r1, r3
 8001356:	200d      	movs	r0, #13
 8001358:	f7ff fd3a 	bl	8000dd0 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800135c:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <radio_irq_handler+0x19c>)
 800135e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8001362:	461a      	mov	r2, r3
 8001364:	4939      	ldr	r1, [pc, #228]	@ (800144c <radio_irq_handler+0x1a4>)
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fd6b 	bl	8000e42 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 800136c:	2019      	movs	r0, #25
 800136e:	f7ff fd4c 	bl	8000e0a <readReg>
 8001372:	4603      	mov	r3, r0
 8001374:	b25a      	sxtb	r2, r3
 8001376:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <radio_irq_handler+0x19c>)
 8001378:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 800137a:	201a      	movs	r0, #26
 800137c:	f7ff fd45 	bl	8000e0a <readReg>
 8001380:	4603      	mov	r3, r0
 8001382:	3b3d      	subs	r3, #61	@ 0x3d
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <radio_irq_handler+0x19c>)
 800138a:	731a      	strb	r2, [r3, #12]
 800138c:	e007      	b.n	800139e <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 800138e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da03      	bge.n	800139e <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <radio_irq_handler+0x19c>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 800139e:	21ff      	movs	r1, #255	@ 0xff
 80013a0:	2011      	movs	r0, #17
 80013a2:	f7ff fd15 	bl	8000dd0 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80013a6:	21ff      	movs	r1, #255	@ 0xff
 80013a8:	2012      	movs	r0, #18
 80013aa:	f7ff fd11 	bl	8000dd0 <writeReg>
 80013ae:	e03c      	b.n	800142a <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 80013b0:	203e      	movs	r0, #62	@ 0x3e
 80013b2:	f7ff fd2a 	bl	8000e0a <readReg>
 80013b6:	4603      	mov	r3, r0
 80013b8:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 80013ba:	203f      	movs	r0, #63	@ 0x3f
 80013bc:	f7ff fd25 	bl	8000e0a <readReg>
 80013c0:	4603      	mov	r3, r0
 80013c2:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 80013ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <radio_irq_handler+0x19c>)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e029      	b.n	800142a <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 80013d6:	7abb      	ldrb	r3, [r7, #10]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d019      	beq.n	8001414 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <radio_irq_handler+0x19c>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 80013e6:	2032      	movs	r0, #50	@ 0x32
 80013e8:	f7ff fd0f 	bl	8000e0a <readReg>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <radio_irq_handler+0x19c>)
 80013f2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <radio_irq_handler+0x19c>)
 80013f8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80013fc:	461a      	mov	r2, r3
 80013fe:	4913      	ldr	r1, [pc, #76]	@ (800144c <radio_irq_handler+0x1a4>)
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fd1e 	bl	8000e42 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <radio_irq_handler+0x19c>)
 8001408:	2200      	movs	r2, #0
 800140a:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 800140c:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <radio_irq_handler+0x19c>)
 800140e:	2200      	movs	r2, #0
 8001410:	731a      	strb	r2, [r3, #12]
 8001412:	e00a      	b.n	800142a <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <radio_irq_handler+0x19c>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8001426:	e000      	b.n	800142a <radio_irq_handler+0x182>
        } else {
            while(1);
 8001428:	e7fe      	b.n	8001428 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fd34 	bl	8000e98 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <radio_irq_handler+0x19c>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <radio_irq_handler+0x1a8>)
 8001438:	f7ff fc38 	bl	8000cac <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000030 	.word	0x20000030
 8001448:	0800560c 	.word	0x0800560c
 800144c:	20000178 	.word	0x20000178
 8001450:	20000044 	.word	0x20000044

08001454 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <MX_SPI3_Init+0x74>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <MX_SPI3_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MX_SPI3_Init+0x74>)
 8001460:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001464:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001466:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <MX_SPI3_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <MX_SPI3_Init+0x74>)
 800146e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001472:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <MX_SPI3_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <MX_SPI3_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <MX_SPI3_Init+0x74>)
 8001482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001486:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_SPI3_Init+0x74>)
 800148a:	2228      	movs	r2, #40	@ 0x28
 800148c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <MX_SPI3_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <MX_SPI3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <MX_SPI3_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <MX_SPI3_Init+0x74>)
 80014a2:	2207      	movs	r2, #7
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <MX_SPI3_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <MX_SPI3_Init+0x74>)
 80014ae:	2208      	movs	r2, #8
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_SPI3_Init+0x74>)
 80014b4:	f001 ff26 	bl	8003304 <HAL_SPI_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014be:	f7ff fbb7 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000204 	.word	0x20000204
 80014cc:	40003c00 	.word	0x40003c00

080014d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_SPI_MspInit+0x8c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12f      	bne.n	8001552 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_SPI_MspInit+0x90>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001560 <HAL_SPI_MspInit+0x90>)
 80014f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <HAL_SPI_MspInit+0x90>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_SPI_MspInit+0x90>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <HAL_SPI_MspInit+0x90>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_SPI_MspInit+0x90>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001522:	2338      	movs	r3, #56	@ 0x38
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001532:	2306      	movs	r3, #6
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <HAL_SPI_MspInit+0x94>)
 800153e:	f000 fbc3 	bl	8001cc8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2033      	movs	r0, #51	@ 0x33
 8001548:	f000 fb09 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800154c:	2033      	movs	r0, #51	@ 0x33
 800154e:	f000 fb22 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40003c00 	.word	0x40003c00
 8001560:	40021000 	.word	0x40021000
 8001564:	48000400 	.word	0x48000400

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <HAL_MspInit+0x44>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6613      	str	r3, [r2, #96]	@ 0x60
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <HAL_MspInit+0x44>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <HAL_MspInit+0x44>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001590:	6593      	str	r3, [r2, #88]	@ 0x58
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_MspInit+0x44>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f9af 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}

0800160e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_Pin);
 8001612:	2001      	movs	r0, #1
 8001614:	f000 fcda 	bl	8001fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001620:	2040      	movs	r0, #64	@ 0x40
 8001622:	f000 fcd3 	bl	8001fcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8001626:	2080      	movs	r0, #128	@ 0x80
 8001628:	f000 fcd0 	bl	8001fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <USART1_IRQHandler+0x10>)
 8001636:	f002 ff47 	bl	80044c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002b4 	.word	0x200002b4

08001644 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <SPI3_IRQHandler+0x10>)
 800164a:	f002 f91d 	bl	8003888 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000204 	.word	0x20000204

08001658 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <TIM7_IRQHandler+0x10>)
 800165e:	f002 fc37 	bl	8003ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000268 	.word	0x20000268

0800166c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016a2:	4a16      	ldr	r2, [pc, #88]	@ (80016fc <MX_TIM7_Init+0x6c>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016a8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80016ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016c2:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016c4:	f002 fb58 	bl	8003d78 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80016ce:	f7ff faaf 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <MX_TIM7_Init+0x68>)
 80016e0:	f002 fd96 	bl	8004210 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80016ea:	f7ff faa1 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000268 	.word	0x20000268
 80016fc:	40001400 	.word	0x40001400

08001700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <HAL_TIM_Base_MspInit+0x44>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d113      	bne.n	800173a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_TIM_Base_MspInit+0x48>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_TIM_Base_MspInit+0x48>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	6593      	str	r3, [r2, #88]	@ 0x58
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2037      	movs	r0, #55	@ 0x37
 8001730:	f000 fa15 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001734:	2037      	movs	r0, #55	@ 0x37
 8001736:	f000 fa2e 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40001400 	.word	0x40001400
 8001748:	40021000 	.word	0x40021000

0800174c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001752:	4a15      	ldr	r2, [pc, #84]	@ (80017a8 <MX_USART1_UART_Init+0x5c>)
 8001754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_USART1_UART_Init+0x58>)
 8001790:	f002 fdc2 	bl	8004318 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800179a:	f7ff fa49 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200002b4 	.word	0x200002b4
 80017a8:	40013800 	.word	0x40013800

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b09e      	sub	sp, #120	@ 0x78
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2254      	movs	r2, #84	@ 0x54
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fe32 	bl	8005436 <memset>
  if(uartHandle->Instance==USART1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <HAL_UART_MspInit+0xb8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d13f      	bne.n	800185c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 faa3 	bl	8002d34 <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017f4:	f7ff fa1c 	bl	8000c30 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_UART_MspInit+0xbc>)
 80017fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_UART_MspInit+0xbc>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001802:	6613      	str	r3, [r2, #96]	@ 0x60
 8001804:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_UART_MspInit+0xbc>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_UART_MspInit+0xbc>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_UART_MspInit+0xbc>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_UART_MspInit+0xbc>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001828:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800182c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800183a:	2307      	movs	r3, #7
 800183c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001848:	f000 fa3e 	bl	8001cc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2025      	movs	r0, #37	@ 0x25
 8001852:	f000 f984 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001856:	2025      	movs	r0, #37	@ 0x25
 8001858:	f000 f99d 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800185c:	bf00      	nop
 800185e:	3778      	adds	r7, #120	@ 0x78
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40013800 	.word	0x40013800
 8001868:	40021000 	.word	0x40021000

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001870:	f7ff fefc 	bl	800166c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	@ (80018ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <LoopForever+0xe>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	@ (80018b8 <LoopForever+0x16>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f003 fdd5 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7ff f943 	bl	8000b28 <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018b0:	08005674 	.word	0x08005674
  ldr r2, =_sbss
 80018b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018b8:	20000340 	.word	0x20000340

080018bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_IRQHandler>

080018be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f93d 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ce:	200f      	movs	r0, #15
 80018d0:	f000 f80e 	bl	80018f0 <HAL_InitTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e001      	b.n	80018e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e0:	f7ff fe42 	bl	8001568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_InitTick+0x70>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f949 	bl	8001bb2 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d809      	bhi.n	8001940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f913 	bl	8001b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_InitTick+0x74>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e007      	b.n	8001950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e004      	b.n	8001950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	2000033c 	.word	0x2000033c

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000033c 	.word	0x2000033c

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4907      	ldr	r1, [pc, #28]	@ (8001a44 <__NVIC_EnableIRQ+0x38>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	@ (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	@ 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f7ff ff8e 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff29 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff3e 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff8e 	bl	8001a9c <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5d 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff31 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa2 	bl	8001b04 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d008      	beq.n	8001bf4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e022      	b.n	8001c3a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020e 	bic.w	r2, r2, #14
 8001c02:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	f003 021c 	and.w	r2, r3, #28
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d005      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e029      	b.n	8001cbe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 020e 	bic.w	r2, r2, #14
 8001c78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f003 021c 	and.w	r2, r3, #28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    }
  }
  return status;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	e148      	b.n	8001f6a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 813a 	beq.w	8001f64 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d005      	beq.n	8001d08 <HAL_GPIO_Init+0x40>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d130      	bne.n	8001d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d3e:	2201      	movs	r2, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 0201 	and.w	r2, r3, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d017      	beq.n	8001da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d123      	bne.n	8001dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	6939      	ldr	r1, [r7, #16]
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0203 	and.w	r2, r3, #3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8094 	beq.w	8001f64 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3c:	4b52      	ldr	r3, [pc, #328]	@ (8001f88 <HAL_GPIO_Init+0x2c0>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e40:	4a51      	ldr	r2, [pc, #324]	@ (8001f88 <HAL_GPIO_Init+0x2c0>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e48:	4b4f      	ldr	r3, [pc, #316]	@ (8001f88 <HAL_GPIO_Init+0x2c0>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e54:	4a4d      	ldr	r2, [pc, #308]	@ (8001f8c <HAL_GPIO_Init+0x2c4>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_Init+0x1d4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a43      	ldr	r2, [pc, #268]	@ (8001f90 <HAL_GPIO_Init+0x2c8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x1d0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a42      	ldr	r2, [pc, #264]	@ (8001f94 <HAL_GPIO_Init+0x2cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_Init+0x1cc>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1d6>
 8001e94:	2307      	movs	r3, #7
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1d6>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1d6>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eae:	4937      	ldr	r1, [pc, #220]	@ (8001f8c <HAL_GPIO_Init+0x2c4>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ebc:	4b36      	ldr	r3, [pc, #216]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f0a:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f34:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f98 <HAL_GPIO_Init+0x2d0>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f aeaf 	bne.w	8001cd8 <HAL_GPIO_Init+0x10>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fbc8 	bl	8000780 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_PWREx_GetVoltageRange+0x18>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40007000 	.word	0x40007000

08002018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002026:	d130      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002034:	d038      	beq.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800203e:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002044:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2232      	movs	r2, #50	@ 0x32
 800204c:	fb02 f303 	mul.w	r3, r2, r3
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	3301      	adds	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205c:	e002      	b.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3b01      	subs	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002070:	d102      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f2      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002084:	d110      	bne.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e00f      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002096:	d007      	beq.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a0:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40007000 	.word	0x40007000
 80020bc:	20000000 	.word	0x20000000
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f000 bc02 	b.w	80028dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d8:	4b96      	ldr	r3, [pc, #600]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e2:	4b94      	ldr	r3, [pc, #592]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80e4 	beq.w	80022c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_RCC_OscConfig+0x4c>
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	f040 808b 	bne.w	800221e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b01      	cmp	r3, #1
 800210c:	f040 8087 	bne.w	800221e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002110:	4b88      	ldr	r3, [pc, #544]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x64>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e3d9      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	4b81      	ldr	r3, [pc, #516]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <HAL_RCC_OscConfig+0x7e>
 8002138:	4b7e      	ldr	r3, [pc, #504]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002140:	e005      	b.n	800214e <HAL_RCC_OscConfig+0x8a>
 8002142:	4b7c      	ldr	r3, [pc, #496]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800214e:	4293      	cmp	r3, r2
 8002150:	d223      	bcs.n	800219a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fd8c 	bl	8002c74 <RCC_SetFlashLatencyFromMSIRange>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e3ba      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002166:	4b73      	ldr	r3, [pc, #460]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a72      	ldr	r2, [pc, #456]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b70      	ldr	r3, [pc, #448]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	496d      	ldr	r1, [pc, #436]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002184:	4b6b      	ldr	r3, [pc, #428]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	4968      	ldr	r1, [pc, #416]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e025      	b.n	80021e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800219a:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a65      	ldr	r2, [pc, #404]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4960      	ldr	r1, [pc, #384]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	495b      	ldr	r1, [pc, #364]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fd4c 	bl	8002c74 <RCC_SetFlashLatencyFromMSIRange>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e37a      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e6:	f000 fc81 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b51      	ldr	r3, [pc, #324]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4950      	ldr	r1, [pc, #320]	@ (8002338 <HAL_RCC_OscConfig+0x274>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a4e      	ldr	r2, [pc, #312]	@ (800233c <HAL_RCC_OscConfig+0x278>)
 8002204:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002206:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <HAL_RCC_OscConfig+0x27c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fb70 	bl	80018f0 <HAL_InitTick>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d052      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	e35e      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d032      	beq.n	800228c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002226:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002232:	f7ff fbad 	bl	8001990 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223a:	f7ff fba9 	bl	8001990 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e347      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224c:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002258:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a35      	ldr	r2, [pc, #212]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4930      	ldr	r1, [pc, #192]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002276:	4b2f      	ldr	r3, [pc, #188]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	492b      	ldr	r1, [pc, #172]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
 800228a:	e01a      	b.n	80022c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228c:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002298:	f7ff fb7a 	bl	8001990 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a0:	f7ff fb76 	bl	8001990 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e314      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b2:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1dc>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d073      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x21c>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d10e      	bne.n	80022f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d063      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d15f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e2f1      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x24c>
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a0b      	ldr	r2, [pc, #44]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e025      	b.n	800235c <HAL_RCC_OscConfig+0x298>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002318:	d114      	bne.n	8002344 <HAL_RCC_OscConfig+0x280>
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a02      	ldr	r2, [pc, #8]	@ (8002334 <HAL_RCC_OscConfig+0x270>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e013      	b.n	800235c <HAL_RCC_OscConfig+0x298>
 8002334:	40021000 	.word	0x40021000
 8002338:	0800561c 	.word	0x0800561c
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004
 8002344:	4ba0      	ldr	r3, [pc, #640]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a9f      	ldr	r2, [pc, #636]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b9d      	ldr	r3, [pc, #628]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a9c      	ldr	r2, [pc, #624]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff fb14 	bl	8001990 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff fb10 	bl	8001990 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e2ae      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237e:	4b92      	ldr	r3, [pc, #584]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x2a8>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff fb00 	bl	8001990 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff fafc 	bl	8001990 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e29a      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a6:	4b88      	ldr	r3, [pc, #544]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x2d0>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d060      	beq.n	8002484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x310>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d119      	bne.n	8002402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d116      	bne.n	8002402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d4:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x328>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e277      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	4973      	ldr	r1, [pc, #460]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002400:	e040      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d023      	beq.n	8002452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240a:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff fabb 	bl	8001990 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7ff fab7 	bl	8001990 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e255      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	4b65      	ldr	r3, [pc, #404]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b62      	ldr	r3, [pc, #392]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	495f      	ldr	r1, [pc, #380]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e018      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b5d      	ldr	r3, [pc, #372]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a5c      	ldr	r2, [pc, #368]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800245c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7ff fa97 	bl	8001990 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fa93 	bl	8001990 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e231      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002478:	4b53      	ldr	r3, [pc, #332]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03c      	beq.n	800250a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002498:	4b4b      	ldr	r3, [pc, #300]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249e:	4a4a      	ldr	r2, [pc, #296]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff fa72 	bl	8001990 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff fa6e 	bl	8001990 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e20c      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c2:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <HAL_RCC_OscConfig+0x3ec>
 80024d0:	e01b      	b.n	800250a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d8:	4a3b      	ldr	r2, [pc, #236]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7ff fa55 	bl	8001990 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff fa51 	bl	8001990 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1ef      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ef      	bne.n	80024ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80a6 	beq.w	8002664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800251c:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	4a26      	ldr	r2, [pc, #152]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800252e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	@ 0x58
 8002534:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002540:	2301      	movs	r3, #1
 8002542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_RCC_OscConfig+0x508>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d118      	bne.n	8002582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002550:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <HAL_RCC_OscConfig+0x508>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_RCC_OscConfig+0x508>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255c:	f7ff fa18 	bl	8001990 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002564:	f7ff fa14 	bl	8001990 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1b2      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_RCC_OscConfig+0x508>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x4d8>
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800259a:	e029      	b.n	80025f0 <HAL_RCC_OscConfig+0x52c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d115      	bne.n	80025d0 <HAL_RCC_OscConfig+0x50c>
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	4a07      	ldr	r2, [pc, #28]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a03      	ldr	r2, [pc, #12]	@ (80025c8 <HAL_RCC_OscConfig+0x504>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x52c>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	4b9a      	ldr	r3, [pc, #616]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	4a99      	ldr	r2, [pc, #612]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e0:	4b96      	ldr	r3, [pc, #600]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	4a95      	ldr	r2, [pc, #596]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d016      	beq.n	8002626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff f9ca 	bl	8001990 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7ff f9c6 	bl	8001990 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e162      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	4b89      	ldr	r3, [pc, #548]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ed      	beq.n	8002600 <HAL_RCC_OscConfig+0x53c>
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7ff f9b3 	bl	8001990 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7ff f9af 	bl	8001990 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e14b      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002644:	4b7d      	ldr	r3, [pc, #500]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ed      	bne.n	800262e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b78      	ldr	r3, [pc, #480]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	4a77      	ldr	r2, [pc, #476]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d03c      	beq.n	80026ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002678:	4b70      	ldr	r3, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 800267a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800267e:	4a6f      	ldr	r2, [pc, #444]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff f982 	bl	8001990 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002690:	f7ff f97e 	bl	8001990 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e11c      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026a2:	4b66      	ldr	r3, [pc, #408]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80026a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ef      	beq.n	8002690 <HAL_RCC_OscConfig+0x5cc>
 80026b0:	e01b      	b.n	80026ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b2:	4b62      	ldr	r3, [pc, #392]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80026b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b8:	4a60      	ldr	r2, [pc, #384]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff f965 	bl	8001990 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ca:	f7ff f961 	bl	8001990 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0ff      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026dc:	4b57      	ldr	r3, [pc, #348]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80026de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ef      	bne.n	80026ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80f3 	beq.w	80028da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f040 80c9 	bne.w	8002890 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026fe:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	429a      	cmp	r2, r3
 8002710:	d12c      	bne.n	800276c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	3b01      	subs	r3, #1
 800271e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d123      	bne.n	800276c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d11b      	bne.n	800276c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d113      	bne.n	800276c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d109      	bne.n	800276c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	3b01      	subs	r3, #1
 8002766:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d06b      	beq.n	8002844 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d062      	beq.n	8002838 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002772:	4b32      	ldr	r3, [pc, #200]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0ac      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002782:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800278e:	f7ff f8ff 	bl	8001990 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff f8fb 	bl	8001990 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e099      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a8:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b4:	4b21      	ldr	r3, [pc, #132]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_RCC_OscConfig+0x77c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027ce:	0212      	lsls	r2, r2, #8
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027d6:	0852      	lsrs	r2, r2, #1
 80027d8:	3a01      	subs	r2, #1
 80027da:	0552      	lsls	r2, r2, #21
 80027dc:	4311      	orrs	r1, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027e2:	0852      	lsrs	r2, r2, #1
 80027e4:	3a01      	subs	r2, #1
 80027e6:	0652      	lsls	r2, r2, #25
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027ee:	06d2      	lsls	r2, r2, #27
 80027f0:	430a      	orrs	r2, r1
 80027f2:	4912      	ldr	r1, [pc, #72]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0f      	ldr	r2, [pc, #60]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002804:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a0c      	ldr	r2, [pc, #48]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800280e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002810:	f7ff f8be 	bl	8001990 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff f8ba 	bl	8001990 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e058      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <HAL_RCC_OscConfig+0x778>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002836:	e050      	b.n	80028da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04f      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
 800283c:	40021000 	.word	0x40021000
 8002840:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002844:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d144      	bne.n	80028da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002850:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800285c:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a20      	ldr	r2, [pc, #128]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002868:	f7ff f892 	bl	8001990 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7ff f88e 	bl	8001990 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e02c      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x7ac>
 800288e:	e024      	b.n	80028da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d01f      	beq.n	80028d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 800289c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7ff f875 	bl	8001990 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f871 	bl	8001990 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028c8:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4905      	ldr	r1, [pc, #20]	@ (80028e4 <HAL_RCC_OscConfig+0x820>)
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_RCC_OscConfig+0x824>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e001      	b.n	80028da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	feeefffc 	.word	0xfeeefffc

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0e7      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b75      	ldr	r3, [pc, #468]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b72      	ldr	r3, [pc, #456]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	4970      	ldr	r1, [pc, #448]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0cf      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	4b66      	ldr	r3, [pc, #408]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002948:	429a      	cmp	r2, r3
 800294a:	d908      	bls.n	800295e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b63      	ldr	r3, [pc, #396]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4960      	ldr	r1, [pc, #384]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04c      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b5a      	ldr	r3, [pc, #360]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d121      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0a6      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b54      	ldr	r3, [pc, #336]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e09a      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a2:	4b4e      	ldr	r3, [pc, #312]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e08e      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	4b4a      	ldr	r3, [pc, #296]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e086      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b46      	ldr	r3, [pc, #280]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4943      	ldr	r1, [pc, #268]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe ffdc 	bl	8001990 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe ffd8 	bl	8001990 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e06e      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d208      	bcs.n	8002a32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	492b      	ldr	r1, [pc, #172]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a32:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d210      	bcs.n	8002a62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 0207 	bic.w	r2, r3, #7
 8002a48:	4923      	ldr	r1, [pc, #140]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e036      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4918      	ldr	r1, [pc, #96]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8c:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4910      	ldr	r1, [pc, #64]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa0:	f000 f824 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	490b      	ldr	r1, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe ff13 	bl	80018f0 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	0800561c 	.word	0x0800561c
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d121      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d11e      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b20:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b2c:	4b31      	ldr	r3, [pc, #196]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b48:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b64:	4b25      	ldr	r3, [pc, #148]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e004      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b70:	4b23      	ldr	r3, [pc, #140]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d134      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d003      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0xac>
 8002b90:	e005      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b92:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b94:	617b      	str	r3, [r7, #20]
      break;
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b9a:	617b      	str	r3, [r7, #20]
      break;
 8002b9c:	e002      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	617b      	str	r3, [r7, #20]
      break;
 8002ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	3301      	adds	r3, #1
 8002bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	fb03 f202 	mul.w	r2, r3, r2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	0e5b      	lsrs	r3, r3, #25
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002be4:	69bb      	ldr	r3, [r7, #24]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08005634 	.word	0x08005634
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0800562c 	.word	0x0800562c

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c4c:	f7ff ffda 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0adb      	lsrs	r3, r3, #11
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4904      	ldr	r1, [pc, #16]	@ (8002c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	0800562c 	.word	0x0800562c

08002c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c80:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c8c:	f7ff f9b6 	bl	8001ffc <HAL_PWREx_GetVoltageRange>
 8002c90:	6178      	str	r0, [r7, #20]
 8002c92:	e014      	b.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	4a24      	ldr	r2, [pc, #144]	@ (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ca0:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cac:	f7ff f9a6 	bl	8001ffc <HAL_PWREx_GetVoltageRange>
 8002cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc4:	d10b      	bne.n	8002cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b80      	cmp	r3, #128	@ 0x80
 8002cca:	d919      	bls.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cd0:	d902      	bls.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	e013      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd8:	2301      	movs	r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	e010      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b80      	cmp	r3, #128	@ 0x80
 8002ce2:	d902      	bls.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e00a      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b80      	cmp	r3, #128	@ 0x80
 8002cee:	d102      	bne.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	e004      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b70      	cmp	r3, #112	@ 0x70
 8002cfa:	d101      	bne.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 0207 	bic.w	r2, r3, #7
 8002d08:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40022000 	.word	0x40022000

08002d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d40:	2300      	movs	r3, #0
 8002d42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d031      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d58:	d01a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d5e:	d814      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d68:	d10f      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d76:	e00c      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f9ce 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d88:	e003      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d8e:	e000      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d98:	4b51      	ldr	r3, [pc, #324]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	494e      	ldr	r1, [pc, #312]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dae:	e001      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 809e 	beq.w	8002efe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dc6:	4b46      	ldr	r3, [pc, #280]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ddc:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df4:	2301      	movs	r3, #1
 8002df6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a39      	ldr	r2, [pc, #228]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fdc4 	bl	8001990 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e0a:	e009      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe fdc0 	bl	8001990 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e1e:	e005      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e20:	4b30      	ldr	r3, [pc, #192]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ef      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d15a      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01e      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d019      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d016      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fd80 	bl	8001990 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e92:	e00b      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe fd7c 	bl	8001990 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d902      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	74fb      	strb	r3, [r7, #19]
            break;
 8002eaa:	e006      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ec      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec0:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	4904      	ldr	r1, [pc, #16]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ed6:	e009      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	74bb      	strb	r3, [r7, #18]
 8002edc:	e006      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eec:	7c7b      	ldrb	r3, [r7, #17]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b8a      	ldr	r3, [pc, #552]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	4a89      	ldr	r2, [pc, #548]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0a:	4b84      	ldr	r3, [pc, #528]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f10:	f023 0203 	bic.w	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4980      	ldr	r1, [pc, #512]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f32:	f023 020c 	bic.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	4978      	ldr	r1, [pc, #480]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f4e:	4b73      	ldr	r3, [pc, #460]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	496f      	ldr	r1, [pc, #444]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f70:	4b6a      	ldr	r3, [pc, #424]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f76:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7e:	4967      	ldr	r1, [pc, #412]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f92:	4b62      	ldr	r3, [pc, #392]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	495e      	ldr	r1, [pc, #376]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb4:	4b59      	ldr	r3, [pc, #356]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	4956      	ldr	r1, [pc, #344]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fd6:	4b51      	ldr	r3, [pc, #324]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	494d      	ldr	r1, [pc, #308]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d028      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff8:	4b48      	ldr	r3, [pc, #288]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4945      	ldr	r1, [pc, #276]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003016:	d106      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003018:	4b40      	ldr	r3, [pc, #256]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a3f      	ldr	r2, [pc, #252]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003022:	60d3      	str	r3, [r2, #12]
 8003024:	e011      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800302e:	d10c      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f872 	bl	8003120 <RCCEx_PLLSAI1_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	492d      	ldr	r1, [pc, #180]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003074:	d106      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003076:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4a28      	ldr	r2, [pc, #160]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800307c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003080:	60d3      	str	r3, [r2, #12]
 8003082:	e011      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003088:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f843 	bl	8003120 <RCCEx_PLLSAI1_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c2:	4916      	ldr	r1, [pc, #88]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030d2:	d10c      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	2102      	movs	r1, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f820 	bl	8003120 <RCCEx_PLLSAI1_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030fa:	4b08      	ldr	r3, [pc, #32]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003108:	4904      	ldr	r1, [pc, #16]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003110:	7cbb      	ldrb	r3, [r7, #18]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312e:	4b74      	ldr	r3, [pc, #464]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d018      	beq.n	800316c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800313a:	4b71      	ldr	r3, [pc, #452]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0203 	and.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10d      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
       ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003152:	4b6b      	ldr	r3, [pc, #428]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
       ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d047      	beq.n	80031f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e044      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d018      	beq.n	80031a6 <RCCEx_PLLSAI1_Config+0x86>
 8003174:	2b03      	cmp	r3, #3
 8003176:	d825      	bhi.n	80031c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <RCCEx_PLLSAI1_Config+0x62>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d009      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x74>
 8003180:	e020      	b.n	80031c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003182:	4b5f      	ldr	r3, [pc, #380]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e01a      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003194:	4b5a      	ldr	r3, [pc, #360]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e013      	b.n	80031ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a6:	4b56      	ldr	r3, [pc, #344]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031b2:	4b53      	ldr	r3, [pc, #332]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031c2:	e006      	b.n	80031d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e004      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031da:	4b49      	ldr	r3, [pc, #292]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	430b      	orrs	r3, r1
 80031f0:	4943      	ldr	r1, [pc, #268]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d17c      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031fc:	4b40      	ldr	r3, [pc, #256]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3f      	ldr	r2, [pc, #252]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003202:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe fbc2 	bl	8001990 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800320e:	e009      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003210:	f7fe fbbe 	bl	8001990 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	73fb      	strb	r3, [r7, #15]
        break;
 8003222:	e005      	b.n	8003230 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003224:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ef      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d15f      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d110      	bne.n	800325e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323c:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003244:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6892      	ldr	r2, [r2, #8]
 800324c:	0211      	lsls	r1, r2, #8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	06d2      	lsls	r2, r2, #27
 8003254:	430a      	orrs	r2, r1
 8003256:	492a      	ldr	r1, [pc, #168]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	610b      	str	r3, [r1, #16]
 800325c:	e027      	b.n	80032ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d112      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003264:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800326c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	0211      	lsls	r1, r2, #8
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6912      	ldr	r2, [r2, #16]
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	430a      	orrs	r2, r1
 8003282:	491f      	ldr	r1, [pc, #124]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	4313      	orrs	r3, r2
 8003286:	610b      	str	r3, [r1, #16]
 8003288:	e011      	b.n	80032ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328a:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003292:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6892      	ldr	r2, [r2, #8]
 800329a:	0211      	lsls	r1, r2, #8
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6952      	ldr	r2, [r2, #20]
 80032a0:	0852      	lsrs	r2, r2, #1
 80032a2:	3a01      	subs	r2, #1
 80032a4:	0652      	lsls	r2, r2, #25
 80032a6:	430a      	orrs	r2, r1
 80032a8:	4915      	ldr	r1, [pc, #84]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032ae:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fb69 	bl	8001990 <HAL_GetTick>
 80032be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c0:	e009      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c2:	f7fe fb65 	bl	8001990 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d902      	bls.n	80032d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	73fb      	strb	r3, [r7, #15]
          break;
 80032d4:	e005      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ef      	beq.n	80032c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4903      	ldr	r1, [pc, #12]	@ (8003300 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e095      	b.n	8003442 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003326:	d009      	beq.n	800333c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
 800332e:	e005      	b.n	800333c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe f8ba 	bl	80014d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800337c:	d902      	bls.n	8003384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e002      	b.n	800338a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003392:	d007      	beq.n	80033a4 <HAL_SPI_Init+0xa0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	ea42 0103 	orr.w	r1, r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	f003 0204 	and.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003420:	ea42 0103 	orr.w	r1, r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b08a      	sub	sp, #40	@ 0x28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003458:	2301      	movs	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800345c:	f7fe fa98 	bl	8001990 <HAL_GetTick>
 8003460:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003468:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d00c      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x4e>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003484:	d106      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x4a>
 800348e:	7ffb      	ldrb	r3, [r7, #31]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d001      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
 8003496:	e1f3      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x60>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_TransmitReceive+0x60>
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1e8      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x72>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e1e1      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d003      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800351a:	d802      	bhi.n	8003522 <HAL_SPI_TransmitReceive+0xd8>
 800351c:	8abb      	ldrh	r3, [r7, #20]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d908      	bls.n	8003534 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e007      	b.n	8003544 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d007      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800356a:	f240 8083 	bls.w	8003674 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_TransmitReceive+0x132>
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d16f      	bne.n	800365c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	e05c      	b.n	800365c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d11b      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x19e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d016      	beq.n	80035e8 <HAL_SPI_TransmitReceive+0x19e>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d113      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	1c9a      	adds	r2, r3, #2
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d11c      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x1e6>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003630:	f7fe f9ae 	bl	8001990 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363c:	429a      	cmp	r2, r3
 800363e:	d80d      	bhi.n	800365c <HAL_SPI_TransmitReceive+0x212>
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d009      	beq.n	800365c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e111      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d19d      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x158>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d197      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x158>
 8003672:	e0e5      	b.n	8003840 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_SPI_TransmitReceive+0x23a>
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	2b01      	cmp	r3, #1
 8003680:	f040 80d1 	bne.w	8003826 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d912      	bls.n	80036b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b02      	subs	r3, #2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b2:	e0b8      	b.n	8003826 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036da:	e0a4      	b.n	8003826 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d134      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x30a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02f      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x30a>
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d12c      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d912      	bls.n	800372a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b02      	subs	r3, #2
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003728:	e012      	b.n	8003750 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d148      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x3aa>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d042      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d923      	bls.n	80037c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	b292      	uxth	r2, r2
 8003786:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b02      	subs	r3, #2
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d81f      	bhi.n	80037f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	e016      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f103 020c 	add.w	r2, r3, #12
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037f0:	2301      	movs	r3, #1
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037f4:	f7fe f8cc 	bl	8001990 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003800:	429a      	cmp	r2, r3
 8003802:	d803      	bhi.n	800380c <HAL_SPI_TransmitReceive+0x3c2>
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d102      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x3c8>
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e02c      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f af55 	bne.w	80036dc <HAL_SPI_TransmitReceive+0x292>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	f47f af4e 	bne.w	80036dc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003840:	6a3a      	ldr	r2, [r7, #32]
 8003842:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fa51 	bl	8003cec <SPI_EndRxTxTransaction>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e00e      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800387e:	2300      	movs	r3, #0
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	@ 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
    return;
 80038c6:	e0ce      	b.n	8003a66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_SPI_IRQHandler+0x5e>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
    return;
 80038e4:	e0bf      	b.n	8003a66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_SPI_IRQHandler+0x7e>
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80b0 	beq.w	8003a66 <HAL_SPI_IRQHandler+0x1de>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80aa 	beq.w	8003a66 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d011      	beq.n	800394c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	e00b      	b.n	8003964 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
        return;
 8003962:	e080      	b.n	8003a66 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d014      	beq.n	8003998 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f043 0208 	orr.w	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d04f      	beq.n	8003a64 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_SPI_IRQHandler+0x168>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d034      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0203 	bic.w	r2, r2, #3
 80039fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d011      	beq.n	8003a2c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0c:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <HAL_SPI_IRQHandler+0x1e4>)
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe f916 	bl	8001c46 <HAL_DMA_Abort_IT>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d016      	beq.n	8003a62 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <HAL_SPI_IRQHandler+0x1e4>)
 8003a3a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe f900 	bl	8001c46 <HAL_DMA_Abort_IT>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003a58:	e003      	b.n	8003a62 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f808 	bl	8003a70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a60:	e000      	b.n	8003a64 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a62:	bf00      	nop
    return;
 8003a64:	bf00      	nop
  }
}
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	08003a85 	.word	0x08003a85

08003a70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff ffe5 	bl	8003a70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac0:	f7fd ff66 	bl	8001990 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad0:	f7fd ff5e 	bl	8001990 <HAL_GetTick>
 8003ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad6:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	015b      	lsls	r3, r3, #5
 8003adc:	0d1b      	lsrs	r3, r3, #20
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae6:	e054      	b.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d050      	beq.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af0:	f7fd ff4e 	bl	8001990 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d902      	bls.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b1e:	d111      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b28:	d004      	beq.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b32:	d107      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b4c:	d10f      	bne.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e017      	b.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d19b      	bne.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000000 	.word	0x20000000

08003bc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bd2:	f7fd fedd 	bl	8001990 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	4413      	add	r3, r2
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003be2:	f7fd fed5 	bl	8001990 <HAL_GetTick>
 8003be6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00da      	lsls	r2, r3, #3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	0d1b      	lsrs	r3, r3, #20
 8003c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c08:	e060      	b.n	8003ccc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c10:	d107      	bne.n	8003c22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d050      	beq.n	8003ccc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2a:	f7fd feb1 	bl	8001990 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d902      	bls.n	8003c40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d13d      	bne.n	8003cbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c58:	d111      	bne.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c62:	d004      	beq.n	8003c6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6c:	d107      	bne.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c86:	d10f      	bne.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ca6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e010      	b.n	8003cde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d196      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3728      	adds	r7, #40	@ 0x28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000000 	.word	0x20000000

08003cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff ff5b 	bl	8003bc0 <SPI_WaitFifoStateUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e027      	b.n	8003d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff fec0 	bl	8003ab0 <SPI_WaitFlagStateUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e014      	b.n	8003d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff34 	bl	8003bc0 <SPI_WaitFifoStateUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e000      	b.n	8003d70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e049      	b.n	8003e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fcae 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 f9ba 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d001      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e03b      	b.n	8003eb8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ec4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_TIM_Base_Start_IT+0x4e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6a:	d004      	beq.n	8003e76 <HAL_TIM_Base_Start_IT+0x4e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a15      	ldr	r2, [pc, #84]	@ (8003ec8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d115      	bne.n	8003ea2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <HAL_TIM_Base_Start_IT+0xa4>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d015      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x8c>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8e:	d011      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	e008      	b.n	8003eb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e000      	b.n	8003eb6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	00010007 	.word	0x00010007

08003ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d020      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0202 	mvn.w	r2, #2
 8003f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8e9 	bl	80040f2 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8db 	bl	80040de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8ec 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d020      	beq.n	8003f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0204 	mvn.w	r2, #4
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8c3 	bl	80040f2 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8b5 	bl	80040de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8c6 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0208 	mvn.w	r2, #8
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f89d 	bl	80040f2 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f88f 	bl	80040de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8a0 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0210 	mvn.w	r2, #16
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2208      	movs	r2, #8
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f877 	bl	80040f2 <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f869 	bl	80040de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f87a 	bl	8004106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0201 	mvn.w	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fc80 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f943 	bl	80042f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f93b 	bl	8004304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f834 	bl	800411a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f06f 0220 	mvn.w	r2, #32
 80040ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f903 	bl	80042dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a30      	ldr	r2, [pc, #192]	@ (8004204 <TIM_Base_SetConfig+0xd4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_Base_SetConfig+0x20>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414e:	d108      	bne.n	8004162 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a27      	ldr	r2, [pc, #156]	@ (8004204 <TIM_Base_SetConfig+0xd4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_Base_SetConfig+0x52>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004170:	d007      	beq.n	8004182 <TIM_Base_SetConfig+0x52>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a24      	ldr	r2, [pc, #144]	@ (8004208 <TIM_Base_SetConfig+0xd8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_Base_SetConfig+0x52>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a23      	ldr	r2, [pc, #140]	@ (800420c <TIM_Base_SetConfig+0xdc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a12      	ldr	r2, [pc, #72]	@ (8004204 <TIM_Base_SetConfig+0xd4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0xa0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a11      	ldr	r2, [pc, #68]	@ (8004208 <TIM_Base_SetConfig+0xd8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0xa0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a10      	ldr	r2, [pc, #64]	@ (800420c <TIM_Base_SetConfig+0xdc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]
  }
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400

08004210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004224:	2302      	movs	r3, #2
 8004226:	e04f      	b.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004258:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a14      	ldr	r2, [pc, #80]	@ (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004290:	d004      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a10      	ldr	r2, [pc, #64]	@ (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10c      	bne.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e040      	b.n	80043ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fa36 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	@ 0x24
 8004344:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fe04 	bl	8004f6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fbd5 	bl	8004b14 <UART_SetConfig>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e01b      	b.n	80043ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fe83 	bl	80050b0 <UART_CheckIdleState>
 80043aa:	4603      	mov	r3, r0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	@ 0x28
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d177      	bne.n	80044bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Transmit+0x24>
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e070      	b.n	80044be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2221      	movs	r2, #33	@ 0x21
 80043e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ea:	f7fd fad1 	bl	8001990 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004408:	d108      	bne.n	800441c <HAL_UART_Transmit+0x68>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e003      	b.n	8004424 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004424:	e02f      	b.n	8004486 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	2180      	movs	r1, #128	@ 0x80
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fee5 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e03b      	b.n	80044be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004458:	b292      	uxth	r2, r2
 800445a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	3302      	adds	r3, #2
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e007      	b.n	8004474 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1c9      	bne.n	8004426 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2140      	movs	r1, #64	@ 0x40
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 feaf 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e005      	b.n	80044be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b0ba      	sub	sp, #232	@ 0xe8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044f6:	4013      	ands	r3, r2
 80044f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d115      	bne.n	8004530 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00f      	beq.n	8004530 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 82ca 	beq.w	8004aba <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
      }
      return;
 800452e:	e2c4      	b.n	8004aba <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8117 	beq.w	8004768 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004546:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800454a:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_UART_IRQHandler+0x298>)
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 810a 	beq.w	8004768 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <HAL_UART_IRQHandler+0xbc>
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2201      	movs	r2, #1
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d011      	beq.n	80045b4 <HAL_UART_IRQHandler+0xec>
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2202      	movs	r2, #2
 80045a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045aa:	f043 0204 	orr.w	r2, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <HAL_UART_IRQHandler+0x11c>
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2204      	movs	r2, #4
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004616:	f043 0208 	orr.w	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	d012      	beq.n	8004652 <HAL_UART_IRQHandler+0x18a>
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004630:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8230 	beq.w	8004abe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800466a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d005      	beq.n	80046aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800469e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d04f      	beq.n	800474a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fe15 	bl	80052da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d141      	bne.n	8004742 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1d9      	bne.n	80046be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004716:	4a13      	ldr	r2, [pc, #76]	@ (8004764 <HAL_UART_IRQHandler+0x29c>)
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fa91 	bl	8001c46 <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00f      	b.n	800475a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f9d4 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00b      	b.n	800475a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9d0 	bl	8004ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e007      	b.n	800475a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9cc 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004758:	e1b1      	b.n	8004abe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475a:	bf00      	nop
    return;
 800475c:	e1af      	b.n	8004abe <HAL_UART_IRQHandler+0x5f6>
 800475e:	bf00      	nop
 8004760:	04000120 	.word	0x04000120
 8004764:	080053a3 	.word	0x080053a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800476c:	2b01      	cmp	r3, #1
 800476e:	f040 816a 	bne.w	8004a46 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8163 	beq.w	8004a46 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 815c 	beq.w	8004a46 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2210      	movs	r2, #16
 8004794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b40      	cmp	r3, #64	@ 0x40
 80047a2:	f040 80d4 	bne.w	800494e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80ad 	beq.w	8004916 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f080 80a5 	bcs.w	8004916 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8086 	bne.w	80048f4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004816:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800481e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1da      	bne.n	80047e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004856:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800485a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800485e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e1      	bne.n	8004832 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800487e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004892:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004894:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004898:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e3      	bne.n	800486e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e4      	bne.n	80048b4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd f96b 	bl	8001bca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004906:	b29b      	uxth	r3, r3
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	b29b      	uxth	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8f4 	bl	8004afc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004914:	e0d5      	b.n	8004ac2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800491c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004920:	429a      	cmp	r2, r3
 8004922:	f040 80ce 	bne.w	8004ac2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b20      	cmp	r3, #32
 8004934:	f040 80c5 	bne.w	8004ac2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8d8 	bl	8004afc <HAL_UARTEx_RxEventCallback>
      return;
 800494c:	e0b9      	b.n	8004ac2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800495a:	b29b      	uxth	r3, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80ab 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a6 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800498e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800499c:	647b      	str	r3, [r7, #68]	@ 0x44
 800499e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e4      	bne.n	800497a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	623b      	str	r3, [r7, #32]
   return(result);
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80049d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e3      	bne.n	80049b0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f023 0310 	bic.w	r3, r3, #16
 8004a10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	69b9      	ldr	r1, [r7, #24]
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e4      	bne.n	80049fc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f85c 	bl	8004afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a44:	e03f      	b.n	8004ac6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00e      	beq.n	8004a70 <HAL_UART_IRQHandler+0x5a8>
 8004a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fcda 	bl	8005422 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a6e:	e02d      	b.n	8004acc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00e      	beq.n	8004a9a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01c      	beq.n	8004aca <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
    }
    return;
 8004a98:	e017      	b.n	8004aca <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d012      	beq.n	8004acc <HAL_UART_IRQHandler+0x604>
 8004aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fc8b 	bl	80053ce <UART_EndTransmit_IT>
    return;
 8004ab8:	e008      	b.n	8004acc <HAL_UART_IRQHandler+0x604>
      return;
 8004aba:	bf00      	nop
 8004abc:	e006      	b.n	8004acc <HAL_UART_IRQHandler+0x604>
    return;
 8004abe:	bf00      	nop
 8004ac0:	e004      	b.n	8004acc <HAL_UART_IRQHandler+0x604>
      return;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <HAL_UART_IRQHandler+0x604>
      return;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <HAL_UART_IRQHandler+0x604>
    return;
 8004aca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004acc:	37e8      	adds	r7, #232	@ 0xe8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop

08004ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b18:	b08a      	sub	sp, #40	@ 0x28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4bb4      	ldr	r3, [pc, #720]	@ (8004e14 <UART_SetConfig+0x300>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4aa9      	ldr	r2, [pc, #676]	@ (8004e18 <UART_SetConfig+0x304>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b90:	430a      	orrs	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4aa0      	ldr	r2, [pc, #640]	@ (8004e1c <UART_SetConfig+0x308>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d126      	bne.n	8004bec <UART_SetConfig+0xd8>
 8004b9e:	4ba0      	ldr	r3, [pc, #640]	@ (8004e20 <UART_SetConfig+0x30c>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d81b      	bhi.n	8004be4 <UART_SetConfig+0xd0>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <UART_SetConfig+0xa0>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bdd 	.word	0x08004bdd
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bca:	e080      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd2:	e07c      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e078      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004bdc:	2308      	movs	r3, #8
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be2:	e074      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004be4:	2310      	movs	r3, #16
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bea:	e070      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a8c      	ldr	r2, [pc, #560]	@ (8004e24 <UART_SetConfig+0x310>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d138      	bne.n	8004c68 <UART_SetConfig+0x154>
 8004bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8004e20 <UART_SetConfig+0x30c>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d82d      	bhi.n	8004c60 <UART_SetConfig+0x14c>
 8004c04:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <UART_SetConfig+0xf8>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c61 	.word	0x08004c61
 8004c14:	08004c61 	.word	0x08004c61
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c61 	.word	0x08004c61
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c46:	e042      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4e:	e03e      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c56:	e03a      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5e:	e036      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c66:	e032      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004e18 <UART_SetConfig+0x304>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d12a      	bne.n	8004cc8 <UART_SetConfig+0x1b4>
 8004c72:	4b6b      	ldr	r3, [pc, #428]	@ (8004e20 <UART_SetConfig+0x30c>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c80:	d01a      	beq.n	8004cb8 <UART_SetConfig+0x1a4>
 8004c82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c86:	d81b      	bhi.n	8004cc0 <UART_SetConfig+0x1ac>
 8004c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c8c:	d00c      	beq.n	8004ca8 <UART_SetConfig+0x194>
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c92:	d815      	bhi.n	8004cc0 <UART_SetConfig+0x1ac>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <UART_SetConfig+0x18c>
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9c:	d008      	beq.n	8004cb0 <UART_SetConfig+0x19c>
 8004c9e:	e00f      	b.n	8004cc0 <UART_SetConfig+0x1ac>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca6:	e012      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cae:	e00e      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb6:	e00a      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cbe:	e006      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc6:	e002      	b.n	8004cce <UART_SetConfig+0x1ba>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a51      	ldr	r2, [pc, #324]	@ (8004e18 <UART_SetConfig+0x304>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d17a      	bne.n	8004dce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d824      	bhi.n	8004d2a <UART_SetConfig+0x216>
 8004ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x1d4>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d2b 	.word	0x08004d2b
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d2b 	.word	0x08004d2b
 8004cf8:	08004d1b 	.word	0x08004d1b
 8004cfc:	08004d2b 	.word	0x08004d2b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d2b 	.word	0x08004d2b
 8004d08:	08004d23 	.word	0x08004d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fd ff86 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e010      	b.n	8004d36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d14:	4b44      	ldr	r3, [pc, #272]	@ (8004e28 <UART_SetConfig+0x314>)
 8004d16:	61fb      	str	r3, [r7, #28]
        break;
 8004d18:	e00d      	b.n	8004d36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1a:	f7fd fee7 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8004d1e:	61f8      	str	r0, [r7, #28]
        break;
 8004d20:	e009      	b.n	8004d36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d26:	61fb      	str	r3, [r7, #28]
        break;
 8004d28:	e005      	b.n	8004d36 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8107 	beq.w	8004f4c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d305      	bcc.n	8004d5a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d903      	bls.n	8004d62 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d60:	e0f4      	b.n	8004f4c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2200      	movs	r2, #0
 8004d66:	461c      	mov	r4, r3
 8004d68:	4615      	mov	r5, r2
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	022b      	lsls	r3, r5, #8
 8004d74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d78:	0222      	lsls	r2, r4, #8
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	6849      	ldr	r1, [r1, #4]
 8004d7e:	0849      	lsrs	r1, r1, #1
 8004d80:	2000      	movs	r0, #0
 8004d82:	4688      	mov	r8, r1
 8004d84:	4681      	mov	r9, r0
 8004d86:	eb12 0a08 	adds.w	sl, r2, r8
 8004d8a:	eb43 0b09 	adc.w	fp, r3, r9
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9c:	4650      	mov	r0, sl
 8004d9e:	4659      	mov	r1, fp
 8004da0:	f7fb fa14 	bl	80001cc <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4613      	mov	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db2:	d308      	bcc.n	8004dc6 <UART_SetConfig+0x2b2>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dba:	d204      	bcs.n	8004dc6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	60da      	str	r2, [r3, #12]
 8004dc4:	e0c2      	b.n	8004f4c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dcc:	e0be      	b.n	8004f4c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd6:	d16a      	bne.n	8004eae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d834      	bhi.n	8004e4a <UART_SetConfig+0x336>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <UART_SetConfig+0x2d4>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e0d 	.word	0x08004e0d
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e35 	.word	0x08004e35
 8004df4:	08004e4b 	.word	0x08004e4b
 8004df8:	08004e3b 	.word	0x08004e3b
 8004dfc:	08004e4b 	.word	0x08004e4b
 8004e00:	08004e4b 	.word	0x08004e4b
 8004e04:	08004e4b 	.word	0x08004e4b
 8004e08:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e0c:	f7fd ff06 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004e10:	61f8      	str	r0, [r7, #28]
        break;
 8004e12:	e020      	b.n	8004e56 <UART_SetConfig+0x342>
 8004e14:	efff69f3 	.word	0xefff69f3
 8004e18:	40008000 	.word	0x40008000
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40004400 	.word	0x40004400
 8004e28:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fd ff0c 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8004e30:	61f8      	str	r0, [r7, #28]
        break;
 8004e32:	e010      	b.n	8004e56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b4c      	ldr	r3, [pc, #304]	@ (8004f68 <UART_SetConfig+0x454>)
 8004e36:	61fb      	str	r3, [r7, #28]
        break;
 8004e38:	e00d      	b.n	8004e56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fd fe57 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8004e3e:	61f8      	str	r0, [r7, #28]
        break;
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e46:	61fb      	str	r3, [r7, #28]
        break;
 8004e48:	e005      	b.n	8004e56 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d077      	beq.n	8004f4c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	005a      	lsls	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	441a      	add	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d916      	bls.n	8004ea6 <UART_SetConfig+0x392>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7e:	d212      	bcs.n	8004ea6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f023 030f 	bic.w	r3, r3, #15
 8004e88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	8afb      	ldrh	r3, [r7, #22]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	8afa      	ldrh	r2, [r7, #22]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e052      	b.n	8004f4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004eac:	e04e      	b.n	8004f4c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d827      	bhi.n	8004f06 <UART_SetConfig+0x3f2>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <UART_SetConfig+0x3a8>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	08004f07 	.word	0x08004f07
 8004ecc:	08004ef7 	.word	0x08004ef7
 8004ed0:	08004f07 	.word	0x08004f07
 8004ed4:	08004f07 	.word	0x08004f07
 8004ed8:	08004f07 	.word	0x08004f07
 8004edc:	08004eff 	.word	0x08004eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f7fd fe9c 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8004ee4:	61f8      	str	r0, [r7, #28]
        break;
 8004ee6:	e014      	b.n	8004f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee8:	f7fd feae 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8004eec:	61f8      	str	r0, [r7, #28]
        break;
 8004eee:	e010      	b.n	8004f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f68 <UART_SetConfig+0x454>)
 8004ef2:	61fb      	str	r3, [r7, #28]
        break;
 8004ef4:	e00d      	b.n	8004f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef6:	f7fd fdf9 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8004efa:	61f8      	str	r0, [r7, #28]
        break;
 8004efc:	e009      	b.n	8004f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f02:	61fb      	str	r3, [r7, #28]
        break;
 8004f04:	e005      	b.n	8004f12 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f10:	bf00      	nop
    }

    if (pclk != 0U)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d019      	beq.n	8004f4c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	085a      	lsrs	r2, r3, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b0f      	cmp	r3, #15
 8004f30:	d909      	bls.n	8004f46 <UART_SetConfig+0x432>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f38:	d205      	bcs.n	8004f46 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e002      	b.n	8004f4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3728      	adds	r7, #40	@ 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f66:	bf00      	nop
 8004f68:	00f42400 	.word	0x00f42400

08004f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01a      	beq.n	8005082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506a:	d10a      	bne.n	8005082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b098      	sub	sp, #96	@ 0x60
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c0:	f7fc fc66 	bl	8001990 <HAL_GetTick>
 80050c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d12e      	bne.n	8005132 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f88c 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d021      	beq.n	8005132 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005102:	653b      	str	r3, [r7, #80]	@ 0x50
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800510c:	647b      	str	r3, [r7, #68]	@ 0x44
 800510e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800511a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e062      	b.n	80051f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d149      	bne.n	80051d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005140:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005148:	2200      	movs	r2, #0
 800514a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f856 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03c      	beq.n	80051d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	623b      	str	r3, [r7, #32]
   return(result);
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800516e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005178:	633b      	str	r3, [r7, #48]	@ 0x30
 800517a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800517e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	60fb      	str	r3, [r7, #12]
   return(result);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ac:	61fa      	str	r2, [r7, #28]
 80051ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e011      	b.n	80051f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3758      	adds	r7, #88	@ 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	e04f      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d04b      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fc fbb9 	bl	8001990 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <UART_WaitOnFlagUntilTimeout+0x30>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e04e      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d037      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b80      	cmp	r3, #128	@ 0x80
 8005246:	d034      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d031      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d110      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2208      	movs	r2, #8
 8005262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f838 	bl	80052da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2208      	movs	r2, #8
 800526e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e029      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528c:	d111      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f81e 	bl	80052da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e00f      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d0a0      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052da:	b480      	push	{r7}
 80052dc:	b095      	sub	sp, #84	@ 0x54
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005300:	643b      	str	r3, [r7, #64]	@ 0x40
 8005302:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e6      	bne.n	80052e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	61fb      	str	r3, [r7, #28]
   return(result);
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800533a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534c:	2b01      	cmp	r3, #1
 800534e:	d118      	bne.n	8005382 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	60bb      	str	r3, [r7, #8]
   return(result);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 0310 	bic.w	r3, r3, #16
 8005364:	647b      	str	r3, [r7, #68]	@ 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6979      	ldr	r1, [r7, #20]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	613b      	str	r3, [r7, #16]
   return(result);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005396:	bf00      	nop
 8005398:	3754      	adds	r7, #84	@ 0x54
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fb91 	bl	8004ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e6      	bne.n	80053d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fb5d 	bl	8004ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800541a:	bf00      	nop
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <memset>:
 8005436:	4402      	add	r2, r0
 8005438:	4603      	mov	r3, r0
 800543a:	4293      	cmp	r3, r2
 800543c:	d100      	bne.n	8005440 <memset+0xa>
 800543e:	4770      	bx	lr
 8005440:	f803 1b01 	strb.w	r1, [r3], #1
 8005444:	e7f9      	b.n	800543a <memset+0x4>
	...

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4d0d      	ldr	r5, [pc, #52]	@ (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	@ (8005484 <__libc_init_array+0x3c>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2600      	movs	r6, #0
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4d0b      	ldr	r5, [pc, #44]	@ (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	@ (800548c <__libc_init_array+0x44>)
 800545c:	f000 f818 	bl	8005490 <_init>
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2600      	movs	r6, #0
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	0800566c 	.word	0x0800566c
 8005484:	0800566c 	.word	0x0800566c
 8005488:	0800566c 	.word	0x0800566c
 800548c:	08005670 	.word	0x08005670

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
