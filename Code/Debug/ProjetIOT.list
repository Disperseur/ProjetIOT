
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af20  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d0  0800b0ac  0800b0ac  0000c0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  0000e054  2**0
                  CONTENTS
  4 .ARM          00000008  0800c57c  0800c57c  0000d57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c584  0800c584  0000e054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c584  0800c584  0000d584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c588  0800c588  0000d588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800c58c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000054  0800c5e0  0000e054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800c5e0  0000e508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f451  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c3  00000000  00000000  0002d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001546  00000000  00000000  000333f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024940  00000000  00000000  00034936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020aab  00000000  00000000  00059276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df659  00000000  00000000  00079d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015937a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f0  00000000  00000000  001593c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001607b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000054 	.word	0x20000054
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800b094 	.word	0x0800b094

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000058 	.word	0x20000058
 80001c8:	0800b094 	.word	0x0800b094

080001cc <__aeabi_ldivmod>:
 80001cc:	b97b      	cbnz	r3, 80001ee <__aeabi_ldivmod+0x22>
 80001ce:	b972      	cbnz	r2, 80001ee <__aeabi_ldivmod+0x22>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bfbe      	ittt	lt
 80001d4:	2000      	movlt	r0, #0
 80001d6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001da:	e006      	blt.n	80001ea <__aeabi_ldivmod+0x1e>
 80001dc:	bf08      	it	eq
 80001de:	2800      	cmpeq	r0, #0
 80001e0:	bf1c      	itt	ne
 80001e2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e6:	f04f 30ff 	movne.w	r0, #4294967295
 80001ea:	f000 b9b5 	b.w	8000558 <__aeabi_idiv0>
 80001ee:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f6:	2900      	cmp	r1, #0
 80001f8:	db09      	blt.n	800020e <__aeabi_ldivmod+0x42>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db1a      	blt.n	8000234 <__aeabi_ldivmod+0x68>
 80001fe:	f000 f84d 	bl	800029c <__udivmoddi4>
 8000202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020a:	b004      	add	sp, #16
 800020c:	4770      	bx	lr
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	2b00      	cmp	r3, #0
 8000216:	db1b      	blt.n	8000250 <__aeabi_ldivmod+0x84>
 8000218:	f000 f840 	bl	800029c <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	4252      	negs	r2, r2
 800022e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f82f 	bl	800029c <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4240      	negs	r0, r0
 800024a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024e:	4770      	bx	lr
 8000250:	4252      	negs	r2, r2
 8000252:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000256:	f000 f821 	bl	800029c <__udivmoddi4>
 800025a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000262:	b004      	add	sp, #16
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	4770      	bx	lr

0800026c <__aeabi_uldivmod>:
 800026c:	b953      	cbnz	r3, 8000284 <__aeabi_uldivmod+0x18>
 800026e:	b94a      	cbnz	r2, 8000284 <__aeabi_uldivmod+0x18>
 8000270:	2900      	cmp	r1, #0
 8000272:	bf08      	it	eq
 8000274:	2800      	cmpeq	r0, #0
 8000276:	bf1c      	itt	ne
 8000278:	f04f 31ff 	movne.w	r1, #4294967295
 800027c:	f04f 30ff 	movne.w	r0, #4294967295
 8000280:	f000 b96a 	b.w	8000558 <__aeabi_idiv0>
 8000284:	f1ad 0c08 	sub.w	ip, sp, #8
 8000288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800028c:	f000 f806 	bl	800029c <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4770      	bx	lr

0800029c <__udivmoddi4>:
 800029c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a0:	9d08      	ldr	r5, [sp, #32]
 80002a2:	460c      	mov	r4, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14e      	bne.n	8000346 <__udivmoddi4+0xaa>
 80002a8:	4694      	mov	ip, r2
 80002aa:	458c      	cmp	ip, r1
 80002ac:	4686      	mov	lr, r0
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	d962      	bls.n	800037a <__udivmoddi4+0xde>
 80002b4:	b14a      	cbz	r2, 80002ca <__udivmoddi4+0x2e>
 80002b6:	f1c2 0320 	rsb	r3, r2, #32
 80002ba:	4091      	lsls	r1, r2
 80002bc:	fa20 f303 	lsr.w	r3, r0, r3
 80002c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ce:	fa1f f68c 	uxth.w	r6, ip
 80002d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002da:	fb07 1114 	mls	r1, r7, r4, r1
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	fb04 f106 	mul.w	r1, r4, r6
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x64>
 80002ea:	eb1c 0303 	adds.w	r3, ip, r3
 80002ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f2:	f080 8112 	bcs.w	800051a <__udivmoddi4+0x27e>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 810f 	bls.w	800051a <__udivmoddi4+0x27e>
 80002fc:	3c02      	subs	r4, #2
 80002fe:	4463      	add	r3, ip
 8000300:	1a59      	subs	r1, r3, r1
 8000302:	fa1f f38e 	uxth.w	r3, lr
 8000306:	fbb1 f0f7 	udiv	r0, r1, r7
 800030a:	fb07 1110 	mls	r1, r7, r0, r1
 800030e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000312:	fb00 f606 	mul.w	r6, r0, r6
 8000316:	429e      	cmp	r6, r3
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x94>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000322:	f080 80fc 	bcs.w	800051e <__udivmoddi4+0x282>
 8000326:	429e      	cmp	r6, r3
 8000328:	f240 80f9 	bls.w	800051e <__udivmoddi4+0x282>
 800032c:	4463      	add	r3, ip
 800032e:	3802      	subs	r0, #2
 8000330:	1b9b      	subs	r3, r3, r6
 8000332:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa6>
 800033a:	40d3      	lsrs	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xba>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb4>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa6>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x150>
 800035e:	42a3      	cmp	r3, r4
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xcc>
 8000362:	4290      	cmp	r0, r2
 8000364:	f0c0 80f0 	bcc.w	8000548 <__udivmoddi4+0x2ac>
 8000368:	1a86      	subs	r6, r0, r2
 800036a:	eb64 0303 	sbc.w	r3, r4, r3
 800036e:	2001      	movs	r0, #1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e6      	beq.n	8000342 <__udivmoddi4+0xa6>
 8000374:	e9c5 6300 	strd	r6, r3, [r5]
 8000378:	e7e3      	b.n	8000342 <__udivmoddi4+0xa6>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f040 8090 	bne.w	80004a0 <__udivmoddi4+0x204>
 8000380:	eba1 040c 	sub.w	r4, r1, ip
 8000384:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000388:	fa1f f78c 	uxth.w	r7, ip
 800038c:	2101      	movs	r1, #1
 800038e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb08 4416 	mls	r4, r8, r6, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb07 f006 	mul.w	r0, r7, r6
 80003a2:	4298      	cmp	r0, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x11c>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x11a>
 80003b0:	4298      	cmp	r0, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2b4>
 80003b6:	4626      	mov	r6, r4
 80003b8:	1a1c      	subs	r4, r3, r0
 80003ba:	fa1f f38e 	uxth.w	r3, lr
 80003be:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c2:	fb08 4410 	mls	r4, r8, r0, r4
 80003c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ca:	fb00 f707 	mul.w	r7, r0, r7
 80003ce:	429f      	cmp	r7, r3
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x148>
 80003d2:	eb1c 0303 	adds.w	r3, ip, r3
 80003d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x146>
 80003dc:	429f      	cmp	r7, r3
 80003de:	f200 80b0 	bhi.w	8000542 <__udivmoddi4+0x2a6>
 80003e2:	4620      	mov	r0, r4
 80003e4:	1bdb      	subs	r3, r3, r7
 80003e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x9c>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000400:	ea43 030c 	orr.w	r3, r3, ip
 8000404:	40f4      	lsrs	r4, r6
 8000406:	fa00 f801 	lsl.w	r8, r0, r1
 800040a:	0c38      	lsrs	r0, r7, #16
 800040c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000410:	fbb4 fef0 	udiv	lr, r4, r0
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fb00 441e 	mls	r4, r0, lr, r4
 800041c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a1      	cmp	r9, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x1a6>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000432:	f080 8084 	bcs.w	800053e <__udivmoddi4+0x2a2>
 8000436:	45a1      	cmp	r9, r4
 8000438:	f240 8081 	bls.w	800053e <__udivmoddi4+0x2a2>
 800043c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000440:	443c      	add	r4, r7
 8000442:	eba4 0409 	sub.w	r4, r4, r9
 8000446:	fa1f f983 	uxth.w	r9, r3
 800044a:	fbb4 f3f0 	udiv	r3, r4, r0
 800044e:	fb00 4413 	mls	r4, r0, r3, r4
 8000452:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	45a4      	cmp	ip, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x1d2>
 800045e:	193c      	adds	r4, r7, r4
 8000460:	f103 30ff 	add.w	r0, r3, #4294967295
 8000464:	d267      	bcs.n	8000536 <__udivmoddi4+0x29a>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d965      	bls.n	8000536 <__udivmoddi4+0x29a>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000472:	fba0 9302 	umull	r9, r3, r0, r2
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	429c      	cmp	r4, r3
 800047c:	46ce      	mov	lr, r9
 800047e:	469c      	mov	ip, r3
 8000480:	d351      	bcc.n	8000526 <__udivmoddi4+0x28a>
 8000482:	d04e      	beq.n	8000522 <__udivmoddi4+0x286>
 8000484:	b155      	cbz	r5, 800049c <__udivmoddi4+0x200>
 8000486:	ebb8 030e 	subs.w	r3, r8, lr
 800048a:	eb64 040c 	sbc.w	r4, r4, ip
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431e      	orrs	r6, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	e9c5 6400 	strd	r6, r4, [r5]
 800049c:	2100      	movs	r1, #0
 800049e:	e750      	b.n	8000342 <__udivmoddi4+0xa6>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f103 	lsr.w	r1, r0, r3
 80004a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ac:	fa24 f303 	lsr.w	r3, r4, r3
 80004b0:	4094      	lsls	r4, r2
 80004b2:	430c      	orrs	r4, r1
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c4:	fb08 3110 	mls	r1, r8, r0, r3
 80004c8:	0c23      	lsrs	r3, r4, #16
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb00 f107 	mul.w	r1, r0, r7
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x24c>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 36ff 	add.w	r6, r0, #4294967295
 80004de:	d22c      	bcs.n	800053a <__udivmoddi4+0x29e>
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d92a      	bls.n	800053a <__udivmoddi4+0x29e>
 80004e4:	3802      	subs	r0, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f0:	fb08 3311 	mls	r3, r8, r1, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb01 f307 	mul.w	r3, r1, r7
 80004fc:	42a3      	cmp	r3, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x276>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f101 36ff 	add.w	r6, r1, #4294967295
 8000508:	d213      	bcs.n	8000532 <__udivmoddi4+0x296>
 800050a:	42a3      	cmp	r3, r4
 800050c:	d911      	bls.n	8000532 <__udivmoddi4+0x296>
 800050e:	3902      	subs	r1, #2
 8000510:	4464      	add	r4, ip
 8000512:	1ae4      	subs	r4, r4, r3
 8000514:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000518:	e739      	b.n	800038e <__udivmoddi4+0xf2>
 800051a:	4604      	mov	r4, r0
 800051c:	e6f0      	b.n	8000300 <__udivmoddi4+0x64>
 800051e:	4608      	mov	r0, r1
 8000520:	e706      	b.n	8000330 <__udivmoddi4+0x94>
 8000522:	45c8      	cmp	r8, r9
 8000524:	d2ae      	bcs.n	8000484 <__udivmoddi4+0x1e8>
 8000526:	ebb9 0e02 	subs.w	lr, r9, r2
 800052a:	eb63 0c07 	sbc.w	ip, r3, r7
 800052e:	3801      	subs	r0, #1
 8000530:	e7a8      	b.n	8000484 <__udivmoddi4+0x1e8>
 8000532:	4631      	mov	r1, r6
 8000534:	e7ed      	b.n	8000512 <__udivmoddi4+0x276>
 8000536:	4603      	mov	r3, r0
 8000538:	e799      	b.n	800046e <__udivmoddi4+0x1d2>
 800053a:	4630      	mov	r0, r6
 800053c:	e7d4      	b.n	80004e8 <__udivmoddi4+0x24c>
 800053e:	46d6      	mov	lr, sl
 8000540:	e77f      	b.n	8000442 <__udivmoddi4+0x1a6>
 8000542:	4463      	add	r3, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e74d      	b.n	80003e4 <__udivmoddi4+0x148>
 8000548:	4606      	mov	r6, r0
 800054a:	4623      	mov	r3, r4
 800054c:	4608      	mov	r0, r1
 800054e:	e70f      	b.n	8000370 <__udivmoddi4+0xd4>
 8000550:	3e02      	subs	r6, #2
 8000552:	4463      	add	r3, ip
 8000554:	e730      	b.n	80003b8 <__udivmoddi4+0x11c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <MX_ADC1_Init+0xc0>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000578:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000584:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000590:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000592:	2204      	movs	r2, #4
 8000594:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000596:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005d4:	f005 ff76 	bl	80064c4 <HAL_ADC_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005de:	f004 fc21 	bl	8004e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <MX_ADC1_Init+0xc4>)
 80005e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e6:	2306      	movs	r3, #6
 80005e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ea:	2307      	movs	r3, #7
 80005ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	@ 0x7f
 80005f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f2:	2304      	movs	r3, #4
 80005f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000600:	f006 fb2c 	bl	8006c5c <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800060a:	f004 fc0b 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000070 	.word	0x20000070
 800061c:	50040000 	.word	0x50040000
 8000620:	3ef08000 	.word	0x3ef08000

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09e      	sub	sp, #120	@ 0x78
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2254      	movs	r2, #84	@ 0x54
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f00a fcea 	bl	800b01e <memset>
  if(adcHandle->Instance==ADC1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <HAL_ADC_MspInit+0xd0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d14a      	bne.n	80006ea <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000658:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800065a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800065e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800067c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f008 f94a 	bl	800891c <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800068e:	f004 fbc9 	bl	8004e24 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 8000698:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	2301      	movs	r3, #1
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006c6:	230b      	movs	r3, #11
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006d2:	4619      	mov	r1, r3
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <HAL_ADC_MspInit+0xd8>)
 80006d6:	f007 f8eb 	bl	80078b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2012      	movs	r0, #18
 80006e0:	f007 f831 	bl	8007746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006e4:	2012      	movs	r0, #18
 80006e6:	f007 f84a 	bl	800777e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	3778      	adds	r7, #120	@ 0x78
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	50040000 	.word	0x50040000
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400

08000700 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e021      	b.n	8000750 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 800070c:	4a37      	ldr	r2, [pc, #220]	@ (80007ec <aesroundkeys+0xec>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	061a      	lsls	r2, r3, #24
 8000716:	4935      	ldr	r1, [pc, #212]	@ (80007ec <aesroundkeys+0xec>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000724:	431a      	orrs	r2, r3
 8000726:	4931      	ldr	r1, [pc, #196]	@ (80007ec <aesroundkeys+0xec>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000734:	431a      	orrs	r2, r3
 8000736:	492d      	ldr	r1, [pc, #180]	@ (80007ec <aesroundkeys+0xec>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073e:	0e1b      	lsrs	r3, r3, #24
 8000740:	431a      	orrs	r2, r3
 8000742:	492a      	ldr	r1, [pc, #168]	@ (80007ec <aesroundkeys+0xec>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	ddda      	ble.n	800070c <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <aesroundkeys+0xec>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800075c:	e03c      	b.n	80007d8 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f003 0303 	and.w	r3, r3, #3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d127      	bne.n	80007b8 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <aesroundkeys+0xf0>)
 8000772:	5c9b      	ldrb	r3, [r3, r2]
 8000774:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <aesroundkeys+0xf0>)
 8000780:	5c5b      	ldrb	r3, [r3, r1]
 8000782:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000784:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <aesroundkeys+0xf0>)
 800078e:	5c5b      	ldrb	r3, [r3, r1]
 8000790:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8000792:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	0e12      	lsrs	r2, r2, #24
 8000798:	4915      	ldr	r1, [pc, #84]	@ (80007f0 <aesroundkeys+0xf0>)
 800079a:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 800079c:	4053      	eors	r3, r2
 800079e:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b04      	subs	r3, #4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	da00      	bge.n	80007aa <aesroundkeys+0xaa>
 80007a8:	3303      	adds	r3, #3
 80007aa:	109b      	asrs	r3, r3, #2
 80007ac:	4619      	mov	r1, r3
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <aesroundkeys+0xf4>)
 80007b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80007b4:	4053      	eors	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b04      	subs	r3, #4
 80007bc:	4a0b      	ldr	r2, [pc, #44]	@ (80007ec <aesroundkeys+0xec>)
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4053      	eors	r3, r2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4908      	ldr	r1, [pc, #32]	@ (80007ec <aesroundkeys+0xec>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b2b      	cmp	r3, #43	@ 0x2b
 80007dc:	ddbf      	ble.n	800075e <aesroundkeys+0x5e>
    }
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	0800b370 	.word	0x0800b370
 80007f4:	0800b348 	.word	0x0800b348

080007f8 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000808:	f7ff ff7a 	bl	8000700 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d010      	beq.n	8000838 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <os_aes+0x188>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	4b58      	ldr	r3, [pc, #352]	@ (8000980 <os_aes+0x188>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a57      	ldr	r2, [pc, #348]	@ (8000980 <os_aes+0x188>)
 8000822:	6093      	str	r3, [r2, #8]
 8000824:	4b56      	ldr	r3, [pc, #344]	@ (8000980 <os_aes+0x188>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a55      	ldr	r2, [pc, #340]	@ (8000980 <os_aes+0x188>)
 800082a:	6053      	str	r3, [r2, #4]
 800082c:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <os_aes+0x188>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <os_aes+0x188>)
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	f000 bc97 	b.w	8001166 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <os_aes+0x188>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	061a      	lsls	r2, r3, #24
 800083e:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <os_aes+0x188>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000848:	431a      	orrs	r2, r3
 800084a:	4b4d      	ldr	r3, [pc, #308]	@ (8000980 <os_aes+0x188>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000854:	431a      	orrs	r2, r3
 8000856:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <os_aes+0x188>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	4313      	orrs	r3, r2
 800085e:	4a48      	ldr	r2, [pc, #288]	@ (8000980 <os_aes+0x188>)
 8000860:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 8000862:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <os_aes+0x188>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	061a      	lsls	r2, r3, #24
 8000868:	4b45      	ldr	r3, [pc, #276]	@ (8000980 <os_aes+0x188>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000872:	431a      	orrs	r2, r3
 8000874:	4b42      	ldr	r3, [pc, #264]	@ (8000980 <os_aes+0x188>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800087e:	431a      	orrs	r2, r3
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <os_aes+0x188>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	4313      	orrs	r3, r2
 8000888:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <os_aes+0x188>)
 800088a:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800088c:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <os_aes+0x188>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	061a      	lsls	r2, r3, #24
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <os_aes+0x188>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800089c:	431a      	orrs	r2, r3
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <os_aes+0x188>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80008a8:	431a      	orrs	r2, r3
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <os_aes+0x188>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	0e1b      	lsrs	r3, r3, #24
 80008b0:	4313      	orrs	r3, r2
 80008b2:	4a33      	ldr	r2, [pc, #204]	@ (8000980 <os_aes+0x188>)
 80008b4:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <os_aes+0x188>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	061a      	lsls	r2, r3, #24
 80008bc:	4b30      	ldr	r3, [pc, #192]	@ (8000980 <os_aes+0x188>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80008c6:	431a      	orrs	r2, r3
 80008c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <os_aes+0x188>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80008d2:	431a      	orrs	r2, r3
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <os_aes+0x188>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	4313      	orrs	r3, r2
 80008dc:	4a28      	ldr	r2, [pc, #160]	@ (8000980 <os_aes+0x188>)
 80008de:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 80008e0:	f000 bc41 	b.w	8001166 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <os_aes+0x10a>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d011      	beq.n	800091c <os_aes+0x124>
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10c      	bne.n	800091c <os_aes+0x124>
                a0 = AESAUX[0];
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <os_aes+0x188>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <os_aes+0x188>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <os_aes+0x188>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <os_aes+0x188>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	e062      	b.n	80009e2 <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d016      	beq.n	8000954 <os_aes+0x15c>
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	2b10      	cmp	r3, #16
 800092a:	d813      	bhi.n	8000954 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
 8000934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d101      	bne.n	8000946 <os_aes+0x14e>
 8000942:	2210      	movs	r2, #16
 8000944:	e000      	b.n	8000948 <os_aes+0x150>
 8000946:	2220      	movs	r2, #32
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4313      	orrs	r3, r2
 800094e:	b25b      	sxtb	r3, r3
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e046      	b.n	80009e2 <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 8000954:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	e026      	b.n	80009aa <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	021a      	lsls	r2, r3, #8
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	69f9      	ldr	r1, [r7, #28]
 8000964:	4299      	cmp	r1, r3
 8000966:	d204      	bcs.n	8000972 <os_aes+0x17a>
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	440b      	add	r3, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	e009      	b.n	8000986 <os_aes+0x18e>
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	69f9      	ldr	r1, [r7, #28]
 8000976:	4299      	cmp	r1, r3
 8000978:	d104      	bne.n	8000984 <os_aes+0x18c>
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	e003      	b.n	8000986 <os_aes+0x18e>
 800097e:	bf00      	nop
 8000980:	200000d4 	.word	0x200000d4
 8000984:	2300      	movs	r3, #0
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b03      	cmp	r3, #3
 8000992:	d107      	bne.n	80009a4 <os_aes+0x1ac>
                        a0 = a1;
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d9d5      	bls.n	800095c <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d013      	beq.n	80009e2 <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 80009ba:	4ba0      	ldr	r3, [pc, #640]	@ (8000c3c <os_aes+0x444>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009c0:	4053      	eors	r3, r2
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 80009c4:	4b9d      	ldr	r3, [pc, #628]	@ (8000c3c <os_aes+0x444>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ca:	4053      	eors	r3, r2
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 80009ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000c3c <os_aes+0x444>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d4:	4053      	eors	r3, r2
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 80009d8:	4b98      	ldr	r3, [pc, #608]	@ (8000c3c <os_aes+0x444>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	6a3a      	ldr	r2, [r7, #32]
 80009de:	4053      	eors	r3, r2
 80009e0:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 80009e2:	4b97      	ldr	r3, [pc, #604]	@ (8000c40 <os_aes+0x448>)
 80009e4:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3380      	adds	r3, #128	@ 0x80
 80009ea:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009f2:	4053      	eors	r3, r2
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3304      	adds	r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009fe:	4053      	eors	r3, r2
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3308      	adds	r3, #8
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a0a:	4053      	eors	r3, r2
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	330c      	adds	r3, #12
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6a3a      	ldr	r2, [r7, #32]
 8000a16:	4053      	eors	r3, r2
 8000a18:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8000a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b82      	ldr	r3, [pc, #520]	@ (8000c44 <os_aes+0x44c>)
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4053      	eors	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8000c48 <os_aes+0x450>)
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4053      	eors	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b7a      	ldr	r3, [pc, #488]	@ (8000c4c <os_aes+0x454>)
 8000a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	4053      	eors	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a6e:	0e1b      	lsrs	r3, r3, #24
 8000a70:	4a77      	ldr	r2, [pc, #476]	@ (8000c50 <os_aes+0x458>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	4053      	eors	r3, r2
 8000a7a:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 8000a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b70      	ldr	r3, [pc, #448]	@ (8000c44 <os_aes+0x44c>)
 8000a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b6c      	ldr	r3, [pc, #432]	@ (8000c48 <os_aes+0x450>)
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b68      	ldr	r3, [pc, #416]	@ (8000c4c <os_aes+0x454>)
 8000aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	4a65      	ldr	r2, [pc, #404]	@ (8000c50 <os_aes+0x458>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4053      	eors	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b5d      	ldr	r3, [pc, #372]	@ (8000c44 <os_aes+0x44c>)
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	4053      	eors	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b59      	ldr	r3, [pc, #356]	@ (8000c48 <os_aes+0x450>)
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	4053      	eors	r3, r2
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b55      	ldr	r3, [pc, #340]	@ (8000c4c <os_aes+0x454>)
 8000af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4053      	eors	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	4a52      	ldr	r2, [pc, #328]	@ (8000c50 <os_aes+0x458>)
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4053      	eors	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b4b      	ldr	r3, [pc, #300]	@ (8000c44 <os_aes+0x44c>)
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	69fa      	ldr	r2, [r7, #28]
 8000b1e:	4053      	eors	r3, r2
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <os_aes+0x450>)
 8000b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4053      	eors	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b43      	ldr	r3, [pc, #268]	@ (8000c4c <os_aes+0x454>)
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4053      	eors	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <os_aes+0x458>)
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	4053      	eors	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <os_aes+0x44c>)
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b80:	4053      	eors	r3, r2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <os_aes+0x450>)
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b94:	4053      	eors	r3, r2
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <os_aes+0x454>)
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	6a3a      	ldr	r2, [r7, #32]
 8000ba8:	4053      	eors	r3, r2
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	0e1b      	lsrs	r3, r3, #24
 8000bb0:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <os_aes+0x458>)
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bb8:	4053      	eors	r3, r2
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <os_aes+0x44c>)
 8000bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bca:	4053      	eors	r3, r2
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <os_aes+0x450>)
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	6a3a      	ldr	r2, [r7, #32]
 8000bde:	4053      	eors	r3, r2
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	0c1b      	lsrs	r3, r3, #16
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <os_aes+0x454>)
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	0e1b      	lsrs	r3, r3, #24
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <os_aes+0x458>)
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c02:	4053      	eors	r3, r2
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <os_aes+0x44c>)
 8000c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	4053      	eors	r3, r2
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <os_aes+0x450>)
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c28:	4053      	eors	r3, r2
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <os_aes+0x454>)
 8000c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3a:	e00b      	b.n	8000c54 <os_aes+0x45c>
 8000c3c:	200000d4 	.word	0x200000d4
 8000c40:	200000e4 	.word	0x200000e4
 8000c44:	0800c070 	.word	0x0800c070
 8000c48:	0800bc70 	.word	0x0800bc70
 8000c4c:	0800b870 	.word	0x0800b870
 8000c50:	0800b470 	.word	0x0800b470
 8000c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c56:	4053      	eors	r3, r2
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	0e1b      	lsrs	r3, r3, #24
 8000c5e:	4aa1      	ldr	r2, [pc, #644]	@ (8000ee4 <os_aes+0x6ec>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c66:	4053      	eors	r3, r2
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b9d      	ldr	r3, [pc, #628]	@ (8000ee8 <os_aes+0x6f0>)
 8000c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c78:	4053      	eors	r3, r2
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b99      	ldr	r3, [pc, #612]	@ (8000eec <os_aes+0x6f4>)
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b95      	ldr	r3, [pc, #596]	@ (8000ef0 <os_aes+0x6f8>)
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	0e1b      	lsrs	r3, r3, #24
 8000ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8000ee4 <os_aes+0x6ec>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	6a3a      	ldr	r2, [r7, #32]
 8000cb0:	4053      	eors	r3, r2
 8000cb2:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3320      	adds	r3, #32
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	f4ff aeab 	bcc.w	8000a1a <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b81      	ldr	r3, [pc, #516]	@ (8000ee8 <os_aes+0x6f0>)
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4053      	eors	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8000eec <os_aes+0x6f4>)
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4053      	eors	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b79      	ldr	r3, [pc, #484]	@ (8000ef0 <os_aes+0x6f8>)
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	4053      	eors	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d18:	0e1b      	lsrs	r3, r3, #24
 8000d1a:	4a72      	ldr	r2, [pc, #456]	@ (8000ee4 <os_aes+0x6ec>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	4053      	eors	r3, r2
 8000d24:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee8 <os_aes+0x6f0>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4053      	eors	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b6a      	ldr	r3, [pc, #424]	@ (8000eec <os_aes+0x6f4>)
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4053      	eors	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b66      	ldr	r3, [pc, #408]	@ (8000ef0 <os_aes+0x6f8>)
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4053      	eors	r3, r2
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d62:	0e1b      	lsrs	r3, r3, #24
 8000d64:	4a5f      	ldr	r2, [pc, #380]	@ (8000ee4 <os_aes+0x6ec>)
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4053      	eors	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b5c      	ldr	r3, [pc, #368]	@ (8000ee8 <os_aes+0x6f0>)
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	4053      	eors	r3, r2
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b58      	ldr	r3, [pc, #352]	@ (8000eec <os_aes+0x6f4>)
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	4053      	eors	r3, r2
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	0c1b      	lsrs	r3, r3, #16
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b54      	ldr	r3, [pc, #336]	@ (8000ef0 <os_aes+0x6f8>)
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4053      	eors	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	0e1b      	lsrs	r3, r3, #24
 8000dae:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee4 <os_aes+0x6ec>)
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4053      	eors	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b49      	ldr	r3, [pc, #292]	@ (8000ee8 <os_aes+0x6f0>)
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4053      	eors	r3, r2
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <os_aes+0x6f4>)
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b41      	ldr	r3, [pc, #260]	@ (8000ef0 <os_aes+0x6f8>)
 8000dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4053      	eors	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	0e1b      	lsrs	r3, r3, #24
 8000df8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee4 <os_aes+0x6ec>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4053      	eors	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	0e1b      	lsrs	r3, r3, #24
 8000e0e:	4a39      	ldr	r2, [pc, #228]	@ (8000ef4 <os_aes+0x6fc>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	061b      	lsls	r3, r3, #24
 8000e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e16:	4053      	eors	r3, r2
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <os_aes+0x6fc>)
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e2a:	4053      	eors	r3, r2
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <os_aes+0x6fc>)
 8000e38:	5c9b      	ldrb	r3, [r3, r2]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e3e:	4053      	eors	r3, r2
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <os_aes+0x6fc>)
 8000e4a:	5c9b      	ldrb	r3, [r3, r2]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	4053      	eors	r3, r2
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	0e1b      	lsrs	r3, r3, #24
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <os_aes+0x6fc>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	061b      	lsls	r3, r3, #24
 8000e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e66:	4053      	eors	r3, r2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	0c1b      	lsrs	r3, r3, #16
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <os_aes+0x6fc>)
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7a:	4053      	eors	r3, r2
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <os_aes+0x6fc>)
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e8e:	4053      	eors	r3, r2
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <os_aes+0x6fc>)
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea0:	4053      	eors	r3, r2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0e1b      	lsrs	r3, r3, #24
 8000eae:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <os_aes+0x6fc>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	061b      	lsls	r3, r3, #24
 8000eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb6:	4053      	eors	r3, r2
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0c1b      	lsrs	r3, r3, #16
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <os_aes+0x6fc>)
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eca:	4053      	eors	r3, r2
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <os_aes+0x6fc>)
 8000ed8:	5c9b      	ldrb	r3, [r3, r2]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ede:	4053      	eors	r3, r2
 8000ee0:	e00a      	b.n	8000ef8 <os_aes+0x700>
 8000ee2:	bf00      	nop
 8000ee4:	0800b470 	.word	0x0800b470
 8000ee8:	0800c070 	.word	0x0800c070
 8000eec:	0800bc70 	.word	0x0800bc70
 8000ef0:	0800b870 	.word	0x0800b870
 8000ef4:	0800b370 	.word	0x0800b370
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <os_aes+0x888>)
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	461a      	mov	r2, r3
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	4053      	eors	r3, r2
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	4a5a      	ldr	r2, [pc, #360]	@ (8001080 <os_aes+0x888>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	6a3a      	ldr	r2, [r7, #32]
 8000f1e:	4053      	eors	r3, r2
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b55      	ldr	r3, [pc, #340]	@ (8001080 <os_aes+0x888>)
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	4053      	eors	r3, r2
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b50      	ldr	r3, [pc, #320]	@ (8001080 <os_aes+0x888>)
 8000f40:	5c9b      	ldrb	r3, [r3, r2]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	4053      	eors	r3, r2
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b4b      	ldr	r3, [pc, #300]	@ (8001080 <os_aes+0x888>)
 8000f52:	5c9b      	ldrb	r3, [r3, r2]
 8000f54:	461a      	mov	r2, r3
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d056      	beq.n	8001014 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	111b      	asrs	r3, r3, #4
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d041      	beq.n	8000ffa <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	0fdb      	lsrs	r3, r3, #31
 8000f7a:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	005a      	lsls	r2, r3, #1
 8000f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f82:	0fdb      	lsrs	r3, r3, #31
 8000f84:	4313      	orrs	r3, r2
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	005a      	lsls	r2, r3, #1
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	4313      	orrs	r3, r2
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	0fdb      	lsrs	r3, r3, #31
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <os_aes+0x7bc>
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8000fb2:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1da      	bne.n	8000f76 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <os_aes+0x88c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001084 <os_aes+0x88c>)
 8000fca:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <os_aes+0x88c>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <os_aes+0x88c>)
 8000fd6:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <os_aes+0x88c>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	4053      	eors	r3, r2
 8000fe0:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <os_aes+0x88c>)
 8000fe2:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <os_aes+0x88c>)
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	4053      	eors	r3, r2
 8000fec:	4a25      	ldr	r2, [pc, #148]	@ (8001084 <os_aes+0x88c>)
 8000fee:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ff6:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000ff8:	e4ad      	b.n	8000956 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000ffa:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <os_aes+0x88c>)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8001000:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <os_aes+0x88c>)
 8001002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001004:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8001006:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <os_aes+0x88c>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 800100c:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <os_aes+0x88c>)
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	60d3      	str	r3, [r2, #12]
 8001012:	e094      	b.n	800113e <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d034      	beq.n	8001088 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	2b10      	cmp	r3, #16
 8001022:	bf28      	it	cs
 8001024:	2310      	movcs	r3, #16
 8001026:	b29b      	uxth	r3, r3
 8001028:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e01d      	b.n	800106c <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4413      	add	r3, r2
 8001036:	7819      	ldrb	r1, [r3, #0]
 8001038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103a:	0e1b      	lsrs	r3, r3, #24
 800103c:	b2da      	uxtb	r2, r3
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4403      	add	r3, r0
 8001044:	404a      	eors	r2, r1
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d105      	bne.n	8001066 <os_aes+0x86e>
                            a0 = a1;
 800105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3dd      	bcc.n	8001030 <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <os_aes+0x88c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	4a02      	ldr	r2, [pc, #8]	@ (8001084 <os_aes+0x88c>)
 800107c:	60d3      	str	r3, [r2, #12]
 800107e:	e05e      	b.n	800113e <os_aes+0x946>
 8001080:	0800b370 	.word	0x0800b370
 8001084:	200000d4 	.word	0x200000d4
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8001088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108a:	0e1b      	lsrs	r3, r3, #24
 800108c:	b2da      	uxtb	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a0:	0a1a      	lsrs	r2, r3, #8
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3303      	adds	r3, #3
 80010ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 80010b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b6:	0e1a      	lsrs	r2, r3, #24
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3304      	adds	r3, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c2:	0c1a      	lsrs	r2, r3, #16
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3305      	adds	r3, #5
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ce:	0a1a      	lsrs	r2, r3, #8
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3306      	adds	r3, #6
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3307      	adds	r3, #7
 80010dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	0e1a      	lsrs	r2, r3, #24
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3308      	adds	r3, #8
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	0c1a      	lsrs	r2, r3, #16
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3309      	adds	r3, #9
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	0a1a      	lsrs	r2, r3, #8
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	330a      	adds	r3, #10
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	330b      	adds	r3, #11
 800110a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	0e1a      	lsrs	r2, r3, #24
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	330c      	adds	r3, #12
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	0c1a      	lsrs	r2, r3, #16
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	330d      	adds	r3, #13
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	0a1a      	lsrs	r2, r3, #8
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	330e      	adds	r3, #14
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	330f      	adds	r3, #15
 8001138:	6a3a      	ldr	r2, [r7, #32]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <os_aes+0x95a>
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <os_aes+0x966>
                buf += 16;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3310      	adds	r3, #16
 8001156:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	3b10      	subs	r3, #16
 800115c:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f73f abba 	bgt.w	80008e4 <os_aes+0xec>
        }
        return AESAUX[0];
 8001170:	4b02      	ldr	r3, [pc, #8]	@ (800117c <os_aes+0x984>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	@ 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000d4 	.word	0x200000d4

08001180 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
//    debug_led(0);

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <debug_init+0x10>)
 8001186:	f000 f88d 	bl	80012a4 <debug_str>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800b0ac 	.word	0x0800b0ac

08001194 <debug_led>:

void debug_led (int val) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	2102      	movs	r1, #2
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <debug_led+0x20>)
 80011a6:	f006 fced 	bl	8007b84 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	48000400 	.word	0x48000400

080011b8 <debug_char>:

void debug_char (char c) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 80011c2:	2300      	movs	r3, #0
 80011c4:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	2201      	movs	r2, #1
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <debug_char+0x2c>)
 80011d6:	f008 fee1 	bl	8009f9c <HAL_UART_Transmit>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000047c 	.word	0x2000047c

080011e8 <debug_hex>:

void debug_hex (u1_t b) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    debug_char("0123456789ABCDEF"[b>>4]);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <debug_hex+0x34>)
 80011fc:	5c9b      	ldrb	r3, [r3, r2]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffda 	bl	80011b8 <debug_char>
    debug_char("0123456789ABCDEF"[b&0xF]);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <debug_hex+0x34>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffd2 	bl	80011b8 <debug_char>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800b0dc 	.word	0x0800b0dc

08001220 <debug_uint>:
    }
    debug_char('\r');
    debug_char('\n');
}

void debug_uint (u4_t v) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    for(s1_t n=24; n>=0; n-=8) {
 8001228:	2318      	movs	r3, #24
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e00c      	b.n	8001248 <debug_uint+0x28>
        debug_hex(v>>n);
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffd4 	bl	80011e8 <debug_hex>
    for(s1_t n=24; n>=0; n-=8) {
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	3b08      	subs	r3, #8
 8001244:	b2db      	uxtb	r3, r3
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	daee      	bge.n	800122e <debug_uint+0xe>
    }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <debug_int>:

void debug_int (s4_t v) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b08a      	sub	sp, #40	@ 0x28
 800125e:	af02      	add	r7, sp, #8
 8001260:	6078      	str	r0, [r7, #4]
    char buf[10], *p = buf;
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	61fb      	str	r3, [r7, #28]
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 8001268:	f107 000c 	add.w	r0, r7, #12
 800126c:	2300      	movs	r3, #0
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	230a      	movs	r3, #10
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	210a      	movs	r1, #10
 800127a:	f000 f852 	bl	8001322 <debug_fmt>
 800127e:	61b8      	str	r0, [r7, #24]
    while(n--)
 8001280:	e006      	b.n	8001290 <debug_int+0x36>
        debug_char(*p++);
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	61fa      	str	r2, [r7, #28]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff94 	bl	80011b8 <debug_char>
    while(n--)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	61ba      	str	r2, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f3      	bne.n	8001282 <debug_int+0x28>
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <debug_str>:

void debug_str (const char* str) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    while(*str) {
 80012ac:	e006      	b.n	80012bc <debug_str+0x18>
        debug_char(*str++);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff7e 	bl	80011b8 <debug_char>
    while(*str) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f4      	bne.n	80012ae <debug_str+0xa>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <debug_val>:

void debug_val (const char* label, u4_t val) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
    debug_str(label);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffe3 	bl	80012a4 <debug_str>
    debug_uint(val);
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f7ff ff9e 	bl	8001220 <debug_uint>
    debug_char('\r');
 80012e4:	200d      	movs	r0, #13
 80012e6:	f7ff ff67 	bl	80011b8 <debug_char>
    debug_char('\n');
 80012ea:	200a      	movs	r0, #10
 80012ec:	f7ff ff64 	bl	80011b8 <debug_char>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <debug_valdec>:

void debug_valdec (const char* label, s4_t val) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    debug_str(label);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffce 	bl	80012a4 <debug_str>
    debug_int(val);
 8001308:	6838      	ldr	r0, [r7, #0]
 800130a:	f7ff ffa6 	bl	800125a <debug_int>
    debug_char('\r');
 800130e:	200d      	movs	r0, #13
 8001310:	f7ff ff52 	bl	80011b8 <debug_char>
    debug_char('\n');
 8001314:	200a      	movs	r0, #10
 8001316:	f7ff ff4f 	bl	80011b8 <debug_char>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <debug_fmt>:

int debug_fmt (char* buf, int max, s4_t val, int base, int width, char pad) {
 8001322:	b480      	push	{r7}
 8001324:	b093      	sub	sp, #76	@ 0x4c
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
    char num[33], *p = num, *b = buf;
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40
    u4_t m, v;
    // special handling of negative decimals
    v = (base == 10 && val < 0) ? -val : val;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b0a      	cmp	r3, #10
 800133e:	d105      	bne.n	800134c <debug_fmt+0x2a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	da02      	bge.n	800134c <debug_fmt+0x2a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	425b      	negs	r3, r3
 800134a:	e000      	b.n	800134e <debug_fmt+0x2c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // generate digits backwards
    do {
        *p++ = ((m=v%base) <= 9) ? m+'0' : m+'A'-10;
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001354:	fbb3 f1f2 	udiv	r1, r3, r2
 8001358:	fb01 f202 	mul.w	r2, r1, r2
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001362:	2b09      	cmp	r3, #9
 8001364:	d804      	bhi.n	8001370 <debug_fmt+0x4e>
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3330      	adds	r3, #48	@ 0x30
 800136c:	b2da      	uxtb	r2, r3
 800136e:	e003      	b.n	8001378 <debug_fmt+0x56>
 8001370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001372:	b2db      	uxtb	r3, r3
 8001374:	3337      	adds	r3, #55	@ 0x37
 8001376:	b2da      	uxtb	r2, r3
 8001378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800137a:	1c59      	adds	r1, r3, #1
 800137c:	6479      	str	r1, [r7, #68]	@ 0x44
 800137e:	701a      	strb	r2, [r3, #0]
    } while( v /= base );
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800138a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1df      	bne.n	8001350 <debug_fmt+0x2e>
    // prefix negative decimals with '-'
    if(base == 10 && val < 0) {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d10e      	bne.n	80013b4 <debug_fmt+0x92>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da0b      	bge.n	80013b4 <debug_fmt+0x92>
        *p++ = '-';
 800139c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80013a2:	222d      	movs	r2, #45	@ 0x2d
 80013a4:	701a      	strb	r2, [r3, #0]
    }
    // add leading zeroes or spaces
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 80013a6:	e005      	b.n	80013b4 <debug_fmt+0x92>
        *b++ = pad;
 80013a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80013ae:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80013b2:	701a      	strb	r2, [r3, #0]
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 80013b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad2      	subs	r2, r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	429a      	cmp	r2, r3
 80013c0:	da0a      	bge.n	80013d8 <debug_fmt+0xb6>
 80013c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80013ce:	1acb      	subs	r3, r1, r3
 80013d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80013d2:	1acb      	subs	r3, r1, r3
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbe7      	blt.n	80013a8 <debug_fmt+0x86>
    }
    // copy digits and sign forwards
    do *b++ = *--p;
 80013d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013da:	3b01      	subs	r3, #1
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80013de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80013e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	701a      	strb	r2, [r3, #0]
    while( b-buf < max && p > num );
 80013ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dd04      	ble.n	8001400 <debug_fmt+0xde>
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8eb      	bhi.n	80013d8 <debug_fmt+0xb6>
    // return number of characters written
    return b - buf;
 8001400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	374c      	adds	r7, #76	@ 0x4c
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <debug_event>:

void debug_event (int ev) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b11      	cmp	r3, #17
 8001420:	d804      	bhi.n	800142c <debug_event+0x18>
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <debug_event+0x34>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	e000      	b.n	800142e <debug_event+0x1a>
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <debug_event+0x38>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff38 	bl	80012a4 <debug_str>
    debug_char('\r');
 8001434:	200d      	movs	r0, #13
 8001436:	f7ff febf 	bl	80011b8 <debug_char>
    debug_char('\n');
 800143a:	200a      	movs	r0, #10
 800143c:	f7ff febc 	bl	80011b8 <debug_char>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	0800b0f0 	.word	0x0800b0f0

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <MX_GPIO_Init+0xe4>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <MX_GPIO_Init+0xe4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a26      	ldr	r2, [pc, #152]	@ (8001534 <MX_GPIO_Init+0xe4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <MX_GPIO_Init+0xe4>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f648 0180 	movw	r1, #34944	@ 0x8880
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b8:	f006 fb64 	bl	8007b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	481d      	ldr	r0, [pc, #116]	@ (8001538 <MX_GPIO_Init+0xe8>)
 80014c2:	f006 fb5f 	bl	8007b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 80014c6:	f648 0380 	movw	r3, #34944	@ 0x8880
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f006 f9e5 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	480e      	ldr	r0, [pc, #56]	@ (8001538 <MX_GPIO_Init+0xe8>)
 80014fe:	f006 f9d7 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001502:	23c0      	movs	r3, #192	@ 0xc0
 8001504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001506:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4808      	ldr	r0, [pc, #32]	@ (8001538 <MX_GPIO_Init+0xe8>)
 8001518:	f006 f9ca 	bl	80078b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2017      	movs	r0, #23
 8001522:	f006 f910 	bl	8007746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001526:	2017      	movs	r0, #23
 8001528:	f006 f929 	bl	800777e <HAL_NVIC_EnableIRQ>

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <hal_io_init>:


// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	461a      	mov	r2, r3
 800156e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f006 fb05 	bl	8007b84 <HAL_GPIO_WritePin>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001582:	b580      	push	{r7, lr}
 8001584:	b08c      	sub	sp, #48	@ 0x30
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <hal_pin_rst+0x16>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d116      	bne.n	80015c6 <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159c:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f006 f97e 	bl	80078b0 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	461a      	mov	r2, r3
 80015b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f006 fae0 	bl	8007b84 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 80015c4:	e00e      	b.n	80015e4 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80015c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015ca:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015de:	f006 f967 	bl	80078b0 <HAL_GPIO_Init>
    }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b40      	cmp	r3, #64	@ 0x40
 80015fa:	d102      	bne.n	8001602 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f004 f979 	bl	80058f4 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	2b80      	cmp	r3, #128	@ 0x80
 8001606:	d102      	bne.n	800160e <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f004 f973 	bl	80058f4 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 800162e:	2300      	movs	r3, #0
 8001630:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001632:	2300      	movs	r3, #0
 8001634:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 800163a:	f107 0208 	add.w	r2, r7, #8
 800163e:	f107 010c 	add.w	r1, r7, #12
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	4804      	ldr	r0, [pc, #16]	@ (800165c <hal_spi+0x38>)
 800164c:	f007 fcf1 	bl	8009032 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001650:	7a3b      	ldrb	r3, [r7, #8]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000380 	.word	0x20000380

08001660 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <hal_ticks>:

u4_t hal_ticks () {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001676:	f000 f8b9 	bl	80017ec <hal_disableIRQs>
    u4_t t = HAL.ticks;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <hal_ticks+0x58>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <hal_ticks+0x5c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001688:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <hal_ticks+0x5c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b02      	cmp	r3, #2
 8001694:	d10d      	bne.n	80016b2 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <hal_ticks+0x5c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <hal_ticks+0x5c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	807b      	strh	r3, [r7, #2]
    		t++;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3301      	adds	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 80016b2:	f000 f8ab 	bl	800180c <hal_enableIRQs>
    return (t<<16)|cnt;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	4313      	orrs	r3, r2
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000194 	.word	0x20000194
 80016cc:	20000430 	.word	0x20000430

080016d0 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 80016d8:	f7ff ffca 	bl	8001670 <hal_ticks>
 80016dc:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dc01      	bgt.n	80016f0 <deltaticks+0x20>
 80016ec:	2300      	movs	r3, #0
 80016ee:	e008      	b.n	8001702 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	141b      	asrs	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <deltaticks+0x2e>
 80016f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fc:	e001      	b.n	8001702 <deltaticks+0x32>
    return (u2_t)d;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	b29b      	uxth	r3, r3
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001712:	bf00      	nop
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffdb 	bl	80016d0 <deltaticks>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f9      	bne.n	8001714 <hal_waitUntil+0xa>
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <hal_checkTimer+0x78>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <hal_checkTimer+0x78>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0202 	bic.w	r2, r2, #2
 8001742:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffc3 	bl	80016d0 <deltaticks>
 800174a:	4603      	mov	r3, r0
 800174c:	81fb      	strh	r3, [r7, #14]
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d809      	bhi.n	8001768 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <hal_checkTimer+0x78>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <hal_checkTimer+0x78>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0202 	bic.w	r2, r2, #2
 8001762:	60da      	str	r2, [r3, #12]
        return 1;
 8001764:	2301      	movs	r3, #1
 8001766:	e018      	b.n	800179a <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <hal_checkTimer+0x78>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800176e:	89fa      	ldrh	r2, [r7, #14]
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <hal_checkTimer+0x78>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	440a      	add	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <hal_checkTimer+0x78>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <hal_checkTimer+0x78>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0202 	orr.w	r2, r2, #2
 8001786:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <hal_checkTimer+0x78>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <hal_checkTimer+0x78>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	621a      	str	r2, [r3, #32]
        return 0;
 8001798:	2300      	movs	r3, #0
    }
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000430 	.word	0x20000430

080017a8 <HAL_TIM_PeriodElapsedCallback>:

//Callback deja renseigne dans le main.c
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d104      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017c4:	6053      	str	r3, [r2, #4]
    }

	if(htim == &htim6) HAL_ADC_Start_IT(&hadc1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d102      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017d0:	f004 ffba 	bl	8006748 <HAL_ADC_Start_IT>

}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000430 	.word	0x20000430
 80017e0:	20000194 	.word	0x20000194
 80017e4:	200003e4 	.word	0x200003e4
 80017e8:	20000070 	.word	0x20000070

080017ec <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <hal_disableIRQs+0x1c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a03      	ldr	r2, [pc, #12]	@ (8001808 <hal_disableIRQs+0x1c>)
 80017fc:	6013      	str	r3, [r2, #0]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000194 	.word	0x20000194

0800180c <hal_enableIRQs>:

void hal_enableIRQs () {
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <hal_enableIRQs+0x24>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3b01      	subs	r3, #1
 8001816:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <hal_enableIRQs+0x24>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <hal_enableIRQs+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001822:	b662      	cpsie	i
}
 8001824:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000194 	.word	0x20000194

08001834 <hal_sleep>:

void hal_sleep () {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001838:	bf30      	wfi
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001848:	2208      	movs	r2, #8
 800184a:	2100      	movs	r1, #0
 800184c:	4807      	ldr	r0, [pc, #28]	@ (800186c <hal_init+0x28>)
 800184e:	f009 fbe6 	bl	800b01e <memset>
    hal_disableIRQs();
 8001852:	f7ff ffcb 	bl	80017ec <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 8001856:	f7ff fe71 	bl	800153c <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 800185a:	f7ff fedc 	bl	8001616 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 800185e:	f7ff feff 	bl	8001660 <hal_time_init>
    hal_enableIRQs();
 8001862:	f7ff ffd3 	bl	800180c <hal_enableIRQs>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000194 	.word	0x20000194

08001870 <hal_failed>:

void hal_failed () {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001874:	f7ff ffba 	bl	80017ec <hal_disableIRQs>
    hal_sleep();
 8001878:	f7ff ffdc 	bl	8001834 <hal_sleep>
    while(1);
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <hal_failed+0xc>

08001880 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	460a      	mov	r2, r1
 80018f2:	80fb      	strh	r3, [r7, #6]
 80018f4:	4613      	mov	r3, r2
 80018f6:	717b      	strb	r3, [r7, #5]
 80018f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fc:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001900:	b21a      	sxth	r2, r3
 8001902:	797b      	ldrb	r3, [r7, #5]
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21b      	sxth	r3, r3
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	09db      	lsrs	r3, r3, #7
 8001928:	b29b      	uxth	r3, r3
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	6039      	str	r1, [r7, #0]
 8001944:	80fb      	strh	r3, [r7, #6]
 8001946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	b21a      	sxth	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	01db      	lsls	r3, r3, #7
 8001954:	b21b      	sxth	r3, r3
 8001956:	4313      	orrs	r3, r2
 8001958:	b21b      	sxth	r3, r3
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	6039      	str	r1, [r7, #0]
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b21a      	sxth	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b21b      	sxth	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <updr2rps+0x20>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	0800c470 	.word	0x0800c470

080019d8 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ffe5 	bl	80019b4 <updr2rps>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ffa3 	bl	800193a <setNocrc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <decDR+0x2c>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	2bff      	cmp	r3, #255	@ 0xff
 8001a12:	d003      	beq.n	8001a1c <decDR+0x1c>
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	e000      	b.n	8001a1e <decDR+0x1e>
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	0800c470 	.word	0x0800c470

08001a30 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <validDR+0x28>)
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	2bff      	cmp	r3, #255	@ 0xff
 8001a44:	bf14      	ite	ne
 8001a46:	2301      	movne	r3, #1
 8001a48:	2300      	moveq	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	0800c470 	.word	0x0800c470

08001a5c <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	460a      	mov	r2, r1
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	71bb      	strb	r3, [r7, #6]
 8001a6c:	e005      	b.n	8001a7a <lowerDR+0x1e>
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ffc5 	bl	8001a00 <decDR>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	79bb      	ldrb	r3, [r7, #6]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	71ba      	strb	r2, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f4      	bne.n	8001a6e <lowerDR+0x12>
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	b29b      	uxth	r3, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3303      	adds	r3, #3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	061b      	lsls	r3, r3, #24
 8001ae4:	4313      	orrs	r3, r2
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3303      	adds	r3, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3302      	adds	r3, #2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	4313      	orrs	r3, r2
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	0a1a      	lsrs	r2, r3, #8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	0e1a      	lsrs	r2, r3, #24
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3303      	adds	r3, #3
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	0a1a      	lsrs	r2, r3, #8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	0c1a      	lsrs	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	0e1b      	lsrs	r3, r3, #24
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	701a      	strb	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8001be2:	23ff      	movs	r3, #255	@ 0xff
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001bee:	b480      	push	{r7}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8001bfc:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001c00:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	e026      	b.n	8001c56 <os_crc16+0x68>
        remainder ^= data[i] << 8;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c18:	4053      	eors	r3, r2
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001c1e:	2308      	movs	r3, #8
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e012      	b.n	8001c4a <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8001c24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da08      	bge.n	8001c3e <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 8001c2c:	8afb      	ldrh	r3, [r7, #22]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c36:	4053      	eors	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	82fb      	strh	r3, [r7, #22]
 8001c3c:	e002      	b.n	8001c44 <os_crc16+0x56>
            else 
                remainder <<= 1;
 8001c3e:	8afb      	ldrh	r3, [r7, #22]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e9      	bne.n	8001c24 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	3301      	adds	r3, #1
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3d4      	bcc.n	8001c08 <os_crc16+0x1a>
        }
    }
    return remainder;
 8001c5e:	8afb      	ldrh	r3, [r7, #22]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4810      	ldr	r0, [pc, #64]	@ (8001cc0 <micB0+0x54>)
 8001c80:	f009 f9cd 	bl	800b01e <memset>
    AESaux[0]  = 0x49;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <micB0+0x54>)
 8001c86:	2249      	movs	r2, #73	@ 0x49
 8001c88:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <micB0+0x58>)
 8001c98:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <micB0+0x5c>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <micB0+0x60>)
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff57 	bl	8001b5a <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <micB0+0x64>)
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff52 	bl	8001b5a <os_wlsbf4>
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000d4 	.word	0x200000d4
 8001cc4:	200000d9 	.word	0x200000d9
 8001cc8:	200000e3 	.word	0x200000e3
 8001ccc:	200000da 	.word	0x200000da
 8001cd0:	200000de 	.word	0x200000de

08001cd4 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	68b8      	ldr	r0, [r7, #8]
 8001cea:	f7ff ffbf 	bl	8001c6c <micB0>
    os_copyMem(AESkey,key,16);
 8001cee:	2210      	movs	r2, #16
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <aes_verifyMic+0x54>)
 8001cf4:	f009 f9c0 	bl	800b078 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7fe fd79 	bl	80007f8 <os_aes>
 8001d06:	4604      	mov	r4, r0
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	6a3a      	ldr	r2, [r7, #32]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff feef 	bl	8001af2 <os_rmsbf4>
 8001d14:	4603      	mov	r3, r0
 8001d16:	429c      	cmp	r4, r3
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	200000e4 	.word	0x200000e4

08001d2c <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f7ff ff93 	bl	8001c6c <micB0>
    os_copyMem(AESkey,key,16);
 8001d46:	2210      	movs	r2, #16
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <aes_appendMic+0x4c>)
 8001d4c:	f009 f994 	bl	800b078 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	18d4      	adds	r4, r2, r3
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6a39      	ldr	r1, [r7, #32]
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f7fe fd4a 	bl	80007f8 <os_aes>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff ff17 	bl	8001b9c <os_wmsbf4>
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200000e4 	.word	0x200000e4

08001d7c <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001d86:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <aes_appendMic0+0x38>)
 8001d88:	f002 fe38 	bl	80049fc <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	18d4      	adds	r4, r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f7fe fd2c 	bl	80007f8 <os_aes>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff fef9 	bl	8001b9c <os_wmsbf4>
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200000e4 	.word	0x200000e4

08001db8 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001dc2:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <aes_verifyMic0+0x40>)
 8001dc4:	f002 fe1a 	bl	80049fc <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f7fe fd11 	bl	80007f8 <os_aes>
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe87 	bl	8001af2 <os_rmsbf4>
 8001de4:	4603      	mov	r3, r0
 8001de6:	429c      	cmp	r4, r3
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	200000e4 	.word	0x200000e4

08001dfc <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001e06:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <aes_encrypt+0x28>)
 8001e08:	f002 fdf8 	bl	80049fc <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe fcef 	bl	80007f8 <os_aes>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200000e4 	.word	0x200000e4

08001e28 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	dd29      	ble.n	8001e90 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4815      	ldr	r0, [pc, #84]	@ (8001e98 <aes_cipher+0x70>)
 8001e42:	f009 f8ec 	bl	800b01e <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <aes_cipher+0x74>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <aes_cipher+0x70>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <aes_cipher+0x78>)
 8001e60:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <aes_cipher+0x7c>)
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe77 	bl	8001b5a <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <aes_cipher+0x80>)
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fe72 	bl	8001b5a <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8001e76:	2210      	movs	r2, #16
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	480c      	ldr	r0, [pc, #48]	@ (8001eac <aes_cipher+0x84>)
 8001e7c:	f009 f8fc 	bl	800b078 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	2004      	movs	r0, #4
 8001e8a:	f7fe fcb5 	bl	80007f8 <os_aes>
 8001e8e:	e000      	b.n	8001e92 <aes_cipher+0x6a>
        return;
 8001e90:	bf00      	nop
}
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200000d4 	.word	0x200000d4
 8001e9c:	200000e3 	.word	0x200000e3
 8001ea0:	200000d9 	.word	0x200000d9
 8001ea4:	200000da 	.word	0x200000da
 8001ea8:	200000de 	.word	0x200000de
 8001eac:	200000e4 	.word	0x200000e4

08001eb0 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f009 f8aa 	bl	800b01e <memset>
    nwkkey[0] = 0x01;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	2206      	movs	r2, #6
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f009 f8cd 	bl	800b078 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	89fa      	ldrh	r2, [r7, #14]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe20 	bl	8001b2c <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001eec:	2210      	movs	r2, #16
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	f009 f8c1 	bl	800b078 <memcpy>
    artkey[0] = 0x02;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001efc:	4809      	ldr	r0, [pc, #36]	@ (8001f24 <aes_sessKeys+0x74>)
 8001efe:	f002 fd7d 	bl	80049fc <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001f02:	2210      	movs	r2, #16
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe fc76 	bl	80007f8 <os_aes>
    os_getDevKey(AESkey);
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <aes_sessKeys+0x74>)
 8001f0e:	f002 fd75 	bl	80049fc <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001f12:	2210      	movs	r2, #16
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7fe fc6e 	bl	80007f8 <os_aes>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200000e4 	.word	0x200000e4

08001f28 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fca3 	bl	8001880 <getSf>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fcad 	bl	80018a0 <getBw>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <getSensitivity+0x3c>)
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	4413      	add	r3, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3b8d      	subs	r3, #141	@ 0x8d
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	0800c48c 	.word	0x0800c48c

08001f68 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	80fb      	strh	r3, [r7, #6]
 8001f74:	4613      	mov	r3, r2
 8001f76:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fc90 	bl	80018a0 <getBw>
 8001f80:	4603      	mov	r3, r0
 8001f82:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fc7a 	bl	8001880 <getSf>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001f90:	7abb      	ldrb	r3, [r7, #10]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001f9a:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8002094 <calcAirTime+0x12c>)
 8001fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa8:	1312      	asrs	r2, r2, #12
 8001faa:	17db      	asrs	r3, r3, #31
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	e06d      	b.n	800208c <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001fb0:	7abb      	ldrb	r3, [r7, #10]
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001fba:	7abb      	ldrb	r3, [r7, #10]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d901      	bls.n	8001fc4 <calcAirTime+0x5c>
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	e000      	b.n	8001fc6 <calcAirTime+0x5e>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	7dfa      	ldrb	r2, [r7, #23]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001fcc:	797b      	ldrb	r3, [r7, #5]
 8001fce:	00da      	lsls	r2, r3, #3
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f103 041c 	add.w	r4, r3, #28
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fc9d 	bl	800191a <getNocrc>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <calcAirTime+0x82>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <calcAirTime+0x84>
 8001fea:	2310      	movs	r3, #16
 8001fec:	441c      	add	r4, r3
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fcb9 	bl	8001968 <getIh>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <calcAirTime+0x98>
 8001ffc:	2314      	movs	r3, #20
 8001ffe:	e000      	b.n	8002002 <calcAirTime+0x9a>
 8002000:	2300      	movs	r3, #0
 8002002:	1ae3      	subs	r3, r4, r3
 8002004:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dd15      	ble.n	8002038 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 800200c:	7a7a      	ldrb	r2, [r7, #9]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	1e5a      	subs	r2, r3, #1
 8002014:	7a7b      	ldrb	r3, [r7, #9]
 8002016:	fb92 f3f3 	sdiv	r3, r2, r3
 800201a:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fc50 	bl	80018c4 <getCr>
 8002024:	4603      	mov	r3, r0
 8002026:	1d5a      	adds	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	3308      	adds	r3, #8
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e001      	b.n	800203c <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8002038:	2308      	movs	r3, #8
 800203a:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3331      	adds	r3, #49	@ 0x31
 8002042:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8002044:	7aba      	ldrb	r2, [r7, #10]
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8002050:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8002054:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d907      	bls.n	800206c <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	3b04      	subs	r3, #4
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	fa42 f303 	asr.w	r3, r2, r3
 8002066:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8002068:	2304      	movs	r3, #4
 800206a:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002078:	fb03 f202 	mul.w	r2, r3, r2
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	0fd9      	lsrs	r1, r3, #31
 8002080:	440b      	add	r3, r1
 8002082:	105b      	asrs	r3, r3, #1
 8002084:	441a      	add	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	14f8b589 	.word	0x14f8b589

08002098 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	460a      	mov	r2, r1
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	4613      	mov	r3, r2
 80020a6:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <calcRxWindow+0xa0>)
 80020b0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80020b4:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <calcRxWindow+0xa0>)
 80020b8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e011      	b.n	80020e4 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <calcRxWindow+0xa0>)
 80020c2:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80020c6:	461a      	mov	r2, r3
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	11db      	asrs	r3, r3, #7
 80020d0:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <calcRxWindow+0xa0>)
 80020d4:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80020d8:	461a      	mov	r2, r3
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	11db      	asrs	r3, r3, #7
 80020e2:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 80020e4:	2305      	movs	r3, #5
 80020e6:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <calcRxWindow+0xa0>)
 80020ea:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <calcRxWindow+0xa0>)
 80020f2:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	4a0e      	ldr	r2, [pc, #56]	@ (800213c <calcRxWindow+0xa4>)
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	fb92 f3f3 	sdiv	r3, r2, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3305      	adds	r3, #5
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <calcRxWindow+0xa0>)
 8002116:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3b08      	subs	r3, #8
 800211c:	79ba      	ldrb	r2, [r7, #6]
 800211e:	4907      	ldr	r1, [pc, #28]	@ (800213c <calcRxWindow+0xa4>)
 8002120:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002124:	fb03 f202 	mul.w	r2, r3, r2
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4413      	add	r3, r2
}
 800212c:	4618      	mov	r0, r3
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	2000019c 	.word	0x2000019c
 800213c:	0800c4b0 	.word	0x0800c4b0

08002140 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8002140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002144:	b087      	sub	sp, #28
 8002146:	af00      	add	r7, sp, #0
 8002148:	4606      	mov	r6, r0
 800214a:	4608      	mov	r0, r1
 800214c:	4631      	mov	r1, r6
 800214e:	73f9      	strb	r1, [r7, #15]
 8002150:	4601      	mov	r1, r0
 8002152:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8002154:	7bb9      	ldrb	r1, [r7, #14]
 8002156:	2900      	cmp	r1, #0
 8002158:	d014      	beq.n	8002184 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 800215a:	493b      	ldr	r1, [pc, #236]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 800215c:	2000      	movs	r0, #0
 800215e:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8002162:	4939      	ldr	r1, [pc, #228]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 8002164:	2000      	movs	r0, #0
 8002166:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 800216a:	4937      	ldr	r1, [pc, #220]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 800216c:	2000      	movs	r0, #0
 800216e:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002172:	4935      	ldr	r1, [pc, #212]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 8002174:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8002178:	f041 010c 	orr.w	r1, r1, #12
 800217c:	b2c8      	uxtb	r0, r1
 800217e:	4932      	ldr	r1, [pc, #200]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 8002180:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8002184:	2142      	movs	r1, #66	@ 0x42
 8002186:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8002188:	7bf9      	ldrb	r1, [r7, #15]
 800218a:	2000      	movs	r0, #0
 800218c:	460c      	mov	r4, r1
 800218e:	4605      	mov	r5, r0
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f04f 0a00 	mov.w	sl, #0
 8002198:	f04f 0b00 	mov.w	fp, #0
 800219c:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80021a0:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80021a4:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80021a8:	4650      	mov	r0, sl
 80021aa:	4659      	mov	r1, fp
 80021ac:	1b02      	subs	r2, r0, r4
 80021ae:	eb61 0305 	sbc.w	r3, r1, r5
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80021c0:	0090      	lsls	r0, r2, #2
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	eb12 0804 	adds.w	r8, r2, r4
 80021ca:	eb43 0905 	adc.w	r9, r3, r5
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80021da:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80021de:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80021e2:	4690      	mov	r8, r2
 80021e4:	4699      	mov	r9, r3
 80021e6:	4642      	mov	r2, r8
 80021e8:	464b      	mov	r3, r9
 80021ea:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80021ee:	1851      	adds	r1, r2, r1
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	f143 0300 	adc.w	r3, r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002204:	f7fd ffe2 	bl	80001cc <__aeabi_ldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3305      	adds	r3, #5
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 800221a:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 8002220:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002224:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 8002228:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 800222a:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800222e:	3b08      	subs	r3, #8
 8002230:	6979      	ldr	r1, [r7, #20]
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	4a03      	ldr	r2, [pc, #12]	@ (8002248 <calcBcnRxWindowFromMillis+0x108>)
 800223a:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002248:	2000019c 	.word	0x2000019c

0800224c <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8002254:	2210      	movs	r2, #16
 8002256:	2100      	movs	r1, #0
 8002258:	482e      	ldr	r0, [pc, #184]	@ (8002314 <rxschedInit+0xc8>)
 800225a:	f008 fee0 	bl	800b01e <memset>
    os_clearMem(LMIC.frame+8,8);
 800225e:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <rxschedInit+0xcc>)
 8002260:	2208      	movs	r2, #8
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f008 feda 	bl	800b01e <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 800226a:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <rxschedInit+0xd0>)
 800226c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002270:	4619      	mov	r1, r3
 8002272:	482b      	ldr	r0, [pc, #172]	@ (8002320 <rxschedInit+0xd4>)
 8002274:	f7ff fc71 	bl	8001b5a <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8002278:	4a2a      	ldr	r2, [pc, #168]	@ (8002324 <rxschedInit+0xd8>)
 800227a:	4b28      	ldr	r3, [pc, #160]	@ (800231c <rxschedInit+0xd0>)
 800227c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f7ff fc69 	bl	8001b5a <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8002288:	2210      	movs	r2, #16
 800228a:	4925      	ldr	r1, [pc, #148]	@ (8002320 <rxschedInit+0xd4>)
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fab3 	bl	80007f8 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8002298:	4821      	ldr	r0, [pc, #132]	@ (8002320 <rxschedInit+0xd4>)
 800229a:	f7ff fbf8 	bl	8001a8e <os_rlsbf2>
 800229e:	4603      	mov	r3, r0
 80022a0:	4619      	mov	r1, r3
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	f1c3 0307 	rsb	r3, r3, #7
 80022a8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80022ac:	fa42 f303 	asr.w	r3, r2, r3
 80022b0:	400b      	ands	r3, r1
 80022b2:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <rxschedInit+0xd0>)
 80022b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 80022ba:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80022cc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022d0:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685c      	ldr	r4, [r3, #4]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2201      	movs	r2, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3302      	adds	r3, #2
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f7ff fecf 	bl	8002098 <calcRxWindow>
 80022fa:	4603      	mov	r3, r0
 80022fc:	1ae2      	subs	r2, r4, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <rxschedInit+0xd0>)
 8002304:	7c1a      	ldrb	r2, [r3, #16]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	70da      	strb	r2, [r3, #3]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	bf00      	nop
 8002314:	200000e4 	.word	0x200000e4
 8002318:	200002ec 	.word	0x200002ec
 800231c:	2000019c 	.word	0x2000019c
 8002320:	200002e4 	.word	0x200002e4
 8002324:	200002e8 	.word	0x200002e8

08002328 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	db01      	blt.n	8002342 <rxschedNext+0x1a>
        return 1;
 800233e:	2301      	movs	r3, #1
 8002340:	e03a      	b.n	80023b8 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	789b      	ldrb	r3, [r3, #2]
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da01      	bge.n	8002354 <rxschedNext+0x2c>
        return 0;
 8002350:	2300      	movs	r3, #0
 8002352:	e031      	b.n	80023b8 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	461a      	mov	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	4093      	lsls	r3, r2
 800235e:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	7bbb      	ldrb	r3, [r7, #14]
 8002364:	4413      	add	r3, r2
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	709a      	strb	r2, [r3, #2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	789b      	ldrb	r3, [r3, #2]
 8002372:	b25b      	sxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	da01      	bge.n	800237c <rxschedNext+0x54>
        return 0;
 8002378:	2300      	movs	r3, #0
 800237a:	e01d      	b.n	80023b8 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	049b      	lsls	r3, r3, #18
 800238a:	11db      	asrs	r3, r3, #7
 800238c:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	4413      	add	r3, r2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3302      	adds	r3, #2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f7ff fe79 	bl	8002098 <calcRxWindow>
 80023a6:	4603      	mov	r3, r0
 80023a8:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <rxschedNext+0x98>)
 80023b0:	7c1a      	ldrb	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	70da      	strb	r2, [r3, #3]
    goto again;
 80023b6:	e7bc      	b.n	8002332 <rxschedNext+0xa>
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	2000019c 	.word	0x2000019c

080023c4 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 80023ce:	f003 fa6b 	bl	80058a8 <radio_rand1>
 80023d2:	4603      	mov	r3, r0
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21c      	sxth	r4, r3
 80023d8:	f003 fa66 	bl	80058a8 <radio_rand1>
 80023dc:	4603      	mov	r3, r0
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4323      	orrs	r3, r4
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 80023e6:	897b      	ldrh	r3, [r7, #10]
 80023e8:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80023f0:	dd0b      	ble.n	800240a <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 80023f2:	897b      	ldrh	r3, [r7, #10]
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <rndDelay+0x78>)
 80023f6:	fba2 1203 	umull	r1, r2, r2, r3
 80023fa:	0ad2      	lsrs	r2, r2, #11
 80023fc:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002400:	fb01 f202 	mul.w	r2, r1, r2
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002410:	897b      	ldrh	r3, [r7, #10]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	79fa      	ldrb	r2, [r7, #7]
 8002416:	fbb3 f1f2 	udiv	r1, r3, r2
 800241a:	fb01 f202 	mul.w	r2, r1, r2
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    return delay;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ffb8 	bl	80023c4 <rndDelay>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 800245c:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <txDelay+0x58>)
 800245e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <txDelay+0x34>
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <txDelay+0x58>)
 8002468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	dd0c      	ble.n	800248e <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <txDelay+0x58>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <txDelay+0x58>)
 800247e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <txDelay+0x58>)
 800248a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000019c 	.word	0x2000019c

0800249c <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	460a      	mov	r2, r1
 80024a6:	71fb      	strb	r3, [r7, #7]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 80024ac:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <setDrJoin+0x24>)
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	2000019c 	.word	0x2000019c

080024c4 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	460b      	mov	r3, r1
 80024d0:	71bb      	strb	r3, [r7, #6]
 80024d2:	4613      	mov	r3, r2
 80024d4:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 80024d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024da:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80024de:	d003      	beq.n	80024e8 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 80024e0:	4a0e      	ldr	r2, [pc, #56]	@ (800251c <setDrTxpow+0x58>)
 80024e2:	797b      	ldrb	r3, [r7, #5]
 80024e4:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <setDrTxpow+0x58>)
 80024ea:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80024ee:	79ba      	ldrb	r2, [r7, #6]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d00c      	beq.n	800250e <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 80024f4:	4a09      	ldr	r2, [pc, #36]	@ (800251c <setDrTxpow+0x58>)
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <setDrTxpow+0x58>)
 80024fe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002502:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <setDrTxpow+0x58>)
 800250a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	2000019c 	.word	0x2000019c

08002520 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	2100      	movs	r1, #0
 800252e:	483a      	ldr	r0, [pc, #232]	@ (8002618 <initDefaultChannels+0xf8>)
 8002530:	f008 fd75 	bl	800b01e <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002534:	2220      	movs	r2, #32
 8002536:	2100      	movs	r1, #0
 8002538:	4838      	ldr	r0, [pc, #224]	@ (800261c <initDefaultChannels+0xfc>)
 800253a:	f008 fd70 	bl	800b01e <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800253e:	2220      	movs	r2, #32
 8002540:	2100      	movs	r1, #0
 8002542:	4837      	ldr	r0, [pc, #220]	@ (8002620 <initDefaultChannels+0x100>)
 8002544:	f008 fd6b 	bl	800b01e <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002548:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <initDefaultChannels+0x104>)
 800254a:	223f      	movs	r2, #63	@ 0x3f
 800254c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <initDefaultChannels+0x3a>
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <initDefaultChannels+0x3c>
 800255a:	2306      	movs	r3, #6
 800255c:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800255e:	2300      	movs	r3, #0
 8002560:	73bb      	strb	r3, [r7, #14]
 8002562:	e014      	b.n	800258e <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	492f      	ldr	r1, [pc, #188]	@ (8002628 <initDefaultChannels+0x108>)
 800256a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800256e:	492d      	ldr	r1, [pc, #180]	@ (8002624 <initDefaultChannels+0x104>)
 8002570:	3310      	adds	r3, #16
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <initDefaultChannels+0x104>)
 800257a:	3340      	adds	r3, #64	@ 0x40
 800257c:	213f      	movs	r1, #63	@ 0x3f
 800257e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	3301      	adds	r3, #1
 8002586:	73bb      	strb	r3, [r7, #14]
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d9e7      	bls.n	8002564 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002594:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <initDefaultChannels+0x104>)
 8002596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800259a:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 800259c:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <initDefaultChannels+0x104>)
 800259e:	220e      	movs	r2, #14
 80025a0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80025a4:	f003 f980 	bl	80058a8 <radio_rand1>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <initDefaultChannels+0x104>)
 80025b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <initDefaultChannels+0x104>)
 80025b8:	2264      	movs	r2, #100	@ 0x64
 80025ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <initDefaultChannels+0x104>)
 80025be:	220e      	movs	r2, #14
 80025c0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80025c4:	f003 f970 	bl	80058a8 <radio_rand1>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <initDefaultChannels+0x104>)
 80025d2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 80025d6:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <initDefaultChannels+0x104>)
 80025d8:	220a      	movs	r2, #10
 80025da:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <initDefaultChannels+0x104>)
 80025de:	221b      	movs	r2, #27
 80025e0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80025e4:	f003 f960 	bl	80058a8 <radio_rand1>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <initDefaultChannels+0x104>)
 80025f2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 80025f6:	f002 fc2d 	bl	8004e54 <os_getTime>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <initDefaultChannels+0x104>)
 80025fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <initDefaultChannels+0x104>)
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002604:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <initDefaultChannels+0x104>)
 8002606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <initDefaultChannels+0x104>)
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 800260c:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <initDefaultChannels+0x104>)
 800260e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001dc 	.word	0x200001dc
 800261c:	2000021c 	.word	0x2000021c
 8002620:	200001bc 	.word	0x200001bc
 8002624:	2000019c 	.word	0x2000019c
 8002628:	0800c4d0 	.word	0x0800c4d0

0800262c <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6039      	str	r1, [r7, #0]
 8002634:	4611      	mov	r1, r2
 8002636:	461a      	mov	r2, r3
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	460b      	mov	r3, r1
 800263e:	80bb      	strh	r3, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	d901      	bls.n	800264e <LMIC_setupChannel+0x22>
        return 0;
 800264a:	2300      	movs	r3, #0
 800264c:	e054      	b.n	80026f8 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 800264e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d121      	bne.n	800269c <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4a2a      	ldr	r2, [pc, #168]	@ (8002704 <LMIC_setupChannel+0xd8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d908      	bls.n	8002672 <LMIC_setupChannel+0x46>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4a29      	ldr	r2, [pc, #164]	@ (8002708 <LMIC_setupChannel+0xdc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d804      	bhi.n	8002672 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f043 0302 	orr.w	r3, r3, #2
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	e021      	b.n	80026b6 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	4a25      	ldr	r2, [pc, #148]	@ (800270c <LMIC_setupChannel+0xe0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d903      	bls.n	8002682 <LMIC_setupChannel+0x56>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4a24      	ldr	r2, [pc, #144]	@ (8002710 <LMIC_setupChannel+0xe4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d907      	bls.n	8002692 <LMIC_setupChannel+0x66>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4a23      	ldr	r2, [pc, #140]	@ (8002714 <LMIC_setupChannel+0xe8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d315      	bcc.n	80026b6 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <LMIC_setupChannel+0xec>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d811      	bhi.n	80026b6 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	e00c      	b.n	80026b6 <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 800269c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	dd01      	ble.n	80026a8 <LMIC_setupChannel+0x7c>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e027      	b.n	80026f8 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	4918      	ldr	r1, [pc, #96]	@ (800271c <LMIC_setupChannel+0xf0>)
 80026ba:	3310      	adds	r3, #16
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <LMIC_setupChannel+0xa0>
 80026c8:	88ba      	ldrh	r2, [r7, #4]
 80026ca:	e000      	b.n	80026ce <LMIC_setupChannel+0xa2>
 80026cc:	223f      	movs	r2, #63	@ 0x3f
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4912      	ldr	r1, [pc, #72]	@ (800271c <LMIC_setupChannel+0xf0>)
 80026d2:	3340      	adds	r3, #64	@ 0x40
 80026d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <LMIC_setupChannel+0xf0>)
 80026da:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80026de:	b21a      	sxth	r2, r3
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <LMIC_setupChannel+0xf0>)
 80026f2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	33d1fdbf 	.word	0x33d1fdbf
 8002708:	33d5ce50 	.word	0x33d5ce50
 800270c:	33bca0ff 	.word	0x33bca0ff
 8002710:	33c5c8c0 	.word	0x33c5c8c0
 8002714:	33d691a0 	.word	0x33d691a0
 8002718:	33db2580 	.word	0x33db2580
 800271c:	2000019c 	.word	0x2000019c

08002720 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f9c3 	bl	8001ab8 <os_rlsbf4>
 8002732:	4603      	mov	r3, r0
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	2264      	movs	r2, #100	@ 0x64
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a06      	ldr	r2, [pc, #24]	@ (800275c <convFreq+0x3c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d303      	bcc.n	800274e <convFreq+0x2e>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <convFreq+0x40>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <convFreq+0x32>
        freq = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
    return freq;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	337055c0 	.word	0x337055c0
 8002760:	33db2580 	.word	0x33db2580

08002764 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	4613      	mov	r3, r2
 8002772:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <mapChannels+0x2c>
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <mapChannels+0x2c>
 8002780:	88ba      	ldrh	r2, [r7, #4]
 8002782:	4b1c      	ldr	r3, [pc, #112]	@ (80027f4 <mapChannels+0x90>)
 8002784:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002788:	43db      	mvns	r3, r3
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <mapChannels+0x30>
        return 0;  // illegal input
 8002790:	2300      	movs	r3, #0
 8002792:	e028      	b.n	80027e6 <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e01d      	b.n	80027d6 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 800279a:	88ba      	ldrh	r2, [r7, #4]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	fa42 f303 	asr.w	r3, r2, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <mapChannels+0x6c>
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <mapChannels+0x90>)
 80027ae:	3310      	adds	r3, #16
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10b      	bne.n	80027d0 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	b21a      	sxth	r2, r3
 80027c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d9de      	bls.n	800279a <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 80027dc:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <mapChannels+0x90>)
 80027de:	88bb      	ldrh	r3, [r7, #4]
 80027e0:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2000019c 	.word	0x2000019c

080027f8 <updateTx>:


static void updateTx (ostime_t txbeg) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002800:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <updateTx+0x90>)
 8002802:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002806:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <updateTx+0x90>)
 8002808:	3310      	adds	r3, #16
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <updateTx+0x90>)
 8002812:	89db      	ldrh	r3, [r3, #14]
 8002814:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <updateTx+0x90>)
 8002816:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fba3 	bl	8001f68 <calcAirTime>
 8002822:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3304      	adds	r3, #4
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <updateTx+0x90>)
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <updateTx+0x90>)
 800283c:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <updateTx+0x90>)
 8002846:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	fb03 f202 	mul.w	r2, r3, r2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	441a      	add	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <updateTx+0x90>)
 800285e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <updateTx+0x90>)
 8002868:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800286c:	461a      	mov	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	fa03 f202 	lsl.w	r2, r3, r2
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	4a03      	ldr	r2, [pc, #12]	@ (8002888 <updateTx+0x90>)
 800287a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000019c 	.word	0x2000019c

0800288c <nextTx>:

static ostime_t nextTx (ostime_t now) {
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 8002894:	230f      	movs	r3, #15
 8002896:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4b48      	ldr	r3, [pc, #288]	@ (80029bc <nextTx+0x130>)
 800289c:	4413      	add	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	73bb      	strb	r3, [r7, #14]
 80028a8:	e01d      	b.n	80028e6 <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 80028aa:	7dfa      	ldrb	r2, [r7, #23]
 80028ac:	7bbb      	ldrb	r3, [r7, #14]
 80028ae:	fa42 f303 	asr.w	r3, r2, r3
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <nextTx+0x54>
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	4a40      	ldr	r2, [pc, #256]	@ (80029c0 <nextTx+0x134>)
 80028be:	3304      	adds	r3, #4
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dd08      	ble.n	80028e0 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	4a3a      	ldr	r2, [pc, #232]	@ (80029c0 <nextTx+0x134>)
 80028d6:	3304      	adds	r3, #4
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73bb      	strb	r3, [r7, #14]
 80028e6:	7bbb      	ldrb	r3, [r7, #14]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d9de      	bls.n	80028aa <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <nextTx+0x134>)
 80028f0:	3304      	adds	r3, #4
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	733b      	strb	r3, [r7, #12]
 80028fe:	e042      	b.n	8002986 <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002900:	7b7b      	ldrb	r3, [r7, #13]
 8002902:	3301      	adds	r3, #1
 8002904:	737b      	strb	r3, [r7, #13]
 8002906:	7b7b      	ldrb	r3, [r7, #13]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d902      	bls.n	8002912 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 800290c:	7b7b      	ldrb	r3, [r7, #13]
 800290e:	3b10      	subs	r3, #16
 8002910:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002912:	4b2b      	ldr	r3, [pc, #172]	@ (80029c0 <nextTx+0x134>)
 8002914:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002918:	461a      	mov	r2, r3
 800291a:	7b7b      	ldrb	r3, [r7, #13]
 800291c:	fa42 f303 	asr.w	r3, r2, r3
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02b      	beq.n	8002980 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002928:	7b7b      	ldrb	r3, [r7, #13]
 800292a:	4a25      	ldr	r2, [pc, #148]	@ (80029c0 <nextTx+0x134>)
 800292c:	3340      	adds	r3, #64	@ 0x40
 800292e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002932:	461a      	mov	r2, r3
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <nextTx+0x134>)
 8002936:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	fa42 f303 	asr.w	r3, r2, r3
 8002942:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01a      	beq.n	8002980 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	7b7b      	ldrb	r3, [r7, #13]
 800294e:	491c      	ldr	r1, [pc, #112]	@ (80029c0 <nextTx+0x134>)
 8002950:	3310      	adds	r3, #16
 8002952:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002956:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800295a:	429a      	cmp	r2, r3
 800295c:	d110      	bne.n	8002980 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	4917      	ldr	r1, [pc, #92]	@ (80029c0 <nextTx+0x134>)
 8002962:	1d13      	adds	r3, r2, #4
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	7b79      	ldrb	r1, [r7, #13]
 800296a:	70d9      	strb	r1, [r3, #3]
 800296c:	4914      	ldr	r1, [pc, #80]	@ (80029c0 <nextTx+0x134>)
 800296e:	1d13      	adds	r3, r2, #4
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	78da      	ldrb	r2, [r3, #3]
 8002976:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <nextTx+0x134>)
 8002978:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	e016      	b.n	80029ae <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8002980:	7b3b      	ldrb	r3, [r7, #12]
 8002982:	3301      	adds	r3, #1
 8002984:	733b      	strb	r3, [r7, #12]
 8002986:	7b3b      	ldrb	r3, [r7, #12]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d9b9      	bls.n	8002900 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2201      	movs	r2, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	b25b      	sxtb	r3, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	b25a      	sxtb	r2, r3
 800299a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800299e:	4013      	ands	r3, r2
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	75fb      	strb	r3, [r7, #23]
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af76 	bne.w	8002898 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 80029ac:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	44aa2000 	.word	0x44aa2000
 80029c0:	2000019c 	.word	0x2000019c

080029c4 <setBcnRxParams>:


static void setBcnRxParams (void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 80029c8:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <setBcnRxParams+0x48>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 80029d0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <setBcnRxParams+0x48>)
 80029d2:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 80029d6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <setBcnRxParams+0x48>)
 80029d8:	3310      	adds	r3, #16
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <setBcnRxParams+0x48>)
 80029e4:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 80029e6:	2003      	movs	r0, #3
 80029e8:	f7fe fff6 	bl	80019d8 <dndr2rps>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe ffa2 	bl	800193a <setNocrc>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2111      	movs	r1, #17
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe ffc3 	bl	8001986 <setIh>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b01      	ldr	r3, [pc, #4]	@ (8002a0c <setBcnRxParams+0x48>)
 8002a06:	81da      	strh	r2, [r3, #14]
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000019c 	.word	0x2000019c

08002a10 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8002a10:	b598      	push	{r3, r4, r7, lr}
 8002a12:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002a14:	f002 ff48 	bl	80058a8 <radio_rand1>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <initJoinLoop+0x64>)
 8002a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a22:	0899      	lsrs	r1, r3, #2
 8002a24:	460b      	mov	r3, r1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	440b      	add	r3, r1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <initJoinLoop+0x68>)
 8002a32:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <initJoinLoop+0x68>)
 8002a38:	220e      	movs	r2, #14
 8002a3a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 8002a3e:	2105      	movs	r1, #5
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fd2b 	bl	800249c <setDrJoin>
    initDefaultChannels(1);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7ff fd6a 	bl	8002520 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <initJoinLoop+0x68>)
 8002a4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <initJoinLoop+0x4e>
 8002a5a:	f7fe ff09 	bl	8001870 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <initJoinLoop+0x68>)
 8002a60:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002a62:	2008      	movs	r0, #8
 8002a64:	f7ff fcae 	bl	80023c4 <rndDelay>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4423      	add	r3, r4
 8002a6c:	4a02      	ldr	r2, [pc, #8]	@ (8002a78 <initJoinLoop+0x68>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	bd98      	pop	{r3, r4, r7, pc}
 8002a74:	aaaaaaab 	.word	0xaaaaaaab
 8002a78:	2000019c 	.word	0x2000019c

08002a7c <nextJoinState>:


static ostime_t nextJoinState (void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 8002a86:	4b30      	ldr	r3, [pc, #192]	@ (8002b48 <nextJoinState+0xcc>)
 8002a88:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <nextJoinState+0xcc>)
 8002a92:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8002a96:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <nextJoinState+0xcc>)
 8002a98:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d103      	bne.n	8002aa8 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 8002aa0:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <nextJoinState+0xcc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8002aa8:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <nextJoinState+0xcc>)
 8002aaa:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <nextJoinState+0xcc>)
 8002ab4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8002ab8:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <nextJoinState+0xcc>)
 8002aba:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d112      	bne.n	8002aec <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <nextJoinState+0xcc>)
 8002ac8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	e00a      	b.n	8002aec <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <nextJoinState+0xcc>)
 8002ad8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe ff8f 	bl	8001a00 <decDR>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7ff fcd8 	bl	800249c <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <nextJoinState+0xcc>)
 8002aee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002af2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <nextJoinState+0xcc>)
 8002afa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8002afe:	f002 f9a9 	bl	8004e54 <os_getTime>
 8002b02:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <nextJoinState+0xcc>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	da02      	bge.n	8002b16 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <nextJoinState+0xcc>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8002b16:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <nextJoinState+0xcc>)
 8002b18:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	23ff      	movs	r3, #255	@ 0xff
 8002b20:	4113      	asrs	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fc4d 	bl	80023c4 <rndDelay>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8002b30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a03      	ldr	r2, [pc, #12]	@ (8002b48 <nextJoinState+0xcc>)
 8002b3a:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000019c 	.word	0x2000019c

08002b4c <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8002b54:	f001 fcb6 	bl	80044c4 <engineUpdate>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <reportEvent>:


static void reportEvent (ev_t ev) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 ffe5 	bl	8004b3c <onEvent>
    engineUpdate();
 8002b72:	f001 fca7 	bl	80044c4 <engineUpdate>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <runReset>:


static void runReset (xref2osjob_t osjob) {
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 8002b86:	f001 fe67 	bl	8004858 <LMIC_reset>
    LMIC_startJoining();
 8002b8a:	f001 fa0f 	bl	8003fac <LMIC_startJoining>
    reportEvent(EV_RESET);
 8002b8e:	200c      	movs	r0, #12
 8002b90:	f7ff ffe6 	bl	8002b60 <reportEvent>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <stateJustJoined>:

static void stateJustJoined (void) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <stateJustJoined+0xc4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <stateJustJoined+0xc4>)
 8002baa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002bae:	4a2c      	ldr	r2, [pc, #176]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bb0:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8002bbc:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8002bc4:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bc6:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8002bca:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bcc:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bd2:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8002bd6:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bd8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8002bdc:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bde:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8002be2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <stateJustJoined+0xc4>)
 8002be4:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bf2:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bf8:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <stateJustJoined+0xc4>)
 8002bfe:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c04:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c0a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c10:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002c24:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c26:	22f4      	movs	r2, #244	@ 0xf4
 8002c28:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c36:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <stateJustJoined+0xc8>)
 8002c38:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c3e:	2205      	movs	r2, #5
 8002c40:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c46:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <stateJustJoined+0xc8>)
 8002c48:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <stateJustJoined+0xc4>)
 8002c4e:	2203      	movs	r2, #3
 8002c50:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2000019c 	.word	0x2000019c
 8002c64:	33d3e608 	.word	0x33d3e608

08002c68 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8002c6e:	4b46      	ldr	r3, [pc, #280]	@ (8002d88 <decodeBeacon+0x120>)
 8002c70:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8002c74:	2b11      	cmp	r3, #17
 8002c76:	d001      	beq.n	8002c7c <decodeBeacon+0x14>
 8002c78:	f7fe fdfa 	bl	8001870 <hal_failed>
    xref2u1_t d = LMIC.frame;
 8002c7c:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <decodeBeacon+0x124>)
 8002c7e:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3307      	adds	r3, #7
 8002c84:	781c      	ldrb	r4, [r3, #0]
 8002c86:	2107      	movs	r1, #7
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe ffb0 	bl	8001bee <os_crc16>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	b2db      	uxtb	r3, r3
    if(
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d001      	beq.n	8002c9a <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 8002c96:	2300      	movs	r3, #0
 8002c98:	e071      	b.n	8002d7e <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe ff0c 	bl	8001ab8 <os_rlsbf4>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ca6:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8002ca8:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <decodeBeacon+0x120>)
 8002caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d002      	beq.n	8002cba <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb8:	e061      	b.n	8002d7e <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 8002cba:	4b33      	ldr	r3, [pc, #204]	@ (8002d88 <decodeBeacon+0x120>)
 8002cbc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002cc0:	f023 0303 	bic.w	r3, r3, #3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <decodeBeacon+0x120>)
 8002cc8:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <decodeBeacon+0x120>)
 8002cce:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <decodeBeacon+0x120>)
 8002cd4:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d88 <decodeBeacon+0x120>)
 8002cda:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002cde:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <decodeBeacon+0x120>)
 8002ce0:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <decodeBeacon+0x120>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8002cec:	3b0c      	subs	r3, #12
 8002cee:	4a26      	ldr	r2, [pc, #152]	@ (8002d88 <decodeBeacon+0x120>)
 8002cf0:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fedd 	bl	8001ab8 <os_rlsbf4>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4a21      	ldr	r2, [pc, #132]	@ (8002d88 <decodeBeacon+0x120>)
 8002d02:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <decodeBeacon+0x120>)
 8002d08:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <decodeBeacon+0x120>)
 8002d14:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	330f      	adds	r3, #15
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe feb6 	bl	8001a8e <os_rlsbf2>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461c      	mov	r4, r3
 8002d26:	210f      	movs	r1, #15
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fe ff60 	bl	8001bee <os_crc16>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	429c      	cmp	r4, r3
 8002d32:	d001      	beq.n	8002d38 <decodeBeacon+0xd0>
        return 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e022      	b.n	8002d7e <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe febb 	bl	8001ab8 <os_rlsbf4>
 8002d42:	4603      	mov	r3, r0
 8002d44:	121b      	asrs	r3, r3, #8
 8002d46:	4a10      	ldr	r2, [pc, #64]	@ (8002d88 <decodeBeacon+0x120>)
 8002d48:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	330b      	adds	r3, #11
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe feb1 	bl	8001ab8 <os_rlsbf4>
 8002d56:	4603      	mov	r3, r0
 8002d58:	121b      	asrs	r3, r3, #8
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d88 <decodeBeacon+0x120>)
 8002d5c:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1a      	ldrb	r2, [r3, #8]
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <decodeBeacon+0x120>)
 8002d66:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <decodeBeacon+0x120>)
 8002d6c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <decodeBeacon+0x120>)
 8002d78:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 8002d7c:	2302      	movs	r3, #2
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000019c 	.word	0x2000019c
 8002d8c:	200002e4 	.word	0x200002e4

08002d90 <decodeFrame>:


static bit_t decodeFrame (void) {
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b09b      	sub	sp, #108	@ 0x6c
 8002d94:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8002d96:	4b98      	ldr	r3, [pc, #608]	@ (8002ff8 <decodeFrame+0x268>)
 8002d98:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 8002d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 8002da2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002da6:	f023 031f 	bic.w	r3, r3, #31
 8002daa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 8002dae:	4b93      	ldr	r3, [pc, #588]	@ (8002ffc <decodeFrame+0x26c>)
 8002db0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8002db4:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 8002db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db8:	2b0b      	cmp	r3, #11
 8002dba:	dd0d      	ble.n	8002dd8 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dc0:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002dc8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002dcc:	2b60      	cmp	r3, #96	@ 0x60
 8002dce:	d014      	beq.n	8002dfa <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8002dd0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002dd4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dd6:	d010      	beq.n	8002dfa <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8002dd8:	bf00      	nop
 8002dda:	e008      	b.n	8002dee <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8002ddc:	bf00      	nop
 8002dde:	e006      	b.n	8002dee <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8002de0:	bf00      	nop
 8002de2:	e004      	b.n	8002dee <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8002de4:	bf00      	nop
 8002de6:	e002      	b.n	8002dee <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002dec:	bf00      	nop
        LMIC.dataLen = 0;
 8002dee:	4b83      	ldr	r3, [pc, #524]	@ (8002ffc <decodeFrame+0x26c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e2f6      	b.n	80033e8 <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dfc:	3305      	adds	r3, #5
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8002e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e04:	3301      	adds	r3, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fe56 	bl	8001ab8 <os_rlsbf4>
 8002e0c:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e10:	3306      	adds	r3, #6
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fe3b 	bl	8001a8e <os_rlsbf2>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e26:	115b      	asrs	r3, r3, #5
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	3308      	adds	r3, #8
 8002e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 8002e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e36:	3b04      	subs	r3, #4
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 8002e3a:	4b70      	ldr	r3, [pc, #448]	@ (8002ffc <decodeFrame+0x26c>)
 8002e3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1ca      	bne.n	8002ddc <decodeFrame+0x4c>
    if( poff > pend ) {
 8002e46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dcc8      	bgt.n	8002de0 <decodeFrame+0x50>
    int port = -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 8002e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dd07      	ble.n	8002e70 <decodeFrame+0xe0>
        port = d[poff++];
 8002e60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e66:	461a      	mov	r2, r3
 8002e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002e70:	4b62      	ldr	r3, [pc, #392]	@ (8002ffc <decodeFrame+0x26c>)
 8002e72:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002e76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e78:	b291      	uxth	r1, r2
 8002e7a:	4a60      	ldr	r2, [pc, #384]	@ (8002ffc <decodeFrame+0x26c>)
 8002e7c:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8002e80:	b292      	uxth	r2, r2
 8002e82:	1a8a      	subs	r2, r1, r2
 8002e84:	b292      	uxth	r2, r2
 8002e86:	4413      	add	r3, r2
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ffc <decodeFrame+0x26c>)
 8002e8c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e9c:	4858      	ldr	r0, [pc, #352]	@ (8003000 <decodeFrame+0x270>)
 8002e9e:	f7fe ff19 	bl	8001cd4 <aes_verifyMic>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d09d      	beq.n	8002de4 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002ea8:	4b54      	ldr	r3, [pc, #336]	@ (8002ffc <decodeFrame+0x26c>)
 8002eaa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002eae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d219      	bcs.n	8002ee8 <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002eb4:	4b51      	ldr	r3, [pc, #324]	@ (8002ffc <decodeFrame+0x26c>)
 8002eb6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	db92      	blt.n	8002de8 <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8002ffc <decodeFrame+0x26c>)
 8002ec4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d18d      	bne.n	8002dec <decodeFrame+0x5c>
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <decodeFrame+0x26c>)
 8002ed2:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d088      	beq.n	8002dec <decodeFrame+0x5c>
 8002eda:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ede:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ee0:	d184      	bne.n	8002dec <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ee6:	e00e      	b.n	8002f06 <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eea:	3301      	adds	r3, #1
 8002eec:	4a43      	ldr	r2, [pc, #268]	@ (8002ffc <decodeFrame+0x26c>)
 8002eee:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002ef2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ef6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ef8:	d101      	bne.n	8002efe <decodeFrame+0x16e>
 8002efa:	2220      	movs	r2, #32
 8002efc:	e000      	b.n	8002f00 <decodeFrame+0x170>
 8002efe:	2200      	movs	r2, #0
 8002f00:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <decodeFrame+0x26c>)
 8002f02:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002f06:	4b3d      	ldr	r3, [pc, #244]	@ (8002ffc <decodeFrame+0x26c>)
 8002f08:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <decodeFrame+0x18a>
 8002f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 8002f1a:	4b38      	ldr	r3, [pc, #224]	@ (8002ffc <decodeFrame+0x26c>)
 8002f1c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b35      	ldr	r3, [pc, #212]	@ (8002ffc <decodeFrame+0x26c>)
 8002f28:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002f2c:	4b33      	ldr	r3, [pc, #204]	@ (8002ffc <decodeFrame+0x26c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8002f34:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <decodeFrame+0x26c>)
 8002f36:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <decodeFrame+0x26c>)
 8002f3c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002f40:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <decodeFrame+0x26c>)
 8002f42:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8002f46:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002f4a:	d003      	beq.n	8002f54 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <decodeFrame+0x26c>)
 8002f4e:	22f4      	movs	r2, #244	@ 0xf4
 8002f50:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <decodeFrame+0x26c>)
 8002f56:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002f5a:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8002f5e:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <decodeFrame+0x26c>)
 8002f60:	89db      	ldrh	r3, [r3, #14]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe ffe0 	bl	8001f28 <getSensitivity>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	1ae3      	subs	r3, r4, r3
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db05      	blt.n	8002f80 <decodeFrame+0x1f0>
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f78:	bfa8      	it	ge
 8002f7a:	23fe      	movge	r3, #254	@ 0xfe
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e000      	b.n	8002f82 <decodeFrame+0x1f2>
 8002f80:	2300      	movs	r3, #0
 8002f82:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <decodeFrame+0x26c>)
 8002f84:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 8002f92:	e1b5      	b.n	8003300 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 8002f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	3b02      	subs	r3, #2
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	f200 81ba 	bhi.w	8003318 <decodeFrame+0x588>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <decodeFrame+0x21c>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	08003163 	.word	0x08003163
 8002fb8:	080030df 	.word	0x080030df
 8002fbc:	080030cf 	.word	0x080030cf
 8002fc0:	080031b1 	.word	0x080031b1
 8002fc4:	08003319 	.word	0x08003319
 8002fc8:	08003319 	.word	0x08003319
 8002fcc:	08003319 	.word	0x08003319
 8002fd0:	08003319 	.word	0x08003319
 8002fd4:	08003319 	.word	0x08003319
 8002fd8:	08003319 	.word	0x08003319
 8002fdc:	08003319 	.word	0x08003319
 8002fe0:	08003319 	.word	0x08003319
 8002fe4:	08003319 	.word	0x08003319
 8002fe8:	0800323d 	.word	0x0800323d
 8002fec:	0800327f 	.word	0x0800327f
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ff2:	3303      	adds	r3, #3
 8002ff4:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002ff6:	e183      	b.n	8003300 <decodeFrame+0x570>
 8002ff8:	200002e4 	.word	0x200002e4
 8002ffc:	2000019c 	.word	0x2000019c
 8003000:	20000290 	.word	0x20000290
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8003004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003006:	3301      	adds	r3, #1
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8003010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003012:	3302      	adds	r3, #2
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4413      	add	r3, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe fd38 	bl	8001a8e <os_rlsbf2>
 800301e:	4603      	mov	r3, r0
 8003020:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8003022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003024:	3304      	adds	r3, #4
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f023 030f 	bic.w	r3, r3, #15
 8003030:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8003032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003034:	3304      	adds	r3, #4
 8003036:	6a3a      	ldr	r2, [r7, #32]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 8003042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003044:	3305      	adds	r3, #5
 8003046:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8003048:	4bb0      	ldr	r3, [pc, #704]	@ (800330c <decodeFrame+0x57c>)
 800304a:	2287      	movs	r2, #135	@ 0x87
 800304c:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fb84 	bl	8002764 <mapChannels>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8003062:	4baa      	ldr	r3, [pc, #680]	@ (800330c <decodeFrame+0x57c>)
 8003064:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4ba7      	ldr	r3, [pc, #668]	@ (800330c <decodeFrame+0x57c>)
 8003070:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8003074:	7abb      	ldrb	r3, [r7, #10]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 800307a:	797b      	ldrb	r3, [r7, #5]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fcd7 	bl	8001a30 <validDR>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d108      	bne.n	800309a <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8003088:	4ba0      	ldr	r3, [pc, #640]	@ (800330c <decodeFrame+0x57c>)
 800308a:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 800308e:	f023 0302 	bic.w	r3, r3, #2
 8003092:	b2da      	uxtb	r2, r3
 8003094:	4b9d      	ldr	r3, [pc, #628]	@ (800330c <decodeFrame+0x57c>)
 8003096:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 800309a:	4b9c      	ldr	r3, [pc, #624]	@ (800330c <decodeFrame+0x57c>)
 800309c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80030a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d10d      	bne.n	80030c4 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 80030a8:	4a98      	ldr	r2, [pc, #608]	@ (800330c <decodeFrame+0x57c>)
 80030aa:	79bb      	ldrb	r3, [r7, #6]
 80030ac:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 80030b0:	7abb      	ldrb	r3, [r7, #10]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	4a96      	ldr	r2, [pc, #600]	@ (8003310 <decodeFrame+0x580>)
 80030b8:	56d2      	ldrsb	r2, [r2, r3]
 80030ba:	797b      	ldrb	r3, [r7, #5]
 80030bc:	4619      	mov	r1, r3
 80030be:	2004      	movs	r0, #4
 80030c0:	f7ff fa00 	bl	80024c4 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 80030c4:	4b91      	ldr	r3, [pc, #580]	@ (800330c <decodeFrame+0x57c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 80030cc:	e118      	b.n	8003300 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 80030ce:	4b8f      	ldr	r3, [pc, #572]	@ (800330c <decodeFrame+0x57c>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 80030d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030d8:	3301      	adds	r3, #1
 80030da:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 80030dc:	e110      	b.n	8003300 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 80030de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e0:	3301      	adds	r3, #1
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 80030ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f0:	3302      	adds	r3, #2
 80030f2:	6a3a      	ldr	r2, [r7, #32]
 80030f4:	4413      	add	r3, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fb12 	bl	8002720 <convFreq>
 80030fc:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 80030fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003100:	3305      	adds	r3, #5
 8003102:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8003104:	4b81      	ldr	r3, [pc, #516]	@ (800330c <decodeFrame+0x57c>)
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 800310c:	7cbb      	ldrb	r3, [r7, #18]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fc8e 	bl	8001a30 <validDR>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 800311a:	4b7c      	ldr	r3, [pc, #496]	@ (800330c <decodeFrame+0x57c>)
 800311c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b79      	ldr	r3, [pc, #484]	@ (800330c <decodeFrame+0x57c>)
 8003128:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8003132:	4b76      	ldr	r3, [pc, #472]	@ (800330c <decodeFrame+0x57c>)
 8003134:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b73      	ldr	r3, [pc, #460]	@ (800330c <decodeFrame+0x57c>)
 8003140:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8003144:	4b71      	ldr	r3, [pc, #452]	@ (800330c <decodeFrame+0x57c>)
 8003146:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800314a:	2b83      	cmp	r3, #131	@ 0x83
 800314c:	f040 80d7 	bne.w	80032fe <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8003150:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <decodeFrame+0x57c>)
 8003152:	7cbb      	ldrb	r3, [r7, #18]
 8003154:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 8003158:	4a6c      	ldr	r2, [pc, #432]	@ (800330c <decodeFrame+0x57c>)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8003160:	e0cd      	b.n	80032fe <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8003162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003164:	3301      	adds	r3, #1
 8003166:	6a3a      	ldr	r2, [r7, #32]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 800316e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003170:	3302      	adds	r3, #2
 8003172:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	2bff      	cmp	r3, #255	@ 0xff
 8003178:	d108      	bne.n	800318c <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 800317a:	4b64      	ldr	r3, [pc, #400]	@ (800330c <decodeFrame+0x57c>)
 800317c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b61      	ldr	r3, [pc, #388]	@ (800330c <decodeFrame+0x57c>)
 8003188:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <decodeFrame+0x57c>)
 8003196:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 800319a:	f001 fe5b 	bl	8004e54 <os_getTime>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a5a      	ldr	r2, [pc, #360]	@ (800330c <decodeFrame+0x57c>)
 80031a2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <decodeFrame+0x57c>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 80031ae:	e0a7      	b.n	8003300 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 80031b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b2:	3301      	adds	r3, #1
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	4413      	add	r3, r2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 80031bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031be:	3302      	adds	r3, #2
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	4413      	add	r3, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff faab 	bl	8002720 <convFreq>
 80031ca:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 80031cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ce:	3305      	adds	r3, #5
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 80031d8:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <decodeFrame+0x57c>)
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d026      	beq.n	8003234 <decodeFrame+0x4a4>
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f1c3 030f 	rsb	r3, r3, #15
 8003200:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003204:	fa41 f303 	asr.w	r3, r1, r3
 8003208:	b21b      	sxth	r3, r3
 800320a:	4013      	ands	r3, r2
 800320c:	b21b      	sxth	r3, r3
 800320e:	b29a      	uxth	r2, r3
 8003210:	7ef8      	ldrb	r0, [r7, #27]
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	6979      	ldr	r1, [r7, #20]
 8003218:	f7ff fa08 	bl	800262c <LMIC_setupChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8003222:	4b3a      	ldr	r3, [pc, #232]	@ (800330c <decodeFrame+0x57c>)
 8003224:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003228:	f043 0303 	orr.w	r3, r3, #3
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b37      	ldr	r3, [pc, #220]	@ (800330c <decodeFrame+0x57c>)
 8003230:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 8003234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003236:	3306      	adds	r3, #6
 8003238:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800323a:	e061      	b.n	8003300 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 800323c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800323e:	3301      	adds	r3, #1
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	4413      	add	r3, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fa6b 	bl	8002720 <convFreq>
 800324a:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 800324c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800324e:	3304      	adds	r3, #4
 8003250:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 800325e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 800326a:	4a28      	ldr	r2, [pc, #160]	@ (800330c <decodeFrame+0x57c>)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8003272:	4a26      	ldr	r2, [pc, #152]	@ (800330c <decodeFrame+0x57c>)
 8003274:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003278:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 800327c:	e040      	b.n	8003300 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <decodeFrame+0x57c>)
 8003280:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d134      	bne.n	80032f6 <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 800328c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800328e:	3303      	adds	r3, #3
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	4413      	add	r3, r2
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <decodeFrame+0x57c>)
 8003298:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <decodeFrame+0x57c>)
 800329e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b18      	ldr	r3, [pc, #96]	@ (800330c <decodeFrame+0x57c>)
 80032aa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 80032ae:	4b17      	ldr	r3, [pc, #92]	@ (800330c <decodeFrame+0x57c>)
 80032b0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <decodeFrame+0x52c>
 80032b8:	f7fe fada 	bl	8001870 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <decodeFrame+0x57c>)
 80032be:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 80032c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c2:	3301      	adds	r3, #1
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	4413      	add	r3, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fbe0 	bl	8001a8e <os_rlsbf2>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 80032dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <decodeFrame+0x584>)
 80032de:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 80032e0:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <decodeFrame+0x57c>)
 80032e2:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 80032e6:	4b09      	ldr	r3, [pc, #36]	@ (800330c <decodeFrame+0x57c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 80032ee:	2101      	movs	r1, #1
 80032f0:	201e      	movs	r0, #30
 80032f2:	f7fe ff25 	bl	8002140 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 80032f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f8:	3304      	adds	r3, #4
 80032fa:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 80032fc:	e000      	b.n	8003300 <decodeFrame+0x570>
            continue;
 80032fe:	bf00      	nop
    while( oidx < olen ) {
 8003300:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003304:	429a      	cmp	r2, r3
 8003306:	f6ff ae45 	blt.w	8002f94 <decodeFrame+0x204>
 800330a:	e006      	b.n	800331a <decodeFrame+0x58a>
 800330c:	2000019c 	.word	0x2000019c
 8003310:	0800c47c 	.word	0x0800c47c
 8003314:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003318:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 800331a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11d      	bne.n	800335c <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8003320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003322:	2b00      	cmp	r3, #0
 8003324:	db1a      	blt.n	800335c <decodeFrame+0x5cc>
 8003326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	dd15      	ble.n	800335c <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8003330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003332:	2b00      	cmp	r3, #0
 8003334:	dc01      	bgt.n	800333a <decodeFrame+0x5aa>
 8003336:	482e      	ldr	r0, [pc, #184]	@ (80033f0 <decodeFrame+0x660>)
 8003338:	e000      	b.n	800333c <decodeFrame+0x5ac>
 800333a:	482e      	ldr	r0, [pc, #184]	@ (80033f4 <decodeFrame+0x664>)
 800333c:	4b2e      	ldr	r3, [pc, #184]	@ (80033f8 <decodeFrame+0x668>)
 800333e:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 8003342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003346:	4413      	add	r3, r2
 8003348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800334a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800334c:	1a8a      	subs	r2, r1, r2
 800334e:	9201      	str	r2, [sp, #4]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2301      	movs	r3, #1
 8003354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003356:	4621      	mov	r1, r4
 8003358:	f7fe fd66 	bl	8001e28 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8003360:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <decodeFrame+0x668>)
 8003362:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <decodeFrame+0x668>)
 800336c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003370:	b25b      	sxtb	r3, r3
 8003372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003374:	2a00      	cmp	r2, #0
 8003376:	d002      	beq.n	800337e <decodeFrame+0x5ee>
 8003378:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800337c:	e000      	b.n	8003380 <decodeFrame+0x5f0>
 800337e:	2240      	movs	r2, #64	@ 0x40
 8003380:	4313      	orrs	r3, r2
 8003382:	b25b      	sxtb	r3, r3
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <decodeFrame+0x668>)
 8003388:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 800338c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800338e:	2b00      	cmp	r3, #0
 8003390:	da12      	bge.n	80033b8 <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <decodeFrame+0x668>)
 8003394:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <decodeFrame+0x668>)
 80033a0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 80033a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <decodeFrame+0x668>)
 80033aa:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 80033ae:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <decodeFrame+0x668>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80033b6:	e016      	b.n	80033e6 <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <decodeFrame+0x668>)
 80033ba:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80033be:	f043 0310 	orr.w	r3, r3, #16
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <decodeFrame+0x668>)
 80033c6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 80033ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <decodeFrame+0x668>)
 80033d0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <decodeFrame+0x668>)
 80033e2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3764      	adds	r7, #100	@ 0x64
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}
 80033f0:	20000290 	.word	0x20000290
 80033f4:	200002a0 	.word	0x200002a0
 80033f8:	2000019c 	.word	0x2000019c

080033fc <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003400:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <setupRx2+0x3c>)
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <setupRx2+0x3c>)
 800340a:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fae2 	bl	80019d8 <dndr2rps>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <setupRx2+0x3c>)
 800341a:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <setupRx2+0x3c>)
 800341e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003422:	4a05      	ldr	r2, [pc, #20]	@ (8003438 <setupRx2+0x3c>)
 8003424:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003426:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <setupRx2+0x3c>)
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 800342e:	2002      	movs	r0, #2
 8003430:	f002 fb36 	bl	8005aa0 <os_radio>
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000019c 	.word	0x2000019c

0800343c <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <schedRx2+0x44>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	18d1      	adds	r1, r2, r3
 800344e:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <schedRx2+0x44>)
 8003450:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003454:	461a      	mov	r2, r3
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <schedRx2+0x48>)
 8003458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	440b      	add	r3, r1
 8003464:	4a06      	ldr	r2, [pc, #24]	@ (8003480 <schedRx2+0x44>)
 8003466:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <schedRx2+0x44>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	3b40      	subs	r3, #64	@ 0x40
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	4805      	ldr	r0, [pc, #20]	@ (8003488 <schedRx2+0x4c>)
 8003474:	f001 fd58 	bl	8004f28 <os_setTimedCallback>
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	2000019c 	.word	0x2000019c
 8003484:	0800c4b0 	.word	0x0800c4b0
 8003488:	200001b0 	.word	0x200001b0

0800348c <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <setupRx1+0x40>)
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <setupRx1+0x40>)
 800349e:	89db      	ldrh	r3, [r3, #14]
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fa49 	bl	800193a <setNocrc>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <setupRx1+0x40>)
 80034ae:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 80034b0:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <setupRx1+0x40>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 80034b8:	4a04      	ldr	r2, [pc, #16]	@ (80034cc <setupRx1+0x40>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 80034be:	2002      	movs	r0, #2
 80034c0:	f002 faee 	bl	8005aa0 <os_radio>
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000019c 	.word	0x2000019c

080034d0 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 80034da:	4b22      	ldr	r3, [pc, #136]	@ (8003564 <txDone+0x94>)
 80034dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80034e0:	461a      	mov	r2, r3
 80034e2:	f240 6302 	movw	r3, #1538	@ 0x602
 80034e6:	4013      	ands	r3, r2
 80034e8:	f240 4202 	movw	r2, #1026	@ 0x402
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10b      	bne.n	8003508 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 80034f0:	481d      	ldr	r0, [pc, #116]	@ (8003568 <txDone+0x98>)
 80034f2:	f7fe feab 	bl	800224c <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 80034f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <txDone+0x94>)
 80034f8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80034fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003500:	b29a      	uxth	r2, r3
 8003502:	4b18      	ldr	r3, [pc, #96]	@ (8003564 <txDone+0x94>)
 8003504:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <txDone+0x94>)
 800350a:	7c1b      	ldrb	r3, [r3, #16]
 800350c:	2b07      	cmp	r3, #7
 800350e:	d10a      	bne.n	8003526 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003510:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <txDone+0x94>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3b05      	subs	r3, #5
 800351a:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <txDone+0x94>)
 800351c:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 800351e:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <txDone+0x94>)
 8003520:	2208      	movs	r2, #8
 8003522:	741a      	strb	r2, [r3, #16]
 8003524:	e012      	b.n	800354c <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003526:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <txDone+0x94>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	18d1      	adds	r1, r2, r3
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <txDone+0x94>)
 8003530:	7c5b      	ldrb	r3, [r3, #17]
 8003532:	461a      	mov	r2, r3
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <txDone+0x9c>)
 8003536:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	440b      	add	r3, r1
 8003542:	4a08      	ldr	r2, [pc, #32]	@ (8003564 <txDone+0x94>)
 8003544:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003546:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <txDone+0x94>)
 8003548:	2205      	movs	r2, #5
 800354a:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <txDone+0x94>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	3b40      	subs	r3, #64	@ 0x40
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	4806      	ldr	r0, [pc, #24]	@ (8003570 <txDone+0xa0>)
 8003558:	f001 fce6 	bl	8004f28 <os_setTimedCallback>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2000019c 	.word	0x2000019c
 8003568:	200002d0 	.word	0x200002d0
 800356c:	0800c4b0 	.word	0x0800c4b0
 8003570:	200001b0 	.word	0x200001b0

08003574 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 800357c:	2008      	movs	r0, #8
 800357e:	f7ff faef 	bl	8002b60 <reportEvent>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <processJoinAccept>:


static bit_t processJoinAccept (void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003592:	4b99      	ldr	r3, [pc, #612]	@ (80037f8 <processJoinAccept+0x26c>)
 8003594:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <processJoinAccept+0x1e>
 800359c:	4b96      	ldr	r3, [pc, #600]	@ (80037f8 <processJoinAccept+0x26c>)
 800359e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <processJoinAccept+0x1e>
 80035a6:	f7fe f963 	bl	8001870 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 80035aa:	4b93      	ldr	r3, [pc, #588]	@ (80037f8 <processJoinAccept+0x26c>)
 80035ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <processJoinAccept+0x30>
 80035b8:	f7fe f95a 	bl	8001870 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 80035bc:	4b8e      	ldr	r3, [pc, #568]	@ (80037f8 <processJoinAccept+0x26c>)
 80035be:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d14c      	bne.n	8003660 <processJoinAccept+0xd4>
      nojoinframe:
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 80035ca:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 80035cc:	4b8a      	ldr	r3, [pc, #552]	@ (80037f8 <processJoinAccept+0x26c>)
 80035ce:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d123      	bne.n	8003622 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 80035da:	4b87      	ldr	r3, [pc, #540]	@ (80037f8 <processJoinAccept+0x26c>)
 80035dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <processJoinAccept+0x60>
 80035e8:	f7fe f942 	bl	8001870 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 80035ec:	4b82      	ldr	r3, [pc, #520]	@ (80037f8 <processJoinAccept+0x26c>)
 80035ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	4b7f      	ldr	r3, [pc, #508]	@ (80037f8 <processJoinAccept+0x26c>)
 80035fa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 80035fe:	4b7e      	ldr	r3, [pc, #504]	@ (80037f8 <processJoinAccept+0x26c>)
 8003600:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003604:	2b09      	cmp	r3, #9
 8003606:	d807      	bhi.n	8003618 <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003608:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <processJoinAccept+0x26c>)
 800360a:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b79      	ldr	r3, [pc, #484]	@ (80037f8 <processJoinAccept+0x26c>)
 8003614:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003618:	2009      	movs	r0, #9
 800361a:	f7ff faa1 	bl	8002b60 <reportEvent>
            return 1;
 800361e:	2301      	movs	r3, #1
 8003620:	e0e6      	b.n	80037f0 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003622:	4b75      	ldr	r3, [pc, #468]	@ (80037f8 <processJoinAccept+0x26c>)
 8003624:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800362c:	b29a      	uxth	r2, r3
 800362e:	4b72      	ldr	r3, [pc, #456]	@ (80037f8 <processJoinAccept+0x26c>)
 8003630:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8003634:	f7ff fa22 	bl	8002a7c <nextJoinState>
 8003638:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800363a:	f001 fc0b 	bl	8004e54 <os_getTime>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <processJoinAccept+0xc6>
 800364e:	4b6b      	ldr	r3, [pc, #428]	@ (80037fc <processJoinAccept+0x270>)
 8003650:	e000      	b.n	8003654 <processJoinAccept+0xc8>
 8003652:	4b6b      	ldr	r3, [pc, #428]	@ (8003800 <processJoinAccept+0x274>)
 8003654:	461a      	mov	r2, r3
 8003656:	486b      	ldr	r0, [pc, #428]	@ (8003804 <processJoinAccept+0x278>)
 8003658:	f001 fc66 	bl	8004f28 <os_setTimedCallback>
        return 1;
 800365c:	2301      	movs	r3, #1
 800365e:	e0c7      	b.n	80037f0 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 8003660:	4b65      	ldr	r3, [pc, #404]	@ (80037f8 <processJoinAccept+0x26c>)
 8003662:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8003666:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 8003668:	4b63      	ldr	r3, [pc, #396]	@ (80037f8 <processJoinAccept+0x26c>)
 800366a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800366e:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	3b04      	subs	r3, #4
 8003674:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003678:	4a5f      	ldr	r2, [pc, #380]	@ (80037f8 <processJoinAccept+0x26c>)
 800367a:	4413      	add	r3, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe fa1b 	bl	8001ab8 <os_rlsbf4>
 8003682:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b11      	cmp	r3, #17
 8003688:	d002      	beq.n	8003690 <processJoinAccept+0x104>
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b21      	cmp	r3, #33	@ 0x21
 800368e:	d104      	bne.n	800369a <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 8003690:	7d7b      	ldrb	r3, [r7, #21]
 8003692:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8003696:	2b20      	cmp	r3, #32
 8003698:	d00b      	beq.n	80036b2 <processJoinAccept+0x126>
      badframe:
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 800369e:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80036a0:	4b55      	ldr	r3, [pc, #340]	@ (80037f8 <processJoinAccept+0x26c>)
 80036a2:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d08d      	beq.n	80035ca <processJoinAccept+0x3e>
            return 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e09e      	b.n	80037f0 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 80036b2:	4a55      	ldr	r2, [pc, #340]	@ (8003808 <processJoinAccept+0x27c>)
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7fe fb9e 	bl	8001dfc <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	3b04      	subs	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4851      	ldr	r0, [pc, #324]	@ (800380c <processJoinAccept+0x280>)
 80036c8:	f7fe fb76 	bl	8001db8 <aes_verifyMic0>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0e5      	beq.n	800369e <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 80036d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003810 <processJoinAccept+0x284>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe f9ef 	bl	8001ab8 <os_rlsbf4>
 80036da:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 80036dc:	4a46      	ldr	r2, [pc, #280]	@ (80037f8 <processJoinAccept+0x26c>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 80036e4:	484b      	ldr	r0, [pc, #300]	@ (8003814 <processJoinAccept+0x288>)
 80036e6:	f7fe f9e7 	bl	8001ab8 <os_rlsbf4>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036f0:	4a41      	ldr	r2, [pc, #260]	@ (80037f8 <processJoinAccept+0x26c>)
 80036f2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7fe ff12 	bl	8002520 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b11      	cmp	r3, #17
 8003700:	d920      	bls.n	8003744 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003702:	230d      	movs	r3, #13
 8003704:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003706:	2303      	movs	r3, #3
 8003708:	75bb      	strb	r3, [r7, #22]
 800370a:	e018      	b.n	800373e <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003712:	4a39      	ldr	r2, [pc, #228]	@ (80037f8 <processJoinAccept+0x26c>)
 8003714:	4413      	add	r3, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f802 	bl	8002720 <convFreq>
 800371c:	60b8      	str	r0, [r7, #8]
            if( freq )
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003724:	7db8      	ldrb	r0, [r7, #22]
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	2200      	movs	r2, #0
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	f7fe ff7d 	bl	800262c <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003732:	7dbb      	ldrb	r3, [r7, #22]
 8003734:	3301      	adds	r3, #1
 8003736:	75bb      	strb	r3, [r7, #22]
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	3303      	adds	r3, #3
 800373c:	75fb      	strb	r3, [r7, #23]
 800373e:	7dbb      	ldrb	r3, [r7, #22]
 8003740:	2b07      	cmp	r3, #7
 8003742:	d9e3      	bls.n	800370c <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003744:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <processJoinAccept+0x26c>)
 8003746:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800374a:	3b01      	subs	r3, #1
 800374c:	b298      	uxth	r0, r3
 800374e:	4b32      	ldr	r3, [pc, #200]	@ (8003818 <processJoinAccept+0x28c>)
 8003750:	4a32      	ldr	r2, [pc, #200]	@ (800381c <processJoinAccept+0x290>)
 8003752:	492d      	ldr	r1, [pc, #180]	@ (8003808 <processJoinAccept+0x27c>)
 8003754:	f7fe fbac 	bl	8001eb0 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <processJoinAccept+0x26c>)
 800375a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800375e:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <processJoinAccept+0x1de>
 8003766:	f7fe f883 	bl	8001870 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <processJoinAccept+0x26c>)
 800376c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8003778:	4b1f      	ldr	r3, [pc, #124]	@ (80037f8 <processJoinAccept+0x26c>)
 800377a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800377e:	4a1e      	ldr	r2, [pc, #120]	@ (80037f8 <processJoinAccept+0x26c>)
 8003780:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe f968 	bl	8001a5c <lowerDR>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <processJoinAccept+0x26c>)
 8003792:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <processJoinAccept+0x26c>)
 8003798:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800379c:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 80037a0:	f023 0302 	bic.w	r3, r3, #2
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <processJoinAccept+0x26c>)
 80037a8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 80037ac:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <processJoinAccept+0x26c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 80037b4:	f7ff f9f2 	bl	8002b9c <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <processJoinAccept+0x26c>)
 80037ba:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b0c      	ldr	r3, [pc, #48]	@ (80037f8 <processJoinAccept+0x26c>)
 80037c6:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 80037ca:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <processJoinAccept+0x26c>)
 80037cc:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <processJoinAccept+0x26c>)
 80037d2:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <processJoinAccept+0x26c>)
 80037d8:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <processJoinAccept+0x25c>
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <processJoinAccept+0x26c>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 80037e8:	2006      	movs	r0, #6
 80037ea:	f7ff f9b9 	bl	8002b60 <reportEvent>
    return 1;
 80037ee:	2301      	movs	r3, #1
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	2000019c 	.word	0x2000019c
 80037fc:	08003575 	.word	0x08003575
 8003800:	08002b4d 	.word	0x08002b4d
 8003804:	200001b0 	.word	0x200001b0
 8003808:	200002e5 	.word	0x200002e5
 800380c:	200002e4 	.word	0x200002e4
 8003810:	200002eb 	.word	0x200002eb
 8003814:	200002e8 	.word	0x200002e8
 8003818:	200002a0 	.word	0x200002a0
 800381c:	20000290 	.word	0x20000290

08003820 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003828:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <processRx2Jacc+0x28>)
 800382a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <processRx2Jacc+0x28>)
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 800383a:	f7ff fea7 	bl	800358c <processJoinAccept>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000019c 	.word	0x2000019c

0800384c <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8003854:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <setupRx2Jacc+0x1c>)
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <setupRx2Jacc+0x20>)
 8003858:	61da      	str	r2, [r3, #28]
    setupRx2();
 800385a:	f7ff fdcf 	bl	80033fc <setupRx2>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000019c 	.word	0x2000019c
 800386c:	08003821 	.word	0x08003821

08003870 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <processRx1Jacc+0x2c>)
 800387a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <processRx1Jacc+0x1c>
 8003882:	f7ff fe83 	bl	800358c <processJoinAccept>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d103      	bne.n	8003894 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 800388c:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <processRx1Jacc+0x30>)
 800388e:	4805      	ldr	r0, [pc, #20]	@ (80038a4 <processRx1Jacc+0x34>)
 8003890:	f7ff fdd4 	bl	800343c <schedRx2>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000019c 	.word	0x2000019c
 80038a0:	0800384d 	.word	0x0800384d
 80038a4:	0002ee00 	.word	0x0002ee00

080038a8 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 80038b0:	4803      	ldr	r0, [pc, #12]	@ (80038c0 <setupRx1Jacc+0x18>)
 80038b2:	f7ff fdeb 	bl	800348c <setupRx1>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	08003871 	.word	0x08003871

080038c4 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 80038cc:	4903      	ldr	r1, [pc, #12]	@ (80038dc <jreqDone+0x18>)
 80038ce:	4804      	ldr	r0, [pc, #16]	@ (80038e0 <jreqDone+0x1c>)
 80038d0:	f7ff fdfe 	bl	80034d0 <txDone>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	080038a9 	.word	0x080038a9
 80038e0:	00027100 	.word	0x00027100

080038e4 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
    processDnData();
 80038ec:	f000 fbc6 	bl	800407c <processDnData>
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <processRx2DnData+0x48>)
 8003902:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <processRx2DnData+0x48>)
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003912:	f001 fa9f 	bl	8004e54 <os_getTime>
 8003916:	4603      	mov	r3, r0
 8003918:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 800391c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8003920:	2002      	movs	r0, #2
 8003922:	f7fe fd4f 	bl	80023c4 <rndDelay>
 8003926:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003928:	4423      	add	r3, r4
 800392a:	4a06      	ldr	r2, [pc, #24]	@ (8003944 <processRx2DnData+0x4c>)
 800392c:	4619      	mov	r1, r3
 800392e:	4806      	ldr	r0, [pc, #24]	@ (8003948 <processRx2DnData+0x50>)
 8003930:	f001 fafa 	bl	8004f28 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003934:	e001      	b.n	800393a <processRx2DnData+0x42>
    }
    processDnData();
 8003936:	f000 fba1 	bl	800407c <processDnData>
}
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	2000019c 	.word	0x2000019c
 8003944:	080038e5 	.word	0x080038e5
 8003948:	200001b0 	.word	0x200001b0

0800394c <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <setupRx2DnData+0x1c>)
 8003956:	4a05      	ldr	r2, [pc, #20]	@ (800396c <setupRx2DnData+0x20>)
 8003958:	61da      	str	r2, [r3, #28]
    setupRx2();
 800395a:	f7ff fd4f 	bl	80033fc <setupRx2>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000019c 	.word	0x2000019c
 800396c:	080038f9 	.word	0x080038f9

08003970 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 8003978:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <processRx1DnData+0x40>)
 800397a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <processRx1DnData+0x1c>
 8003982:	f000 fb7b 	bl	800407c <processDnData>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10c      	bne.n	80039a6 <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 800398c:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <processRx1DnData+0x40>)
 800398e:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003992:	3301      	adds	r3, #1
 8003994:	461a      	mov	r2, r3
 8003996:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4905      	ldr	r1, [pc, #20]	@ (80039b4 <processRx1DnData+0x44>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fd4b 	bl	800343c <schedRx2>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000019c 	.word	0x2000019c
 80039b4:	0800394d 	.word	0x0800394d

080039b8 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 80039c0:	4803      	ldr	r0, [pc, #12]	@ (80039d0 <setupRx1DnData+0x18>)
 80039c2:	f7ff fd63 	bl	800348c <setupRx1>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08003971 	.word	0x08003971

080039d4 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 80039dc:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <updataDone+0x28>)
 80039de:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 80039e2:	461a      	mov	r2, r3
 80039e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	4904      	ldr	r1, [pc, #16]	@ (8003a00 <updataDone+0x2c>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fd6e 	bl	80034d0 <txDone>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000019c 	.word	0x2000019c
 8003a00:	080039b9 	.word	0x080039b9

08003a04 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 8003a0a:	4ba3      	ldr	r3, [pc, #652]	@ (8003c98 <buildDataFrame+0x294>)
 8003a0c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003a10:	f003 0318 	and.w	r3, r3, #24
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <buildDataFrame+0x2a>
 8003a26:	4b9c      	ldr	r3, [pc, #624]	@ (8003c98 <buildDataFrame+0x294>)
 8003a28:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8003a2c:	e000      	b.n	8003a30 <buildDataFrame+0x2c>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003a32:	2308      	movs	r3, #8
 8003a34:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 8003a36:	4b98      	ldr	r3, [pc, #608]	@ (8003c98 <buildDataFrame+0x294>)
 8003a38:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f240 4302 	movw	r3, #1026	@ 0x402
 8003a42:	4013      	ands	r3, r2
 8003a44:	f240 4202 	movw	r2, #1026	@ 0x402
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d11c      	bne.n	8003a86 <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 8003a4c:	4a92      	ldr	r2, [pc, #584]	@ (8003c98 <buildDataFrame+0x294>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003a56:	2210      	movs	r2, #16
 8003a58:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 8003a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c98 <buildDataFrame+0x294>)
 8003a5c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8003a60:	b25a      	sxtb	r2, r3
 8003a62:	4b8d      	ldr	r3, [pc, #564]	@ (8003c98 <buildDataFrame+0x294>)
 8003a64:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	b25b      	sxtb	r3, r3
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	b25a      	sxtb	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b2d1      	uxtb	r1, r2
 8003a76:	4a88      	ldr	r2, [pc, #544]	@ (8003c98 <buildDataFrame+0x294>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3302      	adds	r3, #2
 8003a84:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 8003a86:	4b84      	ldr	r3, [pc, #528]	@ (8003c98 <buildDataFrame+0x294>)
 8003a88:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8003a90:	4a81      	ldr	r2, [pc, #516]	@ (8003c98 <buildDataFrame+0x294>)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	701a      	strb	r2, [r3, #0]
        end += 1;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8003aa4:	4b7c      	ldr	r3, [pc, #496]	@ (8003c98 <buildDataFrame+0x294>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 8003aac:	4b7a      	ldr	r3, [pc, #488]	@ (8003c98 <buildDataFrame+0x294>)
 8003aae:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01a      	beq.n	8003aec <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8003ab6:	4a78      	ldr	r2, [pc, #480]	@ (8003c98 <buildDataFrame+0x294>)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003ac4:	4b74      	ldr	r3, [pc, #464]	@ (8003c98 <buildDataFrame+0x294>)
 8003ac6:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3301      	adds	r3, #1
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	b2d1      	uxtb	r1, r2
 8003ad4:	4a70      	ldr	r2, [pc, #448]	@ (8003c98 <buildDataFrame+0x294>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	460a      	mov	r2, r1
 8003ada:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8003ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c98 <buildDataFrame+0x294>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 8003aec:	4b6a      	ldr	r3, [pc, #424]	@ (8003c98 <buildDataFrame+0x294>)
 8003aee:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d021      	beq.n	8003b3a <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 8003af6:	4a68      	ldr	r2, [pc, #416]	@ (8003c98 <buildDataFrame+0x294>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003b00:	2206      	movs	r2, #6
 8003b02:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	1c5c      	adds	r4, r3, #1
 8003b08:	f7fe f869 	bl	8001bde <os_getBattLevel>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b61      	ldr	r3, [pc, #388]	@ (8003c98 <buildDataFrame+0x294>)
 8003b12:	4423      	add	r3, r4
 8003b14:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c98 <buildDataFrame+0x294>)
 8003b1e:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8003b22:	4a5d      	ldr	r2, [pc, #372]	@ (8003c98 <buildDataFrame+0x294>)
 8003b24:	4413      	add	r3, r2
 8003b26:	460a      	mov	r2, r1
 8003b28:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3303      	adds	r3, #3
 8003b30:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003b32:	4b59      	ldr	r3, [pc, #356]	@ (8003c98 <buildDataFrame+0x294>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 8003b3a:	4b57      	ldr	r3, [pc, #348]	@ (8003c98 <buildDataFrame+0x294>)
 8003b3c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01a      	beq.n	8003b7a <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 8003b44:	4a54      	ldr	r2, [pc, #336]	@ (8003c98 <buildDataFrame+0x294>)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003b4e:	2203      	movs	r2, #3
 8003b50:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8003b52:	4b51      	ldr	r3, [pc, #324]	@ (8003c98 <buildDataFrame+0x294>)
 8003b54:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f002 0207 	and.w	r2, r2, #7
 8003b60:	b2d1      	uxtb	r1, r2
 8003b62:	4a4d      	ldr	r2, [pc, #308]	@ (8003c98 <buildDataFrame+0x294>)
 8003b64:	4413      	add	r3, r2
 8003b66:	460a      	mov	r2, r1
 8003b68:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3302      	adds	r3, #2
 8003b70:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 8003b72:	4b49      	ldr	r3, [pc, #292]	@ (8003c98 <buildDataFrame+0x294>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 8003b7a:	4b47      	ldr	r3, [pc, #284]	@ (8003c98 <buildDataFrame+0x294>)
 8003b7c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 8003b84:	4a44      	ldr	r2, [pc, #272]	@ (8003c98 <buildDataFrame+0x294>)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003b8e:	2212      	movs	r2, #18
 8003b90:	701a      	strb	r2, [r3, #0]
        end += 1;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 8003b98:	4b3f      	ldr	r3, [pc, #252]	@ (8003c98 <buildDataFrame+0x294>)
 8003b9a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8003c98 <buildDataFrame+0x294>)
 8003ba4:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da03      	bge.n	8003bb4 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 8003bac:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <buildDataFrame+0x294>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 8003bb4:	4b38      	ldr	r3, [pc, #224]	@ (8003c98 <buildDataFrame+0x294>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8003bbc:	4b36      	ldr	r3, [pc, #216]	@ (8003c98 <buildDataFrame+0x294>)
 8003bbe:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01a      	beq.n	8003bfc <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 8003bc6:	4a34      	ldr	r2, [pc, #208]	@ (8003c98 <buildDataFrame+0x294>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003bd0:	2211      	movs	r2, #17
 8003bd2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003bd4:	4b30      	ldr	r3, [pc, #192]	@ (8003c98 <buildDataFrame+0x294>)
 8003bd6:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f002 0201 	and.w	r2, r2, #1
 8003be2:	b2d1      	uxtb	r1, r2
 8003be4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c98 <buildDataFrame+0x294>)
 8003be6:	4413      	add	r3, r2
 8003be8:	460a      	mov	r2, r1
 8003bea:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8003bf4:	4b28      	ldr	r3, [pc, #160]	@ (8003c98 <buildDataFrame+0x294>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 8003bfc:	4b26      	ldr	r3, [pc, #152]	@ (8003c98 <buildDataFrame+0x294>)
 8003bfe:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01a      	beq.n	8003c3c <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 8003c06:	4a24      	ldr	r2, [pc, #144]	@ (8003c98 <buildDataFrame+0x294>)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003c10:	2207      	movs	r2, #7
 8003c12:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003c14:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <buildDataFrame+0x294>)
 8003c16:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f002 0203 	and.w	r2, r2, #3
 8003c22:	b2d1      	uxtb	r1, r2
 8003c24:	4a1c      	ldr	r2, [pc, #112]	@ (8003c98 <buildDataFrame+0x294>)
 8003c26:	4413      	add	r3, r2
 8003c28:	460a      	mov	r2, r1
 8003c2a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3302      	adds	r3, #2
 8003c32:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8003c34:	4b18      	ldr	r3, [pc, #96]	@ (8003c98 <buildDataFrame+0x294>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b18      	cmp	r3, #24
 8003c40:	dd01      	ble.n	8003c46 <buildDataFrame+0x242>
 8003c42:	f7fd fe15 	bl	8001870 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <buildDataFrame+0x250>
 8003c4c:	79bb      	ldrb	r3, [r7, #6]
 8003c4e:	3305      	adds	r3, #5
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e000      	b.n	8003c56 <buildDataFrame+0x252>
 8003c54:	2304      	movs	r3, #4
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d905      	bls.n	8003c70 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <buildDataFrame+0x294>)
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003c78:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <buildDataFrame+0x294>)
 8003c7a:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <buildDataFrame+0x294>)
 8003c80:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	4a03      	ldr	r2, [pc, #12]	@ (8003c98 <buildDataFrame+0x294>)
 8003c8c:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	db03      	blt.n	8003c9c <buildDataFrame+0x298>
 8003c94:	2240      	movs	r2, #64	@ 0x40
 8003c96:	e002      	b.n	8003c9e <buildDataFrame+0x29a>
 8003c98:	2000019c 	.word	0x2000019c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3b08      	subs	r3, #8
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	4313      	orrs	r3, r2
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003cb2:	4b40      	ldr	r3, [pc, #256]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003cb4:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8003db8 <buildDataFrame+0x3b4>)
 8003cba:	4b3e      	ldr	r3, [pc, #248]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003cbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fd ff49 	bl	8001b5a <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003cca:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8003cd2:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003cd4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003cd8:	3301      	adds	r3, #1
 8003cda:	4a36      	ldr	r2, [pc, #216]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003cdc:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8003ce0:	4a36      	ldr	r2, [pc, #216]	@ (8003dbc <buildDataFrame+0x3b8>)
 8003ce2:	4b34      	ldr	r3, [pc, #208]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003ce4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fd ff1b 	bl	8001b2c <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 8003cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d03e      	beq.n	8003d82 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8003d04:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d06:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00c      	beq.n	8003d28 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003d0e:	4b29      	ldr	r3, [pc, #164]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d10:	2280      	movs	r2, #128	@ 0x80
 8003d12:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 8003d16:	4b27      	ldr	r3, [pc, #156]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d18:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <buildDataFrame+0x324>
 8003d20:	4b24      	ldr	r3, [pc, #144]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8003d28:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d2a:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003d38:	460a      	mov	r2, r1
 8003d3a:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <buildDataFrame+0x3bc>)
 8003d42:	4413      	add	r3, r2
 8003d44:	79ba      	ldrb	r2, [r7, #6]
 8003d46:	491f      	ldr	r1, [pc, #124]	@ (8003dc4 <buildDataFrame+0x3c0>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f007 f995 	bl	800b078 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003d4e:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d50:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <buildDataFrame+0x358>
 8003d58:	481b      	ldr	r0, [pc, #108]	@ (8003dc8 <buildDataFrame+0x3c4>)
 8003d5a:	e000      	b.n	8003d5e <buildDataFrame+0x35a>
 8003d5c:	481b      	ldr	r0, [pc, #108]	@ (8003dcc <buildDataFrame+0x3c8>)
 8003d5e:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d60:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8003d64:	4b13      	ldr	r3, [pc, #76]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d66:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003d6a:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003d70:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <buildDataFrame+0x3bc>)
 8003d72:	4413      	add	r3, r2
 8003d74:	79ba      	ldrb	r2, [r7, #6]
 8003d76:	9201      	str	r2, [sp, #4]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	f7fe f853 	bl	8001e28 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 8003d82:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d84:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003d8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	3b04      	subs	r3, #4
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <buildDataFrame+0x3bc>)
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	480a      	ldr	r0, [pc, #40]	@ (8003dc8 <buildDataFrame+0x3c4>)
 8003d9e:	f7fd ffc5 	bl	8001d2c <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8003da2:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <buildDataFrame+0x3b0>)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd90      	pop	{r4, r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000019c 	.word	0x2000019c
 8003db8:	200002e5 	.word	0x200002e5
 8003dbc:	200002ea 	.word	0x200002ea
 8003dc0:	200002e4 	.word	0x200002e4
 8003dc4:	20000259 	.word	0x20000259
 8003dc8:	20000290 	.word	0x20000290
 8003dcc:	200002a0 	.word	0x200002a0

08003dd0 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f001 fe61 	bl	8005aa0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003dde:	4823      	ldr	r0, [pc, #140]	@ (8003e6c <onBcnRx+0x9c>)
 8003de0:	f001 f85e 	bl	8004ea0 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003de4:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <onBcnRx+0xa0>)
 8003de6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003dee:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <onBcnRx+0xa0>)
 8003df0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003df4:	f023 0303 	bic.w	r3, r3, #3
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <onBcnRx+0xa0>)
 8003dfc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003e00:	2001      	movs	r0, #1
 8003e02:	f7fe fead 	bl	8002b60 <reportEvent>
        return;
 8003e06:	e02d      	b.n	8003e64 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003e08:	f7fe ff2e 	bl	8002c68 <decodeBeacon>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	dc0f      	bgt.n	8003e32 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003e12:	4b17      	ldr	r3, [pc, #92]	@ (8003e70 <onBcnRx+0xa0>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	f001 fe40 	bl	8005aa0 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003e20:	4b13      	ldr	r3, [pc, #76]	@ (8003e70 <onBcnRx+0xa0>)
 8003e22:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <onBcnRx+0xa4>)
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4810      	ldr	r0, [pc, #64]	@ (8003e6c <onBcnRx+0x9c>)
 8003e2c:	f001 f87c 	bl	8004f28 <os_setTimedCallback>
        return;
 8003e30:	e018      	b.n	8003e64 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003e32:	2101      	movs	r1, #1
 8003e34:	200d      	movs	r0, #13
 8003e36:	f7fe f983 	bl	8002140 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e70 <onBcnRx+0xa0>)
 8003e3c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <onBcnRx+0xa0>)
 8003e48:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003e4c:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <onBcnRx+0xa0>)
 8003e4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <onBcnRx+0xa0>)
 8003e5a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003e5e:	2002      	movs	r0, #2
 8003e60:	f7fe fe7e 	bl	8002b60 <reportEvent>
}
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200001b0 	.word	0x200001b0
 8003e70:	2000019c 	.word	0x2000019c
 8003e74:	08003dd1 	.word	0x08003dd1

08003e78 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003e7c:	4b27      	ldr	r3, [pc, #156]	@ (8003f1c <startScan+0xa4>)
 8003e7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <startScan+0x1c>
 8003e86:	4b25      	ldr	r3, [pc, #148]	@ (8003f1c <startScan+0xa4>)
 8003e88:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <startScan+0x20>
 8003e94:	f7fd fcec 	bl	8001870 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003e98:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <startScan+0xa4>)
 8003e9a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d137      	bne.n	8003f16 <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <startScan+0xa4>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <startScan+0xa4>)
 8003eb0:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <startScan+0xa4>)
 8003eb6:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <startScan+0xa4>)
 8003ebc:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003ec0:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <startScan+0xa4>)
 8003ec2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <startScan+0xa4>)
 8003ec8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <startScan+0xa4>)
 8003eda:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 8003ede:	f7fe fd71 	bl	80029c4 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003ee2:	f000 ffb7 	bl	8004e54 <os_getTime>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8003eec:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <startScan+0xa4>)
 8003ef2:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <startScan+0xa4>)
 8003ef8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003efc:	4a07      	ldr	r2, [pc, #28]	@ (8003f1c <startScan+0xa4>)
 8003efe:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <startScan+0xa4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a06      	ldr	r2, [pc, #24]	@ (8003f20 <startScan+0xa8>)
 8003f06:	4619      	mov	r1, r3
 8003f08:	4806      	ldr	r0, [pc, #24]	@ (8003f24 <startScan+0xac>)
 8003f0a:	f001 f80d 	bl	8004f28 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003f0e:	2003      	movs	r0, #3
 8003f10:	f001 fdc6 	bl	8005aa0 <os_radio>
 8003f14:	e000      	b.n	8003f18 <startScan+0xa0>
        return;
 8003f16:	bf00      	nop
}
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000019c 	.word	0x2000019c
 8003f20:	08003dd1 	.word	0x08003dd1
 8003f24:	200001b0 	.word	0x200001b0

08003f28 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003f32:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <buildJoinRequest+0x64>)
 8003f34:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	79fa      	ldrb	r2, [r7, #7]
 8003f3a:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fd33 	bl	80049ac <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3309      	adds	r3, #9
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fd42 	bl	80049d4 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3311      	adds	r3, #17
 8003f54:	4a0e      	ldr	r2, [pc, #56]	@ (8003f90 <buildJoinRequest+0x68>)
 8003f56:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd fde5 	bl	8001b2c <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003f62:	2113      	movs	r1, #19
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7fd ff09 	bl	8001d7c <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <buildJoinRequest+0x68>)
 8003f6c:	2217      	movs	r2, #23
 8003f6e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 8003f72:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <buildJoinRequest+0x68>)
 8003f74:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <buildJoinRequest+0x68>)
 8003f7e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200002e4 	.word	0x200002e4
 8003f90:	2000019c 	.word	0x2000019c

08003f94 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003f9c:	2005      	movs	r0, #5
 8003f9e:	f7fe fddf 	bl	8002b60 <reportEvent>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003fb0:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <LMIC_startJoining+0x88>)
 8003fb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d138      	bne.n	800402c <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003fba:	4b1e      	ldr	r3, [pc, #120]	@ (8004034 <LMIC_startJoining+0x88>)
 8003fbc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fc0:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <LMIC_startJoining+0x20>
 8003fc8:	f7fd fc52 	bl	8001870 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003fcc:	4b19      	ldr	r3, [pc, #100]	@ (8004034 <LMIC_startJoining+0x88>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003fd4:	4b17      	ldr	r3, [pc, #92]	@ (8004034 <LMIC_startJoining+0x88>)
 8003fd6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fda:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <LMIC_startJoining+0x88>)
 8003fe6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003fea:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <LMIC_startJoining+0x88>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8003ff2:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <LMIC_startJoining+0x88>)
 8003ff4:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <LMIC_startJoining+0x88>)
 8003ffa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <LMIC_startJoining+0x88>)
 8004000:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8004004:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <LMIC_startJoining+0x88>)
 8004006:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 800400a:	f7fe fd01 	bl	8002a10 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 800400e:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <LMIC_startJoining+0x88>)
 8004010:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <LMIC_startJoining+0x88>)
 800401c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8004020:	4905      	ldr	r1, [pc, #20]	@ (8004038 <LMIC_startJoining+0x8c>)
 8004022:	4806      	ldr	r0, [pc, #24]	@ (800403c <LMIC_startJoining+0x90>)
 8004024:	f000 ff5a 	bl	8004edc <os_setCallback>
        return 1;
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000019c 	.word	0x2000019c
 8004038:	08003f95 	.word	0x08003f95
 800403c:	200001b0 	.word	0x200001b0

08004040 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8004048:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <processPingRx+0x38>)
 800404a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <processPingRx+0x38>)
 8004054:	2204      	movs	r2, #4
 8004056:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 800405a:	f7fe fe99 	bl	8002d90 <decodeFrame>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8004064:	200d      	movs	r0, #13
 8004066:	f7fe fd7b 	bl	8002b60 <reportEvent>
            return;
 800406a:	e001      	b.n	8004070 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 800406c:	f000 fa2a 	bl	80044c4 <engineUpdate>
}
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	2000019c 	.word	0x2000019c

0800407c <processDnData>:


static bit_t processDnData (void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8004080:	4b76      	ldr	r3, [pc, #472]	@ (800425c <processDnData+0x1e0>)
 8004082:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <processDnData+0x16>
 800408e:	f7fd fbef 	bl	8001870 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8004092:	4b72      	ldr	r3, [pc, #456]	@ (800425c <processDnData+0x1e0>)
 8004094:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 80ce 	bne.w	800423a <processDnData+0x1be>
      norx:
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 80040a2:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 80040a4:	4b6d      	ldr	r3, [pc, #436]	@ (800425c <processDnData+0x1e0>)
 80040a6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d038      	beq.n	8004120 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 80040ae:	4b6b      	ldr	r3, [pc, #428]	@ (800425c <processDnData+0x1e0>)
 80040b0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80040b4:	2b07      	cmp	r3, #7
 80040b6:	d82e      	bhi.n	8004116 <processDnData+0x9a>
                LMIC.txCnt += 1;
 80040b8:	4b68      	ldr	r3, [pc, #416]	@ (800425c <processDnData+0x1e0>)
 80040ba:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80040be:	3301      	adds	r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4b66      	ldr	r3, [pc, #408]	@ (800425c <processDnData+0x1e0>)
 80040c4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 80040c8:	4b64      	ldr	r3, [pc, #400]	@ (800425c <processDnData+0x1e0>)
 80040ca:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80040ce:	4a63      	ldr	r2, [pc, #396]	@ (800425c <processDnData+0x1e0>)
 80040d0:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 80040d4:	4611      	mov	r1, r2
 80040d6:	4a62      	ldr	r2, [pc, #392]	@ (8004260 <processDnData+0x1e4>)
 80040d8:	5c52      	ldrb	r2, [r2, r1]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fcbd 	bl	8001a5c <lowerDR>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80040e8:	4619      	mov	r1, r3
 80040ea:	2002      	movs	r0, #2
 80040ec:	f7fe f9ea 	bl	80024c4 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 80040f0:	4b5a      	ldr	r3, [pc, #360]	@ (800425c <processDnData+0x1e0>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2103      	movs	r1, #3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe f9a2 	bl	8002440 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 80040fc:	4b57      	ldr	r3, [pc, #348]	@ (800425c <processDnData+0x1e0>)
 80040fe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004106:	b29a      	uxth	r2, r3
 8004108:	4b54      	ldr	r3, [pc, #336]	@ (800425c <processDnData+0x1e0>)
 800410a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 800410e:	f000 f9d9 	bl	80044c4 <engineUpdate>
                return 1;
 8004112:	2301      	movs	r3, #1
 8004114:	e09f      	b.n	8004256 <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8004116:	4b51      	ldr	r3, [pc, #324]	@ (800425c <processDnData+0x1e0>)
 8004118:	2260      	movs	r2, #96	@ 0x60
 800411a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 800411e:	e003      	b.n	8004128 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8004120:	4b4e      	ldr	r3, [pc, #312]	@ (800425c <processDnData+0x1e0>)
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8004128:	4b4c      	ldr	r3, [pc, #304]	@ (800425c <processDnData+0x1e0>)
 800412a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800412e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8004132:	d009      	beq.n	8004148 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8004134:	4b49      	ldr	r3, [pc, #292]	@ (800425c <processDnData+0x1e0>)
 8004136:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800413a:	b2db      	uxtb	r3, r3
 800413c:	3301      	adds	r3, #1
 800413e:	b2db      	uxtb	r3, r3
 8004140:	b25a      	sxtb	r2, r3
 8004142:	4b46      	ldr	r3, [pc, #280]	@ (800425c <processDnData+0x1e0>)
 8004144:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8004148:	4b44      	ldr	r3, [pc, #272]	@ (800425c <processDnData+0x1e0>)
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8004150:	4b42      	ldr	r3, [pc, #264]	@ (800425c <processDnData+0x1e0>)
 8004152:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8004156:	4b41      	ldr	r3, [pc, #260]	@ (800425c <processDnData+0x1e0>)
 8004158:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 800415c:	e000      	b.n	8004160 <processDnData+0xe4>
    }
    goto txcomplete;
 800415e:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8004160:	4b3e      	ldr	r3, [pc, #248]	@ (800425c <processDnData+0x1e0>)
 8004162:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004166:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800416a:	b29a      	uxth	r2, r3
 800416c:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <processDnData+0x1e0>)
 800416e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8004172:	4b3a      	ldr	r3, [pc, #232]	@ (800425c <processDnData+0x1e0>)
 8004174:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	2b00      	cmp	r3, #0
 800417e:	d012      	beq.n	80041a6 <processDnData+0x12a>
 8004180:	4b36      	ldr	r3, [pc, #216]	@ (800425c <processDnData+0x1e0>)
 8004182:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 800418e:	4b33      	ldr	r3, [pc, #204]	@ (800425c <processDnData+0x1e0>)
 8004190:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004194:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004198:	b29a      	uxth	r2, r3
 800419a:	4b30      	ldr	r3, [pc, #192]	@ (800425c <processDnData+0x1e0>)
 800419c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 80041a0:	200f      	movs	r0, #15
 80041a2:	f7fe fcdd 	bl	8002b60 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 80041a6:	200a      	movs	r0, #10
 80041a8:	f7fe fcda 	bl	8002b60 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 80041ac:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <processDnData+0x1e0>)
 80041ae:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80041b2:	2b18      	cmp	r3, #24
 80041b4:	dd1c      	ble.n	80041f0 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 80041b6:	4b29      	ldr	r3, [pc, #164]	@ (800425c <processDnData+0x1e0>)
 80041b8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fc1f 	bl	8001a00 <decDR>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80041c8:	4619      	mov	r1, r3
 80041ca:	2003      	movs	r0, #3
 80041cc:	f7fe f97a 	bl	80024c4 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 80041d0:	4b22      	ldr	r3, [pc, #136]	@ (800425c <processDnData+0x1e0>)
 80041d2:	220c      	movs	r2, #12
 80041d4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 80041d8:	4b20      	ldr	r3, [pc, #128]	@ (800425c <processDnData+0x1e0>)
 80041da:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80041de:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <processDnData+0x1e0>)
 80041e6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 80041ea:	200e      	movs	r0, #14
 80041ec:	f7fe fcb8 	bl	8002b60 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <processDnData+0x1e0>)
 80041f2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 80041fa:	4b18      	ldr	r3, [pc, #96]	@ (800425c <processDnData+0x1e0>)
 80041fc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8004208:	2002      	movs	r0, #2
 800420a:	f7fe fca9 	bl	8002b60 <reportEvent>
                LMIC.bcninfoTries = 0;
 800420e:	4b13      	ldr	r3, [pc, #76]	@ (800425c <processDnData+0x1e0>)
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004216:	e00e      	b.n	8004236 <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <processDnData+0x1e0>)
 800421a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800421e:	3b01      	subs	r3, #1
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b0e      	ldr	r3, [pc, #56]	@ (800425c <processDnData+0x1e0>)
 8004224:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <processDnData+0x1e0>)
 800422a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8004232:	f7ff fe21 	bl	8003e78 <startScan>
        return 1;
 8004236:	2301      	movs	r3, #1
 8004238:	e00d      	b.n	8004256 <processDnData+0x1da>
    if( !decodeFrame() ) {
 800423a:	f7fe fda9 	bl	8002d90 <decodeFrame>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d18c      	bne.n	800415e <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8004244:	4b05      	ldr	r3, [pc, #20]	@ (800425c <processDnData+0x1e0>)
 8004246:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	f43f af27 	beq.w	80040a2 <processDnData+0x26>
            return 0;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	2000019c 	.word	0x2000019c
 8004260:	0800c4a4 	.word	0x0800c4a4

08004264 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 800426c:	4b81      	ldr	r3, [pc, #516]	@ (8004474 <processBeacon+0x210>)
 800426e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004272:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8004274:	4b7f      	ldr	r3, [pc, #508]	@ (8004474 <processBeacon+0x210>)
 8004276:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800427a:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800427c:	4b7d      	ldr	r3, [pc, #500]	@ (8004474 <processBeacon+0x210>)
 800427e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8087 	beq.w	8004396 <processBeacon+0x132>
 8004288:	f7fe fcee 	bl	8002c68 <decodeBeacon>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	f340 8081 	ble.w	8004396 <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8004294:	2304      	movs	r3, #4
 8004296:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 80042a2:	2100      	movs	r1, #0
 80042a4:	200d      	movs	r0, #13
 80042a6:	f7fd ff4b 	bl	8002140 <calcBcnRxWindowFromMillis>
            goto rev;
 80042aa:	e0d2      	b.n	8004452 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	4b70      	ldr	r3, [pc, #448]	@ (8004474 <processBeacon+0x210>)
 80042b2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 80042c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004474 <processBeacon+0x210>)
 80042c6:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d013      	beq.n	80042f6 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 80042ce:	4b69      	ldr	r3, [pc, #420]	@ (8004474 <processBeacon+0x210>)
 80042d0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042da:	4966      	ldr	r1, [pc, #408]	@ (8004474 <processBeacon+0x210>)
 80042dc:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 80042e0:	1a59      	subs	r1, r3, r1
 80042e2:	4b64      	ldr	r3, [pc, #400]	@ (8004474 <processBeacon+0x210>)
 80042e4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80042e8:	3301      	adds	r3, #1
 80042ea:	fb91 f3f3 	sdiv	r3, r1, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 80042f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004474 <processBeacon+0x210>)
 80042f8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d127      	bne.n	8004354 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8004304:	4b5b      	ldr	r3, [pc, #364]	@ (8004474 <processBeacon+0x210>)
 8004306:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800430a:	b29a      	uxth	r2, r3
 800430c:	8abb      	ldrh	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	b29b      	uxth	r3, r3
 8004312:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8004314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da03      	bge.n	8004324 <processBeacon+0xc0>
 800431c:	8a7b      	ldrh	r3, [r7, #18]
 800431e:	425b      	negs	r3, r3
 8004320:	b29b      	uxth	r3, r3
 8004322:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8004324:	4a53      	ldr	r2, [pc, #332]	@ (8004474 <processBeacon+0x210>)
 8004326:	8a7b      	ldrh	r3, [r7, #18]
 8004328:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 800432c:	4b51      	ldr	r3, [pc, #324]	@ (8004474 <processBeacon+0x210>)
 800432e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8004332:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004336:	429a      	cmp	r2, r3
 8004338:	dd03      	ble.n	8004342 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 800433a:	4a4e      	ldr	r2, [pc, #312]	@ (8004474 <processBeacon+0x210>)
 800433c:	8a7b      	ldrh	r3, [r7, #18]
 800433e:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004342:	4b4c      	ldr	r3, [pc, #304]	@ (8004474 <processBeacon+0x210>)
 8004344:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004348:	f023 0308 	bic.w	r3, r3, #8
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b49      	ldr	r3, [pc, #292]	@ (8004474 <processBeacon+0x210>)
 8004350:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 8004354:	4a47      	ldr	r2, [pc, #284]	@ (8004474 <processBeacon+0x210>)
 8004356:	8abb      	ldrh	r3, [r7, #20]
 8004358:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 800435c:	4b45      	ldr	r3, [pc, #276]	@ (8004474 <processBeacon+0x210>)
 800435e:	2200      	movs	r2, #0
 8004360:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8004364:	4b43      	ldr	r3, [pc, #268]	@ (8004474 <processBeacon+0x210>)
 8004366:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800436a:	4b42      	ldr	r3, [pc, #264]	@ (8004474 <processBeacon+0x210>)
 800436c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004370:	4b40      	ldr	r3, [pc, #256]	@ (8004474 <processBeacon+0x210>)
 8004372:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b3d      	ldr	r3, [pc, #244]	@ (8004474 <processBeacon+0x210>)
 800437e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004382:	4b3c      	ldr	r3, [pc, #240]	@ (8004474 <processBeacon+0x210>)
 8004384:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d14c      	bne.n	800442a <processBeacon+0x1c6>
 8004390:	f7fd fa6e 	bl	8001870 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004394:	e049      	b.n	800442a <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8004396:	2303      	movs	r3, #3
 8004398:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 800439a:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <processBeacon+0x210>)
 800439c:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80043a0:	4b34      	ldr	r3, [pc, #208]	@ (8004474 <processBeacon+0x210>)
 80043a2:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80043a6:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 80043aa:	4413      	add	r3, r2
 80043ac:	4a31      	ldr	r2, [pc, #196]	@ (8004474 <processBeacon+0x210>)
 80043ae:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 80043b2:	4b30      	ldr	r3, [pc, #192]	@ (8004474 <processBeacon+0x210>)
 80043b4:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80043b8:	3380      	adds	r3, #128	@ 0x80
 80043ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004474 <processBeacon+0x210>)
 80043bc:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 80043c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004474 <processBeacon+0x210>)
 80043c2:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80043c6:	3301      	adds	r3, #1
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <processBeacon+0x210>)
 80043cc:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 80043d0:	4b28      	ldr	r3, [pc, #160]	@ (8004474 <processBeacon+0x210>)
 80043d2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80043d6:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80043da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043de:	2104      	movs	r1, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe f82d 	bl	8002440 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 80043e6:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <processBeacon+0x210>)
 80043e8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80043ec:	2b14      	cmp	r3, #20
 80043ee:	d908      	bls.n	8004402 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 80043f0:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <processBeacon+0x210>)
 80043f2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80043f6:	f043 0320 	orr.w	r3, r3, #32
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <processBeacon+0x210>)
 80043fe:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <processBeacon+0x210>)
 8004404:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004408:	2b64      	cmp	r3, #100	@ 0x64
 800440a:	d90f      	bls.n	800442c <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <processBeacon+0x210>)
 800440e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004412:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8004416:	f023 0302 	bic.w	r3, r3, #2
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <processBeacon+0x210>)
 800441e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004422:	200b      	movs	r0, #11
 8004424:	f7fe fb9c 	bl	8002b60 <reportEvent>
            return;
 8004428:	e021      	b.n	800446e <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800442a:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <processBeacon+0x210>)
 800442e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004432:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 8004436:	2103      	movs	r1, #3
 8004438:	2000      	movs	r0, #0
 800443a:	f7fd fe2d 	bl	8002098 <calcRxWindow>
 800443e:	4603      	mov	r3, r0
 8004440:	1ae3      	subs	r3, r4, r3
 8004442:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <processBeacon+0x210>)
 8004444:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004448:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <processBeacon+0x210>)
 800444a:	7c1a      	ldrb	r2, [r3, #16]
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <processBeacon+0x210>)
 800444e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004452:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <processBeacon+0x210>)
 8004454:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004460:	4805      	ldr	r0, [pc, #20]	@ (8004478 <processBeacon+0x214>)
 8004462:	f7fd fef3 	bl	800224c <rxschedInit>
    reportEvent(ev);
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fb79 	bl	8002b60 <reportEvent>
}
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bd90      	pop	{r4, r7, pc}
 8004474:	2000019c 	.word	0x2000019c
 8004478:	200002d0 	.word	0x200002d0

0800447c <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004484:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <startRxBcn+0x1c>)
 8004486:	4a05      	ldr	r2, [pc, #20]	@ (800449c <startRxBcn+0x20>)
 8004488:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 800448a:	2002      	movs	r0, #2
 800448c:	f001 fb08 	bl	8005aa0 <os_radio>
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	2000019c 	.word	0x2000019c
 800449c:	08004265 	.word	0x08004265

080044a0 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <startRxPing+0x1c>)
 80044aa:	4a05      	ldr	r2, [pc, #20]	@ (80044c0 <startRxPing+0x20>)
 80044ac:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80044ae:	2002      	movs	r0, #2
 80044b0:	f001 faf6 	bl	8005aa0 <os_radio>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	2000019c 	.word	0x2000019c
 80044c0:	08004041 	.word	0x08004041

080044c4 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 80044ca:	4b90      	ldr	r3, [pc, #576]	@ (800470c <engineUpdate+0x248>)
 80044cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80044d0:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 81ab 	bne.w	8004830 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 80044da:	4b8c      	ldr	r3, [pc, #560]	@ (800470c <engineUpdate+0x248>)
 80044dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <engineUpdate+0x34>
 80044e4:	4b89      	ldr	r3, [pc, #548]	@ (800470c <engineUpdate+0x248>)
 80044e6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <engineUpdate+0x34>
        LMIC_startJoining();
 80044f2:	f7ff fd5b 	bl	8003fac <LMIC_startJoining>
        return;
 80044f6:	e19e      	b.n	8004836 <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 80044f8:	f000 fcac 	bl	8004e54 <os_getTime>
 80044fc:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004506:	4b81      	ldr	r3, [pc, #516]	@ (800470c <engineUpdate+0x248>)
 8004508:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00f      	beq.n	8004534 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800451a:	4b7c      	ldr	r3, [pc, #496]	@ (800470c <engineUpdate+0x248>)
 800451c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	dd01      	ble.n	800452a <engineUpdate+0x66>
 8004526:	f7fd f9a3 	bl	8001870 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800452a:	4b78      	ldr	r3, [pc, #480]	@ (800470c <engineUpdate+0x248>)
 800452c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004530:	3b40      	subs	r3, #64	@ 0x40
 8004532:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004534:	4b75      	ldr	r3, [pc, #468]	@ (800470c <engineUpdate+0x248>)
 8004536:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800453a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80f2 	beq.w	8004728 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004544:	4b71      	ldr	r3, [pc, #452]	@ (800470c <engineUpdate+0x248>)
 8004546:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800454a:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 800455a:	4b6c      	ldr	r3, [pc, #432]	@ (800470c <engineUpdate+0x248>)
 800455c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004564:	2b00      	cmp	r3, #0
 8004566:	d012      	beq.n	800458e <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7fe f98f 	bl	800288c <nextTx>
 800456e:	4603      	mov	r3, r0
 8004570:	4a66      	ldr	r2, [pc, #408]	@ (800470c <engineUpdate+0x248>)
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b65      	ldr	r3, [pc, #404]	@ (800470c <engineUpdate+0x248>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 800457a:	4b64      	ldr	r3, [pc, #400]	@ (800470c <engineUpdate+0x248>)
 800457c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004580:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004584:	b29a      	uxth	r2, r3
 8004586:	4b61      	ldr	r3, [pc, #388]	@ (800470c <engineUpdate+0x248>)
 8004588:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800458c:	e002      	b.n	8004594 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 800458e:	4b5f      	ldr	r3, [pc, #380]	@ (800470c <engineUpdate+0x248>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004594:	4b5d      	ldr	r3, [pc, #372]	@ (800470c <engineUpdate+0x248>)
 8004596:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <engineUpdate+0xe8>
 800459e:	4b5b      	ldr	r3, [pc, #364]	@ (800470c <engineUpdate+0x248>)
 80045a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <engineUpdate+0xfe>
 80045ac:	4b57      	ldr	r3, [pc, #348]	@ (800470c <engineUpdate+0x248>)
 80045ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da03      	bge.n	80045c2 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 80045ba:	4b54      	ldr	r3, [pc, #336]	@ (800470c <engineUpdate+0x248>)
 80045bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045c0:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 80045c2:	4b52      	ldr	r3, [pc, #328]	@ (800470c <engineUpdate+0x248>)
 80045c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <engineUpdate+0x116>
 80045d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004710 <engineUpdate+0x24c>)
 80045d8:	e000      	b.n	80045dc <engineUpdate+0x118>
 80045da:	4a4e      	ldr	r2, [pc, #312]	@ (8004714 <engineUpdate+0x250>)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	441a      	add	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dd0b      	ble.n	8004600 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80045ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80045f2:	2110      	movs	r1, #16
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd ff23 	bl	8002440 <txDelay>
            txbeg = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
            goto checkrx;
 80045fe:	e09b      	b.n	8004738 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3340      	adds	r3, #64	@ 0x40
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	da70      	bge.n	80046ee <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004610:	4b3e      	ldr	r3, [pc, #248]	@ (800470c <engineUpdate+0x248>)
 8004612:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004616:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01d      	beq.n	800465a <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800461e:	4b3b      	ldr	r3, [pc, #236]	@ (800470c <engineUpdate+0x248>)
 8004620:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 800462c:	4b37      	ldr	r3, [pc, #220]	@ (800470c <engineUpdate+0x248>)
 800462e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fa10 	bl	8001a5c <lowerDR>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004640:	23c0      	movs	r3, #192	@ 0xc0
 8004642:	73bb      	strb	r3, [r7, #14]
 8004644:	e001      	b.n	800464a <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004646:	2300      	movs	r3, #0
 8004648:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 800464a:	7bbb      	ldrb	r3, [r7, #14]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fc6b 	bl	8003f28 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004652:	4b2e      	ldr	r3, [pc, #184]	@ (800470c <engineUpdate+0x248>)
 8004654:	4a30      	ldr	r2, [pc, #192]	@ (8004718 <engineUpdate+0x254>)
 8004656:	61da      	str	r2, [r3, #28]
 8004658:	e01d      	b.n	8004696 <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 800465a:	4b2c      	ldr	r3, [pc, #176]	@ (800470c <engineUpdate+0x248>)
 800465c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8004660:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8004664:	d907      	bls.n	8004676 <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 800466a:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 800466c:	492b      	ldr	r1, [pc, #172]	@ (800471c <engineUpdate+0x258>)
 800466e:	482c      	ldr	r0, [pc, #176]	@ (8004720 <engineUpdate+0x25c>)
 8004670:	f000 fc34 	bl	8004edc <os_setCallback>
                    return;
 8004674:	e0df      	b.n	8004836 <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8004676:	4b25      	ldr	r3, [pc, #148]	@ (800470c <engineUpdate+0x248>)
 8004678:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <engineUpdate+0x1c8>
 8004680:	4b22      	ldr	r3, [pc, #136]	@ (800470c <engineUpdate+0x248>)
 8004682:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d0ee      	beq.n	800466a <engineUpdate+0x1a6>
                }
                buildDataFrame();
 800468c:	f7ff f9ba 	bl	8003a04 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8004690:	4b1e      	ldr	r3, [pc, #120]	@ (800470c <engineUpdate+0x248>)
 8004692:	4a24      	ldr	r2, [pc, #144]	@ (8004724 <engineUpdate+0x260>)
 8004694:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd f98b 	bl	80019b4 <updr2rps>
 800469e:	4603      	mov	r3, r0
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <engineUpdate+0x248>)
 80046a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f7fd f91c 	bl	80018e8 <setCr>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b15      	ldr	r3, [pc, #84]	@ (800470c <engineUpdate+0x248>)
 80046b6:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 80046b8:	4a14      	ldr	r2, [pc, #80]	@ (800470c <engineUpdate+0x248>)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <engineUpdate+0x248>)
 80046c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 80046ca:	b21b      	sxth	r3, r3
 80046cc:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <engineUpdate+0x248>)
 80046d6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f7fe f88c 	bl	80027f8 <updateTx>
            reportEvent(EV_TXSTART);
 80046e0:	2011      	movs	r0, #17
 80046e2:	f7fe fa3d 	bl	8002b60 <reportEvent>
            os_radio(RADIO_TX);
 80046e6:	2001      	movs	r0, #1
 80046e8:	f001 f9da 	bl	8005aa0 <os_radio>
            return;
 80046ec:	e0a3      	b.n	8004836 <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 80046ee:	4b07      	ldr	r3, [pc, #28]	@ (800470c <engineUpdate+0x248>)
 80046f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 808c 	beq.w	8004816 <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d119      	bne.n	8004738 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e015      	b.n	8004738 <engineUpdate+0x274>
 800470c:	2000019c 	.word	0x2000019c
 8004710:	00046500 	.word	0x00046500
 8004714:	0002ee00 	.word	0x0002ee00
 8004718:	080038c5 	.word	0x080038c5
 800471c:	08002b7f 	.word	0x08002b7f
 8004720:	200001b0 	.word	0x200001b0
 8004724:	080039d5 	.word	0x080039d5
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004728:	4b44      	ldr	r3, [pc, #272]	@ (800483c <engineUpdate+0x378>)
 800472a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d07e      	beq.n	8004834 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 8004736:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004738:	4b40      	ldr	r3, [pc, #256]	@ (800483c <engineUpdate+0x378>)
 800473a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800473e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d041      	beq.n	80047ca <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3340      	adds	r3, #64	@ 0x40
 800474a:	4619      	mov	r1, r3
 800474c:	483c      	ldr	r0, [pc, #240]	@ (8004840 <engineUpdate+0x37c>)
 800474e:	f7fd fdeb 	bl	8002328 <rxschedNext>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d038      	beq.n	80047ca <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <engineUpdate+0x2a8>
 800475e:	4b37      	ldr	r3, [pc, #220]	@ (800483c <engineUpdate+0x378>)
 8004760:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	db56      	blt.n	800481a <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 800476c:	4b33      	ldr	r3, [pc, #204]	@ (800483c <engineUpdate+0x378>)
 800476e:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 8004772:	4b32      	ldr	r3, [pc, #200]	@ (800483c <engineUpdate+0x378>)
 8004774:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 8004776:	4b31      	ldr	r3, [pc, #196]	@ (800483c <engineUpdate+0x378>)
 8004778:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800477c:	4a2f      	ldr	r2, [pc, #188]	@ (800483c <engineUpdate+0x378>)
 800477e:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 8004780:	4b2e      	ldr	r3, [pc, #184]	@ (800483c <engineUpdate+0x378>)
 8004782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004786:	4a2d      	ldr	r2, [pc, #180]	@ (800483c <engineUpdate+0x378>)
 8004788:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 800478a:	4b2c      	ldr	r3, [pc, #176]	@ (800483c <engineUpdate+0x378>)
 800478c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8004790:	4618      	mov	r0, r3
 8004792:	f7fd f921 	bl	80019d8 <dndr2rps>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	4b28      	ldr	r3, [pc, #160]	@ (800483c <engineUpdate+0x378>)
 800479c:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 800479e:	4b27      	ldr	r3, [pc, #156]	@ (800483c <engineUpdate+0x378>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80047a6:	4b25      	ldr	r3, [pc, #148]	@ (800483c <engineUpdate+0x378>)
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 80047b2:	da01      	bge.n	80047b8 <engineUpdate+0x2f4>
 80047b4:	f7fd f85c 	bl	8001870 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 80047b8:	4b20      	ldr	r3, [pc, #128]	@ (800483c <engineUpdate+0x378>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	3b40      	subs	r3, #64	@ 0x40
 80047be:	4a21      	ldr	r2, [pc, #132]	@ (8004844 <engineUpdate+0x380>)
 80047c0:	4619      	mov	r1, r3
 80047c2:	4821      	ldr	r0, [pc, #132]	@ (8004848 <engineUpdate+0x384>)
 80047c4:	f000 fbb0 	bl	8004f28 <os_setTimedCallback>
            return;
 80047c8:	e035      	b.n	8004836 <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <engineUpdate+0x316>
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db21      	blt.n	800481e <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 80047da:	f7fe f8f3 	bl	80029c4 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 80047de:	4b17      	ldr	r3, [pc, #92]	@ (800483c <engineUpdate+0x378>)
 80047e0:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 80047e4:	4b15      	ldr	r3, [pc, #84]	@ (800483c <engineUpdate+0x378>)
 80047e6:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 80047e8:	4b14      	ldr	r3, [pc, #80]	@ (800483c <engineUpdate+0x378>)
 80047ea:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80047ee:	4a13      	ldr	r2, [pc, #76]	@ (800483c <engineUpdate+0x378>)
 80047f0:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	db06      	blt.n	800480a <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80047fc:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <engineUpdate+0x378>)
 80047fe:	4a13      	ldr	r2, [pc, #76]	@ (800484c <engineUpdate+0x388>)
 8004800:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004802:	2002      	movs	r0, #2
 8004804:	f001 f94c 	bl	8005aa0 <os_radio>
        return;
 8004808:	e015      	b.n	8004836 <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800480a:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <engineUpdate+0x38c>)
 800480c:	6979      	ldr	r1, [r7, #20]
 800480e:	480e      	ldr	r0, [pc, #56]	@ (8004848 <engineUpdate+0x384>)
 8004810:	f000 fb8a 	bl	8004f28 <os_setTimedCallback>
    return;
 8004814:	e00f      	b.n	8004836 <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <engineUpdate+0x35c>
                goto txdelay;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <engineUpdate+0x35c>
        goto txdelay;
 800481e:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3b40      	subs	r3, #64	@ 0x40
 8004824:	4a0b      	ldr	r2, [pc, #44]	@ (8004854 <engineUpdate+0x390>)
 8004826:	4619      	mov	r1, r3
 8004828:	4807      	ldr	r0, [pc, #28]	@ (8004848 <engineUpdate+0x384>)
 800482a:	f000 fb7d 	bl	8004f28 <os_setTimedCallback>
 800482e:	e002      	b.n	8004836 <engineUpdate+0x372>
        return;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <engineUpdate+0x372>
            return;
 8004834:	bf00      	nop
}
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	2000019c 	.word	0x2000019c
 8004840:	200002d0 	.word	0x200002d0
 8004844:	080044a1 	.word	0x080044a1
 8004848:	200001b0 	.word	0x200001b0
 800484c:	08004265 	.word	0x08004265
 8004850:	0800447d 	.word	0x0800447d
 8004854:	08002b4d 	.word	0x08002b4d

08004858 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 8004858:	b598      	push	{r3, r4, r7, lr}
 800485a:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 800485c:	2000      	movs	r0, #0
 800485e:	f001 f91f 	bl	8005aa0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004862:	4821      	ldr	r0, [pc, #132]	@ (80048e8 <LMIC_reset+0x90>)
 8004864:	f000 fb1c 	bl	8004ea0 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 8004868:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 800486c:	2100      	movs	r1, #0
 800486e:	481f      	ldr	r0, [pc, #124]	@ (80048ec <LMIC_reset+0x94>)
 8004870:	f006 fbd5 	bl	800b01e <memset>
    LMIC.devaddr      =  0;
 8004874:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <LMIC_reset+0x94>)
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 800487c:	f001 f814 	bl	80058a8 <radio_rand1>
 8004880:	4603      	mov	r3, r0
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	b21c      	sxth	r4, r3
 8004886:	f001 f80f 	bl	80058a8 <radio_rand1>
 800488a:	4603      	mov	r3, r0
 800488c:	b21b      	sxth	r3, r3
 800488e:	4323      	orrs	r3, r4
 8004890:	b21b      	sxth	r3, r3
 8004892:	b29a      	uxth	r2, r3
 8004894:	4b15      	ldr	r3, [pc, #84]	@ (80048ec <LMIC_reset+0x94>)
 8004896:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <LMIC_reset+0x94>)
 800489c:	2200      	movs	r2, #0
 800489e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 80048a2:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <LMIC_reset+0x94>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <LMIC_reset+0x94>)
 80048ac:	2280      	movs	r2, #128	@ 0x80
 80048ae:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 80048b2:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <LMIC_reset+0x94>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 80048ba:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <LMIC_reset+0x94>)
 80048bc:	4a0c      	ldr	r2, [pc, #48]	@ (80048f0 <LMIC_reset+0x98>)
 80048be:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 80048c2:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <LMIC_reset+0x94>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 80048ca:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <LMIC_reset+0x94>)
 80048cc:	4a08      	ldr	r2, [pc, #32]	@ (80048f0 <LMIC_reset+0x98>)
 80048ce:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 80048d2:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <LMIC_reset+0x94>)
 80048d4:	2203      	movs	r2, #3
 80048d6:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 80048da:	4b04      	ldr	r3, [pc, #16]	@ (80048ec <LMIC_reset+0x94>)
 80048dc:	22ff      	movs	r2, #255	@ 0xff
 80048de:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 80048e2:	bf00      	nop
 80048e4:	bd98      	pop	{r3, r4, r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200001b0 	.word	0x200001b0
 80048ec:	2000019c 	.word	0x2000019c
 80048f0:	33d3e608 	.word	0x33d3e608

080048f4 <LMIC_init>:


void LMIC_init (void) {
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <LMIC_init+0x18>)
 80048fa:	2240      	movs	r2, #64	@ 0x40
 80048fc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	2000019c 	.word	0x2000019c

08004910 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <LMIC_setTxData+0x34>)
 8004916:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800491a:	f043 0308 	orr.w	r3, r3, #8
 800491e:	b29a      	uxth	r2, r3
 8004920:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <LMIC_setTxData+0x34>)
 8004922:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004926:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <LMIC_setTxData+0x34>)
 8004928:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004934:	4b03      	ldr	r3, [pc, #12]	@ (8004944 <LMIC_setTxData+0x34>)
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    engineUpdate();
 800493c:	f7ff fdc2 	bl	80044c4 <engineUpdate>
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	2000019c 	.word	0x2000019c

08004948 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6039      	str	r1, [r7, #0]
 8004950:	4611      	mov	r1, r2
 8004952:	461a      	mov	r2, r3
 8004954:	4603      	mov	r3, r0
 8004956:	71fb      	strb	r3, [r7, #7]
 8004958:	460b      	mov	r3, r1
 800495a:	71bb      	strb	r3, [r7, #6]
 800495c:	4613      	mov	r3, r2
 800495e:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 8004960:	79bb      	ldrb	r3, [r7, #6]
 8004962:	2b34      	cmp	r3, #52	@ 0x34
 8004964:	d902      	bls.n	800496c <LMIC_setTxData2+0x24>
        return -2;
 8004966:	f06f 0301 	mvn.w	r3, #1
 800496a:	e017      	b.n	800499c <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 8004972:	79bb      	ldrb	r3, [r7, #6]
 8004974:	461a      	mov	r2, r3
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	480a      	ldr	r0, [pc, #40]	@ (80049a4 <LMIC_setTxData2+0x5c>)
 800497a:	f006 fb7d 	bl	800b078 <memcpy>
    LMIC.pendTxConf = confirmed;
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <LMIC_setTxData2+0x60>)
 8004980:	797b      	ldrb	r3, [r7, #5]
 8004982:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
    LMIC.pendTxPort = port;
 8004986:	4a08      	ldr	r2, [pc, #32]	@ (80049a8 <LMIC_setTxData2+0x60>)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
    LMIC.pendTxLen  = dlen;
 800498e:	4a06      	ldr	r2, [pc, #24]	@ (80049a8 <LMIC_setTxData2+0x60>)
 8004990:	79bb      	ldrb	r3, [r7, #6]
 8004992:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC_setTxData();
 8004996:	f7ff ffbb 	bl	8004910 <LMIC_setTxData>
    return 0;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000259 	.word	0x20000259
 80049a8:	2000019c 	.word	0x2000019c

080049ac <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4906      	ldr	r1, [pc, #24]	@ (80049d0 <os_getArtEui+0x24>)
 80049b8:	461a      	mov	r2, r3
 80049ba:	460b      	mov	r3, r1
 80049bc:	cb03      	ldmia	r3!, {r0, r1}
 80049be:	6010      	str	r0, [r2, #0]
 80049c0:	6051      	str	r1, [r2, #4]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	0800c500 	.word	0x0800c500

080049d4 <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4906      	ldr	r1, [pc, #24]	@ (80049f8 <os_getDevEui+0x24>)
 80049e0:	461a      	mov	r2, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	cb03      	ldmia	r3!, {r0, r1}
 80049e6:	6010      	str	r0, [r2, #0]
 80049e8:	6051      	str	r1, [r2, #4]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	0800c508 	.word	0x0800c508

080049fc <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 80049fc:	b4b0      	push	{r4, r5, r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a06      	ldr	r2, [pc, #24]	@ (8004a20 <os_getDevKey+0x24>)
 8004a08:	461c      	mov	r4, r3
 8004a0a:	4615      	mov	r5, r2
 8004a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a0e:	6020      	str	r0, [r4, #0]
 8004a10:	6061      	str	r1, [r4, #4]
 8004a12:	60a2      	str	r2, [r4, #8]
 8004a14:	60e3      	str	r3, [r4, #12]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bcb0      	pop	{r4, r5, r7}
 8004a1e:	4770      	bx	lr
 8004a20:	0800c510 	.word	0x0800c510

08004a24 <initsensor>:
void initsensor(){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET); //alimente le capteur de temperature
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2180      	movs	r1, #128	@ 0x80
 8004a2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a30:	f003 f8a8 	bl	8007b84 <HAL_GPIO_WritePin>

}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <initfunc>:

void initfunc (osjob_t* j) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 8004a40:	f7ff fff0 	bl	8004a24 <initsensor>
	// reset MAC state
	LMIC_reset();
 8004a44:	f7ff ff08 	bl	8004858 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8004a48:	f7ff fab0 	bl	8003fac <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <readsensor_temp>:
int readsensor_temp(){
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
	return  (188686-147 * raw_adc1_in15);
 8004a58:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <readsensor_temp+0x24>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0292 	mvn.w	r2, #146	@ 0x92
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	f503 3338 	add.w	r3, r3, #188416	@ 0x2e000
 8004a68:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000348 	.word	0x20000348

08004a7c <reportfunc>:

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	// read sensor
	int val = readsensor_temp() - TEMP_OFFSET;
 8004a84:	f7ff ffe6 	bl	8004a54 <readsensor_temp>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8004a8e:	3b10      	subs	r3, #16
 8004a90:	60fb      	str	r3, [r7, #12]
	debug_valdec("val = ", val);
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	4812      	ldr	r0, [pc, #72]	@ (8004ae0 <reportfunc+0x64>)
 8004a96:	f7fc fc2f 	bl	80012f8 <debug_valdec>

	// prepare and schedule data for transmission
	LMIC.frame[0] = 0;
 8004a9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <reportfunc+0x68>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[1] = 0x67; //adresse capteur
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <reportfunc+0x68>)
 8004aa4:	2267      	movs	r2, #103	@ 0x67
 8004aa6:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149

	LMIC.frame[2] = val; //valeur capteur
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <reportfunc+0x68>)
 8004ab0:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

	LMIC_setTxData2(1, LMIC.frame, 2, 0); // (port 1, 2 bytes, unconfirmed)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	490b      	ldr	r1, [pc, #44]	@ (8004ae8 <reportfunc+0x6c>)
 8004aba:	2001      	movs	r0, #1
 8004abc:	f7ff ff44 	bl	8004948 <LMIC_setTxData2>
	// reschedule job in 60 seconds
	os_setTimedCallback(j, os_getTime()+sec2osticks(15), reportfunc);
 8004ac0:	f000 f9c8 	bl	8004e54 <os_getTime>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8004aca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ace:	4a07      	ldr	r2, [pc, #28]	@ (8004aec <reportfunc+0x70>)
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa28 	bl	8004f28 <os_setTimedCallback>
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	0800b1cc 	.word	0x0800b1cc
 8004ae4:	2000019c 	.word	0x2000019c
 8004ae8:	200002e4 	.word	0x200002e4
 8004aec:	08004a7d 	.word	0x08004a7d

08004af0 <blinkfunc>:


// blinker
static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc (osjob_t* j) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	// toggle led
	ledstate = !ledstate;
 8004af8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b34 <blinkfunc+0x44>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <blinkfunc+0x44>)
 8004b0a:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 8004b0c:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <blinkfunc+0x44>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fc fb3f 	bl	8001194 <debug_led>
	// reschedule
	os_setTimedCallback(j, os_getTime()+ms2osticks(100), blinkfunc);
 8004b16:	f000 f99d 	bl	8004e54 <os_getTime>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8004b20:	4a05      	ldr	r2, [pc, #20]	@ (8004b38 <blinkfunc+0x48>)
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f9ff 	bl	8004f28 <os_setTimedCallback>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000364 	.word	0x20000364
 8004b38:	08004af1 	.word	0x08004af1

08004b3c <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fc fc63 	bl	8001414 <debug_event>
	switch(ev) {
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	2b0e      	cmp	r3, #14
 8004b54:	f200 8093 	bhi.w	8004c7e <onEvent+0x142>
 8004b58:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <onEvent+0x24>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004bc7 	.word	0x08004bc7
 8004b64:	08004bcf 	.word	0x08004bcf
 8004b68:	08004bd7 	.word	0x08004bd7
 8004b6c:	08004bdf 	.word	0x08004bdf
 8004b70:	08004b9d 	.word	0x08004b9d
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004be7 	.word	0x08004be7
 8004b7c:	08004bbf 	.word	0x08004bbf
 8004b80:	08004bef 	.word	0x08004bef
 8004b84:	08004bf7 	.word	0x08004bf7
 8004b88:	08004c57 	.word	0x08004c57
 8004b8c:	08004c5f 	.word	0x08004c5f
 8004b90:	08004c67 	.word	0x08004c67
 8004b94:	08004c6f 	.word	0x08004c6f
 8004b98:	08004c77 	.word	0x08004c77
	// network joined, session established
		case EV_JOINING:
			debug_str("try joining\r\n");
 8004b9c:	483c      	ldr	r0, [pc, #240]	@ (8004c90 <onEvent+0x154>)
 8004b9e:	f7fc fb81 	bl	80012a4 <debug_str>
			blinkfunc(&blinkjob);
 8004ba2:	483c      	ldr	r0, [pc, #240]	@ (8004c94 <onEvent+0x158>)
 8004ba4:	f7ff ffa4 	bl	8004af0 <blinkfunc>
			break;
 8004ba8:	e06e      	b.n	8004c88 <onEvent+0x14c>

		case EV_JOINED:
			// kick-off periodic sensor job
			os_clearCallback(&blinkjob);
 8004baa:	483a      	ldr	r0, [pc, #232]	@ (8004c94 <onEvent+0x158>)
 8004bac:	f000 f978 	bl	8004ea0 <os_clearCallback>
			debug_led(1);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f7fc faef 	bl	8001194 <debug_led>
			reportfunc(&reportjob);
 8004bb6:	4838      	ldr	r0, [pc, #224]	@ (8004c98 <onEvent+0x15c>)
 8004bb8:	f7ff ff60 	bl	8004a7c <reportfunc>
			break;
 8004bbc:	e064      	b.n	8004c88 <onEvent+0x14c>
		case EV_JOIN_FAILED:
			debug_str("join failed\r\n");
 8004bbe:	4837      	ldr	r0, [pc, #220]	@ (8004c9c <onEvent+0x160>)
 8004bc0:	f7fc fb70 	bl	80012a4 <debug_str>
			break;
 8004bc4:	e060      	b.n	8004c88 <onEvent+0x14c>
		case EV_SCAN_TIMEOUT:
			debug_str("EV_SCAN_TIMEOUT\r\n");
 8004bc6:	4836      	ldr	r0, [pc, #216]	@ (8004ca0 <onEvent+0x164>)
 8004bc8:	f7fc fb6c 	bl	80012a4 <debug_str>
			break;
 8004bcc:	e05c      	b.n	8004c88 <onEvent+0x14c>
		case EV_BEACON_FOUND:
			debug_str("EV_BEACON_FOUND\r\n");
 8004bce:	4835      	ldr	r0, [pc, #212]	@ (8004ca4 <onEvent+0x168>)
 8004bd0:	f7fc fb68 	bl	80012a4 <debug_str>
			break;
 8004bd4:	e058      	b.n	8004c88 <onEvent+0x14c>
		case EV_BEACON_MISSED:
			debug_str("EV_BEACON_MISSED\r\n");
 8004bd6:	4834      	ldr	r0, [pc, #208]	@ (8004ca8 <onEvent+0x16c>)
 8004bd8:	f7fc fb64 	bl	80012a4 <debug_str>
			break;
 8004bdc:	e054      	b.n	8004c88 <onEvent+0x14c>
		case EV_BEACON_TRACKED:
			debug_str("EV_BEACON_TRACKED\r\n");
 8004bde:	4833      	ldr	r0, [pc, #204]	@ (8004cac <onEvent+0x170>)
 8004be0:	f7fc fb60 	bl	80012a4 <debug_str>
			break;
 8004be4:	e050      	b.n	8004c88 <onEvent+0x14c>
		case EV_RFU1:
			debug_str("EV_RFU1\r\n");
 8004be6:	4832      	ldr	r0, [pc, #200]	@ (8004cb0 <onEvent+0x174>)
 8004be8:	f7fc fb5c 	bl	80012a4 <debug_str>
			break;
 8004bec:	e04c      	b.n	8004c88 <onEvent+0x14c>
		case EV_REJOIN_FAILED:
			debug_str("EV_REJOIN_FAILED\r\n");
 8004bee:	4831      	ldr	r0, [pc, #196]	@ (8004cb4 <onEvent+0x178>)
 8004bf0:	f7fc fb58 	bl	80012a4 <debug_str>
			break;
 8004bf4:	e048      	b.n	8004c88 <onEvent+0x14c>
		case EV_TXCOMPLETE:
			debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 8004bf6:	4830      	ldr	r0, [pc, #192]	@ (8004cb8 <onEvent+0x17c>)
 8004bf8:	f7fc fb54 	bl	80012a4 <debug_str>
			if (LMIC.txrxFlags & TXRX_ACK)
 8004bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8004cbc <onEvent+0x180>)
 8004bfe:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004c02:	b25b      	sxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da02      	bge.n	8004c0e <onEvent+0xd2>
				debug_str("Received ack\r\n");
 8004c08:	482d      	ldr	r0, [pc, #180]	@ (8004cc0 <onEvent+0x184>)
 8004c0a:	f7fc fb4b 	bl	80012a4 <debug_str>
			if (LMIC.dataLen) {
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <onEvent+0x180>)
 8004c10:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d036      	beq.n	8004c86 <onEvent+0x14a>
				debug_valdec("Received bytes of payload\r\n:",LMIC.dataLen);
 8004c18:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <onEvent+0x180>)
 8004c1a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4828      	ldr	r0, [pc, #160]	@ (8004cc4 <onEvent+0x188>)
 8004c22:	f7fc fb69 	bl	80012f8 <debug_valdec>
				debug_val("Data = :",LMIC.frame[LMIC.dataBeg]);
 8004c26:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <onEvent+0x180>)
 8004c28:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b23      	ldr	r3, [pc, #140]	@ (8004cbc <onEvent+0x180>)
 8004c30:	4413      	add	r3, r2
 8004c32:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8004c36:	4619      	mov	r1, r3
 8004c38:	4823      	ldr	r0, [pc, #140]	@ (8004cc8 <onEvent+0x18c>)
 8004c3a:	f7fc fb48 	bl	80012ce <debug_val>
				debug_led(LMIC.frame[LMIC.dataBeg]);
 8004c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cbc <onEvent+0x180>)
 8004c40:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <onEvent+0x180>)
 8004c48:	4413      	add	r3, r2
 8004c4a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fc faa0 	bl	8001194 <debug_led>
//				debug_str("Received ");
//				debug_str(LMIC.dataLen);
//				debug_str(" bytes of payload\r\n");
			}
			break;
 8004c54:	e017      	b.n	8004c86 <onEvent+0x14a>
		case EV_LOST_TSYNC:
			debug_str("EV_LOST_TSYNC\r\n");
 8004c56:	481d      	ldr	r0, [pc, #116]	@ (8004ccc <onEvent+0x190>)
 8004c58:	f7fc fb24 	bl	80012a4 <debug_str>
			break;
 8004c5c:	e014      	b.n	8004c88 <onEvent+0x14c>
		case EV_RESET:
			debug_str("EV_RESET\r\n");
 8004c5e:	481c      	ldr	r0, [pc, #112]	@ (8004cd0 <onEvent+0x194>)
 8004c60:	f7fc fb20 	bl	80012a4 <debug_str>
			break;
 8004c64:	e010      	b.n	8004c88 <onEvent+0x14c>
		case EV_RXCOMPLETE:
			// data received in ping slot
			debug_str("EV_RXCOMPLETE\r\n");
 8004c66:	481b      	ldr	r0, [pc, #108]	@ (8004cd4 <onEvent+0x198>)
 8004c68:	f7fc fb1c 	bl	80012a4 <debug_str>
			break;
 8004c6c:	e00c      	b.n	8004c88 <onEvent+0x14c>
		case EV_LINK_DEAD:
			debug_str("EV_LINK_DEAD\r\n");
 8004c6e:	481a      	ldr	r0, [pc, #104]	@ (8004cd8 <onEvent+0x19c>)
 8004c70:	f7fc fb18 	bl	80012a4 <debug_str>
			break;
 8004c74:	e008      	b.n	8004c88 <onEvent+0x14c>
		case EV_LINK_ALIVE:
			debug_str("EV_LINK_ALIVE\r\n");
 8004c76:	4819      	ldr	r0, [pc, #100]	@ (8004cdc <onEvent+0x1a0>)
 8004c78:	f7fc fb14 	bl	80012a4 <debug_str>
			break;
 8004c7c:	e004      	b.n	8004c88 <onEvent+0x14c>
		default:
			debug_str("Unknown event\r\n");
 8004c7e:	4818      	ldr	r0, [pc, #96]	@ (8004ce0 <onEvent+0x1a4>)
 8004c80:	f7fc fb10 	bl	80012a4 <debug_str>
			break;
 8004c84:	e000      	b.n	8004c88 <onEvent+0x14c>
			break;
 8004c86:	bf00      	nop
	}
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	0800b1ec 	.word	0x0800b1ec
 8004c94:	20000358 	.word	0x20000358
 8004c98:	2000034c 	.word	0x2000034c
 8004c9c:	0800b1fc 	.word	0x0800b1fc
 8004ca0:	0800b20c 	.word	0x0800b20c
 8004ca4:	0800b220 	.word	0x0800b220
 8004ca8:	0800b234 	.word	0x0800b234
 8004cac:	0800b248 	.word	0x0800b248
 8004cb0:	0800b25c 	.word	0x0800b25c
 8004cb4:	0800b268 	.word	0x0800b268
 8004cb8:	0800b27c 	.word	0x0800b27c
 8004cbc:	2000019c 	.word	0x2000019c
 8004cc0:	0800b2b0 	.word	0x0800b2b0
 8004cc4:	0800b2c0 	.word	0x0800b2c0
 8004cc8:	0800b2e0 	.word	0x0800b2e0
 8004ccc:	0800b2ec 	.word	0x0800b2ec
 8004cd0:	0800b2fc 	.word	0x0800b2fc
 8004cd4:	0800b308 	.word	0x0800b308
 8004cd8:	0800b318 	.word	0x0800b318
 8004cdc:	0800b328 	.word	0x0800b328
 8004ce0:	0800b338 	.word	0x0800b338

08004ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cea:	f001 f99c 	bl	8006026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cee:	f000 f833 	bl	8004d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cf2:	f7fc fbad 	bl	8001450 <MX_GPIO_Init>
  MX_SPI3_Init();
 8004cf6:	f000 feff 	bl	8005af8 <MX_SPI3_Init>
  MX_TIM7_Init();
 8004cfa:	f001 f861 	bl	8005dc0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8004cfe:	f001 f8d9 	bl	8005eb4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8004d02:	f001 f825 	bl	8005d50 <MX_TIM6_Init>
  MX_ADC1_Init();
 8004d06:	f7fb fc29 	bl	800055c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); //demarrage du timer 6 en interruption toutes les secondes pour la mesure temperature
 8004d0a:	480f      	ldr	r0, [pc, #60]	@ (8004d48 <main+0x64>)
 8004d0c:	f004 fe80 	bl	8009a10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8004d10:	480e      	ldr	r0, [pc, #56]	@ (8004d4c <main+0x68>)
 8004d12:	f004 fe7d 	bl	8009a10 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8004d16:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <main+0x6c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <main+0x6c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d24:	601a      	str	r2, [r3, #0]
  osjob_t initjob;
  // initialize runtime env
  os_init();
 8004d26:	f000 f883 	bl	8004e30 <os_init>
  // initialize debug library
  debug_init();
 8004d2a:	f7fc fa29 	bl	8001180 <debug_init>
  // setup initial job
  os_setCallback(&initjob, initfunc);
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	4908      	ldr	r1, [pc, #32]	@ (8004d54 <main+0x70>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f8d2 	bl	8004edc <os_setCallback>
//  os_setCallback(&hellojob, hellofunc);
  // execute scheduled jobs and events
  os_runloop();
 8004d38:	f000 f92c 	bl	8004f94 <os_runloop>
  // (not reached)
  return 0;
 8004d3c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200003e4 	.word	0x200003e4
 8004d4c:	20000430 	.word	0x20000430
 8004d50:	20000380 	.word	0x20000380
 8004d54:	08004a39 	.word	0x08004a39

08004d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b096      	sub	sp, #88	@ 0x58
 8004d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	2244      	movs	r2, #68	@ 0x44
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f006 f959 	bl	800b01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004d7e:	f002 ff3f 	bl	8007c00 <HAL_PWREx_ControlVoltageScaling>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004d88:	f000 f84c 	bl	8004e24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d96:	2310      	movs	r3, #16
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004da6:	230a      	movs	r3, #10
 8004da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004daa:	2307      	movs	r3, #7
 8004dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004dae:	2302      	movs	r3, #2
 8004db0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004db2:	2302      	movs	r3, #2
 8004db4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f002 ff76 	bl	8007cac <HAL_RCC_OscConfig>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004dc6:	f000 f82d 	bl	8004e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dca:	230f      	movs	r3, #15
 8004dcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dde:	463b      	mov	r3, r7
 8004de0:	2104      	movs	r1, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 fb76 	bl	80084d4 <HAL_RCC_ClockConfig>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004dee:	f000 f819 	bl	8004e24 <Error_Handler>
  }
}
 8004df2:	bf00      	nop
 8004df4:	3758      	adds	r7, #88	@ 0x58
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_ADC_ConvCpltCallback>:
//	}
//}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	raw_adc1_in15 = HAL_ADC_GetValue(&hadc1);
 8004e04:	4805      	ldr	r0, [pc, #20]	@ (8004e1c <HAL_ADC_ConvCpltCallback+0x20>)
 8004e06:	f001 fd53 	bl	80068b0 <HAL_ADC_GetValue>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <HAL_ADC_ConvCpltCallback+0x24>)
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000070 	.word	0x20000070
 8004e20:	20000348 	.word	0x20000348

08004e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e28:	b672      	cpsid	i
}
 8004e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <Error_Handler+0x8>

08004e30 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8004e34:	2208      	movs	r2, #8
 8004e36:	2100      	movs	r1, #0
 8004e38:	4805      	ldr	r0, [pc, #20]	@ (8004e50 <os_init+0x20>)
 8004e3a:	f006 f8f0 	bl	800b01e <memset>
    hal_init();
 8004e3e:	f7fc fd01 	bl	8001844 <hal_init>
    radio_init();
 8004e42:	f000 fcbd 	bl	80057c0 <radio_init>
    LMIC_init();
 8004e46:	f7ff fd55 	bl	80048f4 <LMIC_init>
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000368 	.word	0x20000368

08004e54 <os_getTime>:

ostime_t os_getTime () {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
    return hal_ticks();
 8004e58:	f7fc fc0a 	bl	8001670 <hal_ticks>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004e6c:	e00d      	b.n	8004e8a <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d105      	bne.n	8004e84 <unlinkjob+0x22>
            *pnext = job->next;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	601a      	str	r2, [r3, #0]
            return 1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e007      	b.n	8004e94 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ed      	bne.n	8004e6e <unlinkjob+0xc>
        }
    }
    return 0;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004ea8:	f7fc fca0 	bl	80017ec <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4809      	ldr	r0, [pc, #36]	@ (8004ed4 <os_clearCallback+0x34>)
 8004eb0:	f7ff ffd7 	bl	8004e62 <unlinkjob>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <os_clearCallback+0x26>
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4806      	ldr	r0, [pc, #24]	@ (8004ed8 <os_clearCallback+0x38>)
 8004ebe:	f7ff ffd0 	bl	8004e62 <unlinkjob>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004ec6:	f7fc fca1 	bl	800180c <hal_enableIRQs>
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000368 	.word	0x20000368
 8004ed8:	2000036c 	.word	0x2000036c

08004edc <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004ee6:	f7fc fc81 	bl	80017ec <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	480d      	ldr	r0, [pc, #52]	@ (8004f24 <os_setCallback+0x48>)
 8004eee:	f7ff ffb8 	bl	8004e62 <unlinkjob>
    // fill-in job
    job->func = cb;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8004efe:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <os_setCallback+0x48>)
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e002      	b.n	8004f0a <os_setCallback+0x2e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f8      	bne.n	8004f04 <os_setCallback+0x28>
    *pnext = job;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004f18:	f7fc fc78 	bl	800180c <hal_enableIRQs>
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	2000036c 	.word	0x2000036c

08004f28 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8004f34:	f7fc fc5a 	bl	80017ec <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	4815      	ldr	r0, [pc, #84]	@ (8004f90 <os_setTimedCallback+0x68>)
 8004f3c:	f7ff ff91 	bl	8004e62 <unlinkjob>
    // fill-in job
    job->deadline = time;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004f52:	4b0f      	ldr	r3, [pc, #60]	@ (8004f90 <os_setTimedCallback+0x68>)
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e00e      	b.n	8004f76 <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dd04      	ble.n	8004f70 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	601a      	str	r2, [r3, #0]
            break;
 8004f6e:	e006      	b.n	8004f7e <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ec      	bne.n	8004f58 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004f84:	f7fc fc42 	bl	800180c <hal_enableIRQs>
}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000368 	.word	0x20000368

08004f94 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8004f9e:	f7fc fc25 	bl	80017ec <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8004fa2:	4b16      	ldr	r3, [pc, #88]	@ (8004ffc <os_runloop+0x68>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <os_runloop+0x26>
            j = OS.runnablejobs;
 8004faa:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <os_runloop+0x68>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a11      	ldr	r2, [pc, #68]	@ (8004ffc <os_runloop+0x68>)
 8004fb6:	6053      	str	r3, [r2, #4]
 8004fb8:	e016      	b.n	8004fe8 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <os_runloop+0x68>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <os_runloop+0x50>
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <os_runloop+0x68>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fc fbaf 	bl	800172c <hal_checkTimer>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <os_runloop+0x68>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a07      	ldr	r2, [pc, #28]	@ (8004ffc <os_runloop+0x68>)
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e001      	b.n	8004fe8 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004fe4:	f7fc fc26 	bl	8001834 <hal_sleep>
        }
        hal_enableIRQs();
 8004fe8:	f7fc fc10 	bl	800180c <hal_enableIRQs>
        if(j) { // run job callback
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0d3      	beq.n	8004f9a <os_runloop+0x6>
            j->func(j);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
    while(1) {
 8004ffa:	e7ce      	b.n	8004f9a <os_runloop+0x6>
 8004ffc:	20000368 	.word	0x20000368

08005000 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	460a      	mov	r2, r1
 800500a:	71fb      	strb	r3, [r7, #7]
 800500c:	4613      	mov	r3, r2
 800500e:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005010:	2000      	movs	r0, #0
 8005012:	f7fc faa5 	bl	8001560 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800501c:	b2db      	uxtb	r3, r3
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc fb00 	bl	8001624 <hal_spi>
    hal_spi(data);
 8005024:	79bb      	ldrb	r3, [r7, #6]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc fafc 	bl	8001624 <hal_spi>
    hal_pin_nss(1);
 800502c:	2001      	movs	r0, #1
 800502e:	f7fc fa97 	bl	8001560 <hal_pin_nss>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <readReg>:

static u1_t readReg (u1_t addr) {
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	4603      	mov	r3, r0
 8005042:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8005044:	2000      	movs	r0, #0
 8005046:	f7fc fa8b 	bl	8001560 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4618      	mov	r0, r3
 8005054:	f7fc fae6 	bl	8001624 <hal_spi>
    u1_t val = hal_spi(0x00);
 8005058:	2000      	movs	r0, #0
 800505a:	f7fc fae3 	bl	8001624 <hal_spi>
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8005062:	2001      	movs	r0, #1
 8005064:	f7fc fa7c 	bl	8001560 <hal_pin_nss>
    return val;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	4603      	mov	r3, r0
 800507a:	6039      	str	r1, [r7, #0]
 800507c:	71fb      	strb	r3, [r7, #7]
 800507e:	4613      	mov	r3, r2
 8005080:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005082:	2000      	movs	r0, #0
 8005084:	f7fc fa6c 	bl	8001560 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	f7fc fac7 	bl	8001624 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e009      	b.n	80050b0 <writeBuf+0x3e>
        hal_spi(buf[i]);
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fc fabd 	bl	8001624 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	3301      	adds	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	79bb      	ldrb	r3, [r7, #6]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3f1      	bcc.n	800509c <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fc fa51 	bl	8001560 <hal_pin_nss>
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80050c6:	b590      	push	{r4, r7, lr}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	4603      	mov	r3, r0
 80050ce:	6039      	str	r1, [r7, #0]
 80050d0:	71fb      	strb	r3, [r7, #7]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80050d6:	2000      	movs	r0, #0
 80050d8:	f7fc fa42 	bl	8001560 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fa9d 	bl	8001624 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
 80050ee:	e00a      	b.n	8005106 <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	18d4      	adds	r4, r2, r3
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fc fa94 	bl	8001624 <hal_spi>
 80050fc:	4603      	mov	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	3301      	adds	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	79bb      	ldrb	r3, [r7, #6]
 800510a:	429a      	cmp	r2, r3
 800510c:	d3f0      	bcc.n	80050f0 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 800510e:	2001      	movs	r0, #1
 8005110:	f7fc fa26 	bl	8001560 <hal_pin_nss>
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}

0800511c <opmode>:

static void opmode (u1_t mode) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8005126:	2001      	movs	r0, #1
 8005128:	f7ff ff87 	bl	800503a <readReg>
 800512c:	4603      	mov	r3, r0
 800512e:	b25b      	sxtb	r3, r3
 8005130:	f023 0307 	bic.w	r3, r3, #7
 8005134:	b25a      	sxtb	r2, r3
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	4313      	orrs	r3, r2
 800513c:	b25b      	sxtb	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	2001      	movs	r0, #1
 8005144:	f7ff ff5c 	bl	8005000 <writeReg>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <opmodeLora>:

static void opmodeLora() {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8005156:	2380      	movs	r3, #128	@ 0x80
 8005158:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	f043 0308 	orr.w	r3, r3, #8
 8005160:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	4619      	mov	r1, r3
 8005166:	2001      	movs	r0, #1
 8005168:	f7ff ff4a 	bl	8005000 <writeReg>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <opmodeFSK>:

static void opmodeFSK() {
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
    u1_t u = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	4619      	mov	r1, r3
 800518a:	2001      	movs	r0, #1
 800518c:	f7ff ff38 	bl	8005000 <writeReg>
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 800519e:	4b54      	ldr	r3, [pc, #336]	@ (80052f0 <configLoraModem+0x158>)
 80051a0:	89db      	ldrh	r3, [r3, #14]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc fb6c 	bl	8001880 <getSf>
 80051a8:	4603      	mov	r3, r0
 80051aa:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	71fb      	strb	r3, [r7, #7]
 80051b0:	2300      	movs	r3, #0
 80051b2:	71bb      	strb	r3, [r7, #6]
 80051b4:	2300      	movs	r3, #0
 80051b6:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 80051b8:	4b4d      	ldr	r3, [pc, #308]	@ (80052f0 <configLoraModem+0x158>)
 80051ba:	89db      	ldrh	r3, [r3, #14]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc fb6f 	bl	80018a0 <getBw>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d010      	beq.n	80051ea <configLoraModem+0x52>
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	dc13      	bgt.n	80051f4 <configLoraModem+0x5c>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <configLoraModem+0x3e>
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d005      	beq.n	80051e0 <configLoraModem+0x48>
 80051d4:	e00e      	b.n	80051f4 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80051dc:	71fb      	strb	r3, [r7, #7]
 80051de:	e00b      	b.n	80051f8 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051e6:	71fb      	strb	r3, [r7, #7]
 80051e8:	e006      	b.n	80051f8 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 80051f0:	71fb      	strb	r3, [r7, #7]
 80051f2:	e001      	b.n	80051f8 <configLoraModem+0x60>
        default:
            ASSERT(0);
 80051f4:	f7fc fb3c 	bl	8001870 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 80051f8:	4b3d      	ldr	r3, [pc, #244]	@ (80052f0 <configLoraModem+0x158>)
 80051fa:	89db      	ldrh	r3, [r3, #14]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fc fb61 	bl	80018c4 <getCr>
 8005202:	4603      	mov	r3, r0
 8005204:	2b03      	cmp	r3, #3
 8005206:	d81f      	bhi.n	8005248 <configLoraModem+0xb0>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <configLoraModem+0x78>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005221 	.word	0x08005221
 8005214:	0800522b 	.word	0x0800522b
 8005218:	08005235 	.word	0x08005235
 800521c:	0800523f 	.word	0x0800523f
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	f043 0302 	orr.w	r3, r3, #2
 8005226:	71fb      	strb	r3, [r7, #7]
 8005228:	e010      	b.n	800524c <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	71fb      	strb	r3, [r7, #7]
 8005232:	e00b      	b.n	800524c <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	f043 0306 	orr.w	r3, r3, #6
 800523a:	71fb      	strb	r3, [r7, #7]
 800523c:	e006      	b.n	800524c <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	f043 0308 	orr.w	r3, r3, #8
 8005244:	71fb      	strb	r3, [r7, #7]
 8005246:	e001      	b.n	800524c <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8005248:	f7fc fb12 	bl	8001870 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 800524c:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <configLoraModem+0x158>)
 800524e:	89db      	ldrh	r3, [r3, #14]
 8005250:	4618      	mov	r0, r3
 8005252:	f7fc fb89 	bl	8001968 <getIh>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00e      	beq.n	800527a <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005264:	4b22      	ldr	r3, [pc, #136]	@ (80052f0 <configLoraModem+0x158>)
 8005266:	89db      	ldrh	r3, [r3, #14]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fc fb7d 	bl	8001968 <getIh>
 800526e:	4603      	mov	r3, r0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	4619      	mov	r1, r3
 8005274:	2022      	movs	r0, #34	@ 0x22
 8005276:	f7ff fec3 	bl	8005000 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	4619      	mov	r1, r3
 800527e:	201d      	movs	r0, #29
 8005280:	f7ff febe 	bl	8005000 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8005284:	793b      	ldrb	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	b2db      	uxtb	r3, r3
 800528e:	3370      	adds	r3, #112	@ 0x70
 8005290:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 8005292:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <configLoraModem+0x158>)
 8005294:	89db      	ldrh	r3, [r3, #14]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fc fb3f 	bl	800191a <getNocrc>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d103      	bne.n	80052aa <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80052a2:	79bb      	ldrb	r3, [r7, #6]
 80052a4:	f043 0304 	orr.w	r3, r3, #4
 80052a8:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 80052aa:	79bb      	ldrb	r3, [r7, #6]
 80052ac:	4619      	mov	r1, r3
 80052ae:	201e      	movs	r0, #30
 80052b0:	f7ff fea6 	bl	8005000 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 80052b4:	2304      	movs	r3, #4
 80052b6:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80052b8:	793b      	ldrb	r3, [r7, #4]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d002      	beq.n	80052c4 <configLoraModem+0x12c>
 80052be:	793b      	ldrb	r3, [r7, #4]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d10b      	bne.n	80052dc <configLoraModem+0x144>
 80052c4:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <configLoraModem+0x158>)
 80052c6:	89db      	ldrh	r3, [r3, #14]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fc fae9 	bl	80018a0 <getBw>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d103      	bne.n	80052dc <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 80052d4:	797b      	ldrb	r3, [r7, #5]
 80052d6:	f043 0308 	orr.w	r3, r3, #8
 80052da:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 80052dc:	797b      	ldrb	r3, [r7, #5]
 80052de:	4619      	mov	r1, r3
 80052e0:	2026      	movs	r0, #38	@ 0x26
 80052e2:	f7ff fe8d 	bl	8005000 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2000019c 	.word	0x2000019c

080052f4 <configChannel>:

static void configChannel () {
 80052f4:	b5b0      	push	{r4, r5, r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 80052fa:	4c1b      	ldr	r4, [pc, #108]	@ (8005368 <configChannel+0x74>)
 80052fc:	68a4      	ldr	r4, [r4, #8]
 80052fe:	2500      	movs	r5, #0
 8005300:	4622      	mov	r2, r4
 8005302:	462b      	mov	r3, r5
 8005304:	0b51      	lsrs	r1, r2, #13
 8005306:	04d0      	lsls	r0, r2, #19
 8005308:	4a18      	ldr	r2, [pc, #96]	@ (800536c <configChannel+0x78>)
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	f7fa ffad 	bl	800026c <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 800531a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	0c02      	lsrs	r2, r0, #16
 8005328:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800532c:	0c0b      	lsrs	r3, r1, #16
 800532e:	b2d3      	uxtb	r3, r2
 8005330:	4619      	mov	r1, r3
 8005332:	2006      	movs	r0, #6
 8005334:	f7ff fe64 	bl	8005000 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	0a02      	lsrs	r2, r0, #8
 8005346:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800534a:	0a0b      	lsrs	r3, r1, #8
 800534c:	b2d3      	uxtb	r3, r2
 800534e:	4619      	mov	r1, r3
 8005350:	2007      	movs	r0, #7
 8005352:	f7ff fe55 	bl	8005000 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005356:	783b      	ldrb	r3, [r7, #0]
 8005358:	4619      	mov	r1, r3
 800535a:	2008      	movs	r0, #8
 800535c:	f7ff fe50 	bl	8005000 <writeReg>
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bdb0      	pop	{r4, r5, r7, pc}
 8005368:	2000019c 	.word	0x2000019c
 800536c:	01e84800 	.word	0x01e84800

08005370 <configPower>:



static void configPower () {
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <configPower+0x5c>)
 8005378:	7c9b      	ldrb	r3, [r3, #18]
 800537a:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 800537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005380:	2b10      	cmp	r3, #16
 8005382:	dd02      	ble.n	800538a <configPower+0x1a>
        pw = 15;
 8005384:	230f      	movs	r3, #15
 8005386:	71fb      	strb	r3, [r7, #7]
 8005388:	e005      	b.n	8005396 <configPower+0x26>
    } else if(pw < 2) {
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	2b01      	cmp	r3, #1
 8005390:	dc01      	bgt.n	8005396 <configPower+0x26>
        pw = 2;
 8005392:	2302      	movs	r3, #2
 8005394:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	b25b      	sxtb	r3, r3
 800539e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053a2:	b25b      	sxtb	r3, r3
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	2009      	movs	r0, #9
 80053aa:	f7ff fe29 	bl	8005000 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 80053ae:	205a      	movs	r0, #90	@ 0x5a
 80053b0:	f7ff fe43 	bl	800503a <readReg>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	205a      	movs	r0, #90	@ 0x5a
 80053c0:	f7ff fe1e 	bl	8005000 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	2000019c 	.word	0x2000019c

080053d0 <txfsk>:

static void txfsk () {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80053d4:	2110      	movs	r1, #16
 80053d6:	2001      	movs	r0, #1
 80053d8:	f7ff fe12 	bl	8005000 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 80053dc:	2001      	movs	r0, #1
 80053de:	f7ff fe2c 	bl	800503a <readReg>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d001      	beq.n	80053ec <txfsk+0x1c>
 80053e8:	f7fc fa42 	bl	8001870 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7ff fe95 	bl	800511c <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80053f2:	2102      	movs	r1, #2
 80053f4:	2002      	movs	r0, #2
 80053f6:	f7ff fe03 	bl	8005000 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 80053fa:	2180      	movs	r1, #128	@ 0x80
 80053fc:	2003      	movs	r0, #3
 80053fe:	f7ff fdff 	bl	8005000 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005402:	2101      	movs	r1, #1
 8005404:	2004      	movs	r0, #4
 8005406:	f7ff fdfb 	bl	8005000 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800540a:	2199      	movs	r1, #153	@ 0x99
 800540c:	2005      	movs	r0, #5
 800540e:	f7ff fdf7 	bl	8005000 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005412:	2100      	movs	r1, #0
 8005414:	2025      	movs	r0, #37	@ 0x25
 8005416:	f7ff fdf3 	bl	8005000 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 800541a:	2105      	movs	r1, #5
 800541c:	2026      	movs	r0, #38	@ 0x26
 800541e:	f7ff fdef 	bl	8005000 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005422:	2112      	movs	r1, #18
 8005424:	2027      	movs	r0, #39	@ 0x27
 8005426:	f7ff fdeb 	bl	8005000 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 800542a:	21d0      	movs	r1, #208	@ 0xd0
 800542c:	2030      	movs	r0, #48	@ 0x30
 800542e:	f7ff fde7 	bl	8005000 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005432:	2140      	movs	r1, #64	@ 0x40
 8005434:	2031      	movs	r0, #49	@ 0x31
 8005436:	f7ff fde3 	bl	8005000 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 800543a:	21c1      	movs	r1, #193	@ 0xc1
 800543c:	2028      	movs	r0, #40	@ 0x28
 800543e:	f7ff fddf 	bl	8005000 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005442:	2194      	movs	r1, #148	@ 0x94
 8005444:	2029      	movs	r0, #41	@ 0x29
 8005446:	f7ff fddb 	bl	8005000 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 800544a:	21c1      	movs	r1, #193	@ 0xc1
 800544c:	202a      	movs	r0, #42	@ 0x2a
 800544e:	f7ff fdd7 	bl	8005000 <writeReg>
    // configure frequency
    configChannel();
 8005452:	f7ff ff4f 	bl	80052f4 <configChannel>
    // configure output power
    configPower();
 8005456:	f7ff ff8b 	bl	8005370 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 800545a:	2134      	movs	r1, #52	@ 0x34
 800545c:	2040      	movs	r0, #64	@ 0x40
 800545e:	f7ff fdcf 	bl	8005000 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8005462:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <txfsk+0xd4>)
 8005464:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005468:	3301      	adds	r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	2032      	movs	r0, #50	@ 0x32
 8005470:	f7ff fdc6 	bl	8005000 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005474:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <txfsk+0xd4>)
 8005476:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800547a:	4619      	mov	r1, r3
 800547c:	2000      	movs	r0, #0
 800547e:	f7ff fdbf 	bl	8005000 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005482:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <txfsk+0xd4>)
 8005484:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005488:	461a      	mov	r2, r3
 800548a:	4907      	ldr	r1, [pc, #28]	@ (80054a8 <txfsk+0xd8>)
 800548c:	2000      	movs	r0, #0
 800548e:	f7ff fdf0 	bl	8005072 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005492:	2001      	movs	r0, #1
 8005494:	f7fc f859 	bl	800154a <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005498:	2003      	movs	r0, #3
 800549a:	f7ff fe3f 	bl	800511c <opmode>
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2000019c 	.word	0x2000019c
 80054a8:	200002e4 	.word	0x200002e4

080054ac <txlora>:

static void txlora () {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 80054b0:	f7ff fe4e 	bl	8005150 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80054b4:	2001      	movs	r0, #1
 80054b6:	f7ff fdc0 	bl	800503a <readReg>
 80054ba:	4603      	mov	r3, r0
 80054bc:	b25b      	sxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	db01      	blt.n	80054c6 <txlora+0x1a>
 80054c2:	f7fc f9d5 	bl	8001870 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80054c6:	2001      	movs	r0, #1
 80054c8:	f7ff fe28 	bl	800511c <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 80054cc:	f7ff fe64 	bl	8005198 <configLoraModem>
    // configure frequency
    configChannel();
 80054d0:	f7ff ff10 	bl	80052f4 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 80054d4:	200a      	movs	r0, #10
 80054d6:	f7ff fdb0 	bl	800503a <readReg>
 80054da:	4603      	mov	r3, r0
 80054dc:	b25b      	sxtb	r3, r3
 80054de:	f023 030f 	bic.w	r3, r3, #15
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	b25b      	sxtb	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	200a      	movs	r0, #10
 80054f0:	f7ff fd86 	bl	8005000 <writeReg>
    configPower();
 80054f4:	f7ff ff3c 	bl	8005370 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 80054f8:	2134      	movs	r1, #52	@ 0x34
 80054fa:	2039      	movs	r0, #57	@ 0x39
 80054fc:	f7ff fd80 	bl	8005000 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005500:	21f0      	movs	r1, #240	@ 0xf0
 8005502:	2040      	movs	r0, #64	@ 0x40
 8005504:	f7ff fd7c 	bl	8005000 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005508:	21ff      	movs	r1, #255	@ 0xff
 800550a:	2012      	movs	r0, #18
 800550c:	f7ff fd78 	bl	8005000 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005510:	21f7      	movs	r1, #247	@ 0xf7
 8005512:	2011      	movs	r0, #17
 8005514:	f7ff fd74 	bl	8005000 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005518:	2100      	movs	r1, #0
 800551a:	200e      	movs	r0, #14
 800551c:	f7ff fd70 	bl	8005000 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005520:	2100      	movs	r1, #0
 8005522:	200d      	movs	r0, #13
 8005524:	f7ff fd6c 	bl	8005000 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005528:	4b0b      	ldr	r3, [pc, #44]	@ (8005558 <txlora+0xac>)
 800552a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800552e:	4619      	mov	r1, r3
 8005530:	2022      	movs	r0, #34	@ 0x22
 8005532:	f7ff fd65 	bl	8005000 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005536:	4b08      	ldr	r3, [pc, #32]	@ (8005558 <txlora+0xac>)
 8005538:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800553c:	461a      	mov	r2, r3
 800553e:	4907      	ldr	r1, [pc, #28]	@ (800555c <txlora+0xb0>)
 8005540:	2000      	movs	r0, #0
 8005542:	f7ff fd96 	bl	8005072 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005546:	2001      	movs	r0, #1
 8005548:	f7fb ffff 	bl	800154a <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 800554c:	2003      	movs	r0, #3
 800554e:	f7ff fde5 	bl	800511c <opmode>
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2000019c 	.word	0x2000019c
 800555c:	200002e4 	.word	0x200002e4

08005560 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005564:	2001      	movs	r0, #1
 8005566:	f7ff fd68 	bl	800503a <readReg>
 800556a:	4603      	mov	r3, r0
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <starttx+0x18>
 8005574:	f7fc f97c 	bl	8001870 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005578:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <starttx+0x38>)
 800557a:	89db      	ldrh	r3, [r3, #14]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fc f97f 	bl	8001880 <getSf>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <starttx+0x2e>
        txfsk();
 8005588:	f7ff ff22 	bl	80053d0 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 800558c:	e001      	b.n	8005592 <starttx+0x32>
        txlora();
 800558e:	f7ff ff8d 	bl	80054ac <txlora>
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2000019c 	.word	0x2000019c

0800559c <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 80055a6:	f7ff fdd3 	bl	8005150 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80055aa:	2001      	movs	r0, #1
 80055ac:	f7ff fd45 	bl	800503a <readReg>
 80055b0:	4603      	mov	r3, r0
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db01      	blt.n	80055bc <rxlora+0x20>
 80055b8:	f7fc f95a 	bl	8001870 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80055bc:	2001      	movs	r0, #1
 80055be:	f7ff fdad 	bl	800511c <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d108      	bne.n	80055da <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80055c8:	210a      	movs	r1, #10
 80055ca:	201d      	movs	r0, #29
 80055cc:	f7ff fd18 	bl	8005000 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80055d0:	2170      	movs	r1, #112	@ 0x70
 80055d2:	201e      	movs	r0, #30
 80055d4:	f7ff fd14 	bl	8005000 <writeReg>
 80055d8:	e003      	b.n	80055e2 <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 80055da:	f7ff fddd 	bl	8005198 <configLoraModem>
        // configure frequency
        configChannel();
 80055de:	f7ff fe89 	bl	80052f4 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 80055e2:	2121      	movs	r1, #33	@ 0x21
 80055e4:	200c      	movs	r0, #12
 80055e6:	f7ff fd0b 	bl	8005000 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 80055ea:	2140      	movs	r1, #64	@ 0x40
 80055ec:	2023      	movs	r0, #35	@ 0x23
 80055ee:	f7ff fd07 	bl	8005000 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 80055f2:	4b26      	ldr	r3, [pc, #152]	@ (800568c <rxlora+0xf0>)
 80055f4:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 80055fc:	2033      	movs	r0, #51	@ 0x33
 80055fe:	f7ff fd1c 	bl	800503a <readReg>
 8005602:	4603      	mov	r3, r0
 8005604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	2033      	movs	r0, #51	@ 0x33
 800560e:	f7ff fcf7 	bl	8005000 <writeReg>
 8005612:	e00a      	b.n	800562a <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005614:	2033      	movs	r0, #51	@ 0x33
 8005616:	f7ff fd10 	bl	800503a <readReg>
 800561a:	4603      	mov	r3, r0
 800561c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4619      	mov	r1, r3
 8005624:	2033      	movs	r0, #51	@ 0x33
 8005626:	f7ff fceb 	bl	8005000 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 800562a:	4b18      	ldr	r3, [pc, #96]	@ (800568c <rxlora+0xf0>)
 800562c:	7c1b      	ldrb	r3, [r3, #16]
 800562e:	4619      	mov	r1, r3
 8005630:	201f      	movs	r0, #31
 8005632:	f7ff fce5 	bl	8005000 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005636:	2134      	movs	r1, #52	@ 0x34
 8005638:	2039      	movs	r0, #57	@ 0x39
 800563a:	f7ff fce1 	bl	8005000 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 800563e:	21c0      	movs	r1, #192	@ 0xc0
 8005640:	2040      	movs	r0, #64	@ 0x40
 8005642:	f7ff fcdd 	bl	8005000 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005646:	21ff      	movs	r1, #255	@ 0xff
 8005648:	2012      	movs	r0, #18
 800564a:	f7ff fcd9 	bl	8005000 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	4a0f      	ldr	r2, [pc, #60]	@ (8005690 <rxlora+0xf4>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	43db      	mvns	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	2011      	movs	r0, #17
 800565c:	f7ff fcd0 	bl	8005000 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005660:	2000      	movs	r0, #0
 8005662:	f7fb ff72 	bl	800154a <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 800566c:	4b07      	ldr	r3, [pc, #28]	@ (800568c <rxlora+0xf0>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fc f84a 	bl	800170a <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005676:	2006      	movs	r0, #6
 8005678:	f7ff fd50 	bl	800511c <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 800567c:	e002      	b.n	8005684 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 800567e:	2005      	movs	r0, #5
 8005680:	f7ff fd4c 	bl	800511c <opmode>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	2000019c 	.word	0x2000019c
 8005690:	0800c520 	.word	0x0800c520

08005694 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <rxfsk+0x14>
 80056a4:	f7fc f8e4 	bl	8001870 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 80056a8:	f7ff fd64 	bl	8005174 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 80056ac:	2001      	movs	r0, #1
 80056ae:	f7ff fcc4 	bl	800503a <readReg>
 80056b2:	4603      	mov	r3, r0
 80056b4:	b25b      	sxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da01      	bge.n	80056be <rxfsk+0x2a>
 80056ba:	f7fc f8d9 	bl	8001870 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80056be:	2001      	movs	r0, #1
 80056c0:	f7ff fd2c 	bl	800511c <opmode>
    // configure frequency
    configChannel();
 80056c4:	f7ff fe16 	bl	80052f4 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 80056c8:	2121      	movs	r1, #33	@ 0x21
 80056ca:	200c      	movs	r0, #12
 80056cc:	f7ff fc98 	bl	8005000 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 80056d0:	211e      	movs	r1, #30
 80056d2:	200d      	movs	r0, #13
 80056d4:	f7ff fc94 	bl	8005000 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 80056d8:	210b      	movs	r1, #11
 80056da:	2012      	movs	r0, #18
 80056dc:	f7ff fc90 	bl	8005000 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 80056e0:	2112      	movs	r1, #18
 80056e2:	2013      	movs	r0, #19
 80056e4:	f7ff fc8c 	bl	8005000 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 80056e8:	21aa      	movs	r1, #170	@ 0xaa
 80056ea:	201f      	movs	r0, #31
 80056ec:	f7ff fc88 	bl	8005000 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 80056f0:	2112      	movs	r1, #18
 80056f2:	2027      	movs	r0, #39	@ 0x27
 80056f4:	f7ff fc84 	bl	8005000 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 80056f8:	21d8      	movs	r1, #216	@ 0xd8
 80056fa:	2030      	movs	r0, #48	@ 0x30
 80056fc:	f7ff fc80 	bl	8005000 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005700:	2140      	movs	r1, #64	@ 0x40
 8005702:	2031      	movs	r0, #49	@ 0x31
 8005704:	f7ff fc7c 	bl	8005000 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005708:	21c1      	movs	r1, #193	@ 0xc1
 800570a:	2028      	movs	r0, #40	@ 0x28
 800570c:	f7ff fc78 	bl	8005000 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005710:	2194      	movs	r1, #148	@ 0x94
 8005712:	2029      	movs	r0, #41	@ 0x29
 8005714:	f7ff fc74 	bl	8005000 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005718:	21c1      	movs	r1, #193	@ 0xc1
 800571a:	202a      	movs	r0, #42	@ 0x2a
 800571c:	f7ff fc70 	bl	8005000 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8005720:	21ff      	movs	r1, #255	@ 0xff
 8005722:	2021      	movs	r0, #33	@ 0x21
 8005724:	f7ff fc6c 	bl	8005000 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005728:	2102      	movs	r1, #2
 800572a:	2002      	movs	r0, #2
 800572c:	f7ff fc68 	bl	8005000 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005730:	2180      	movs	r1, #128	@ 0x80
 8005732:	2003      	movs	r0, #3
 8005734:	f7ff fc64 	bl	8005000 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005738:	2101      	movs	r1, #1
 800573a:	2004      	movs	r0, #4
 800573c:	f7ff fc60 	bl	8005000 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005740:	2199      	movs	r1, #153	@ 0x99
 8005742:	2005      	movs	r0, #5
 8005744:	f7ff fc5c 	bl	8005000 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005748:	2138      	movs	r1, #56	@ 0x38
 800574a:	2040      	movs	r0, #64	@ 0x40
 800574c:	f7ff fc58 	bl	8005000 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005750:	2000      	movs	r0, #0
 8005752:	f7fb fefa 	bl	800154a <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005756:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <rxfsk+0xdc>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fb ffd5 	bl	800170a <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8005760:	2005      	movs	r0, #5
 8005762:	f7ff fcdb 	bl	800511c <opmode>
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	2000019c 	.word	0x2000019c

08005774 <startrx>:

static void startrx (u1_t rxmode) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 800577e:	2001      	movs	r0, #1
 8005780:	f7ff fc5b 	bl	800503a <readReg>
 8005784:	4603      	mov	r3, r0
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <startrx+0x1e>
 800578e:	f7fc f86f 	bl	8001870 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <startrx+0x48>)
 8005794:	89db      	ldrh	r3, [r3, #14]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fc f872 	bl	8001880 <getSf>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <startrx+0x38>
        rxfsk(rxmode);
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff75 	bl	8005694 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80057aa:	e003      	b.n	80057b4 <startrx+0x40>
        rxlora(rxmode);
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fef4 	bl	800559c <rxlora>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	2000019c 	.word	0x2000019c

080057c0 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80057c6:	f7fc f811 	bl	80017ec <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80057ca:	2000      	movs	r0, #0
 80057cc:	f7fb fed9 	bl	8001582 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80057d0:	f7ff fb40 	bl	8004e54 <os_getTime>
 80057d4:	4603      	mov	r3, r0
 80057d6:	3320      	adds	r3, #32
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fb ff96 	bl	800170a <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80057de:	2002      	movs	r0, #2
 80057e0:	f7fb fecf 	bl	8001582 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80057e4:	f7ff fb36 	bl	8004e54 <os_getTime>
 80057e8:	4603      	mov	r3, r0
 80057ea:	33a0      	adds	r3, #160	@ 0xa0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fb ff8c 	bl	800170a <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7ff fc92 	bl	800511c <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80057f8:	2042      	movs	r0, #66	@ 0x42
 80057fa:	f7ff fc1e 	bl	800503a <readReg>
 80057fe:	4603      	mov	r3, r0
 8005800:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	2b12      	cmp	r3, #18
 8005806:	d001      	beq.n	800580c <radio_init+0x4c>
 8005808:	f7fc f832 	bl	8001870 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 800580c:	2002      	movs	r0, #2
 800580e:	f7ff fec5 	bl	800559c <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8005812:	bf00      	nop
 8005814:	2001      	movs	r0, #1
 8005816:	f7ff fc10 	bl	800503a <readReg>
 800581a:	4603      	mov	r3, r0
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	2b05      	cmp	r3, #5
 8005822:	d1f7      	bne.n	8005814 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005824:	2301      	movs	r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e02c      	b.n	8005884 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	e023      	b.n	8005878 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8005830:	bf00      	nop
 8005832:	202c      	movs	r0, #44	@ 0x2c
 8005834:	f7ff fc01 	bl	800503a <readReg>
 8005838:	4603      	mov	r3, r0
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	71bb      	strb	r3, [r7, #6]
 8005840:	79bc      	ldrb	r4, [r7, #6]
 8005842:	202c      	movs	r0, #44	@ 0x2c
 8005844:	f7ff fbf9 	bl	800503a <readReg>
 8005848:	4603      	mov	r3, r0
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	429c      	cmp	r4, r3
 8005850:	d0ef      	beq.n	8005832 <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8005852:	4a14      	ldr	r2, [pc, #80]	@ (80058a4 <radio_init+0xe4>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	b25a      	sxtb	r2, r3
 800585e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005862:	4313      	orrs	r3, r2
 8005864:	b25b      	sxtb	r3, r3
 8005866:	b2d9      	uxtb	r1, r3
 8005868:	4a0e      	ldr	r2, [pc, #56]	@ (80058a4 <radio_init+0xe4>)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	460a      	mov	r2, r1
 8005870:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	3301      	adds	r3, #1
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b07      	cmp	r3, #7
 800587c:	ddd8      	ble.n	8005830 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b0f      	cmp	r3, #15
 8005888:	ddcf      	ble.n	800582a <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 800588a:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <radio_init+0xe4>)
 800588c:	2210      	movs	r2, #16
 800588e:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8005890:	2000      	movs	r0, #0
 8005892:	f7ff fc43 	bl	800511c <opmode>

    hal_enableIRQs();
 8005896:	f7fb ffb9 	bl	800180c <hal_enableIRQs>
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd90      	pop	{r4, r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000370 	.word	0x20000370

080058a8 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80058ae:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <radio_rand1+0x48>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <radio_rand1+0x16>
 80058ba:	f7fb ffd9 	bl	8001870 <hal_failed>
    if( i==16 ) {
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d106      	bne.n	80058d2 <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80058c4:	2210      	movs	r2, #16
 80058c6:	490a      	ldr	r1, [pc, #40]	@ (80058f0 <radio_rand1+0x48>)
 80058c8:	2000      	movs	r0, #0
 80058ca:	f7fa ff95 	bl	80007f8 <os_aes>
        i = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	71fa      	strb	r2, [r7, #7]
 80058d8:	461a      	mov	r2, r3
 80058da:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <radio_rand1+0x48>)
 80058dc:	5c9b      	ldrb	r3, [r3, r2]
 80058de:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80058e0:	4a03      	ldr	r2, [pc, #12]	@ (80058f0 <radio_rand1+0x48>)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	7013      	strb	r3, [r2, #0]
    return v;
 80058e6:	79bb      	ldrb	r3, [r7, #6]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000370 	.word	0x20000370

080058f4 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 80058fe:	f7ff faa9 	bl	8004e54 <os_getTime>
 8005902:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005904:	2001      	movs	r0, #1
 8005906:	f7ff fb98 	bl	800503a <readReg>
 800590a:	4603      	mov	r3, r0
 800590c:	b25b      	sxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	da74      	bge.n	80059fc <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 8005912:	2012      	movs	r0, #18
 8005914:	f7ff fb91 	bl	800503a <readReg>
 8005918:	4603      	mov	r3, r0
 800591a:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 800591c:	7a7b      	ldrb	r3, [r7, #9]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b01      	subs	r3, #1
 800592a:	4a59      	ldr	r2, [pc, #356]	@ (8005a90 <radio_irq_handler+0x19c>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e05c      	b.n	80059ea <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8005930:	7a7b      	ldrb	r3, [r7, #9]
 8005932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d04f      	beq.n	80059da <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 800593a:	4b55      	ldr	r3, [pc, #340]	@ (8005a90 <radio_irq_handler+0x19c>)
 800593c:	89db      	ldrh	r3, [r3, #14]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fb ffae 	bl	80018a0 <getBw>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 800594a:	4b51      	ldr	r3, [pc, #324]	@ (8005a90 <radio_irq_handler+0x19c>)
 800594c:	89db      	ldrh	r3, [r3, #14]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fb ff96 	bl	8001880 <getSf>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	4b4e      	ldr	r3, [pc, #312]	@ (8005a94 <radio_irq_handler+0x1a0>)
 800595a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8005966:	4a4a      	ldr	r2, [pc, #296]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 800596c:	201d      	movs	r0, #29
 800596e:	f7ff fb64 	bl	800503a <readReg>
 8005972:	4603      	mov	r3, r0
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 800597c:	2022      	movs	r0, #34	@ 0x22
 800597e:	f7ff fb5c 	bl	800503a <readReg>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	e004      	b.n	8005992 <radio_irq_handler+0x9e>
 8005988:	2013      	movs	r0, #19
 800598a:	f7ff fb56 	bl	800503a <readReg>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005992:	4b3f      	ldr	r3, [pc, #252]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005994:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8005998:	2010      	movs	r0, #16
 800599a:	f7ff fb4e 	bl	800503a <readReg>
 800599e:	4603      	mov	r3, r0
 80059a0:	4619      	mov	r1, r3
 80059a2:	200d      	movs	r0, #13
 80059a4:	f7ff fb2c 	bl	8005000 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80059a8:	4b39      	ldr	r3, [pc, #228]	@ (8005a90 <radio_irq_handler+0x19c>)
 80059aa:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80059ae:	461a      	mov	r2, r3
 80059b0:	4939      	ldr	r1, [pc, #228]	@ (8005a98 <radio_irq_handler+0x1a4>)
 80059b2:	2000      	movs	r0, #0
 80059b4:	f7ff fb87 	bl	80050c6 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80059b8:	2019      	movs	r0, #25
 80059ba:	f7ff fb3e 	bl	800503a <readReg>
 80059be:	4603      	mov	r3, r0
 80059c0:	b25a      	sxtb	r2, r3
 80059c2:	4b33      	ldr	r3, [pc, #204]	@ (8005a90 <radio_irq_handler+0x19c>)
 80059c4:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80059c6:	201a      	movs	r0, #26
 80059c8:	f7ff fb37 	bl	800503a <readReg>
 80059cc:	4603      	mov	r3, r0
 80059ce:	3b3d      	subs	r3, #61	@ 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	b25a      	sxtb	r2, r3
 80059d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005a90 <radio_irq_handler+0x19c>)
 80059d6:	731a      	strb	r2, [r3, #12]
 80059d8:	e007      	b.n	80059ea <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80059da:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da03      	bge.n	80059ea <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80059e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a90 <radio_irq_handler+0x19c>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 80059ea:	21ff      	movs	r1, #255	@ 0xff
 80059ec:	2011      	movs	r0, #17
 80059ee:	f7ff fb07 	bl	8005000 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80059f2:	21ff      	movs	r1, #255	@ 0xff
 80059f4:	2012      	movs	r0, #18
 80059f6:	f7ff fb03 	bl	8005000 <writeReg>
 80059fa:	e03c      	b.n	8005a76 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 80059fc:	203e      	movs	r0, #62	@ 0x3e
 80059fe:	f7ff fb1c 	bl	800503a <readReg>
 8005a02:	4603      	mov	r3, r0
 8005a04:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005a06:	203f      	movs	r0, #63	@ 0x3f
 8005a08:	f7ff fb17 	bl	800503a <readReg>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8005a10:	7abb      	ldrb	r3, [r7, #10]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	e029      	b.n	8005a76 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8005a22:	7abb      	ldrb	r3, [r7, #10]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8005a2c:	4a18      	ldr	r2, [pc, #96]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8005a32:	2032      	movs	r0, #50	@ 0x32
 8005a34:	f7ff fb01 	bl	800503a <readReg>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a3e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005a42:	4b13      	ldr	r3, [pc, #76]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a44:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4913      	ldr	r1, [pc, #76]	@ (8005a98 <radio_irq_handler+0x1a4>)
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f7ff fb3a 	bl	80050c6 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8005a52:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005a58:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	731a      	strb	r2, [r3, #12]
 8005a5e:	e00a      	b.n	8005a76 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 8005a6a:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8005a72:	e000      	b.n	8005a76 <radio_irq_handler+0x182>
        } else {
            while(1);
 8005a74:	e7fe      	b.n	8005a74 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005a76:	2000      	movs	r0, #0
 8005a78:	f7ff fb50 	bl	800511c <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005a7c:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <radio_irq_handler+0x19c>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	4619      	mov	r1, r3
 8005a82:	4806      	ldr	r0, [pc, #24]	@ (8005a9c <radio_irq_handler+0x1a8>)
 8005a84:	f7ff fa2a 	bl	8004edc <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	2000019c 	.word	0x2000019c
 8005a94:	0800c524 	.word	0x0800c524
 8005a98:	200002e4 	.word	0x200002e4
 8005a9c:	200001b0 	.word	0x200001b0

08005aa0 <os_radio>:

void os_radio (u1_t mode) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 8005aaa:	f7fb fe9f 	bl	80017ec <hal_disableIRQs>
    switch (mode) {
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d81a      	bhi.n	8005aea <os_radio+0x4a>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <os_radio+0x1c>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005ad5 	.word	0x08005ad5
 8005ac4:	08005adb 	.word	0x08005adb
 8005ac8:	08005ae3 	.word	0x08005ae3
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7ff fb25 	bl	800511c <opmode>
        break;
 8005ad2:	e00a      	b.n	8005aea <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8005ad4:	f7ff fd44 	bl	8005560 <starttx>
        break;
 8005ad8:	e007      	b.n	8005aea <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7ff fe4a 	bl	8005774 <startrx>
        break;
 8005ae0:	e003      	b.n	8005aea <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f7ff fe46 	bl	8005774 <startrx>
        break;
 8005ae8:	bf00      	nop
    }
    hal_enableIRQs();
 8005aea:	f7fb fe8f 	bl	800180c <hal_enableIRQs>
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <MX_SPI3_Init+0x78>)
 8005b00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005b02:	4b1a      	ldr	r3, [pc, #104]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005b08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005b0a:	4b18      	ldr	r3, [pc, #96]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b10:	4b16      	ldr	r3, [pc, #88]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005b16:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b18:	4b14      	ldr	r3, [pc, #80]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b1e:	4b13      	ldr	r3, [pc, #76]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005b24:	4b11      	ldr	r3, [pc, #68]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b2a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b2e:	2228      	movs	r2, #40	@ 0x28
 8005b30:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b32:	4b0e      	ldr	r3, [pc, #56]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b38:	4b0c      	ldr	r3, [pc, #48]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005b44:	4b09      	ldr	r3, [pc, #36]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b46:	2207      	movs	r2, #7
 8005b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b4a:	4b08      	ldr	r3, [pc, #32]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005b50:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b52:	2208      	movs	r2, #8
 8005b54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005b56:	4805      	ldr	r0, [pc, #20]	@ (8005b6c <MX_SPI3_Init+0x74>)
 8005b58:	f003 f9c8 	bl	8008eec <HAL_SPI_Init>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005b62:	f7ff f95f 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000380 	.word	0x20000380
 8005b70:	40003c00 	.word	0x40003c00

08005b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	@ 0x28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	609a      	str	r2, [r3, #8]
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1b      	ldr	r2, [pc, #108]	@ (8005c00 <HAL_SPI_MspInit+0x8c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d12f      	bne.n	8005bf6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005b96:	4b1b      	ldr	r3, [pc, #108]	@ (8005c04 <HAL_SPI_MspInit+0x90>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c04 <HAL_SPI_MspInit+0x90>)
 8005b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba2:	4b18      	ldr	r3, [pc, #96]	@ (8005c04 <HAL_SPI_MspInit+0x90>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bae:	4b15      	ldr	r3, [pc, #84]	@ (8005c04 <HAL_SPI_MspInit+0x90>)
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb2:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <HAL_SPI_MspInit+0x90>)
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bba:	4b12      	ldr	r3, [pc, #72]	@ (8005c04 <HAL_SPI_MspInit+0x90>)
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005bc6:	2338      	movs	r3, #56	@ 0x38
 8005bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005bd6:	2306      	movs	r3, #6
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	4619      	mov	r1, r3
 8005be0:	4809      	ldr	r0, [pc, #36]	@ (8005c08 <HAL_SPI_MspInit+0x94>)
 8005be2:	f001 fe65 	bl	80078b0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	2033      	movs	r0, #51	@ 0x33
 8005bec:	f001 fdab 	bl	8007746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005bf0:	2033      	movs	r0, #51	@ 0x33
 8005bf2:	f001 fdc4 	bl	800777e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3728      	adds	r7, #40	@ 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40003c00 	.word	0x40003c00
 8005c04:	40021000 	.word	0x40021000
 8005c08:	48000400 	.word	0x48000400

08005c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c12:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <HAL_MspInit+0x44>)
 8005c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c16:	4a0e      	ldr	r2, [pc, #56]	@ (8005c50 <HAL_MspInit+0x44>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <HAL_MspInit+0x44>)
 8005c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	607b      	str	r3, [r7, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <HAL_MspInit+0x44>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2e:	4a08      	ldr	r2, [pc, #32]	@ (8005c50 <HAL_MspInit+0x44>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <HAL_MspInit+0x44>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000

08005c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <NMI_Handler+0x4>

08005c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <HardFault_Handler+0x4>

08005c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <MemManage_Handler+0x4>

08005c6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <BusFault_Handler+0x4>

08005c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <UsageFault_Handler+0x4>

08005c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c8e:	bf00      	nop
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005caa:	f000 fa11 	bl	80060d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cae:	bf00      	nop
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005cb8:	4802      	ldr	r0, [pc, #8]	@ (8005cc4 <ADC1_IRQHandler+0x10>)
 8005cba:	f000 fe06 	bl	80068ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000070 	.word	0x20000070

08005cc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8005ccc:	2040      	movs	r0, #64	@ 0x40
 8005cce:	f001 ff71 	bl	8007bb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8005cd2:	2080      	movs	r0, #128	@ 0x80
 8005cd4:	f001 ff6e 	bl	8007bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ce0:	4802      	ldr	r0, [pc, #8]	@ (8005cec <USART1_IRQHandler+0x10>)
 8005ce2:	f004 f9e5 	bl	800a0b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000047c 	.word	0x2000047c

08005cf0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005cf4:	4802      	ldr	r0, [pc, #8]	@ (8005d00 <SPI3_IRQHandler+0x10>)
 8005cf6:	f003 fbbb 	bl	8009470 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000380 	.word	0x20000380

08005d04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005d08:	4802      	ldr	r0, [pc, #8]	@ (8005d14 <TIM6_DAC_IRQHandler+0x10>)
 8005d0a:	f003 fed5 	bl	8009ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200003e4 	.word	0x200003e4

08005d18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005d1c:	4802      	ldr	r0, [pc, #8]	@ (8005d28 <TIM7_IRQHandler+0x10>)
 8005d1e:	f003 fecb 	bl	8009ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000430 	.word	0x20000430

08005d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005d30:	4b06      	ldr	r3, [pc, #24]	@ (8005d4c <SystemInit+0x20>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <SystemInit+0x20>)
 8005d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000ed00 	.word	0xe000ed00

08005d50 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005d60:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005d62:	4a16      	ldr	r2, [pc, #88]	@ (8005dbc <MX_TIM6_Init+0x6c>)
 8005d64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 8005d66:	4b14      	ldr	r3, [pc, #80]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005d68:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8005d6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d6e:	4b12      	ldr	r3, [pc, #72]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8005d74:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d82:	480d      	ldr	r0, [pc, #52]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005d84:	f003 fdec 	bl	8009960 <HAL_TIM_Base_Init>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005d8e:	f7ff f849 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4806      	ldr	r0, [pc, #24]	@ (8005db8 <MX_TIM6_Init+0x68>)
 8005da0:	f004 f82a 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8005daa:	f7ff f83b 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200003e4 	.word	0x200003e4
 8005dbc:	40001000 	.word	0x40001000

08005dc0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc6:	1d3b      	adds	r3, r7, #4
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005dd0:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005dd2:	4a16      	ldr	r2, [pc, #88]	@ (8005e2c <MX_TIM7_Init+0x6c>)
 8005dd4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 8005dd6:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005dd8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8005ddc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dde:	4b12      	ldr	r3, [pc, #72]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005de4:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dec:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005df2:	480d      	ldr	r0, [pc, #52]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005df4:	f003 fdb4 	bl	8009960 <HAL_TIM_Base_Init>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005dfe:	f7ff f811 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4806      	ldr	r0, [pc, #24]	@ (8005e28 <MX_TIM7_Init+0x68>)
 8005e10:	f003 fff2 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005e1a:	f7ff f803 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000430 	.word	0x20000430
 8005e2c:	40001400 	.word	0x40001400

08005e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea8 <HAL_TIM_Base_MspInit+0x78>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d114      	bne.n	8005e6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e42:	4b1a      	ldr	r3, [pc, #104]	@ (8005eac <HAL_TIM_Base_MspInit+0x7c>)
 8005e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e46:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <HAL_TIM_Base_MspInit+0x7c>)
 8005e48:	f043 0310 	orr.w	r3, r3, #16
 8005e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e4e:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <HAL_TIM_Base_MspInit+0x7c>)
 8005e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2036      	movs	r0, #54	@ 0x36
 8005e60:	f001 fc71 	bl	8007746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e64:	2036      	movs	r0, #54	@ 0x36
 8005e66:	f001 fc8a 	bl	800777e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005e6a:	e018      	b.n	8005e9e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0f      	ldr	r2, [pc, #60]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x80>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d113      	bne.n	8005e9e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e76:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <HAL_TIM_Base_MspInit+0x7c>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005eac <HAL_TIM_Base_MspInit+0x7c>)
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <HAL_TIM_Base_MspInit+0x7c>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2100      	movs	r1, #0
 8005e92:	2037      	movs	r0, #55	@ 0x37
 8005e94:	f001 fc57 	bl	8007746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e98:	2037      	movs	r0, #55	@ 0x37
 8005e9a:	f001 fc70 	bl	800777e <HAL_NVIC_EnableIRQ>
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40001000 	.word	0x40001000
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40001400 	.word	0x40001400

08005eb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005eb8:	4b14      	ldr	r3, [pc, #80]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005eba:	4a15      	ldr	r2, [pc, #84]	@ (8005f10 <MX_USART1_UART_Init+0x5c>)
 8005ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ec6:	4b11      	ldr	r3, [pc, #68]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005eda:	220c      	movs	r2, #12
 8005edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ede:	4b0b      	ldr	r3, [pc, #44]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ee4:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eea:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ef6:	4805      	ldr	r0, [pc, #20]	@ (8005f0c <MX_USART1_UART_Init+0x58>)
 8005ef8:	f004 f802 	bl	8009f00 <HAL_UART_Init>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005f02:	f7fe ff8f 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f06:	bf00      	nop
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	2000047c 	.word	0x2000047c
 8005f10:	40013800 	.word	0x40013800

08005f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b09e      	sub	sp, #120	@ 0x78
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	609a      	str	r2, [r3, #8]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f2c:	f107 0310 	add.w	r3, r7, #16
 8005f30:	2254      	movs	r2, #84	@ 0x54
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f005 f872 	bl	800b01e <memset>
  if(uartHandle->Instance==USART1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a23      	ldr	r2, [pc, #140]	@ (8005fcc <HAL_UART_MspInit+0xb8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d13f      	bne.n	8005fc4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005f44:	2301      	movs	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 fce3 	bl	800891c <HAL_RCCEx_PeriphCLKConfig>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005f5c:	f7fe ff62 	bl	8004e24 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f60:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd0 <HAL_UART_MspInit+0xbc>)
 8005f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f64:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd0 <HAL_UART_MspInit+0xbc>)
 8005f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f6c:	4b18      	ldr	r3, [pc, #96]	@ (8005fd0 <HAL_UART_MspInit+0xbc>)
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f78:	4b15      	ldr	r3, [pc, #84]	@ (8005fd0 <HAL_UART_MspInit+0xbc>)
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7c:	4a14      	ldr	r2, [pc, #80]	@ (8005fd0 <HAL_UART_MspInit+0xbc>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f84:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <HAL_UART_MspInit+0xbc>)
 8005f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005f90:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005f94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f96:	2302      	movs	r3, #2
 8005f98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005fa2:	2307      	movs	r3, #7
 8005fa4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fa6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005faa:	4619      	mov	r1, r3
 8005fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fb0:	f001 fc7e 	bl	80078b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	2025      	movs	r0, #37	@ 0x25
 8005fba:	f001 fbc4 	bl	8007746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005fbe:	2025      	movs	r0, #37	@ 0x25
 8005fc0:	f001 fbdd 	bl	800777e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3778      	adds	r7, #120	@ 0x78
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000

08005fd4 <Reset_Handler>:
 8005fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800600c <LoopForever+0x2>
 8005fd8:	f7ff fea8 	bl	8005d2c <SystemInit>
 8005fdc:	480c      	ldr	r0, [pc, #48]	@ (8006010 <LoopForever+0x6>)
 8005fde:	490d      	ldr	r1, [pc, #52]	@ (8006014 <LoopForever+0xa>)
 8005fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8006018 <LoopForever+0xe>)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e002      	b.n	8005fec <LoopCopyDataInit>

08005fe6 <CopyDataInit>:
 8005fe6:	58d4      	ldr	r4, [r2, r3]
 8005fe8:	50c4      	str	r4, [r0, r3]
 8005fea:	3304      	adds	r3, #4

08005fec <LoopCopyDataInit>:
 8005fec:	18c4      	adds	r4, r0, r3
 8005fee:	428c      	cmp	r4, r1
 8005ff0:	d3f9      	bcc.n	8005fe6 <CopyDataInit>
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800601c <LoopForever+0x12>)
 8005ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8006020 <LoopForever+0x16>)
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e001      	b.n	8005ffe <LoopFillZerobss>

08005ffa <FillZerobss>:
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	3204      	adds	r2, #4

08005ffe <LoopFillZerobss>:
 8005ffe:	42a2      	cmp	r2, r4
 8006000:	d3fb      	bcc.n	8005ffa <FillZerobss>
 8006002:	f005 f815 	bl	800b030 <__libc_init_array>
 8006006:	f7fe fe6d 	bl	8004ce4 <main>

0800600a <LoopForever>:
 800600a:	e7fe      	b.n	800600a <LoopForever>
 800600c:	20010000 	.word	0x20010000
 8006010:	20000000 	.word	0x20000000
 8006014:	20000054 	.word	0x20000054
 8006018:	0800c58c 	.word	0x0800c58c
 800601c:	20000054 	.word	0x20000054
 8006020:	20000508 	.word	0x20000508

08006024 <CAN1_RX0_IRQHandler>:
 8006024:	e7fe      	b.n	8006024 <CAN1_RX0_IRQHandler>

08006026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006030:	2003      	movs	r0, #3
 8006032:	f001 fb7d 	bl	8007730 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006036:	200f      	movs	r0, #15
 8006038:	f000 f80e 	bl	8006058 <HAL_InitTick>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	71fb      	strb	r3, [r7, #7]
 8006046:	e001      	b.n	800604c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006048:	f7ff fde0 	bl	8005c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800604c:	79fb      	ldrb	r3, [r7, #7]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006064:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <HAL_InitTick+0x6c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d023      	beq.n	80060b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800606c:	4b16      	ldr	r3, [pc, #88]	@ (80060c8 <HAL_InitTick+0x70>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <HAL_InitTick+0x6c>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800607a:	fbb3 f3f1 	udiv	r3, r3, r1
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fb89 	bl	800779a <HAL_SYSTICK_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d809      	bhi.n	80060a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006094:	2200      	movs	r2, #0
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	f001 fb53 	bl	8007746 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060a0:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <HAL_InitTick+0x74>)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e007      	b.n	80060b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e004      	b.n	80060b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
 80060b2:	e001      	b.n	80060b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000050 	.word	0x20000050
 80060c8:	20000048 	.word	0x20000048
 80060cc:	2000004c 	.word	0x2000004c

080060d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80060d4:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <HAL_IncTick+0x20>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	4b06      	ldr	r3, [pc, #24]	@ (80060f4 <HAL_IncTick+0x24>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4413      	add	r3, r2
 80060e0:	4a04      	ldr	r2, [pc, #16]	@ (80060f4 <HAL_IncTick+0x24>)
 80060e2:	6013      	str	r3, [r2, #0]
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000050 	.word	0x20000050
 80060f4:	20000504 	.word	0x20000504

080060f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return uwTick;
 80060fc:	4b03      	ldr	r3, [pc, #12]	@ (800610c <HAL_GetTick+0x14>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000504 	.word	0x20000504

08006110 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	609a      	str	r2, [r3, #8]
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3360      	adds	r3, #96	@ 0x60
 800618a:	461a      	mov	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b08      	ldr	r3, [pc, #32]	@ (80061bc <LL_ADC_SetOffset+0x44>)
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	03fff000 	.word	0x03fff000

080061c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3360      	adds	r3, #96	@ 0x60
 80061ce:	461a      	mov	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3360      	adds	r3, #96	@ 0x60
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	431a      	orrs	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3330      	adds	r3, #48	@ 0x30
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	4413      	add	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	211f      	movs	r1, #31
 8006274:	fa01 f303 	lsl.w	r3, r1, r3
 8006278:	43db      	mvns	r3, r3
 800627a:	401a      	ands	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	0e9b      	lsrs	r3, r3, #26
 8006280:	f003 011f 	and.w	r1, r3, #31
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	fa01 f303 	lsl.w	r3, r1, r3
 800628e:	431a      	orrs	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3314      	adds	r3, #20
 80062d6:	461a      	mov	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	0e5b      	lsrs	r3, r3, #25
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	4413      	add	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	0d1b      	lsrs	r3, r3, #20
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2107      	movs	r1, #7
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	43db      	mvns	r3, r3
 80062fa:	401a      	ands	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	0d1b      	lsrs	r3, r3, #20
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	fa01 f303 	lsl.w	r3, r1, r3
 800630a:	431a      	orrs	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0318 	and.w	r3, r3, #24
 800633e:	4908      	ldr	r1, [pc, #32]	@ (8006360 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006340:	40d9      	lsrs	r1, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	400b      	ands	r3, r1
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	431a      	orrs	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	0007ffff 	.word	0x0007ffff

08006364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6093      	str	r3, [r2, #8]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800639c:	d101      	bne.n	80063a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80063c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ec:	d101      	bne.n	80063f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <LL_ADC_IsEnabled+0x18>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <LL_ADC_IsEnabled+0x1a>
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800645e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d101      	bne.n	800648e <LL_ADC_REG_IsConversionOngoing+0x18>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d101      	bne.n	80064b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e126      	b.n	800672c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fa f899 	bl	8000624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff3f 	bl	8006388 <LL_ADC_IsDeepPowerDownEnabled>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ff25 	bl	8006364 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ff5a 	bl	80063d8 <LL_ADC_IsInternalRegulatorEnabled>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d115      	bne.n	8006556 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff ff3e 	bl	80063b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006534:	4b7f      	ldr	r3, [pc, #508]	@ (8006734 <HAL_ADC_Init+0x270>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	099b      	lsrs	r3, r3, #6
 800653a:	4a7f      	ldr	r2, [pc, #508]	@ (8006738 <HAL_ADC_Init+0x274>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	099b      	lsrs	r3, r3, #6
 8006542:	3301      	adds	r3, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006548:	e002      	b.n	8006550 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3b01      	subs	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f9      	bne.n	800654a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff ff3c 	bl	80063d8 <LL_ADC_IsInternalRegulatorEnabled>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656a:	f043 0210 	orr.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	f043 0201 	orr.w	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff ff75 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 800658c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 80bf 	bne.w	800671a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 80bb 	bne.w	800671a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80065ac:	f043 0202 	orr.w	r2, r3, #2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff ff35 	bl	8006428 <LL_ADC_IsEnabled>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065c4:	485d      	ldr	r0, [pc, #372]	@ (800673c <HAL_ADC_Init+0x278>)
 80065c6:	f7ff ff2f 	bl	8006428 <LL_ADC_IsEnabled>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4619      	mov	r1, r3
 80065d6:	485a      	ldr	r0, [pc, #360]	@ (8006740 <HAL_ADC_Init+0x27c>)
 80065d8:	f7ff fd9a 	bl	8006110 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7e5b      	ldrb	r3, [r3, #25]
 80065e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80065ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80065f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d106      	bne.n	8006618 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	3b01      	subs	r3, #1
 8006610:	045b      	lsls	r3, r3, #17
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	4b42      	ldr	r3, [pc, #264]	@ (8006744 <HAL_ADC_Init+0x280>)
 800663c:	4013      	ands	r3, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	69b9      	ldr	r1, [r7, #24]
 8006644:	430b      	orrs	r3, r1
 8006646:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff ff25 	bl	800649c <LL_ADC_INJ_IsConversionOngoing>
 8006652:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d13d      	bne.n	80066d6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d13a      	bne.n	80066d6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006664:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800666c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800666e:	4313      	orrs	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800667c:	f023 0302 	bic.w	r3, r3, #2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	430b      	orrs	r3, r1
 8006688:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006690:	2b01      	cmp	r3, #1
 8006692:	d118      	bne.n	80066c6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800669e:	f023 0304 	bic.w	r3, r3, #4
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80066aa:	4311      	orrs	r1, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80066b0:	4311      	orrs	r1, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066b6:	430a      	orrs	r2, r1
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	611a      	str	r2, [r3, #16]
 80066c4:	e007      	b.n	80066d6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d10c      	bne.n	80066f8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	f023 010f 	bic.w	r1, r3, #15
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	1e5a      	subs	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80066f6:	e007      	b.n	8006708 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 020f 	bic.w	r2, r2, #15
 8006706:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670c:	f023 0303 	bic.w	r3, r3, #3
 8006710:	f043 0201 	orr.w	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	655a      	str	r2, [r3, #84]	@ 0x54
 8006718:	e007      	b.n	800672a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	f043 0210 	orr.w	r2, r3, #16
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800672a:	7ffb      	ldrb	r3, [r7, #31]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000048 	.word	0x20000048
 8006738:	053e2d63 	.word	0x053e2d63
 800673c:	50040000 	.word	0x50040000
 8006740:	50040300 	.word	0x50040300
 8006744:	fff0c007 	.word	0xfff0c007

08006748 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fe8e 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 80a0 	bne.w	80068a2 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_ADC_Start_IT+0x28>
 800676c:	2302      	movs	r3, #2
 800676e:	e09b      	b.n	80068a8 <HAL_ADC_Start_IT+0x160>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fe51 	bl	8007420 <ADC_Enable>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f040 8087 	bne.w	8006898 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d006      	beq.n	80067b8 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ae:	f023 0206 	bic.w	r2, r3, #6
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80067b6:	e002      	b.n	80067be <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	221c      	movs	r2, #28
 80067c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 021c 	bic.w	r2, r2, #28
 80067dc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d108      	bne.n	80067f8 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0208 	orr.w	r2, r2, #8
 80067f4:	605a      	str	r2, [r3, #4]
          break;
 80067f6:	e008      	b.n	800680a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0204 	orr.w	r2, r2, #4
 8006806:	605a      	str	r2, [r3, #4]
          break;
 8006808:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680e:	2b00      	cmp	r3, #0
 8006810:	d107      	bne.n	8006822 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0210 	orr.w	r2, r2, #16
 8006820:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d02d      	beq.n	800688c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006838:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d110      	bne.n	800686a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0220 	bic.w	r2, r2, #32
 8006856:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006866:	605a      	str	r2, [r3, #4]
            break;
 8006868:	e010      	b.n	800688c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006878:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0220 	orr.w	r2, r2, #32
 8006888:	605a      	str	r2, [r3, #4]
            break;
 800688a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fddc 	bl	800644e <LL_ADC_REG_StartConversion>
 8006896:	e006      	b.n	80068a6 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80068a0:	e001      	b.n	80068a6 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068a2:	2302      	movs	r3, #2
 80068a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b088      	sub	sp, #32
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <HAL_ADC_IRQHandler+0x56>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d012      	beq.n	8006920 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fe32 	bl	800757c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2202      	movs	r2, #2
 800691e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <HAL_ADC_IRQHandler+0x6a>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800693a:	2b00      	cmp	r3, #0
 800693c:	d05e      	beq.n	80069fc <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d059      	beq.n	80069fc <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006958:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fc5c 	bl	8006222 <LL_ADC_REG_IsTriggerSourceSWStart>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d03e      	beq.n	80069ee <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d135      	bne.n	80069ee <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b08      	cmp	r3, #8
 800698e:	d12e      	bne.n	80069ee <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fd6e 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11a      	bne.n	80069d6 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 020c 	bic.w	r2, r2, #12
 80069ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d112      	bne.n	80069ee <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80069d4:	e00b      	b.n	80069ee <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	f043 0210 	orr.w	r2, r3, #16
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	f043 0201 	orr.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fe fa04 	bl	8004dfc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	220c      	movs	r2, #12
 80069fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <HAL_ADC_IRQHandler+0x146>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d072      	beq.n	8006b00 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d06d      	beq.n	8006b00 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d105      	bne.n	8006a3c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fc2d 	bl	80062a0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006a46:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fbe8 	bl	8006222 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a52:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d047      	beq.n	8006af2 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <HAL_ADC_IRQHandler+0x1b2>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03f      	beq.n	8006af2 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13a      	bne.n	8006af2 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d133      	bne.n	8006af2 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d12e      	bne.n	8006af2 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fcff 	bl	800649c <LL_ADC_INJ_IsConversionOngoing>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d11a      	bne.n	8006ada <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ab2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d112      	bne.n	8006af2 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	655a      	str	r2, [r3, #84]	@ 0x54
 8006ad8:	e00b      	b.n	8006af2 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ade:	f043 0210 	orr.w	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	f043 0201 	orr.w	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fd1a 	bl	800752c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2260      	movs	r2, #96	@ 0x60
 8006afe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d011      	beq.n	8006b2e <HAL_ADC_IRQHandler+0x264>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00c      	beq.n	8006b2e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f886 	bl	8006c32 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2280      	movs	r2, #128	@ 0x80
 8006b2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d012      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x294>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fd00 	bl	8007554 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d012      	beq.n	8006b8e <HAL_ADC_IRQHandler+0x2c4>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fcf2 	bl	8007568 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d02a      	beq.n	8006bee <HAL_ADC_IRQHandler+0x324>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d025      	beq.n	8006bee <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006baa:	2301      	movs	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	e008      	b.n	8006bc2 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10e      	bne.n	8006be6 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bcc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd8:	f043 0202 	orr.w	r2, r3, #2
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f830 	bl	8006c46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2210      	movs	r2, #16
 8006bec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d018      	beq.n	8006c2a <HAL_ADC_IRQHandler+0x360>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d013      	beq.n	8006c2a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c12:	f043 0208 	orr.w	r2, r3, #8
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c22:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc8b 	bl	8007540 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006c2a:	bf00      	nop
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b0b6      	sub	sp, #216	@ 0xd8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_ADC_ConfigChannel+0x22>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e3bb      	b.n	80073f6 <HAL_ADC_ConfigChannel+0x79a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff fbf3 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 83a0 	bne.w	80073d8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d824      	bhi.n	8006cf2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	3b02      	subs	r3, #2
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d81b      	bhi.n	8006cea <HAL_ADC_ConfigChannel+0x8e>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <HAL_ADC_ConfigChannel+0x5c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006cd1 	.word	0x08006cd1
 8006cc0:	08006cd9 	.word	0x08006cd9
 8006cc4:	08006ce1 	.word	0x08006ce1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006cc8:	230c      	movs	r3, #12
 8006cca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006cce:	e010      	b.n	8006cf2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006cd0:	2312      	movs	r3, #18
 8006cd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006cd6:	e00c      	b.n	8006cf2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006cd8:	2318      	movs	r3, #24
 8006cda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006cde:	e008      	b.n	8006cf2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006ce8:	e003      	b.n	8006cf2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006cea:	2306      	movs	r3, #6
 8006cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006cf0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006d00:	f7ff faa2 	bl	8006248 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fbb4 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 8006d0e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fbc0 	bl	800649c <LL_ADC_INJ_IsConversionOngoing>
 8006d1c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 81a4 	bne.w	8007072 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f040 819f 	bne.w	8007072 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6819      	ldr	r1, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	461a      	mov	r2, r3
 8006d42:	f7ff fac0 	bl	80062c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d00a      	beq.n	8006d7e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	6919      	ldr	r1, [r3, #16]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d78:	f7ff f9fe 	bl	8006178 <LL_ADC_SetOffset>
 8006d7c:	e179      	b.n	8007072 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fa1b 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <HAL_ADC_ConfigChannel+0x14e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fa10 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006da0:	4603      	mov	r3, r0
 8006da2:	0e9b      	lsrs	r3, r3, #26
 8006da4:	f003 021f 	and.w	r2, r3, #31
 8006da8:	e01e      	b.n	8006de8 <HAL_ADC_ConfigChannel+0x18c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fa05 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dc0:	fa93 f3a3 	rbit	r3, r3
 8006dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006dd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006dd8:	2320      	movs	r3, #32
 8006dda:	e004      	b.n	8006de6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006de0:	fab3 f383 	clz	r3, r3
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d105      	bne.n	8006e00 <HAL_ADC_ConfigChannel+0x1a4>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	0e9b      	lsrs	r3, r3, #26
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	e018      	b.n	8006e32 <HAL_ADC_ConfigChannel+0x1d6>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e0c:	fa93 f3a3 	rbit	r3, r3
 8006e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006e24:	2320      	movs	r3, #32
 8006e26:	e004      	b.n	8006e32 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e2c:	fab3 f383 	clz	r3, r3
 8006e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d106      	bne.n	8006e44 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff f9d4 	bl	80061ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2101      	movs	r1, #1
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff f9b8 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <HAL_ADC_ConfigChannel+0x214>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff f9ad 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006e66:	4603      	mov	r3, r0
 8006e68:	0e9b      	lsrs	r3, r3, #26
 8006e6a:	f003 021f 	and.w	r2, r3, #31
 8006e6e:	e01e      	b.n	8006eae <HAL_ADC_ConfigChannel+0x252>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff f9a2 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e86:	fa93 f3a3 	rbit	r3, r3
 8006e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	e004      	b.n	8006eac <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ea6:	fab3 f383 	clz	r3, r3
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x26a>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	0e9b      	lsrs	r3, r3, #26
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	e018      	b.n	8006ef8 <HAL_ADC_ConfigChannel+0x29c>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ed2:	fa93 f3a3 	rbit	r3, r3
 8006ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ede:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8006eea:	2320      	movs	r3, #32
 8006eec:	e004      	b.n	8006ef8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8006eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ef2:	fab3 f383 	clz	r3, r3
 8006ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d106      	bne.n	8006f0a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	2101      	movs	r1, #1
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff f971 	bl	80061ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2102      	movs	r1, #2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f955 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x2da>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2102      	movs	r1, #2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff f94a 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	0e9b      	lsrs	r3, r3, #26
 8006f30:	f003 021f 	and.w	r2, r3, #31
 8006f34:	e01e      	b.n	8006f74 <HAL_ADC_ConfigChannel+0x318>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f93f 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f4c:	fa93 f3a3 	rbit	r3, r3
 8006f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006f64:	2320      	movs	r3, #32
 8006f66:	e004      	b.n	8006f72 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f6c:	fab3 f383 	clz	r3, r3
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x330>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	0e9b      	lsrs	r3, r3, #26
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	e014      	b.n	8006fb6 <HAL_ADC_ConfigChannel+0x35a>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f94:	fa93 f3a3 	rbit	r3, r3
 8006f98:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006fa8:	2320      	movs	r3, #32
 8006faa:	e004      	b.n	8006fb6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8006fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fb0:	fab3 f383 	clz	r3, r3
 8006fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d106      	bne.n	8006fc8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff f912 	bl	80061ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2103      	movs	r1, #3
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff f8f6 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x398>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff f8eb 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8006fea:	4603      	mov	r3, r0
 8006fec:	0e9b      	lsrs	r3, r3, #26
 8006fee:	f003 021f 	and.w	r2, r3, #31
 8006ff2:	e017      	b.n	8007024 <HAL_ADC_ConfigChannel+0x3c8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2103      	movs	r1, #3
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff f8e0 	bl	80061c0 <LL_ADC_GetOffsetChannel>
 8007000:	4603      	mov	r3, r0
 8007002:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007006:	fa93 f3a3 	rbit	r3, r3
 800700a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800700c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800700e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007010:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8007016:	2320      	movs	r3, #32
 8007018:	e003      	b.n	8007022 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800701a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800701c:	fab3 f383 	clz	r3, r3
 8007020:	b2db      	uxtb	r3, r3
 8007022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <HAL_ADC_ConfigChannel+0x3e0>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	0e9b      	lsrs	r3, r3, #26
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	e011      	b.n	8007060 <HAL_ADC_ConfigChannel+0x404>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007044:	fa93 f3a3 	rbit	r3, r3
 8007048:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800704a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800704c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800704e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8007054:	2320      	movs	r3, #32
 8007056:	e003      	b.n	8007060 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8007058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800705a:	fab3 f383 	clz	r3, r3
 800705e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007060:	429a      	cmp	r2, r3
 8007062:	d106      	bne.n	8007072 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2200      	movs	r2, #0
 800706a:	2103      	movs	r1, #3
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff f8bd 	bl	80061ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff f9d6 	bl	8006428 <LL_ADC_IsEnabled>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	f040 8140 	bne.w	8007304 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	6819      	ldr	r1, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	461a      	mov	r2, r3
 8007092:	f7ff f943 	bl	800631c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4a8f      	ldr	r2, [pc, #572]	@ (80072d8 <HAL_ADC_ConfigChannel+0x67c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	f040 8131 	bne.w	8007304 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <HAL_ADC_ConfigChannel+0x46e>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	0e9b      	lsrs	r3, r3, #26
 80070b8:	3301      	adds	r3, #1
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2b09      	cmp	r3, #9
 80070c0:	bf94      	ite	ls
 80070c2:	2301      	movls	r3, #1
 80070c4:	2300      	movhi	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	e019      	b.n	80070fe <HAL_ADC_ConfigChannel+0x4a2>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070d2:	fa93 f3a3 	rbit	r3, r3
 80070d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80070d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80070dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80070e2:	2320      	movs	r3, #32
 80070e4:	e003      	b.n	80070ee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80070e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e8:	fab3 f383 	clz	r3, r3
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	3301      	adds	r3, #1
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	bf94      	ite	ls
 80070f8:	2301      	movls	r3, #1
 80070fa:	2300      	movhi	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d079      	beq.n	80071f6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <HAL_ADC_ConfigChannel+0x4c2>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	0e9b      	lsrs	r3, r3, #26
 8007114:	3301      	adds	r3, #1
 8007116:	069b      	lsls	r3, r3, #26
 8007118:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800711c:	e015      	b.n	800714a <HAL_ADC_ConfigChannel+0x4ee>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007126:	fa93 f3a3 	rbit	r3, r3
 800712a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800712c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800712e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8007136:	2320      	movs	r3, #32
 8007138:	e003      	b.n	8007142 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800713a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800713c:	fab3 f383 	clz	r3, r3
 8007140:	b2db      	uxtb	r3, r3
 8007142:	3301      	adds	r3, #1
 8007144:	069b      	lsls	r3, r3, #26
 8007146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <HAL_ADC_ConfigChannel+0x50e>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	0e9b      	lsrs	r3, r3, #26
 800715c:	3301      	adds	r3, #1
 800715e:	f003 031f 	and.w	r3, r3, #31
 8007162:	2101      	movs	r1, #1
 8007164:	fa01 f303 	lsl.w	r3, r1, r3
 8007168:	e017      	b.n	800719a <HAL_ADC_ConfigChannel+0x53e>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007172:	fa93 f3a3 	rbit	r3, r3
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800717c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007182:	2320      	movs	r3, #32
 8007184:	e003      	b.n	800718e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007188:	fab3 f383 	clz	r3, r3
 800718c:	b2db      	uxtb	r3, r3
 800718e:	3301      	adds	r3, #1
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	2101      	movs	r1, #1
 8007196:	fa01 f303 	lsl.w	r3, r1, r3
 800719a:	ea42 0103 	orr.w	r1, r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <HAL_ADC_ConfigChannel+0x564>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	0e9b      	lsrs	r3, r3, #26
 80071b0:	3301      	adds	r3, #1
 80071b2:	f003 021f 	and.w	r2, r3, #31
 80071b6:	4613      	mov	r3, r2
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	4413      	add	r3, r2
 80071bc:	051b      	lsls	r3, r3, #20
 80071be:	e018      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x596>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	fa93 f3a3 	rbit	r3, r3
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80071d8:	2320      	movs	r3, #32
 80071da:	e003      	b.n	80071e4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	fab3 f383 	clz	r3, r3
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	3301      	adds	r3, #1
 80071e6:	f003 021f 	and.w	r2, r3, #31
 80071ea:	4613      	mov	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071f2:	430b      	orrs	r3, r1
 80071f4:	e081      	b.n	80072fa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d107      	bne.n	8007212 <HAL_ADC_ConfigChannel+0x5b6>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	0e9b      	lsrs	r3, r3, #26
 8007208:	3301      	adds	r3, #1
 800720a:	069b      	lsls	r3, r3, #26
 800720c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007210:	e015      	b.n	800723e <HAL_ADC_ConfigChannel+0x5e2>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	fa93 f3a3 	rbit	r3, r3
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800722a:	2320      	movs	r3, #32
 800722c:	e003      	b.n	8007236 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	fab3 f383 	clz	r3, r3
 8007234:	b2db      	uxtb	r3, r3
 8007236:	3301      	adds	r3, #1
 8007238:	069b      	lsls	r3, r3, #26
 800723a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <HAL_ADC_ConfigChannel+0x602>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	0e9b      	lsrs	r3, r3, #26
 8007250:	3301      	adds	r3, #1
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2101      	movs	r1, #1
 8007258:	fa01 f303 	lsl.w	r3, r1, r3
 800725c:	e017      	b.n	800728e <HAL_ADC_ConfigChannel+0x632>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	fa93 f3a3 	rbit	r3, r3
 800726a:	61bb      	str	r3, [r7, #24]
  return result;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8007276:	2320      	movs	r3, #32
 8007278:	e003      	b.n	8007282 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	fab3 f383 	clz	r3, r3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	3301      	adds	r3, #1
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	2101      	movs	r1, #1
 800728a:	fa01 f303 	lsl.w	r3, r1, r3
 800728e:	ea42 0103 	orr.w	r1, r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10d      	bne.n	80072ba <HAL_ADC_ConfigChannel+0x65e>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	0e9b      	lsrs	r3, r3, #26
 80072a4:	3301      	adds	r3, #1
 80072a6:	f003 021f 	and.w	r2, r3, #31
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	3b1e      	subs	r3, #30
 80072b2:	051b      	lsls	r3, r3, #20
 80072b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80072b8:	e01e      	b.n	80072f8 <HAL_ADC_ConfigChannel+0x69c>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	fa93 f3a3 	rbit	r3, r3
 80072c6:	60fb      	str	r3, [r7, #12]
  return result;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80072d2:	2320      	movs	r3, #32
 80072d4:	e006      	b.n	80072e4 <HAL_ADC_ConfigChannel+0x688>
 80072d6:	bf00      	nop
 80072d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	fab3 f383 	clz	r3, r3
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	3301      	adds	r3, #1
 80072e6:	f003 021f 	and.w	r2, r3, #31
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	3b1e      	subs	r3, #30
 80072f2:	051b      	lsls	r3, r3, #20
 80072f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072fe:	4619      	mov	r1, r3
 8007300:	f7fe ffe1 	bl	80062c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	4b3d      	ldr	r3, [pc, #244]	@ (8007400 <HAL_ADC_ConfigChannel+0x7a4>)
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d06c      	beq.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007310:	483c      	ldr	r0, [pc, #240]	@ (8007404 <HAL_ADC_ConfigChannel+0x7a8>)
 8007312:	f7fe ff23 	bl	800615c <LL_ADC_GetCommonPathInternalCh>
 8007316:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a3a      	ldr	r2, [pc, #232]	@ (8007408 <HAL_ADC_ConfigChannel+0x7ac>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d127      	bne.n	8007374 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d121      	bne.n	8007374 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a35      	ldr	r2, [pc, #212]	@ (800740c <HAL_ADC_ConfigChannel+0x7b0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d157      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800733a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800733e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007342:	4619      	mov	r1, r3
 8007344:	482f      	ldr	r0, [pc, #188]	@ (8007404 <HAL_ADC_ConfigChannel+0x7a8>)
 8007346:	f7fe fef6 	bl	8006136 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800734a:	4b31      	ldr	r3, [pc, #196]	@ (8007410 <HAL_ADC_ConfigChannel+0x7b4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	099b      	lsrs	r3, r3, #6
 8007350:	4a30      	ldr	r2, [pc, #192]	@ (8007414 <HAL_ADC_ConfigChannel+0x7b8>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007364:	e002      	b.n	800736c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	3b01      	subs	r3, #1
 800736a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f9      	bne.n	8007366 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007372:	e03a      	b.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a27      	ldr	r2, [pc, #156]	@ (8007418 <HAL_ADC_ConfigChannel+0x7bc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d113      	bne.n	80073a6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800737e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007382:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10d      	bne.n	80073a6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1f      	ldr	r2, [pc, #124]	@ (800740c <HAL_ADC_ConfigChannel+0x7b0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d12a      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007398:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800739c:	4619      	mov	r1, r3
 800739e:	4819      	ldr	r0, [pc, #100]	@ (8007404 <HAL_ADC_ConfigChannel+0x7a8>)
 80073a0:	f7fe fec9 	bl	8006136 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073a4:	e021      	b.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1c      	ldr	r2, [pc, #112]	@ (800741c <HAL_ADC_ConfigChannel+0x7c0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d11c      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d116      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a12      	ldr	r2, [pc, #72]	@ (800740c <HAL_ADC_ConfigChannel+0x7b0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d111      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073ce:	4619      	mov	r1, r3
 80073d0:	480c      	ldr	r0, [pc, #48]	@ (8007404 <HAL_ADC_ConfigChannel+0x7a8>)
 80073d2:	f7fe feb0 	bl	8006136 <LL_ADC_SetCommonPathInternalCh>
 80073d6:	e008      	b.n	80073ea <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073dc:	f043 0220 	orr.w	r2, r3, #32
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80073f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	37d8      	adds	r7, #216	@ 0xd8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	80080000 	.word	0x80080000
 8007404:	50040300 	.word	0x50040300
 8007408:	c7520000 	.word	0xc7520000
 800740c:	50040000 	.word	0x50040000
 8007410:	20000048 	.word	0x20000048
 8007414:	053e2d63 	.word	0x053e2d63
 8007418:	cb840000 	.word	0xcb840000
 800741c:	80000001 	.word	0x80000001

08007420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007428:	2300      	movs	r3, #0
 800742a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fff9 	bl	8006428 <LL_ADC_IsEnabled>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d169      	bne.n	8007510 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	4b36      	ldr	r3, [pc, #216]	@ (800751c <ADC_Enable+0xfc>)
 8007444:	4013      	ands	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744e:	f043 0210 	orr.w	r2, r3, #16
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745a:	f043 0201 	orr.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e055      	b.n	8007512 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe ffc8 	bl	8006400 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007470:	482b      	ldr	r0, [pc, #172]	@ (8007520 <ADC_Enable+0x100>)
 8007472:	f7fe fe73 	bl	800615c <LL_ADC_GetCommonPathInternalCh>
 8007476:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800747c:	2b00      	cmp	r3, #0
 800747e:	d013      	beq.n	80074a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007480:	4b28      	ldr	r3, [pc, #160]	@ (8007524 <ADC_Enable+0x104>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	099b      	lsrs	r3, r3, #6
 8007486:	4a28      	ldr	r2, [pc, #160]	@ (8007528 <ADC_Enable+0x108>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	099b      	lsrs	r3, r3, #6
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	4613      	mov	r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800749a:	e002      	b.n	80074a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3b01      	subs	r3, #1
 80074a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f9      	bne.n	800749c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80074a8:	f7fe fe26 	bl	80060f8 <HAL_GetTick>
 80074ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074ae:	e028      	b.n	8007502 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe ffb7 	bl	8006428 <LL_ADC_IsEnabled>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe ff9b 	bl	8006400 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074ca:	f7fe fe15 	bl	80060f8 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d914      	bls.n	8007502 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d00d      	beq.n	8007502 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ea:	f043 0210 	orr.w	r2, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f6:	f043 0201 	orr.w	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e007      	b.n	8007512 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d1cf      	bne.n	80074b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	8000003f 	.word	0x8000003f
 8007520:	50040300 	.word	0x50040300
 8007524:	20000048 	.word	0x20000048
 8007528:	053e2d63 	.word	0x053e2d63

0800752c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a0:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <__NVIC_SetPriorityGrouping+0x44>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80075ac:	4013      	ands	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075c2:	4a04      	ldr	r2, [pc, #16]	@ (80075d4 <__NVIC_SetPriorityGrouping+0x44>)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	60d3      	str	r3, [r2, #12]
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	e000ed00 	.word	0xe000ed00

080075d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075dc:	4b04      	ldr	r3, [pc, #16]	@ (80075f0 <__NVIC_GetPriorityGrouping+0x18>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	f003 0307 	and.w	r3, r3, #7
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	e000ed00 	.word	0xe000ed00

080075f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db0b      	blt.n	800761e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f003 021f 	and.w	r2, r3, #31
 800760c:	4907      	ldr	r1, [pc, #28]	@ (800762c <__NVIC_EnableIRQ+0x38>)
 800760e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	2001      	movs	r0, #1
 8007616:	fa00 f202 	lsl.w	r2, r0, r2
 800761a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	e000e100 	.word	0xe000e100

08007630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800763c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007640:	2b00      	cmp	r3, #0
 8007642:	db0a      	blt.n	800765a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	490c      	ldr	r1, [pc, #48]	@ (800767c <__NVIC_SetPriority+0x4c>)
 800764a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764e:	0112      	lsls	r2, r2, #4
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	440b      	add	r3, r1
 8007654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007658:	e00a      	b.n	8007670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	4908      	ldr	r1, [pc, #32]	@ (8007680 <__NVIC_SetPriority+0x50>)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	3b04      	subs	r3, #4
 8007668:	0112      	lsls	r2, r2, #4
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	440b      	add	r3, r1
 800766e:	761a      	strb	r2, [r3, #24]
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	e000e100 	.word	0xe000e100
 8007680:	e000ed00 	.word	0xe000ed00

08007684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007684:	b480      	push	{r7}
 8007686:	b089      	sub	sp, #36	@ 0x24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f1c3 0307 	rsb	r3, r3, #7
 800769e:	2b04      	cmp	r3, #4
 80076a0:	bf28      	it	cs
 80076a2:	2304      	movcs	r3, #4
 80076a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	3304      	adds	r3, #4
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d902      	bls.n	80076b4 <NVIC_EncodePriority+0x30>
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	3b03      	subs	r3, #3
 80076b2:	e000      	b.n	80076b6 <NVIC_EncodePriority+0x32>
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43da      	mvns	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	401a      	ands	r2, r3
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076cc:	f04f 31ff 	mov.w	r1, #4294967295
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	43d9      	mvns	r1, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076dc:	4313      	orrs	r3, r2
         );
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3724      	adds	r7, #36	@ 0x24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076fc:	d301      	bcc.n	8007702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076fe:	2301      	movs	r3, #1
 8007700:	e00f      	b.n	8007722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007702:	4a0a      	ldr	r2, [pc, #40]	@ (800772c <SysTick_Config+0x40>)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3b01      	subs	r3, #1
 8007708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800770a:	210f      	movs	r1, #15
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	f7ff ff8e 	bl	8007630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <SysTick_Config+0x40>)
 8007716:	2200      	movs	r2, #0
 8007718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800771a:	4b04      	ldr	r3, [pc, #16]	@ (800772c <SysTick_Config+0x40>)
 800771c:	2207      	movs	r2, #7
 800771e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	e000e010 	.word	0xe000e010

08007730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ff29 	bl	8007590 <__NVIC_SetPriorityGrouping>
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	4603      	mov	r3, r0
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007758:	f7ff ff3e 	bl	80075d8 <__NVIC_GetPriorityGrouping>
 800775c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	6978      	ldr	r0, [r7, #20]
 8007764:	f7ff ff8e 	bl	8007684 <NVIC_EncodePriority>
 8007768:	4602      	mov	r2, r0
 800776a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff ff5d 	bl	8007630 <__NVIC_SetPriority>
}
 8007776:	bf00      	nop
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	4603      	mov	r3, r0
 8007786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ff31 	bl	80075f4 <__NVIC_EnableIRQ>
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff ffa2 	bl	80076ec <SysTick_Config>
 80077a8:	4603      	mov	r3, r0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d008      	beq.n	80077dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2204      	movs	r2, #4
 80077ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e022      	b.n	8007822 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 020e 	bic.w	r2, r2, #14
 80077ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007800:	f003 021c 	and.w	r2, r3, #28
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f202 	lsl.w	r2, r1, r2
 800780e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d005      	beq.n	8007852 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2204      	movs	r2, #4
 800784a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	e029      	b.n	80078a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 020e 	bic.w	r2, r2, #14
 8007860:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	f003 021c 	and.w	r2, r3, #28
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787e:	2101      	movs	r1, #1
 8007880:	fa01 f202 	lsl.w	r2, r1, r2
 8007884:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
    }
  }
  return status;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078be:	e148      	b.n	8007b52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	2101      	movs	r1, #1
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	fa01 f303 	lsl.w	r3, r1, r3
 80078cc:	4013      	ands	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 813a 	beq.w	8007b4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d005      	beq.n	80078f0 <HAL_GPIO_Init+0x40>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d130      	bne.n	8007952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	2203      	movs	r2, #3
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4013      	ands	r3, r2
 8007906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007926:	2201      	movs	r2, #1
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4013      	ands	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	091b      	lsrs	r3, r3, #4
 800793c:	f003 0201 	and.w	r2, r3, #1
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d017      	beq.n	800798e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	2203      	movs	r2, #3
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	43db      	mvns	r3, r3
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4013      	ands	r3, r2
 8007974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d123      	bne.n	80079e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	08da      	lsrs	r2, r3, #3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3208      	adds	r2, #8
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	220f      	movs	r2, #15
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4013      	ands	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	08da      	lsrs	r2, r3, #3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3208      	adds	r2, #8
 80079dc:	6939      	ldr	r1, [r7, #16]
 80079de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	2203      	movs	r2, #3
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4013      	ands	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f003 0203 	and.w	r2, r3, #3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8094 	beq.w	8007b4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a24:	4b52      	ldr	r3, [pc, #328]	@ (8007b70 <HAL_GPIO_Init+0x2c0>)
 8007a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a28:	4a51      	ldr	r2, [pc, #324]	@ (8007b70 <HAL_GPIO_Init+0x2c0>)
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a30:	4b4f      	ldr	r3, [pc, #316]	@ (8007b70 <HAL_GPIO_Init+0x2c0>)
 8007a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8007b74 <HAL_GPIO_Init+0x2c4>)
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	089b      	lsrs	r3, r3, #2
 8007a42:	3302      	adds	r3, #2
 8007a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	220f      	movs	r2, #15
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007a66:	d00d      	beq.n	8007a84 <HAL_GPIO_Init+0x1d4>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a43      	ldr	r2, [pc, #268]	@ (8007b78 <HAL_GPIO_Init+0x2c8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <HAL_GPIO_Init+0x1d0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a42      	ldr	r2, [pc, #264]	@ (8007b7c <HAL_GPIO_Init+0x2cc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d101      	bne.n	8007a7c <HAL_GPIO_Init+0x1cc>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e004      	b.n	8007a86 <HAL_GPIO_Init+0x1d6>
 8007a7c:	2307      	movs	r3, #7
 8007a7e:	e002      	b.n	8007a86 <HAL_GPIO_Init+0x1d6>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <HAL_GPIO_Init+0x1d6>
 8007a84:	2300      	movs	r3, #0
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	f002 0203 	and.w	r2, r2, #3
 8007a8c:	0092      	lsls	r2, r2, #2
 8007a8e:	4093      	lsls	r3, r2
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007a96:	4937      	ldr	r1, [pc, #220]	@ (8007b74 <HAL_GPIO_Init+0x2c4>)
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	089b      	lsrs	r3, r3, #2
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007aa4:	4b36      	ldr	r3, [pc, #216]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	43db      	mvns	r3, r3
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ace:	4b2c      	ldr	r3, [pc, #176]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4013      	ands	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007af2:	4a23      	ldr	r2, [pc, #140]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007af8:	4b21      	ldr	r3, [pc, #132]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4013      	ands	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b1c:	4a18      	ldr	r2, [pc, #96]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007b22:	4b17      	ldr	r3, [pc, #92]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b46:	4a0e      	ldr	r2, [pc, #56]	@ (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f47f aeaf 	bne.w	80078c0 <HAL_GPIO_Init+0x10>
  }
}
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	40021000 	.word	0x40021000
 8007b74:	40010000 	.word	0x40010000
 8007b78:	48000400 	.word	0x48000400
 8007b7c:	48000800 	.word	0x48000800
 8007b80:	40010400 	.word	0x40010400

08007b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
 8007b90:	4613      	mov	r3, r2
 8007b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b94:	787b      	ldrb	r3, [r7, #1]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b9a:	887a      	ldrh	r2, [r7, #2]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ba0:	e002      	b.n	8007ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ba2:	887a      	ldrh	r2, [r7, #2]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007bbe:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bc0:	695a      	ldr	r2, [r3, #20]
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d006      	beq.n	8007bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007bca:	4a05      	ldr	r2, [pc, #20]	@ (8007be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7f9 fd0a 	bl	80015ec <HAL_GPIO_EXTI_Callback>
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40010400 	.word	0x40010400

08007be4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007be8:	4b04      	ldr	r3, [pc, #16]	@ (8007bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	40007000 	.word	0x40007000

08007c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0e:	d130      	bne.n	8007c72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c10:	4b23      	ldr	r3, [pc, #140]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c1c:	d038      	beq.n	8007c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c26:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2232      	movs	r2, #50	@ 0x32
 8007c34:	fb02 f303 	mul.w	r3, r2, r3
 8007c38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	0c9b      	lsrs	r3, r3, #18
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c44:	e002      	b.n	8007c4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c4c:	4b14      	ldr	r3, [pc, #80]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c58:	d102      	bne.n	8007c60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f2      	bne.n	8007c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c60:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c6c:	d110      	bne.n	8007c90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e00f      	b.n	8007c92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c7e:	d007      	beq.n	8007c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c80:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c88:	4a05      	ldr	r2, [pc, #20]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40007000 	.word	0x40007000
 8007ca4:	20000048 	.word	0x20000048
 8007ca8:	431bde83 	.word	0x431bde83

08007cac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f000 bc02 	b.w	80084c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cc0:	4b96      	ldr	r3, [pc, #600]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 030c 	and.w	r3, r3, #12
 8007cc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cca:	4b94      	ldr	r3, [pc, #592]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 80e4 	beq.w	8007eaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x4c>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b0c      	cmp	r3, #12
 8007cec:	f040 808b 	bne.w	8007e06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	f040 8087 	bne.w	8007e06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cf8:	4b88      	ldr	r3, [pc, #544]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_RCC_OscConfig+0x64>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e3d9      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	4b81      	ldr	r3, [pc, #516]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <HAL_RCC_OscConfig+0x7e>
 8007d20:	4b7e      	ldr	r3, [pc, #504]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d28:	e005      	b.n	8007d36 <HAL_RCC_OscConfig+0x8a>
 8007d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d223      	bcs.n	8007d82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fd8c 	bl	800885c <RCC_SetFlashLatencyFromMSIRange>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e3ba      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d4e:	4b73      	ldr	r3, [pc, #460]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a72      	ldr	r2, [pc, #456]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d54:	f043 0308 	orr.w	r3, r3, #8
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	4b70      	ldr	r3, [pc, #448]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	496d      	ldr	r1, [pc, #436]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	4968      	ldr	r1, [pc, #416]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	604b      	str	r3, [r1, #4]
 8007d80:	e025      	b.n	8007dce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d82:	4b66      	ldr	r3, [pc, #408]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a65      	ldr	r2, [pc, #404]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d88:	f043 0308 	orr.w	r3, r3, #8
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	4b63      	ldr	r3, [pc, #396]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	4960      	ldr	r1, [pc, #384]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007da0:	4b5e      	ldr	r3, [pc, #376]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	495b      	ldr	r1, [pc, #364]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd4c 	bl	800885c <RCC_SetFlashLatencyFromMSIRange>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e37a      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dce:	f000 fc81 	bl	80086d4 <HAL_RCC_GetSysClockFreq>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4b51      	ldr	r3, [pc, #324]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	4950      	ldr	r1, [pc, #320]	@ (8007f20 <HAL_RCC_OscConfig+0x274>)
 8007de0:	5ccb      	ldrb	r3, [r1, r3]
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	4a4e      	ldr	r2, [pc, #312]	@ (8007f24 <HAL_RCC_OscConfig+0x278>)
 8007dec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007dee:	4b4e      	ldr	r3, [pc, #312]	@ (8007f28 <HAL_RCC_OscConfig+0x27c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe f930 	bl	8006058 <HAL_InitTick>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d052      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	e35e      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d032      	beq.n	8007e74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e0e:	4b43      	ldr	r3, [pc, #268]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a42      	ldr	r2, [pc, #264]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e14:	f043 0301 	orr.w	r3, r3, #1
 8007e18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e1a:	f7fe f96d 	bl	80060f8 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e22:	f7fe f969 	bl	80060f8 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e347      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e34:	4b39      	ldr	r3, [pc, #228]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e40:	4b36      	ldr	r3, [pc, #216]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a35      	ldr	r2, [pc, #212]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e46:	f043 0308 	orr.w	r3, r3, #8
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	4b33      	ldr	r3, [pc, #204]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	4930      	ldr	r1, [pc, #192]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	492b      	ldr	r1, [pc, #172]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	604b      	str	r3, [r1, #4]
 8007e72:	e01a      	b.n	8007eaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007e74:	4b29      	ldr	r3, [pc, #164]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a28      	ldr	r2, [pc, #160]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e80:	f7fe f93a 	bl	80060f8 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e88:	f7fe f936 	bl	80060f8 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e314      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e9a:	4b20      	ldr	r3, [pc, #128]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <HAL_RCC_OscConfig+0x1dc>
 8007ea6:	e000      	b.n	8007eaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007ea8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d073      	beq.n	8007f9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d005      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x21c>
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	2b0c      	cmp	r3, #12
 8007ec0:	d10e      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d10b      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec8:	4b14      	ldr	r3, [pc, #80]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d063      	beq.n	8007f9c <HAL_RCC_OscConfig+0x2f0>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d15f      	bne.n	8007f9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e2f1      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ee8:	d106      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x24c>
 8007eea:	4b0c      	ldr	r3, [pc, #48]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a0b      	ldr	r2, [pc, #44]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	e025      	b.n	8007f44 <HAL_RCC_OscConfig+0x298>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f00:	d114      	bne.n	8007f2c <HAL_RCC_OscConfig+0x280>
 8007f02:	4b06      	ldr	r3, [pc, #24]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a05      	ldr	r2, [pc, #20]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	4b03      	ldr	r3, [pc, #12]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a02      	ldr	r2, [pc, #8]	@ (8007f1c <HAL_RCC_OscConfig+0x270>)
 8007f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	e013      	b.n	8007f44 <HAL_RCC_OscConfig+0x298>
 8007f1c:	40021000 	.word	0x40021000
 8007f20:	0800c534 	.word	0x0800c534
 8007f24:	20000048 	.word	0x20000048
 8007f28:	2000004c 	.word	0x2000004c
 8007f2c:	4ba0      	ldr	r3, [pc, #640]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a9f      	ldr	r2, [pc, #636]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	4b9d      	ldr	r3, [pc, #628]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a9c      	ldr	r2, [pc, #624]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d013      	beq.n	8007f74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4c:	f7fe f8d4 	bl	80060f8 <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f54:	f7fe f8d0 	bl	80060f8 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	@ 0x64
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e2ae      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f66:	4b92      	ldr	r3, [pc, #584]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f0      	beq.n	8007f54 <HAL_RCC_OscConfig+0x2a8>
 8007f72:	e014      	b.n	8007f9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f74:	f7fe f8c0 	bl	80060f8 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f7c:	f7fe f8bc 	bl	80060f8 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b64      	cmp	r3, #100	@ 0x64
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e29a      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f8e:	4b88      	ldr	r3, [pc, #544]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <HAL_RCC_OscConfig+0x2d0>
 8007f9a:	e000      	b.n	8007f9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d060      	beq.n	800806c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d005      	beq.n	8007fbc <HAL_RCC_OscConfig+0x310>
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b0c      	cmp	r3, #12
 8007fb4:	d119      	bne.n	8007fea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d116      	bne.n	8007fea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fbc:	4b7c      	ldr	r3, [pc, #496]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x328>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e277      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd4:	4b76      	ldr	r3, [pc, #472]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	061b      	lsls	r3, r3, #24
 8007fe2:	4973      	ldr	r1, [pc, #460]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fe8:	e040      	b.n	800806c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d023      	beq.n	800803a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffe:	f7fe f87b 	bl	80060f8 <HAL_GetTick>
 8008002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008004:	e008      	b.n	8008018 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008006:	f7fe f877 	bl	80060f8 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e255      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008018:	4b65      	ldr	r3, [pc, #404]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0f0      	beq.n	8008006 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008024:	4b62      	ldr	r3, [pc, #392]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	495f      	ldr	r1, [pc, #380]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008034:	4313      	orrs	r3, r2
 8008036:	604b      	str	r3, [r1, #4]
 8008038:	e018      	b.n	800806c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800803a:	4b5d      	ldr	r3, [pc, #372]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a5c      	ldr	r2, [pc, #368]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008046:	f7fe f857 	bl	80060f8 <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800804c:	e008      	b.n	8008060 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800804e:	f7fe f853 	bl	80060f8 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e231      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008060:	4b53      	ldr	r3, [pc, #332]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f0      	bne.n	800804e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d03c      	beq.n	80080f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d01c      	beq.n	80080ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008080:	4b4b      	ldr	r3, [pc, #300]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008086:	4a4a      	ldr	r2, [pc, #296]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008090:	f7fe f832 	bl	80060f8 <HAL_GetTick>
 8008094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008098:	f7fe f82e 	bl	80060f8 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e20c      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080aa:	4b41      	ldr	r3, [pc, #260]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 80080ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0ef      	beq.n	8008098 <HAL_RCC_OscConfig+0x3ec>
 80080b8:	e01b      	b.n	80080f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080ba:	4b3d      	ldr	r3, [pc, #244]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 80080bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080c0:	4a3b      	ldr	r2, [pc, #236]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ca:	f7fe f815 	bl	80060f8 <HAL_GetTick>
 80080ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d2:	f7fe f811 	bl	80060f8 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e1ef      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080e4:	4b32      	ldr	r3, [pc, #200]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 80080e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1ef      	bne.n	80080d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80a6 	beq.w	800824c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008100:	2300      	movs	r3, #0
 8008102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008104:	4b2a      	ldr	r3, [pc, #168]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10d      	bne.n	800812c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008110:	4b27      	ldr	r3, [pc, #156]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008114:	4a26      	ldr	r2, [pc, #152]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800811a:	6593      	str	r3, [r2, #88]	@ 0x58
 800811c:	4b24      	ldr	r3, [pc, #144]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 800811e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008124:	60bb      	str	r3, [r7, #8]
 8008126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008128:	2301      	movs	r3, #1
 800812a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800812c:	4b21      	ldr	r3, [pc, #132]	@ (80081b4 <HAL_RCC_OscConfig+0x508>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008134:	2b00      	cmp	r3, #0
 8008136:	d118      	bne.n	800816a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008138:	4b1e      	ldr	r3, [pc, #120]	@ (80081b4 <HAL_RCC_OscConfig+0x508>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1d      	ldr	r2, [pc, #116]	@ (80081b4 <HAL_RCC_OscConfig+0x508>)
 800813e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008144:	f7fd ffd8 	bl	80060f8 <HAL_GetTick>
 8008148:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800814c:	f7fd ffd4 	bl	80060f8 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e1b2      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800815e:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <HAL_RCC_OscConfig+0x508>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f0      	beq.n	800814c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d108      	bne.n	8008184 <HAL_RCC_OscConfig+0x4d8>
 8008172:	4b0f      	ldr	r3, [pc, #60]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	4a0d      	ldr	r2, [pc, #52]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 800817a:	f043 0301 	orr.w	r3, r3, #1
 800817e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008182:	e029      	b.n	80081d8 <HAL_RCC_OscConfig+0x52c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	2b05      	cmp	r3, #5
 800818a:	d115      	bne.n	80081b8 <HAL_RCC_OscConfig+0x50c>
 800818c:	4b08      	ldr	r3, [pc, #32]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008192:	4a07      	ldr	r2, [pc, #28]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 8008194:	f043 0304 	orr.w	r3, r3, #4
 8008198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a2:	4a03      	ldr	r2, [pc, #12]	@ (80081b0 <HAL_RCC_OscConfig+0x504>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081ac:	e014      	b.n	80081d8 <HAL_RCC_OscConfig+0x52c>
 80081ae:	bf00      	nop
 80081b0:	40021000 	.word	0x40021000
 80081b4:	40007000 	.word	0x40007000
 80081b8:	4b9a      	ldr	r3, [pc, #616]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081be:	4a99      	ldr	r2, [pc, #612]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081c8:	4b96      	ldr	r3, [pc, #600]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	4a95      	ldr	r2, [pc, #596]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80081d0:	f023 0304 	bic.w	r3, r3, #4
 80081d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d016      	beq.n	800820e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e0:	f7fd ff8a 	bl	80060f8 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081e6:	e00a      	b.n	80081fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081e8:	f7fd ff86 	bl	80060f8 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e162      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081fe:	4b89      	ldr	r3, [pc, #548]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0ed      	beq.n	80081e8 <HAL_RCC_OscConfig+0x53c>
 800820c:	e015      	b.n	800823a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800820e:	f7fd ff73 	bl	80060f8 <HAL_GetTick>
 8008212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008214:	e00a      	b.n	800822c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008216:	f7fd ff6f 	bl	80060f8 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e14b      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800822c:	4b7d      	ldr	r3, [pc, #500]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ed      	bne.n	8008216 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800823a:	7ffb      	ldrb	r3, [r7, #31]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d105      	bne.n	800824c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008240:	4b78      	ldr	r3, [pc, #480]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008244:	4a77      	ldr	r2, [pc, #476]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800824a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d03c      	beq.n	80082d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01c      	beq.n	800829a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008260:	4b70      	ldr	r3, [pc, #448]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008266:	4a6f      	ldr	r2, [pc, #444]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008270:	f7fd ff42 	bl	80060f8 <HAL_GetTick>
 8008274:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008276:	e008      	b.n	800828a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008278:	f7fd ff3e 	bl	80060f8 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d901      	bls.n	800828a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e11c      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800828a:	4b66      	ldr	r3, [pc, #408]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 800828c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0ef      	beq.n	8008278 <HAL_RCC_OscConfig+0x5cc>
 8008298:	e01b      	b.n	80082d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800829a:	4b62      	ldr	r3, [pc, #392]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 800829c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082a0:	4a60      	ldr	r2, [pc, #384]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082aa:	f7fd ff25 	bl	80060f8 <HAL_GetTick>
 80082ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082b0:	e008      	b.n	80082c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082b2:	f7fd ff21 	bl	80060f8 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e0ff      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082c4:	4b57      	ldr	r3, [pc, #348]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80082c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1ef      	bne.n	80082b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80f3 	beq.w	80084c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	f040 80c9 	bne.w	8008478 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80082e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f003 0203 	and.w	r2, r3, #3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d12c      	bne.n	8008354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008304:	3b01      	subs	r3, #1
 8008306:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008308:	429a      	cmp	r2, r3
 800830a:	d123      	bne.n	8008354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008316:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008318:	429a      	cmp	r2, r3
 800831a:	d11b      	bne.n	8008354 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008328:	429a      	cmp	r2, r3
 800832a:	d113      	bne.n	8008354 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008336:	085b      	lsrs	r3, r3, #1
 8008338:	3b01      	subs	r3, #1
 800833a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800833c:	429a      	cmp	r2, r3
 800833e:	d109      	bne.n	8008354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	3b01      	subs	r3, #1
 800834e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008350:	429a      	cmp	r2, r3
 8008352:	d06b      	beq.n	800842c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b0c      	cmp	r3, #12
 8008358:	d062      	beq.n	8008420 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800835a:	4b32      	ldr	r3, [pc, #200]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e0ac      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800836a:	4b2e      	ldr	r3, [pc, #184]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a2d      	ldr	r2, [pc, #180]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008374:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008376:	f7fd febf 	bl	80060f8 <HAL_GetTick>
 800837a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837e:	f7fd febb 	bl	80060f8 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e099      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008390:	4b24      	ldr	r3, [pc, #144]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f0      	bne.n	800837e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800839c:	4b21      	ldr	r3, [pc, #132]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	4b21      	ldr	r3, [pc, #132]	@ (8008428 <HAL_RCC_OscConfig+0x77c>)
 80083a2:	4013      	ands	r3, r2
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80083ac:	3a01      	subs	r2, #1
 80083ae:	0112      	lsls	r2, r2, #4
 80083b0:	4311      	orrs	r1, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80083b6:	0212      	lsls	r2, r2, #8
 80083b8:	4311      	orrs	r1, r2
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80083be:	0852      	lsrs	r2, r2, #1
 80083c0:	3a01      	subs	r2, #1
 80083c2:	0552      	lsls	r2, r2, #21
 80083c4:	4311      	orrs	r1, r2
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80083ca:	0852      	lsrs	r2, r2, #1
 80083cc:	3a01      	subs	r2, #1
 80083ce:	0652      	lsls	r2, r2, #25
 80083d0:	4311      	orrs	r1, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80083d6:	06d2      	lsls	r2, r2, #27
 80083d8:	430a      	orrs	r2, r1
 80083da:	4912      	ldr	r1, [pc, #72]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80083e0:	4b10      	ldr	r3, [pc, #64]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a0f      	ldr	r2, [pc, #60]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80083e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	4a0c      	ldr	r2, [pc, #48]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 80083f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083f8:	f7fd fe7e 	bl	80060f8 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083fe:	e008      	b.n	8008412 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008400:	f7fd fe7a 	bl	80060f8 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e058      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008412:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <HAL_RCC_OscConfig+0x778>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0f0      	beq.n	8008400 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800841e:	e050      	b.n	80084c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e04f      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
 8008424:	40021000 	.word	0x40021000
 8008428:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800842c:	4b27      	ldr	r3, [pc, #156]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d144      	bne.n	80084c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008438:	4b24      	ldr	r3, [pc, #144]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a23      	ldr	r2, [pc, #140]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 800843e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008444:	4b21      	ldr	r3, [pc, #132]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	4a20      	ldr	r2, [pc, #128]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 800844a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800844e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008450:	f7fd fe52 	bl	80060f8 <HAL_GetTick>
 8008454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008456:	e008      	b.n	800846a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008458:	f7fd fe4e 	bl	80060f8 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d901      	bls.n	800846a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e02c      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800846a:	4b18      	ldr	r3, [pc, #96]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0f0      	beq.n	8008458 <HAL_RCC_OscConfig+0x7ac>
 8008476:	e024      	b.n	80084c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	2b0c      	cmp	r3, #12
 800847c:	d01f      	beq.n	80084be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847e:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a12      	ldr	r2, [pc, #72]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 8008484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848a:	f7fd fe35 	bl	80060f8 <HAL_GetTick>
 800848e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008490:	e008      	b.n	80084a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008492:	f7fd fe31 	bl	80060f8 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e00f      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a4:	4b09      	ldr	r3, [pc, #36]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f0      	bne.n	8008492 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	4905      	ldr	r1, [pc, #20]	@ (80084cc <HAL_RCC_OscConfig+0x820>)
 80084b6:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <HAL_RCC_OscConfig+0x824>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	60cb      	str	r3, [r1, #12]
 80084bc:	e001      	b.n	80084c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40021000 	.word	0x40021000
 80084d0:	feeefffc 	.word	0xfeeefffc

080084d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0e7      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084e8:	4b75      	ldr	r3, [pc, #468]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0307 	and.w	r3, r3, #7
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d910      	bls.n	8008518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f6:	4b72      	ldr	r3, [pc, #456]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f023 0207 	bic.w	r2, r3, #7
 80084fe:	4970      	ldr	r1, [pc, #448]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	4313      	orrs	r3, r2
 8008504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008506:	4b6e      	ldr	r3, [pc, #440]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d001      	beq.n	8008518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e0cf      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	4b66      	ldr	r3, [pc, #408]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008530:	429a      	cmp	r2, r3
 8008532:	d908      	bls.n	8008546 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008534:	4b63      	ldr	r3, [pc, #396]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	4960      	ldr	r1, [pc, #384]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008542:	4313      	orrs	r3, r2
 8008544:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d04c      	beq.n	80085ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b03      	cmp	r3, #3
 8008558:	d107      	bne.n	800856a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800855a:	4b5a      	ldr	r3, [pc, #360]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d121      	bne.n	80085aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0a6      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d107      	bne.n	8008582 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008572:	4b54      	ldr	r3, [pc, #336]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d115      	bne.n	80085aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e09a      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d107      	bne.n	800859a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800858a:	4b4e      	ldr	r3, [pc, #312]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e08e      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800859a:	4b4a      	ldr	r3, [pc, #296]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e086      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085aa:	4b46      	ldr	r3, [pc, #280]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f023 0203 	bic.w	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	4943      	ldr	r1, [pc, #268]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085bc:	f7fd fd9c 	bl	80060f8 <HAL_GetTick>
 80085c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085c2:	e00a      	b.n	80085da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c4:	f7fd fd98 	bl	80060f8 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e06e      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085da:	4b3a      	ldr	r3, [pc, #232]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 020c 	and.w	r2, r3, #12
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d1eb      	bne.n	80085c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d010      	beq.n	800861a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	4b31      	ldr	r3, [pc, #196]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008604:	429a      	cmp	r2, r3
 8008606:	d208      	bcs.n	800861a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008608:	4b2e      	ldr	r3, [pc, #184]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	492b      	ldr	r1, [pc, #172]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008616:	4313      	orrs	r3, r2
 8008618:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800861a:	4b29      	ldr	r3, [pc, #164]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d210      	bcs.n	800864a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008628:	4b25      	ldr	r3, [pc, #148]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f023 0207 	bic.w	r2, r3, #7
 8008630:	4923      	ldr	r1, [pc, #140]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	4313      	orrs	r3, r2
 8008636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008638:	4b21      	ldr	r3, [pc, #132]	@ (80086c0 <HAL_RCC_ClockConfig+0x1ec>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d001      	beq.n	800864a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e036      	b.n	80086b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008656:	4b1b      	ldr	r3, [pc, #108]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	4918      	ldr	r1, [pc, #96]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008664:	4313      	orrs	r3, r2
 8008666:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008674:	4b13      	ldr	r3, [pc, #76]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	4910      	ldr	r1, [pc, #64]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008684:	4313      	orrs	r3, r2
 8008686:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008688:	f000 f824 	bl	80086d4 <HAL_RCC_GetSysClockFreq>
 800868c:	4602      	mov	r2, r0
 800868e:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	490b      	ldr	r1, [pc, #44]	@ (80086c8 <HAL_RCC_ClockConfig+0x1f4>)
 800869a:	5ccb      	ldrb	r3, [r1, r3]
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
 80086a4:	4a09      	ldr	r2, [pc, #36]	@ (80086cc <HAL_RCC_ClockConfig+0x1f8>)
 80086a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086a8:	4b09      	ldr	r3, [pc, #36]	@ (80086d0 <HAL_RCC_ClockConfig+0x1fc>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fd fcd3 	bl	8006058 <HAL_InitTick>
 80086b2:	4603      	mov	r3, r0
 80086b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80086b6:	7afb      	ldrb	r3, [r7, #11]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40022000 	.word	0x40022000
 80086c4:	40021000 	.word	0x40021000
 80086c8:	0800c534 	.word	0x0800c534
 80086cc:	20000048 	.word	0x20000048
 80086d0:	2000004c 	.word	0x2000004c

080086d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b089      	sub	sp, #36	@ 0x24
 80086d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	2300      	movs	r3, #0
 80086e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086e2:	4b3e      	ldr	r3, [pc, #248]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 030c 	and.w	r3, r3, #12
 80086ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086ec:	4b3b      	ldr	r3, [pc, #236]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_RCC_GetSysClockFreq+0x34>
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b0c      	cmp	r3, #12
 8008700:	d121      	bne.n	8008746 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d11e      	bne.n	8008746 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008708:	4b34      	ldr	r3, [pc, #208]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0308 	and.w	r3, r3, #8
 8008710:	2b00      	cmp	r3, #0
 8008712:	d107      	bne.n	8008724 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008714:	4b31      	ldr	r3, [pc, #196]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800871a:	0a1b      	lsrs	r3, r3, #8
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	e005      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008724:	4b2d      	ldr	r3, [pc, #180]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	091b      	lsrs	r3, r3, #4
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008730:	4a2b      	ldr	r2, [pc, #172]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008738:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10d      	bne.n	800875c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008744:	e00a      	b.n	800875c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d102      	bne.n	8008752 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800874c:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	e004      	b.n	800875c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b08      	cmp	r3, #8
 8008756:	d101      	bne.n	800875c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008758:	4b23      	ldr	r3, [pc, #140]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800875a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b0c      	cmp	r3, #12
 8008760:	d134      	bne.n	80087cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008762:	4b1e      	ldr	r3, [pc, #120]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d003      	beq.n	800877a <HAL_RCC_GetSysClockFreq+0xa6>
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d003      	beq.n	8008780 <HAL_RCC_GetSysClockFreq+0xac>
 8008778:	e005      	b.n	8008786 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800877a:	4b1a      	ldr	r3, [pc, #104]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800877c:	617b      	str	r3, [r7, #20]
      break;
 800877e:	e005      	b.n	800878c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008780:	4b19      	ldr	r3, [pc, #100]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008782:	617b      	str	r3, [r7, #20]
      break;
 8008784:	e002      	b.n	800878c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	617b      	str	r3, [r7, #20]
      break;
 800878a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	091b      	lsrs	r3, r3, #4
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	3301      	adds	r3, #1
 8008798:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800879a:	4b10      	ldr	r3, [pc, #64]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	fb03 f202 	mul.w	r2, r3, r2
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087b2:	4b0a      	ldr	r3, [pc, #40]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x108>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	0e5b      	lsrs	r3, r3, #25
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	3301      	adds	r3, #1
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80087cc:	69bb      	ldr	r3, [r7, #24]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3724      	adds	r7, #36	@ 0x24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	40021000 	.word	0x40021000
 80087e0:	0800c54c 	.word	0x0800c54c
 80087e4:	00f42400 	.word	0x00f42400
 80087e8:	007a1200 	.word	0x007a1200

080087ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f0:	4b03      	ldr	r3, [pc, #12]	@ (8008800 <HAL_RCC_GetHCLKFreq+0x14>)
 80087f2:	681b      	ldr	r3, [r3, #0]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20000048 	.word	0x20000048

08008804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008808:	f7ff fff0 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 800880c:	4602      	mov	r2, r0
 800880e:	4b06      	ldr	r3, [pc, #24]	@ (8008828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	0a1b      	lsrs	r3, r3, #8
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	4904      	ldr	r1, [pc, #16]	@ (800882c <HAL_RCC_GetPCLK1Freq+0x28>)
 800881a:	5ccb      	ldrb	r3, [r1, r3]
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40021000 	.word	0x40021000
 800882c:	0800c544 	.word	0x0800c544

08008830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008834:	f7ff ffda 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 8008838:	4602      	mov	r2, r0
 800883a:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0adb      	lsrs	r3, r3, #11
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	4904      	ldr	r1, [pc, #16]	@ (8008858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008846:	5ccb      	ldrb	r3, [r1, r3]
 8008848:	f003 031f 	and.w	r3, r3, #31
 800884c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008850:	4618      	mov	r0, r3
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40021000 	.word	0x40021000
 8008858:	0800c544 	.word	0x0800c544

0800885c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008868:	4b2a      	ldr	r3, [pc, #168]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800886a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008874:	f7ff f9b6 	bl	8007be4 <HAL_PWREx_GetVoltageRange>
 8008878:	6178      	str	r0, [r7, #20]
 800887a:	e014      	b.n	80088a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800887c:	4b25      	ldr	r3, [pc, #148]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800887e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008880:	4a24      	ldr	r2, [pc, #144]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008886:	6593      	str	r3, [r2, #88]	@ 0x58
 8008888:	4b22      	ldr	r3, [pc, #136]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800888a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008894:	f7ff f9a6 	bl	8007be4 <HAL_PWREx_GetVoltageRange>
 8008898:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800889a:	4b1e      	ldr	r3, [pc, #120]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889e:	4a1d      	ldr	r2, [pc, #116]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ac:	d10b      	bne.n	80088c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b80      	cmp	r3, #128	@ 0x80
 80088b2:	d919      	bls.n	80088e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80088b8:	d902      	bls.n	80088c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088ba:	2302      	movs	r3, #2
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	e013      	b.n	80088e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088c0:	2301      	movs	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	e010      	b.n	80088e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b80      	cmp	r3, #128	@ 0x80
 80088ca:	d902      	bls.n	80088d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80088cc:	2303      	movs	r3, #3
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e00a      	b.n	80088e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b80      	cmp	r3, #128	@ 0x80
 80088d6:	d102      	bne.n	80088de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088d8:	2302      	movs	r3, #2
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	e004      	b.n	80088e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b70      	cmp	r3, #112	@ 0x70
 80088e2:	d101      	bne.n	80088e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088e4:	2301      	movs	r3, #1
 80088e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f023 0207 	bic.w	r2, r3, #7
 80088f0:	4909      	ldr	r1, [pc, #36]	@ (8008918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	429a      	cmp	r2, r3
 8008904:	d001      	beq.n	800890a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	40021000 	.word	0x40021000
 8008918:	40022000 	.word	0x40022000

0800891c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008924:	2300      	movs	r3, #0
 8008926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008928:	2300      	movs	r3, #0
 800892a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008934:	2b00      	cmp	r3, #0
 8008936:	d031      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008940:	d01a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008942:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008946:	d814      	bhi.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800894c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008950:	d10f      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008952:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	4a5c      	ldr	r2, [pc, #368]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800895c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800895e:	e00c      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f9ce 	bl	8008d08 <RCCEx_PLLSAI1_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008970:	e003      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	74fb      	strb	r3, [r7, #19]
      break;
 8008976:	e000      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897a:	7cfb      	ldrb	r3, [r7, #19]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008980:	4b51      	ldr	r3, [pc, #324]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898e:	494e      	ldr	r1, [pc, #312]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008996:	e001      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008998:	7cfb      	ldrb	r3, [r7, #19]
 800899a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 809e 	beq.w	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089aa:	2300      	movs	r3, #0
 80089ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80089ae:	4b46      	ldr	r3, [pc, #280]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80089be:	2300      	movs	r3, #0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00d      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c4:	4b40      	ldr	r3, [pc, #256]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c8:	4a3f      	ldr	r2, [pc, #252]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80089d0:	4b3d      	ldr	r3, [pc, #244]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089dc:	2301      	movs	r3, #1
 80089de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089e0:	4b3a      	ldr	r3, [pc, #232]	@ (8008acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a39      	ldr	r2, [pc, #228]	@ (8008acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089ec:	f7fd fb84 	bl	80060f8 <HAL_GetTick>
 80089f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089f2:	e009      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089f4:	f7fd fb80 	bl	80060f8 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d902      	bls.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	74fb      	strb	r3, [r7, #19]
        break;
 8008a06:	e005      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008a08:	4b30      	ldr	r3, [pc, #192]	@ (8008acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0ef      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008a14:	7cfb      	ldrb	r3, [r7, #19]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d15a      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d019      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a36:	4b24      	ldr	r3, [pc, #144]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a42:	4b21      	ldr	r3, [pc, #132]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a48:	4a1f      	ldr	r2, [pc, #124]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a52:	4b1d      	ldr	r3, [pc, #116]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a58:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a62:	4a19      	ldr	r2, [pc, #100]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d016      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a74:	f7fd fb40 	bl	80060f8 <HAL_GetTick>
 8008a78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a7a:	e00b      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fd fb3c 	bl	80060f8 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d902      	bls.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	74fb      	strb	r3, [r7, #19]
            break;
 8008a92:	e006      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a94:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0ec      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008aa2:	7cfb      	ldrb	r3, [r7, #19]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10b      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008aa8:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab6:	4904      	ldr	r1, [pc, #16]	@ (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008abe:	e009      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ac0:	7cfb      	ldrb	r3, [r7, #19]
 8008ac2:	74bb      	strb	r3, [r7, #18]
 8008ac4:	e006      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008ac6:	bf00      	nop
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad0:	7cfb      	ldrb	r3, [r7, #19]
 8008ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ad4:	7c7b      	ldrb	r3, [r7, #17]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d105      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ada:	4b8a      	ldr	r3, [pc, #552]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ade:	4a89      	ldr	r2, [pc, #548]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008af2:	4b84      	ldr	r3, [pc, #528]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af8:	f023 0203 	bic.w	r2, r3, #3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	4980      	ldr	r1, [pc, #512]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b14:	4b7b      	ldr	r3, [pc, #492]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1a:	f023 020c 	bic.w	r2, r3, #12
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b22:	4978      	ldr	r1, [pc, #480]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b36:	4b73      	ldr	r3, [pc, #460]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	496f      	ldr	r1, [pc, #444]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b58:	4b6a      	ldr	r3, [pc, #424]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b5e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b66:	4967      	ldr	r1, [pc, #412]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b7a:	4b62      	ldr	r3, [pc, #392]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	495e      	ldr	r1, [pc, #376]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b9c:	4b59      	ldr	r3, [pc, #356]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008baa:	4956      	ldr	r1, [pc, #344]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bbe:	4b51      	ldr	r3, [pc, #324]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bcc:	494d      	ldr	r1, [pc, #308]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d028      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008be0:	4b48      	ldr	r3, [pc, #288]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bee:	4945      	ldr	r1, [pc, #276]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bfe:	d106      	bne.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c00:	4b40      	ldr	r3, [pc, #256]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4a3f      	ldr	r2, [pc, #252]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c0a:	60d3      	str	r3, [r2, #12]
 8008c0c:	e011      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c16:	d10c      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f872 	bl	8008d08 <RCCEx_PLLSAI1_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008c28:	7cfb      	ldrb	r3, [r7, #19]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008c2e:	7cfb      	ldrb	r3, [r7, #19]
 8008c30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d028      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c3e:	4b31      	ldr	r3, [pc, #196]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4c:	492d      	ldr	r1, [pc, #180]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c5c:	d106      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c5e:	4b29      	ldr	r3, [pc, #164]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	4a28      	ldr	r2, [pc, #160]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c68:	60d3      	str	r3, [r2, #12]
 8008c6a:	e011      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c74:	d10c      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 f843 	bl	8008d08 <RCCEx_PLLSAI1_Config>
 8008c82:	4603      	mov	r3, r0
 8008c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c86:	7cfb      	ldrb	r3, [r7, #19]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008c8c:	7cfb      	ldrb	r3, [r7, #19]
 8008c8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d01c      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c9c:	4b19      	ldr	r3, [pc, #100]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008caa:	4916      	ldr	r1, [pc, #88]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cba:	d10c      	bne.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	2102      	movs	r1, #2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f820 	bl	8008d08 <RCCEx_PLLSAI1_Config>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ccc:	7cfb      	ldrb	r3, [r7, #19]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008cd2:	7cfb      	ldrb	r3, [r7, #19]
 8008cd4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ce2:	4b08      	ldr	r3, [pc, #32]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf0:	4904      	ldr	r1, [pc, #16]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008cf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40021000 	.word	0x40021000

08008d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d16:	4b74      	ldr	r3, [pc, #464]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d018      	beq.n	8008d54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008d22:	4b71      	ldr	r3, [pc, #452]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f003 0203 	and.w	r2, r3, #3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d10d      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
       ||
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	091b      	lsrs	r3, r3, #4
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
       ||
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d047      	beq.n	8008dde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
 8008d52:	e044      	b.n	8008dde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d018      	beq.n	8008d8e <RCCEx_PLLSAI1_Config+0x86>
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d825      	bhi.n	8008dac <RCCEx_PLLSAI1_Config+0xa4>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d002      	beq.n	8008d6a <RCCEx_PLLSAI1_Config+0x62>
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d009      	beq.n	8008d7c <RCCEx_PLLSAI1_Config+0x74>
 8008d68:	e020      	b.n	8008dac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d11d      	bne.n	8008db2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d7a:	e01a      	b.n	8008db2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d116      	bne.n	8008db6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d8c:	e013      	b.n	8008db6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008d8e:	4b56      	ldr	r3, [pc, #344]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10f      	bne.n	8008dba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008d9a:	4b53      	ldr	r3, [pc, #332]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008daa:	e006      	b.n	8008dba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
      break;
 8008db0:	e004      	b.n	8008dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008db2:	bf00      	nop
 8008db4:	e002      	b.n	8008dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008db6:	bf00      	nop
 8008db8:	e000      	b.n	8008dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10d      	bne.n	8008dde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008dc2:	4b49      	ldr	r3, [pc, #292]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6819      	ldr	r1, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	4943      	ldr	r1, [pc, #268]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d17c      	bne.n	8008ede <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008de4:	4b40      	ldr	r3, [pc, #256]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a3f      	ldr	r2, [pc, #252]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df0:	f7fd f982 	bl	80060f8 <HAL_GetTick>
 8008df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008df6:	e009      	b.n	8008e0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008df8:	f7fd f97e 	bl	80060f8 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d902      	bls.n	8008e0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	73fb      	strb	r3, [r7, #15]
        break;
 8008e0a:	e005      	b.n	8008e18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e0c:	4b36      	ldr	r3, [pc, #216]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ef      	bne.n	8008df8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d15f      	bne.n	8008ede <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d110      	bne.n	8008e46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e24:	4b30      	ldr	r3, [pc, #192]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008e2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6892      	ldr	r2, [r2, #8]
 8008e34:	0211      	lsls	r1, r2, #8
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	68d2      	ldr	r2, [r2, #12]
 8008e3a:	06d2      	lsls	r2, r2, #27
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	492a      	ldr	r1, [pc, #168]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	610b      	str	r3, [r1, #16]
 8008e44:	e027      	b.n	8008e96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d112      	bne.n	8008e72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e4c:	4b26      	ldr	r3, [pc, #152]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008e54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6892      	ldr	r2, [r2, #8]
 8008e5c:	0211      	lsls	r1, r2, #8
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6912      	ldr	r2, [r2, #16]
 8008e62:	0852      	lsrs	r2, r2, #1
 8008e64:	3a01      	subs	r2, #1
 8008e66:	0552      	lsls	r2, r2, #21
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	491f      	ldr	r1, [pc, #124]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	610b      	str	r3, [r1, #16]
 8008e70:	e011      	b.n	8008e96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008e7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6892      	ldr	r2, [r2, #8]
 8008e82:	0211      	lsls	r1, r2, #8
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6952      	ldr	r2, [r2, #20]
 8008e88:	0852      	lsrs	r2, r2, #1
 8008e8a:	3a01      	subs	r2, #1
 8008e8c:	0652      	lsls	r2, r2, #25
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	4915      	ldr	r1, [pc, #84]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008e96:	4b14      	ldr	r3, [pc, #80]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008ea0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea2:	f7fd f929 	bl	80060f8 <HAL_GetTick>
 8008ea6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008ea8:	e009      	b.n	8008ebe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008eaa:	f7fd f925 	bl	80060f8 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d902      	bls.n	8008ebe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
          break;
 8008ebc:	e005      	b.n	8008eca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0ef      	beq.n	8008eaa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008ed0:	4b05      	ldr	r3, [pc, #20]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	4903      	ldr	r1, [pc, #12]	@ (8008ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	40021000 	.word	0x40021000

08008eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e095      	b.n	800902a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d108      	bne.n	8008f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f0e:	d009      	beq.n	8008f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	61da      	str	r2, [r3, #28]
 8008f16:	e005      	b.n	8008f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7fc fe18 	bl	8005b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f64:	d902      	bls.n	8008f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e002      	b.n	8008f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008f7a:	d007      	beq.n	8008f8c <HAL_SPI_Init+0xa0>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f84:	d002      	beq.n	8008f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fce:	ea42 0103 	orr.w	r1, r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	f003 0204 	and.w	r2, r3, #4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	f003 0310 	and.w	r3, r3, #16
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009008:	ea42 0103 	orr.w	r1, r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b08a      	sub	sp, #40	@ 0x28
 8009036:	af00      	add	r7, sp, #0
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009040:	2301      	movs	r3, #1
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009044:	f7fd f858 	bl	80060f8 <HAL_GetTick>
 8009048:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009050:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009058:	887b      	ldrh	r3, [r7, #2]
 800905a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800905c:	887b      	ldrh	r3, [r7, #2]
 800905e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009060:	7ffb      	ldrb	r3, [r7, #31]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d00c      	beq.n	8009080 <HAL_SPI_TransmitReceive+0x4e>
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800906c:	d106      	bne.n	800907c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <HAL_SPI_TransmitReceive+0x4a>
 8009076:	7ffb      	ldrb	r3, [r7, #31]
 8009078:	2b04      	cmp	r3, #4
 800907a:	d001      	beq.n	8009080 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800907c:	2302      	movs	r3, #2
 800907e:	e1f3      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <HAL_SPI_TransmitReceive+0x60>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <HAL_SPI_TransmitReceive+0x60>
 800908c:	887b      	ldrh	r3, [r7, #2]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e1e8      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <HAL_SPI_TransmitReceive+0x72>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e1e1      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d003      	beq.n	80090c0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2205      	movs	r2, #5
 80090bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	887a      	ldrh	r2, [r7, #2]
 80090d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	887a      	ldrh	r2, [r7, #2]
 80090d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	887a      	ldrh	r2, [r7, #2]
 80090e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	887a      	ldrh	r2, [r7, #2]
 80090ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009102:	d802      	bhi.n	800910a <HAL_SPI_TransmitReceive+0xd8>
 8009104:	8abb      	ldrh	r3, [r7, #20]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d908      	bls.n	800911c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	e007      	b.n	800912c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800912a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d007      	beq.n	800914a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009152:	f240 8083 	bls.w	800925c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <HAL_SPI_TransmitReceive+0x132>
 800915e:	8afb      	ldrh	r3, [r7, #22]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d16f      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009168:	881a      	ldrh	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009174:	1c9a      	adds	r2, r3, #2
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800917e:	b29b      	uxth	r3, r3
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009188:	e05c      	b.n	8009244 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b02      	cmp	r3, #2
 8009196:	d11b      	bne.n	80091d0 <HAL_SPI_TransmitReceive+0x19e>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d016      	beq.n	80091d0 <HAL_SPI_TransmitReceive+0x19e>
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d113      	bne.n	80091d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d11c      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x1e6>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d016      	beq.n	8009218 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f4:	b292      	uxth	r2, r2
 80091f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fc:	1c9a      	adds	r2, r3, #2
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009214:	2301      	movs	r3, #1
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009218:	f7fc ff6e 	bl	80060f8 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009224:	429a      	cmp	r2, r3
 8009226:	d80d      	bhi.n	8009244 <HAL_SPI_TransmitReceive+0x212>
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922e:	d009      	beq.n	8009244 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e111      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009248:	b29b      	uxth	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d19d      	bne.n	800918a <HAL_SPI_TransmitReceive+0x158>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d197      	bne.n	800918a <HAL_SPI_TransmitReceive+0x158>
 800925a:	e0e5      	b.n	8009428 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_SPI_TransmitReceive+0x23a>
 8009264:	8afb      	ldrh	r3, [r7, #22]
 8009266:	2b01      	cmp	r3, #1
 8009268:	f040 80d1 	bne.w	800940e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d912      	bls.n	800929c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927a:	881a      	ldrh	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009286:	1c9a      	adds	r2, r3, #2
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b02      	subs	r3, #2
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800929a:	e0b8      	b.n	800940e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092c2:	e0a4      	b.n	800940e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d134      	bne.n	800933c <HAL_SPI_TransmitReceive+0x30a>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d02f      	beq.n	800933c <HAL_SPI_TransmitReceive+0x30a>
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d12c      	bne.n	800933c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d912      	bls.n	8009312 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b02      	subs	r3, #2
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009310:	e012      	b.n	8009338 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b01      	cmp	r3, #1
 8009348:	d148      	bne.n	80093dc <HAL_SPI_TransmitReceive+0x3aa>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d042      	beq.n	80093dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	d923      	bls.n	80093aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	b292      	uxth	r2, r2
 800936e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009374:	1c9a      	adds	r2, r3, #2
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b02      	subs	r3, #2
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b01      	cmp	r3, #1
 8009396:	d81f      	bhi.n	80093d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80093a6:	605a      	str	r2, [r3, #4]
 80093a8:	e016      	b.n	80093d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f103 020c 	add.w	r2, r3, #12
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b6:	7812      	ldrb	r2, [r2, #0]
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093d8:	2301      	movs	r3, #1
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093dc:	f7fc fe8c 	bl	80060f8 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d803      	bhi.n	80093f4 <HAL_SPI_TransmitReceive+0x3c2>
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d102      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x3c8>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d109      	bne.n	800940e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e02c      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009412:	b29b      	uxth	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	f47f af55 	bne.w	80092c4 <HAL_SPI_TransmitReceive+0x292>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f af4e 	bne.w	80092c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009428:	6a3a      	ldr	r2, [r7, #32]
 800942a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fa51 	bl	80098d4 <SPI_EndRxTxTransaction>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d008      	beq.n	800944a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2220      	movs	r2, #32
 800943c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e00e      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009466:	2300      	movs	r3, #0
  }
}
 8009468:	4618      	mov	r0, r3
 800946a:	3728      	adds	r7, #40	@ 0x28
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10e      	bne.n	80094b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009498:	2b00      	cmp	r3, #0
 800949a:	d009      	beq.n	80094b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
    return;
 80094ae:	e0ce      	b.n	800964e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <HAL_SPI_IRQHandler+0x5e>
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
    return;
 80094cc:	e0bf      	b.n	800964e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <HAL_SPI_IRQHandler+0x7e>
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 80b0 	beq.w	800964e <HAL_SPI_IRQHandler+0x1de>
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80aa 	beq.w	800964e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009500:	2b00      	cmp	r3, #0
 8009502:	d023      	beq.n	800954c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b03      	cmp	r3, #3
 800950e:	d011      	beq.n	8009534 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009514:	f043 0204 	orr.w	r2, r3, #4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	e00b      	b.n	800954c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009534:	2300      	movs	r3, #0
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	693b      	ldr	r3, [r7, #16]
        return;
 800954a:	e080      	b.n	800964e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	d014      	beq.n	8009580 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800955a:	f043 0201 	orr.w	r2, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800958e:	f043 0208 	orr.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009596:	2300      	movs	r3, #0
 8009598:	60bb      	str	r3, [r7, #8]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	60bb      	str	r3, [r7, #8]
 80095a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d04f      	beq.n	800964c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <HAL_SPI_IRQHandler+0x168>
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d034      	beq.n	8009642 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0203 	bic.w	r2, r2, #3
 80095e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d011      	beq.n	8009614 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f4:	4a17      	ldr	r2, [pc, #92]	@ (8009654 <HAL_SPI_IRQHandler+0x1e4>)
 80095f6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe f916 	bl	800782e <HAL_DMA_Abort_IT>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800960c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009618:	2b00      	cmp	r3, #0
 800961a:	d016      	beq.n	800964a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009620:	4a0c      	ldr	r2, [pc, #48]	@ (8009654 <HAL_SPI_IRQHandler+0x1e4>)
 8009622:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe f900 	bl	800782e <HAL_DMA_Abort_IT>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009638:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009640:	e003      	b.n	800964a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f808 	bl	8009658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009648:	e000      	b.n	800964c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800964a:	bf00      	nop
    return;
 800964c:	bf00      	nop
  }
}
 800964e:	3720      	adds	r7, #32
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	0800966d 	.word	0x0800966d

08009658 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff ffe5 	bl	8009658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	4613      	mov	r3, r2
 80096a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096a8:	f7fc fd26 	bl	80060f8 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096b8:	f7fc fd1e 	bl	80060f8 <HAL_GetTick>
 80096bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096be:	4b39      	ldr	r3, [pc, #228]	@ (80097a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	015b      	lsls	r3, r3, #5
 80096c4:	0d1b      	lsrs	r3, r3, #20
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	fb02 f303 	mul.w	r3, r2, r3
 80096cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096ce:	e054      	b.n	800977a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	d050      	beq.n	800977a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096d8:	f7fc fd0e 	bl	80060f8 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d902      	bls.n	80096ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d13d      	bne.n	800976a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009706:	d111      	bne.n	800972c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009710:	d004      	beq.n	800971c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800971a:	d107      	bne.n	800972c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800972a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009734:	d10f      	bne.n	8009756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e017      	b.n	800979a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	3b01      	subs	r3, #1
 8009778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4013      	ands	r3, r2
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	429a      	cmp	r2, r3
 8009788:	bf0c      	ite	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	2300      	movne	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	429a      	cmp	r2, r3
 8009796:	d19b      	bne.n	80096d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3720      	adds	r7, #32
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000048 	.word	0x20000048

080097a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	@ 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80097ba:	f7fc fc9d 	bl	80060f8 <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	1a9b      	subs	r3, r3, r2
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	4413      	add	r3, r2
 80097c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80097ca:	f7fc fc95 	bl	80060f8 <HAL_GetTick>
 80097ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80097d8:	4b3d      	ldr	r3, [pc, #244]	@ (80098d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	00da      	lsls	r2, r3, #3
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	0d1b      	lsrs	r3, r3, #20
 80097e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
 80097ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80097f0:	e060      	b.n	80098b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80097f8:	d107      	bne.n	800980a <SPI_WaitFifoStateUntilTimeout+0x62>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009810:	d050      	beq.n	80098b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009812:	f7fc fc71 	bl	80060f8 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800981e:	429a      	cmp	r2, r3
 8009820:	d902      	bls.n	8009828 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009824:	2b00      	cmp	r3, #0
 8009826:	d13d      	bne.n	80098a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009840:	d111      	bne.n	8009866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800984a:	d004      	beq.n	8009856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009854:	d107      	bne.n	8009866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800986e:	d10f      	bne.n	8009890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800988e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e010      	b.n	80098c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80098aa:	2300      	movs	r3, #0
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	4013      	ands	r3, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d196      	bne.n	80097f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3728      	adds	r7, #40	@ 0x28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000048 	.word	0x20000048

080098d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af02      	add	r7, sp, #8
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff ff5b 	bl	80097a8 <SPI_WaitFifoStateUntilTimeout>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d007      	beq.n	8009908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098fc:	f043 0220 	orr.w	r2, r3, #32
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e027      	b.n	8009958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	2180      	movs	r1, #128	@ 0x80
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fec0 	bl	8009698 <SPI_WaitFlagStateUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d007      	beq.n	800992e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009922:	f043 0220 	orr.w	r2, r3, #32
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e014      	b.n	8009958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff ff34 	bl	80097a8 <SPI_WaitFifoStateUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800994a:	f043 0220 	orr.w	r2, r3, #32
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	e000      	b.n	8009958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e049      	b.n	8009a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7fc fa52 	bl	8005e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f000 f9ba 	bl	8009d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d001      	beq.n	8009a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e03b      	b.n	8009aa0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a19      	ldr	r2, [pc, #100]	@ (8009aac <HAL_TIM_Base_Start_IT+0x9c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d009      	beq.n	8009a5e <HAL_TIM_Base_Start_IT+0x4e>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d004      	beq.n	8009a5e <HAL_TIM_Base_Start_IT+0x4e>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a15      	ldr	r2, [pc, #84]	@ (8009ab0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d115      	bne.n	8009a8a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	4b13      	ldr	r3, [pc, #76]	@ (8009ab4 <HAL_TIM_Base_Start_IT+0xa4>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b06      	cmp	r3, #6
 8009a6e:	d015      	beq.n	8009a9c <HAL_TIM_Base_Start_IT+0x8c>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a76:	d011      	beq.n	8009a9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	e008      	b.n	8009a9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e000      	b.n	8009a9e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	40012c00 	.word	0x40012c00
 8009ab0:	40014000 	.word	0x40014000
 8009ab4:	00010007 	.word	0x00010007

08009ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d020      	beq.n	8009b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01b      	beq.n	8009b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f06f 0202 	mvn.w	r2, #2
 8009aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f8e9 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 8009b08:	e005      	b.n	8009b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f8db 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f8ec 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f003 0304 	and.w	r3, r3, #4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d020      	beq.n	8009b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01b      	beq.n	8009b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f06f 0204 	mvn.w	r2, #4
 8009b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f8c3 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 8009b54:	e005      	b.n	8009b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8b5 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f8c6 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f003 0308 	and.w	r3, r3, #8
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d020      	beq.n	8009bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d01b      	beq.n	8009bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f06f 0208 	mvn.w	r2, #8
 8009b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f89d 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 8009ba0:	e005      	b.n	8009bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f88f 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f8a0 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f003 0310 	and.w	r3, r3, #16
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d020      	beq.n	8009c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01b      	beq.n	8009c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f06f 0210 	mvn.w	r2, #16
 8009bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2208      	movs	r2, #8
 8009bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f877 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 8009bec:	e005      	b.n	8009bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f869 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f87a 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f06f 0201 	mvn.w	r2, #1
 8009c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f7 fdc2 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d104      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00c      	beq.n	8009c52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d007      	beq.n	8009c52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f943 	bl	8009ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00c      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d007      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f93b 	bl	8009eec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d007      	beq.n	8009c9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f834 	bl	8009d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00c      	beq.n	8009cbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f06f 0220 	mvn.w	r2, #32
 8009cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f903 	bl	8009ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cce:	bf00      	nop
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
	...

08009d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a30      	ldr	r2, [pc, #192]	@ (8009dec <TIM_Base_SetConfig+0xd4>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d003      	beq.n	8009d38 <TIM_Base_SetConfig+0x20>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d36:	d108      	bne.n	8009d4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a27      	ldr	r2, [pc, #156]	@ (8009dec <TIM_Base_SetConfig+0xd4>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00b      	beq.n	8009d6a <TIM_Base_SetConfig+0x52>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d58:	d007      	beq.n	8009d6a <TIM_Base_SetConfig+0x52>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a24      	ldr	r2, [pc, #144]	@ (8009df0 <TIM_Base_SetConfig+0xd8>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d003      	beq.n	8009d6a <TIM_Base_SetConfig+0x52>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a23      	ldr	r2, [pc, #140]	@ (8009df4 <TIM_Base_SetConfig+0xdc>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d108      	bne.n	8009d7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a12      	ldr	r2, [pc, #72]	@ (8009dec <TIM_Base_SetConfig+0xd4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d007      	beq.n	8009db8 <TIM_Base_SetConfig+0xa0>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a11      	ldr	r2, [pc, #68]	@ (8009df0 <TIM_Base_SetConfig+0xd8>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d003      	beq.n	8009db8 <TIM_Base_SetConfig+0xa0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a10      	ldr	r2, [pc, #64]	@ (8009df4 <TIM_Base_SetConfig+0xdc>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d103      	bne.n	8009dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d105      	bne.n	8009dde <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f023 0201 	bic.w	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]
  }
}
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	40014000 	.word	0x40014000
 8009df4:	40014400 	.word	0x40014400

08009df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e04f      	b.n	8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a21      	ldr	r2, [pc, #132]	@ (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d108      	bne.n	8009e4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a14      	ldr	r2, [pc, #80]	@ (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d009      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e78:	d004      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a10      	ldr	r2, [pc, #64]	@ (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d10c      	bne.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	40012c00 	.word	0x40012c00
 8009ec0:	40014000 	.word	0x40014000

08009ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e040      	b.n	8009f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7fb fff6 	bl	8005f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2224      	movs	r2, #36	@ 0x24
 8009f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0201 	bic.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fe04 	bl	800ab54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fbd5 	bl	800a6fc <UART_SetConfig>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e01b      	b.n	8009f94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0201 	orr.w	r2, r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fe83 	bl	800ac98 <UART_CheckIdleState>
 8009f92:	4603      	mov	r3, r0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	@ 0x28
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fb0:	2b20      	cmp	r3, #32
 8009fb2:	d177      	bne.n	800a0a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <HAL_UART_Transmit+0x24>
 8009fba:	88fb      	ldrh	r3, [r7, #6]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e070      	b.n	800a0a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2221      	movs	r2, #33	@ 0x21
 8009fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fd2:	f7fc f891 	bl	80060f8 <HAL_GetTick>
 8009fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	88fa      	ldrh	r2, [r7, #6]
 8009fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	88fa      	ldrh	r2, [r7, #6]
 8009fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff0:	d108      	bne.n	800a004 <HAL_UART_Transmit+0x68>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d104      	bne.n	800a004 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	e003      	b.n	800a00c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a00c:	e02f      	b.n	800a06e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2200      	movs	r2, #0
 800a016:	2180      	movs	r1, #128	@ 0x80
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fee5 	bl	800ade8 <UART_WaitOnFlagUntilTimeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e03b      	b.n	800a0a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10b      	bne.n	800a04c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	881a      	ldrh	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a040:	b292      	uxth	r2, r2
 800a042:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	3302      	adds	r3, #2
 800a048:	61bb      	str	r3, [r7, #24]
 800a04a:	e007      	b.n	800a05c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	781a      	ldrb	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	3301      	adds	r3, #1
 800a05a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a062:	b29b      	uxth	r3, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1c9      	bne.n	800a00e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2200      	movs	r2, #0
 800a082:	2140      	movs	r1, #64	@ 0x40
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 feaf 	bl	800ade8 <UART_WaitOnFlagUntilTimeout>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e005      	b.n	800a0a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2220      	movs	r2, #32
 800a09e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e000      	b.n	800a0a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a0a4:	2302      	movs	r3, #2
  }
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b0ba      	sub	sp, #232	@ 0xe8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a0da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a0de:	4013      	ands	r3, r2
 800a0e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d115      	bne.n	800a118 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f0:	f003 0320 	and.w	r3, r3, #32
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00f      	beq.n	800a118 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0fc:	f003 0320 	and.w	r3, r3, #32
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 82ca 	beq.w	800a6a2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
      }
      return;
 800a116:	e2c4      	b.n	800a6a2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8117 	beq.w	800a350 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a12e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a132:	4b85      	ldr	r3, [pc, #532]	@ (800a348 <HAL_UART_IRQHandler+0x298>)
 800a134:	4013      	ands	r3, r2
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 810a 	beq.w	800a350 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d011      	beq.n	800a16c <HAL_UART_IRQHandler+0xbc>
 800a148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a14c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2201      	movs	r2, #1
 800a15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a162:	f043 0201 	orr.w	r2, r3, #1
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d011      	beq.n	800a19c <HAL_UART_IRQHandler+0xec>
 800a178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2202      	movs	r2, #2
 800a18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a192:	f043 0204 	orr.w	r2, r3, #4
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d011      	beq.n	800a1cc <HAL_UART_IRQHandler+0x11c>
 800a1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00b      	beq.n	800a1cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1c2:	f043 0202 	orr.w	r2, r3, #2
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d0:	f003 0308 	and.w	r3, r3, #8
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d017      	beq.n	800a208 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d105      	bne.n	800a1f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2208      	movs	r2, #8
 800a1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1fe:	f043 0208 	orr.w	r2, r3, #8
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a20c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a210:	2b00      	cmp	r3, #0
 800a212:	d012      	beq.n	800a23a <HAL_UART_IRQHandler+0x18a>
 800a214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a230:	f043 0220 	orr.w	r2, r3, #32
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 8230 	beq.w	800a6a6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00d      	beq.n	800a26e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d007      	beq.n	800a26e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a274:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a282:	2b40      	cmp	r3, #64	@ 0x40
 800a284:	d005      	beq.n	800a292 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a28a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d04f      	beq.n	800a332 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fe15 	bl	800aec2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a2:	2b40      	cmp	r3, #64	@ 0x40
 800a2a4:	d141      	bne.n	800a32a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1d9      	bne.n	800a2a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d013      	beq.n	800a322 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2fe:	4a13      	ldr	r2, [pc, #76]	@ (800a34c <HAL_UART_IRQHandler+0x29c>)
 800a300:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a306:	4618      	mov	r0, r3
 800a308:	f7fd fa91 	bl	800782e <HAL_DMA_Abort_IT>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d017      	beq.n	800a342 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a320:	e00f      	b.n	800a342 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f9d4 	bl	800a6d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a328:	e00b      	b.n	800a342 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f9d0 	bl	800a6d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a330:	e007      	b.n	800a342 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9cc 	bl	800a6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a340:	e1b1      	b.n	800a6a6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a342:	bf00      	nop
    return;
 800a344:	e1af      	b.n	800a6a6 <HAL_UART_IRQHandler+0x5f6>
 800a346:	bf00      	nop
 800a348:	04000120 	.word	0x04000120
 800a34c:	0800af8b 	.word	0x0800af8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a354:	2b01      	cmp	r3, #1
 800a356:	f040 816a 	bne.w	800a62e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a35e:	f003 0310 	and.w	r3, r3, #16
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8163 	beq.w	800a62e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 815c 	beq.w	800a62e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2210      	movs	r2, #16
 800a37c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a388:	2b40      	cmp	r3, #64	@ 0x40
 800a38a:	f040 80d4 	bne.w	800a536 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a39a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80ad 	beq.w	800a4fe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a3aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	f080 80a5 	bcs.w	800a4fe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f040 8086 	bne.w	800a4dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a3fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a406:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1da      	bne.n	800a3d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3308      	adds	r3, #8
 800a420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a42a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a42c:	f023 0301 	bic.w	r3, r3, #1
 800a430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3308      	adds	r3, #8
 800a43a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a43e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a442:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e1      	bne.n	800a41a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a46c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3308      	adds	r3, #8
 800a476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a47a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a47c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a480:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e3      	bne.n	800a456 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2220      	movs	r2, #32
 800a492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ac:	f023 0310 	bic.w	r3, r3, #16
 800a4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e4      	bne.n	800a49c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fd f96b 	bl	80077b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f8f4 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a4fc:	e0d5      	b.n	800a6aa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a508:	429a      	cmp	r2, r3
 800a50a:	f040 80ce 	bne.w	800a6aa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	f040 80c5 	bne.w	800a6aa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f8d8 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
      return;
 800a534:	e0b9      	b.n	800a6aa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a542:	b29b      	uxth	r3, r3
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a550:	b29b      	uxth	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80ab 	beq.w	800a6ae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800a558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 80a6 	beq.w	800a6ae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a584:	647b      	str	r3, [r7, #68]	@ 0x44
 800a586:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a58a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e4      	bne.n	800a562 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3308      	adds	r3, #8
 800a59e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a2:	e853 3f00 	ldrex	r3, [r3]
 800a5a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	f023 0301 	bic.w	r3, r3, #1
 800a5ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a5bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e3      	bne.n	800a598 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f023 0310 	bic.w	r3, r3, #16
 800a5f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60a:	69b9      	ldr	r1, [r7, #24]
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	e841 2300 	strex	r3, r2, [r1]
 800a612:	617b      	str	r3, [r7, #20]
   return(result);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e4      	bne.n	800a5e4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2202      	movs	r2, #2
 800a61e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f85c 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a62c:	e03f      	b.n	800a6ae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00e      	beq.n	800a658 <HAL_UART_IRQHandler+0x5a8>
 800a63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a63e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d008      	beq.n	800a658 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a64e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fcda 	bl	800b00a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a656:	e02d      	b.n	800a6b4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a65c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00e      	beq.n	800a682 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01c      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
    }
    return;
 800a680:	e017      	b.n	800a6b2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d012      	beq.n	800a6b4 <HAL_UART_IRQHandler+0x604>
 800a68e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00c      	beq.n	800a6b4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fc8b 	bl	800afb6 <UART_EndTransmit_IT>
    return;
 800a6a0:	e008      	b.n	800a6b4 <HAL_UART_IRQHandler+0x604>
      return;
 800a6a2:	bf00      	nop
 800a6a4:	e006      	b.n	800a6b4 <HAL_UART_IRQHandler+0x604>
    return;
 800a6a6:	bf00      	nop
 800a6a8:	e004      	b.n	800a6b4 <HAL_UART_IRQHandler+0x604>
      return;
 800a6aa:	bf00      	nop
 800a6ac:	e002      	b.n	800a6b4 <HAL_UART_IRQHandler+0x604>
      return;
 800a6ae:	bf00      	nop
 800a6b0:	e000      	b.n	800a6b4 <HAL_UART_IRQHandler+0x604>
    return;
 800a6b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a6b4:	37e8      	adds	r7, #232	@ 0xe8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop

0800a6bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a700:	b08a      	sub	sp, #40	@ 0x28
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	431a      	orrs	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	431a      	orrs	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	4313      	orrs	r3, r2
 800a722:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	4bb4      	ldr	r3, [pc, #720]	@ (800a9fc <UART_SetConfig+0x300>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a734:	430b      	orrs	r3, r1
 800a736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4aa9      	ldr	r2, [pc, #676]	@ (800aa00 <UART_SetConfig+0x304>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a764:	4313      	orrs	r3, r2
 800a766:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a778:	430a      	orrs	r2, r1
 800a77a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4aa0      	ldr	r2, [pc, #640]	@ (800aa04 <UART_SetConfig+0x308>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d126      	bne.n	800a7d4 <UART_SetConfig+0xd8>
 800a786:	4ba0      	ldr	r3, [pc, #640]	@ (800aa08 <UART_SetConfig+0x30c>)
 800a788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a78c:	f003 0303 	and.w	r3, r3, #3
 800a790:	2b03      	cmp	r3, #3
 800a792:	d81b      	bhi.n	800a7cc <UART_SetConfig+0xd0>
 800a794:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <UART_SetConfig+0xa0>)
 800a796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79a:	bf00      	nop
 800a79c:	0800a7ad 	.word	0x0800a7ad
 800a7a0:	0800a7bd 	.word	0x0800a7bd
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a7c5 	.word	0x0800a7c5
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7b2:	e080      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7ba:	e07c      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a7bc:	2304      	movs	r3, #4
 800a7be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7c2:	e078      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7ca:	e074      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7d2:	e070      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a8c      	ldr	r2, [pc, #560]	@ (800aa0c <UART_SetConfig+0x310>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d138      	bne.n	800a850 <UART_SetConfig+0x154>
 800a7de:	4b8a      	ldr	r3, [pc, #552]	@ (800aa08 <UART_SetConfig+0x30c>)
 800a7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e4:	f003 030c 	and.w	r3, r3, #12
 800a7e8:	2b0c      	cmp	r3, #12
 800a7ea:	d82d      	bhi.n	800a848 <UART_SetConfig+0x14c>
 800a7ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f4 <UART_SetConfig+0xf8>)
 800a7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f2:	bf00      	nop
 800a7f4:	0800a829 	.word	0x0800a829
 800a7f8:	0800a849 	.word	0x0800a849
 800a7fc:	0800a849 	.word	0x0800a849
 800a800:	0800a849 	.word	0x0800a849
 800a804:	0800a839 	.word	0x0800a839
 800a808:	0800a849 	.word	0x0800a849
 800a80c:	0800a849 	.word	0x0800a849
 800a810:	0800a849 	.word	0x0800a849
 800a814:	0800a831 	.word	0x0800a831
 800a818:	0800a849 	.word	0x0800a849
 800a81c:	0800a849 	.word	0x0800a849
 800a820:	0800a849 	.word	0x0800a849
 800a824:	0800a841 	.word	0x0800a841
 800a828:	2300      	movs	r3, #0
 800a82a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a82e:	e042      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a830:	2302      	movs	r3, #2
 800a832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a836:	e03e      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a838:	2304      	movs	r3, #4
 800a83a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a83e:	e03a      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a840:	2308      	movs	r3, #8
 800a842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a846:	e036      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a848:	2310      	movs	r3, #16
 800a84a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a84e:	e032      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a6a      	ldr	r2, [pc, #424]	@ (800aa00 <UART_SetConfig+0x304>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d12a      	bne.n	800a8b0 <UART_SetConfig+0x1b4>
 800a85a:	4b6b      	ldr	r3, [pc, #428]	@ (800aa08 <UART_SetConfig+0x30c>)
 800a85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a868:	d01a      	beq.n	800a8a0 <UART_SetConfig+0x1a4>
 800a86a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a86e:	d81b      	bhi.n	800a8a8 <UART_SetConfig+0x1ac>
 800a870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a874:	d00c      	beq.n	800a890 <UART_SetConfig+0x194>
 800a876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a87a:	d815      	bhi.n	800a8a8 <UART_SetConfig+0x1ac>
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <UART_SetConfig+0x18c>
 800a880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a884:	d008      	beq.n	800a898 <UART_SetConfig+0x19c>
 800a886:	e00f      	b.n	800a8a8 <UART_SetConfig+0x1ac>
 800a888:	2300      	movs	r3, #0
 800a88a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a88e:	e012      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a890:	2302      	movs	r3, #2
 800a892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a896:	e00e      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a898:	2304      	movs	r3, #4
 800a89a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a89e:	e00a      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8a6:	e006      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8ae:	e002      	b.n	800a8b6 <UART_SetConfig+0x1ba>
 800a8b0:	2310      	movs	r3, #16
 800a8b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a51      	ldr	r2, [pc, #324]	@ (800aa00 <UART_SetConfig+0x304>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d17a      	bne.n	800a9b6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d824      	bhi.n	800a912 <UART_SetConfig+0x216>
 800a8c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d0 <UART_SetConfig+0x1d4>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a8f5 	.word	0x0800a8f5
 800a8d4:	0800a913 	.word	0x0800a913
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a913 	.word	0x0800a913
 800a8e0:	0800a903 	.word	0x0800a903
 800a8e4:	0800a913 	.word	0x0800a913
 800a8e8:	0800a913 	.word	0x0800a913
 800a8ec:	0800a913 	.word	0x0800a913
 800a8f0:	0800a90b 	.word	0x0800a90b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8f4:	f7fd ff86 	bl	8008804 <HAL_RCC_GetPCLK1Freq>
 800a8f8:	61f8      	str	r0, [r7, #28]
        break;
 800a8fa:	e010      	b.n	800a91e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8fc:	4b44      	ldr	r3, [pc, #272]	@ (800aa10 <UART_SetConfig+0x314>)
 800a8fe:	61fb      	str	r3, [r7, #28]
        break;
 800a900:	e00d      	b.n	800a91e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a902:	f7fd fee7 	bl	80086d4 <HAL_RCC_GetSysClockFreq>
 800a906:	61f8      	str	r0, [r7, #28]
        break;
 800a908:	e009      	b.n	800a91e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a90e:	61fb      	str	r3, [r7, #28]
        break;
 800a910:	e005      	b.n	800a91e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a91c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 8107 	beq.w	800ab34 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	4613      	mov	r3, r2
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	4413      	add	r3, r2
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	429a      	cmp	r2, r3
 800a934:	d305      	bcc.n	800a942 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d903      	bls.n	800a94a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a948:	e0f4      	b.n	800ab34 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	2200      	movs	r2, #0
 800a94e:	461c      	mov	r4, r3
 800a950:	4615      	mov	r5, r2
 800a952:	f04f 0200 	mov.w	r2, #0
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	022b      	lsls	r3, r5, #8
 800a95c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a960:	0222      	lsls	r2, r4, #8
 800a962:	68f9      	ldr	r1, [r7, #12]
 800a964:	6849      	ldr	r1, [r1, #4]
 800a966:	0849      	lsrs	r1, r1, #1
 800a968:	2000      	movs	r0, #0
 800a96a:	4688      	mov	r8, r1
 800a96c:	4681      	mov	r9, r0
 800a96e:	eb12 0a08 	adds.w	sl, r2, r8
 800a972:	eb43 0b09 	adc.w	fp, r3, r9
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	603b      	str	r3, [r7, #0]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a984:	4650      	mov	r0, sl
 800a986:	4659      	mov	r1, fp
 800a988:	f7f5 fc70 	bl	800026c <__aeabi_uldivmod>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4613      	mov	r3, r2
 800a992:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a99a:	d308      	bcc.n	800a9ae <UART_SetConfig+0x2b2>
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9a2:	d204      	bcs.n	800a9ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	60da      	str	r2, [r3, #12]
 800a9ac:	e0c2      	b.n	800ab34 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a9b4:	e0be      	b.n	800ab34 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9be:	d16a      	bne.n	800aa96 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a9c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d834      	bhi.n	800aa32 <UART_SetConfig+0x336>
 800a9c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d0 <UART_SetConfig+0x2d4>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9f5 	.word	0x0800a9f5
 800a9d4:	0800aa15 	.word	0x0800aa15
 800a9d8:	0800aa1d 	.word	0x0800aa1d
 800a9dc:	0800aa33 	.word	0x0800aa33
 800a9e0:	0800aa23 	.word	0x0800aa23
 800a9e4:	0800aa33 	.word	0x0800aa33
 800a9e8:	0800aa33 	.word	0x0800aa33
 800a9ec:	0800aa33 	.word	0x0800aa33
 800a9f0:	0800aa2b 	.word	0x0800aa2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9f4:	f7fd ff06 	bl	8008804 <HAL_RCC_GetPCLK1Freq>
 800a9f8:	61f8      	str	r0, [r7, #28]
        break;
 800a9fa:	e020      	b.n	800aa3e <UART_SetConfig+0x342>
 800a9fc:	efff69f3 	.word	0xefff69f3
 800aa00:	40008000 	.word	0x40008000
 800aa04:	40013800 	.word	0x40013800
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	40004400 	.word	0x40004400
 800aa10:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa14:	f7fd ff0c 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800aa18:	61f8      	str	r0, [r7, #28]
        break;
 800aa1a:	e010      	b.n	800aa3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa1c:	4b4c      	ldr	r3, [pc, #304]	@ (800ab50 <UART_SetConfig+0x454>)
 800aa1e:	61fb      	str	r3, [r7, #28]
        break;
 800aa20:	e00d      	b.n	800aa3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa22:	f7fd fe57 	bl	80086d4 <HAL_RCC_GetSysClockFreq>
 800aa26:	61f8      	str	r0, [r7, #28]
        break;
 800aa28:	e009      	b.n	800aa3e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa2e:	61fb      	str	r3, [r7, #28]
        break;
 800aa30:	e005      	b.n	800aa3e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800aa3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d077      	beq.n	800ab34 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	005a      	lsls	r2, r3, #1
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	085b      	lsrs	r3, r3, #1
 800aa4e:	441a      	add	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2b0f      	cmp	r3, #15
 800aa5e:	d916      	bls.n	800aa8e <UART_SetConfig+0x392>
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa66:	d212      	bcs.n	800aa8e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	f023 030f 	bic.w	r3, r3, #15
 800aa70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	085b      	lsrs	r3, r3, #1
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	f003 0307 	and.w	r3, r3, #7
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	8afb      	ldrh	r3, [r7, #22]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	8afa      	ldrh	r2, [r7, #22]
 800aa8a:	60da      	str	r2, [r3, #12]
 800aa8c:	e052      	b.n	800ab34 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800aa94:	e04e      	b.n	800ab34 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa9a:	2b08      	cmp	r3, #8
 800aa9c:	d827      	bhi.n	800aaee <UART_SetConfig+0x3f2>
 800aa9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa4 <UART_SetConfig+0x3a8>)
 800aaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa4:	0800aac9 	.word	0x0800aac9
 800aaa8:	0800aad1 	.word	0x0800aad1
 800aaac:	0800aad9 	.word	0x0800aad9
 800aab0:	0800aaef 	.word	0x0800aaef
 800aab4:	0800aadf 	.word	0x0800aadf
 800aab8:	0800aaef 	.word	0x0800aaef
 800aabc:	0800aaef 	.word	0x0800aaef
 800aac0:	0800aaef 	.word	0x0800aaef
 800aac4:	0800aae7 	.word	0x0800aae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aac8:	f7fd fe9c 	bl	8008804 <HAL_RCC_GetPCLK1Freq>
 800aacc:	61f8      	str	r0, [r7, #28]
        break;
 800aace:	e014      	b.n	800aafa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aad0:	f7fd feae 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800aad4:	61f8      	str	r0, [r7, #28]
        break;
 800aad6:	e010      	b.n	800aafa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aad8:	4b1d      	ldr	r3, [pc, #116]	@ (800ab50 <UART_SetConfig+0x454>)
 800aada:	61fb      	str	r3, [r7, #28]
        break;
 800aadc:	e00d      	b.n	800aafa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aade:	f7fd fdf9 	bl	80086d4 <HAL_RCC_GetSysClockFreq>
 800aae2:	61f8      	str	r0, [r7, #28]
        break;
 800aae4:	e009      	b.n	800aafa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaea:	61fb      	str	r3, [r7, #28]
        break;
 800aaec:	e005      	b.n	800aafa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800aaf8:	bf00      	nop
    }

    if (pclk != 0U)
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d019      	beq.n	800ab34 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	085a      	lsrs	r2, r3, #1
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	441a      	add	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b0f      	cmp	r3, #15
 800ab18:	d909      	bls.n	800ab2e <UART_SetConfig+0x432>
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab20:	d205      	bcs.n	800ab2e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60da      	str	r2, [r3, #12]
 800ab2c:	e002      	b.n	800ab34 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ab40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3728      	adds	r7, #40	@ 0x28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab4e:	bf00      	nop
 800ab50:	00f42400 	.word	0x00f42400

0800ab54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	f003 0308 	and.w	r3, r3, #8
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00a      	beq.n	800ab7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba4:	f003 0302 	and.w	r3, r3, #2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	430a      	orrs	r2, r1
 800abe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe8:	f003 0310 	and.w	r3, r3, #16
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01a      	beq.n	800ac6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac52:	d10a      	bne.n	800ac6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	605a      	str	r2, [r3, #4]
  }
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b098      	sub	sp, #96	@ 0x60
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aca8:	f7fb fa26 	bl	80060f8 <HAL_GetTick>
 800acac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0308 	and.w	r3, r3, #8
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d12e      	bne.n	800ad1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acc4:	2200      	movs	r2, #0
 800acc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f88c 	bl	800ade8 <UART_WaitOnFlagUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d021      	beq.n	800ad1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ace4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acea:	653b      	str	r3, [r7, #80]	@ 0x50
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800acf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acfc:	e841 2300 	strex	r3, r2, [r1]
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e6      	bne.n	800acd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e062      	b.n	800ade0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	d149      	bne.n	800adbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad30:	2200      	movs	r2, #0
 800ad32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f856 	bl	800ade8 <UART_WaitOnFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d03c      	beq.n	800adbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	623b      	str	r3, [r7, #32]
   return(result);
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e6      	bne.n	800ad42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0301 	bic.w	r3, r3, #1
 800ad8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3308      	adds	r3, #8
 800ad92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad94:	61fa      	str	r2, [r7, #28]
 800ad96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	69b9      	ldr	r1, [r7, #24]
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	617b      	str	r3, [r7, #20]
   return(result);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e5      	bne.n	800ad74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2220      	movs	r2, #32
 800adac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e011      	b.n	800ade0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2220      	movs	r2, #32
 800adc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2220      	movs	r2, #32
 800adc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3758      	adds	r7, #88	@ 0x58
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	603b      	str	r3, [r7, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf8:	e04f      	b.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d04b      	beq.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae02:	f7fb f979 	bl	80060f8 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d302      	bcc.n	800ae18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e04e      	b.n	800aeba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0304 	and.w	r3, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d037      	beq.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b80      	cmp	r3, #128	@ 0x80
 800ae2e:	d034      	beq.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b40      	cmp	r3, #64	@ 0x40
 800ae34:	d031      	beq.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b08      	cmp	r3, #8
 800ae42:	d110      	bne.n	800ae66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2208      	movs	r2, #8
 800ae4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 f838 	bl	800aec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2208      	movs	r2, #8
 800ae56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e029      	b.n	800aeba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	69db      	ldr	r3, [r3, #28]
 800ae6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae74:	d111      	bne.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f81e 	bl	800aec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e00f      	b.n	800aeba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69da      	ldr	r2, [r3, #28]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	4013      	ands	r3, r2
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	bf0c      	ite	eq
 800aeaa:	2301      	moveq	r3, #1
 800aeac:	2300      	movne	r3, #0
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d0a0      	beq.n	800adfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b095      	sub	sp, #84	@ 0x54
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	e853 3f00 	ldrex	r3, [r3]
 800aed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	461a      	mov	r2, r3
 800aee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee8:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aeee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aef0:	e841 2300 	strex	r3, r2, [r1]
 800aef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e6      	bne.n	800aeca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3308      	adds	r3, #8
 800af02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	e853 3f00 	ldrex	r3, [r3]
 800af0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	f023 0301 	bic.w	r3, r3, #1
 800af12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af24:	e841 2300 	strex	r3, r2, [r1]
 800af28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e5      	bne.n	800aefc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af34:	2b01      	cmp	r3, #1
 800af36:	d118      	bne.n	800af6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	e853 3f00 	ldrex	r3, [r3]
 800af44:	60bb      	str	r3, [r7, #8]
   return(result);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f023 0310 	bic.w	r3, r3, #16
 800af4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af56:	61bb      	str	r3, [r7, #24]
 800af58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6979      	ldr	r1, [r7, #20]
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	613b      	str	r3, [r7, #16]
   return(result);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e6      	bne.n	800af38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2220      	movs	r2, #32
 800af6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800af7e:	bf00      	nop
 800af80:	3754      	adds	r7, #84	@ 0x54
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7ff fb91 	bl	800a6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afae:	bf00      	nop
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b088      	sub	sp, #32
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	60bb      	str	r3, [r7, #8]
   return(result);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afd2:	61fb      	str	r3, [r7, #28]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	61bb      	str	r3, [r7, #24]
 800afde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	6979      	ldr	r1, [r7, #20]
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	613b      	str	r3, [r7, #16]
   return(result);
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e6      	bne.n	800afbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2220      	movs	r2, #32
 800aff4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff fb5d 	bl	800a6bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b002:	bf00      	nop
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b012:	bf00      	nop
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <memset>:
 800b01e:	4402      	add	r2, r0
 800b020:	4603      	mov	r3, r0
 800b022:	4293      	cmp	r3, r2
 800b024:	d100      	bne.n	800b028 <memset+0xa>
 800b026:	4770      	bx	lr
 800b028:	f803 1b01 	strb.w	r1, [r3], #1
 800b02c:	e7f9      	b.n	800b022 <memset+0x4>
	...

0800b030 <__libc_init_array>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	4d0d      	ldr	r5, [pc, #52]	@ (800b068 <__libc_init_array+0x38>)
 800b034:	4c0d      	ldr	r4, [pc, #52]	@ (800b06c <__libc_init_array+0x3c>)
 800b036:	1b64      	subs	r4, r4, r5
 800b038:	10a4      	asrs	r4, r4, #2
 800b03a:	2600      	movs	r6, #0
 800b03c:	42a6      	cmp	r6, r4
 800b03e:	d109      	bne.n	800b054 <__libc_init_array+0x24>
 800b040:	4d0b      	ldr	r5, [pc, #44]	@ (800b070 <__libc_init_array+0x40>)
 800b042:	4c0c      	ldr	r4, [pc, #48]	@ (800b074 <__libc_init_array+0x44>)
 800b044:	f000 f826 	bl	800b094 <_init>
 800b048:	1b64      	subs	r4, r4, r5
 800b04a:	10a4      	asrs	r4, r4, #2
 800b04c:	2600      	movs	r6, #0
 800b04e:	42a6      	cmp	r6, r4
 800b050:	d105      	bne.n	800b05e <__libc_init_array+0x2e>
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	f855 3b04 	ldr.w	r3, [r5], #4
 800b058:	4798      	blx	r3
 800b05a:	3601      	adds	r6, #1
 800b05c:	e7ee      	b.n	800b03c <__libc_init_array+0xc>
 800b05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b062:	4798      	blx	r3
 800b064:	3601      	adds	r6, #1
 800b066:	e7f2      	b.n	800b04e <__libc_init_array+0x1e>
 800b068:	0800c584 	.word	0x0800c584
 800b06c:	0800c584 	.word	0x0800c584
 800b070:	0800c584 	.word	0x0800c584
 800b074:	0800c588 	.word	0x0800c588

0800b078 <memcpy>:
 800b078:	440a      	add	r2, r1
 800b07a:	4291      	cmp	r1, r2
 800b07c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b080:	d100      	bne.n	800b084 <memcpy+0xc>
 800b082:	4770      	bx	lr
 800b084:	b510      	push	{r4, lr}
 800b086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b08a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b08e:	4291      	cmp	r1, r2
 800b090:	d1f9      	bne.n	800b086 <memcpy+0xe>
 800b092:	bd10      	pop	{r4, pc}

0800b094 <_init>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	bf00      	nop
 800b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09a:	bc08      	pop	{r3}
 800b09c:	469e      	mov	lr, r3
 800b09e:	4770      	bx	lr

0800b0a0 <_fini>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	bf00      	nop
 800b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a6:	bc08      	pop	{r3}
 800b0a8:	469e      	mov	lr, r3
 800b0aa:	4770      	bx	lr
