
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001738  0800ed00  0800ed00  0000fd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010438  08010438  0001207c  2**0
                  CONTENTS
  4 .ARM          00000008  08010438  08010438  00011438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010440  08010440  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010440  08010440  00011440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010444  08010444  00011444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010448  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000007c  080104c4  0001207c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  080104c4  00012760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f65d  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e7  00000000  00000000  00031709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000172e  00000000  00000000  00037dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002672d  00000000  00000000  000394f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002459a  00000000  00000000  0005fc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e310b  00000000  00000000  000841bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001672c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000887c  00000000  00000000  0016730c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ece8 	.word	0x0800ece8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800ece8 	.word	0x0800ece8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9b5 	b.w	8000e38 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b96a 	b.w	8000e38 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	460c      	mov	r4, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14e      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b88:	4694      	mov	ip, r2
 8000b8a:	458c      	cmp	ip, r1
 8000b8c:	4686      	mov	lr, r0
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	d962      	bls.n	8000c5a <__udivmoddi4+0xde>
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000baa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bae:	fa1f f68c 	uxth.w	r6, ip
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	fb07 1114 	mls	r1, r7, r4, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb04 f106 	mul.w	r1, r4, r6
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd2:	f080 8112 	bcs.w	8000dfa <__udivmoddi4+0x27e>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 810f 	bls.w	8000dfa <__udivmoddi4+0x27e>
 8000bdc:	3c02      	subs	r4, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bea:	fb07 1110 	mls	r1, r7, r0, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb00 f606 	mul.w	r6, r0, r6
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x94>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c02:	f080 80fc 	bcs.w	8000dfe <__udivmoddi4+0x282>
 8000c06:	429e      	cmp	r6, r3
 8000c08:	f240 80f9 	bls.w	8000dfe <__udivmoddi4+0x282>
 8000c0c:	4463      	add	r3, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa6>
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xba>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb4>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x150>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xcc>
 8000c42:	4290      	cmp	r0, r2
 8000c44:	f0c0 80f0 	bcc.w	8000e28 <__udivmoddi4+0x2ac>
 8000c48:	1a86      	subs	r6, r0, r2
 8000c4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d0e6      	beq.n	8000c22 <__udivmoddi4+0xa6>
 8000c54:	e9c5 6300 	strd	r6, r3, [r5]
 8000c58:	e7e3      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x204>
 8000c60:	eba1 040c 	sub.w	r4, r1, ip
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa1f f78c 	uxth.w	r7, ip
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb07 f006 	mul.w	r0, r7, r6
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x11c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x11a>
 8000c90:	4298      	cmp	r0, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c96:	4626      	mov	r6, r4
 8000c98:	1a1c      	subs	r4, r3, r0
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb00 f707 	mul.w	r7, r0, r7
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x148>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x146>
 8000cbc:	429f      	cmp	r7, r3
 8000cbe:	f200 80b0 	bhi.w	8000e22 <__udivmoddi4+0x2a6>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	1bdb      	subs	r3, r3, r7
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x9c>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce0:	ea43 030c 	orr.w	r3, r3, ip
 8000ce4:	40f4      	lsrs	r4, r6
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	0c38      	lsrs	r0, r7, #16
 8000cec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d00:	fb0e f90c 	mul.w	r9, lr, ip
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x1a6>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d12:	f080 8084 	bcs.w	8000e1e <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8081 	bls.w	8000e1e <__udivmoddi4+0x2a2>
 8000d1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	eba4 0409 	sub.w	r4, r4, r9
 8000d26:	fa1f f983 	uxth.w	r9, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x1d2>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d44:	d267      	bcs.n	8000e16 <__udivmoddi4+0x29a>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0x29a>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d52:	fba0 9302 	umull	r9, r3, r0, r2
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	46ce      	mov	lr, r9
 8000d5e:	469c      	mov	ip, r3
 8000d60:	d351      	bcc.n	8000e06 <__udivmoddi4+0x28a>
 8000d62:	d04e      	beq.n	8000e02 <__udivmoddi4+0x286>
 8000d64:	b155      	cbz	r5, 8000d7c <__udivmoddi4+0x200>
 8000d66:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	40cb      	lsrs	r3, r1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e750      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f103 	lsr.w	r1, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d9c:	fa1f f78c 	uxth.w	r7, ip
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3110 	mls	r1, r8, r0, r3
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f107 	mul.w	r1, r0, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x24c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dbe:	d22c      	bcs.n	8000e1a <__udivmoddi4+0x29e>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d92a      	bls.n	8000e1a <__udivmoddi4+0x29e>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb01 f307 	mul.w	r3, r1, r7
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x276>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de8:	d213      	bcs.n	8000e12 <__udivmoddi4+0x296>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d911      	bls.n	8000e12 <__udivmoddi4+0x296>
 8000dee:	3902      	subs	r1, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df8:	e739      	b.n	8000c6e <__udivmoddi4+0xf2>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	e6f0      	b.n	8000be0 <__udivmoddi4+0x64>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e706      	b.n	8000c10 <__udivmoddi4+0x94>
 8000e02:	45c8      	cmp	r8, r9
 8000e04:	d2ae      	bcs.n	8000d64 <__udivmoddi4+0x1e8>
 8000e06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7a8      	b.n	8000d64 <__udivmoddi4+0x1e8>
 8000e12:	4631      	mov	r1, r6
 8000e14:	e7ed      	b.n	8000df2 <__udivmoddi4+0x276>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e799      	b.n	8000d4e <__udivmoddi4+0x1d2>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e7d4      	b.n	8000dc8 <__udivmoddi4+0x24c>
 8000e1e:	46d6      	mov	lr, sl
 8000e20:	e77f      	b.n	8000d22 <__udivmoddi4+0x1a6>
 8000e22:	4463      	add	r3, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e74d      	b.n	8000cc4 <__udivmoddi4+0x148>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e70f      	b.n	8000c50 <__udivmoddi4+0xd4>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	e730      	b.n	8000c98 <__udivmoddi4+0x11c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e54:	4a29      	ldr	r2, [pc, #164]	@ (8000efc <MX_ADC1_Init+0xc0>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eb4:	f008 face 	bl	8009454 <HAL_ADC_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000ebe:	f004 fb5d 	bl	800557c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_ADC1_Init+0xc4>)
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ece:	237f      	movs	r3, #127	@ 0x7f
 8000ed0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ee0:	f008 fe84 	bl	8009bec <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eea:	f004 fb47 	bl	800557c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000098 	.word	0x20000098
 8000efc:	50040000 	.word	0x50040000
 8000f00:	3ef08000 	.word	0x3ef08000

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	@ 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2254      	movs	r2, #84	@ 0x54
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00d f86e 	bl	800e006 <memset>
  if(adcHandle->Instance==ADC1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <HAL_ADC_MspInit+0xd0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d14a      	bne.n	8000fca <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00b fc28 	bl	800c7b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000f6e:	f004 fb05 	bl	800557c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <HAL_ADC_MspInit+0xd8>)
 8000fb6:	f009 fcf1 	bl	800a99c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2012      	movs	r0, #18
 8000fc0:	f009 fc75 	bl	800a8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000fc4:	2012      	movs	r0, #18
 8000fc6:	f009 fc8e 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3778      	adds	r7, #120	@ 0x78
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	50040000 	.word	0x50040000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e021      	b.n	8001030 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000fec:	4a37      	ldr	r2, [pc, #220]	@ (80010cc <aesroundkeys+0xec>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	061a      	lsls	r2, r3, #24
 8000ff6:	4935      	ldr	r1, [pc, #212]	@ (80010cc <aesroundkeys+0xec>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001004:	431a      	orrs	r2, r3
 8001006:	4931      	ldr	r1, [pc, #196]	@ (80010cc <aesroundkeys+0xec>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001014:	431a      	orrs	r2, r3
 8001016:	492d      	ldr	r1, [pc, #180]	@ (80010cc <aesroundkeys+0xec>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800101e:	0e1b      	lsrs	r3, r3, #24
 8001020:	431a      	orrs	r2, r3
 8001022:	492a      	ldr	r1, [pc, #168]	@ (80010cc <aesroundkeys+0xec>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b03      	cmp	r3, #3
 8001034:	ddda      	ble.n	8000fec <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8001036:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <aesroundkeys+0xec>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800103c:	e03c      	b.n	80010b8 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d127      	bne.n	8001098 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <aesroundkeys+0xf0>)
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <aesroundkeys+0xf0>)
 8001060:	5c5b      	ldrb	r3, [r3, r1]
 8001062:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001064:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <aesroundkeys+0xf0>)
 800106e:	5c5b      	ldrb	r3, [r3, r1]
 8001070:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8001072:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	0e12      	lsrs	r2, r2, #24
 8001078:	4915      	ldr	r1, [pc, #84]	@ (80010d0 <aesroundkeys+0xf0>)
 800107a:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 800107c:	4053      	eors	r3, r2
 800107e:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b04      	subs	r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	da00      	bge.n	800108a <aesroundkeys+0xaa>
 8001088:	3303      	adds	r3, #3
 800108a:	109b      	asrs	r3, r3, #2
 800108c:	4619      	mov	r1, r3
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <aesroundkeys+0xf4>)
 8001090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001094:	4053      	eors	r3, r2
 8001096:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b04      	subs	r3, #4
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <aesroundkeys+0xec>)
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4053      	eors	r3, r2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4908      	ldr	r1, [pc, #32]	@ (80010cc <aesroundkeys+0xec>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80010bc:	ddbf      	ble.n	800103e <aesroundkeys+0x5e>
    }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	2000010c 	.word	0x2000010c
 80010d0:	0800f184 	.word	0x0800f184
 80010d4:	0800f15c 	.word	0x0800f15c

080010d8 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	@ 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 80010e8:	f7ff ff7a 	bl	8000fe0 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <os_aes+0x188>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	4b58      	ldr	r3, [pc, #352]	@ (8001260 <os_aes+0x188>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <os_aes+0x188>)
 8001102:	6093      	str	r3, [r2, #8]
 8001104:	4b56      	ldr	r3, [pc, #344]	@ (8001260 <os_aes+0x188>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a55      	ldr	r2, [pc, #340]	@ (8001260 <os_aes+0x188>)
 800110a:	6053      	str	r3, [r2, #4]
 800110c:	4b54      	ldr	r3, [pc, #336]	@ (8001260 <os_aes+0x188>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a53      	ldr	r2, [pc, #332]	@ (8001260 <os_aes+0x188>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	f000 bc97 	b.w	8001a46 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8001118:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <os_aes+0x188>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	061a      	lsls	r2, r3, #24
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <os_aes+0x188>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001128:	431a      	orrs	r2, r3
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <os_aes+0x188>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001134:	431a      	orrs	r2, r3
 8001136:	4b4a      	ldr	r3, [pc, #296]	@ (8001260 <os_aes+0x188>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0e1b      	lsrs	r3, r3, #24
 800113c:	4313      	orrs	r3, r2
 800113e:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <os_aes+0x188>)
 8001140:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 8001142:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <os_aes+0x188>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	4b45      	ldr	r3, [pc, #276]	@ (8001260 <os_aes+0x188>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001152:	431a      	orrs	r2, r3
 8001154:	4b42      	ldr	r3, [pc, #264]	@ (8001260 <os_aes+0x188>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800115e:	431a      	orrs	r2, r3
 8001160:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <os_aes+0x188>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	0e1b      	lsrs	r3, r3, #24
 8001166:	4313      	orrs	r3, r2
 8001168:	4a3d      	ldr	r2, [pc, #244]	@ (8001260 <os_aes+0x188>)
 800116a:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <os_aes+0x188>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	061a      	lsls	r2, r3, #24
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <os_aes+0x188>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800117c:	431a      	orrs	r2, r3
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <os_aes+0x188>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001188:	431a      	orrs	r2, r3
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <os_aes+0x188>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	0e1b      	lsrs	r3, r3, #24
 8001190:	4313      	orrs	r3, r2
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <os_aes+0x188>)
 8001194:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <os_aes+0x188>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	061a      	lsls	r2, r3, #24
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <os_aes+0x188>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80011a6:	431a      	orrs	r2, r3
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <os_aes+0x188>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80011b2:	431a      	orrs	r2, r3
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <os_aes+0x188>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0e1b      	lsrs	r3, r3, #24
 80011ba:	4313      	orrs	r3, r2
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <os_aes+0x188>)
 80011be:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 80011c0:	f000 bc41 	b.w	8001a46 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <os_aes+0x10a>
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d011      	beq.n	80011fc <os_aes+0x124>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <os_aes+0x124>
                a0 = AESAUX[0];
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <os_aes+0x188>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <os_aes+0x188>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <os_aes+0x188>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <os_aes+0x188>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	e062      	b.n	80012c2 <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d016      	beq.n	8001234 <os_aes+0x15c>
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	2b10      	cmp	r3, #16
 800120a:	d813      	bhi.n	8001234 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d101      	bne.n	8001226 <os_aes+0x14e>
 8001222:	2210      	movs	r2, #16
 8001224:	e000      	b.n	8001228 <os_aes+0x150>
 8001226:	2220      	movs	r2, #32
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4313      	orrs	r3, r2
 800122e:	b25b      	sxtb	r3, r3
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e046      	b.n	80012c2 <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 8001234:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e026      	b.n	800128a <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	021a      	lsls	r2, r3, #8
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	69f9      	ldr	r1, [r7, #28]
 8001244:	4299      	cmp	r1, r3
 8001246:	d204      	bcs.n	8001252 <os_aes+0x17a>
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	440b      	add	r3, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	e009      	b.n	8001266 <os_aes+0x18e>
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	69f9      	ldr	r1, [r7, #28]
 8001256:	4299      	cmp	r1, r3
 8001258:	d104      	bne.n	8001264 <os_aes+0x18c>
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	e003      	b.n	8001266 <os_aes+0x18e>
 800125e:	bf00      	nop
 8001260:	200000fc 	.word	0x200000fc
 8001264:	2300      	movs	r3, #0
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d107      	bne.n	8001284 <os_aes+0x1ac>
                        a0 = a1;
 8001274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d9d5      	bls.n	800123c <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d013      	beq.n	80012c2 <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 800129a:	4ba0      	ldr	r3, [pc, #640]	@ (800151c <os_aes+0x444>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012a0:	4053      	eors	r3, r2
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 80012a4:	4b9d      	ldr	r3, [pc, #628]	@ (800151c <os_aes+0x444>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012aa:	4053      	eors	r3, r2
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 80012ae:	4b9b      	ldr	r3, [pc, #620]	@ (800151c <os_aes+0x444>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b4:	4053      	eors	r3, r2
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 80012b8:	4b98      	ldr	r3, [pc, #608]	@ (800151c <os_aes+0x444>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	4053      	eors	r3, r2
 80012c0:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <os_aes+0x448>)
 80012c4:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3380      	adds	r3, #128	@ 0x80
 80012ca:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012d2:	4053      	eors	r3, r2
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3304      	adds	r3, #4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	4053      	eors	r3, r2
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ea:	4053      	eors	r3, r2
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	330c      	adds	r3, #12
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a3a      	ldr	r2, [r7, #32]
 80012f6:	4053      	eors	r3, r2
 80012f8:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8001312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <os_aes+0x44c>)
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4053      	eors	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	4b7e      	ldr	r3, [pc, #504]	@ (8001528 <os_aes+0x450>)
 800132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4053      	eors	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4b7a      	ldr	r3, [pc, #488]	@ (800152c <os_aes+0x454>)
 8001342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	4053      	eors	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134e:	0e1b      	lsrs	r3, r3, #24
 8001350:	4a77      	ldr	r2, [pc, #476]	@ (8001530 <os_aes+0x458>)
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4053      	eors	r3, r2
 800135a:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <os_aes+0x44c>)
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4053      	eors	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <os_aes+0x450>)
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	4053      	eors	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b68      	ldr	r3, [pc, #416]	@ (800152c <os_aes+0x454>)
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	4053      	eors	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001398:	0e1b      	lsrs	r3, r3, #24
 800139a:	4a65      	ldr	r2, [pc, #404]	@ (8001530 <os_aes+0x458>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4053      	eors	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <os_aes+0x44c>)
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4053      	eors	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <os_aes+0x450>)
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4053      	eors	r3, r2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b55      	ldr	r3, [pc, #340]	@ (800152c <os_aes+0x454>)
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4053      	eors	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	0e1b      	lsrs	r3, r3, #24
 80013e4:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <os_aes+0x458>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4053      	eors	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <os_aes+0x44c>)
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	4053      	eors	r3, r2
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <os_aes+0x450>)
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4053      	eors	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4b43      	ldr	r3, [pc, #268]	@ (800152c <os_aes+0x454>)
 8001420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4053      	eors	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	0e1b      	lsrs	r3, r3, #24
 800142e:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <os_aes+0x458>)
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	4053      	eors	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <os_aes+0x44c>)
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001460:	4053      	eors	r3, r2
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <os_aes+0x450>)
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001474:	4053      	eors	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <os_aes+0x454>)
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	6a3a      	ldr	r2, [r7, #32]
 8001488:	4053      	eors	r3, r2
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	0e1b      	lsrs	r3, r3, #24
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <os_aes+0x458>)
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001498:	4053      	eors	r3, r2
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <os_aes+0x44c>)
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014aa:	4053      	eors	r3, r2
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <os_aes+0x450>)
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	4053      	eors	r3, r2
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <os_aes+0x454>)
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014d2:	4053      	eors	r3, r2
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	0e1b      	lsrs	r3, r3, #24
 80014da:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <os_aes+0x458>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e2:	4053      	eors	r3, r2
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <os_aes+0x44c>)
 80014ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f2:	6a3a      	ldr	r2, [r7, #32]
 80014f4:	4053      	eors	r3, r2
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <os_aes+0x450>)
 8001502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001508:	4053      	eors	r3, r2
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	0c1b      	lsrs	r3, r3, #16
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <os_aes+0x454>)
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	e00b      	b.n	8001534 <os_aes+0x45c>
 800151c:	200000fc 	.word	0x200000fc
 8001520:	2000010c 	.word	0x2000010c
 8001524:	0800fe84 	.word	0x0800fe84
 8001528:	0800fa84 	.word	0x0800fa84
 800152c:	0800f684 	.word	0x0800f684
 8001530:	0800f284 	.word	0x0800f284
 8001534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001536:	4053      	eors	r3, r2
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0e1b      	lsrs	r3, r3, #24
 800153e:	4aa1      	ldr	r2, [pc, #644]	@ (80017c4 <os_aes+0x6ec>)
 8001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001546:	4053      	eors	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	4b9d      	ldr	r3, [pc, #628]	@ (80017c8 <os_aes+0x6f0>)
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001558:	4053      	eors	r3, r2
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4b99      	ldr	r3, [pc, #612]	@ (80017cc <os_aes+0x6f4>)
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800156c:	4053      	eors	r3, r2
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4b95      	ldr	r3, [pc, #596]	@ (80017d0 <os_aes+0x6f8>)
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001580:	4053      	eors	r3, r2
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0e1b      	lsrs	r3, r3, #24
 8001588:	4a8e      	ldr	r2, [pc, #568]	@ (80017c4 <os_aes+0x6ec>)
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	4053      	eors	r3, r2
 8001592:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3320      	adds	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	429a      	cmp	r2, r3
 80015a0:	f4ff aeab 	bcc.w	80012fa <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <os_aes+0x6f0>)
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4053      	eors	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b7d      	ldr	r3, [pc, #500]	@ (80017cc <os_aes+0x6f4>)
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4053      	eors	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b79      	ldr	r3, [pc, #484]	@ (80017d0 <os_aes+0x6f8>)
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4053      	eors	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	0e1b      	lsrs	r3, r3, #24
 80015fa:	4a72      	ldr	r2, [pc, #456]	@ (80017c4 <os_aes+0x6ec>)
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	4053      	eors	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4b6e      	ldr	r3, [pc, #440]	@ (80017c8 <os_aes+0x6f0>)
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4053      	eors	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <os_aes+0x6f4>)
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4053      	eors	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <os_aes+0x6f8>)
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4053      	eors	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	0e1b      	lsrs	r3, r3, #24
 8001644:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <os_aes+0x6ec>)
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4053      	eors	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <os_aes+0x6f0>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4053      	eors	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <os_aes+0x6f4>)
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	4053      	eors	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <os_aes+0x6f8>)
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4053      	eors	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	4a4d      	ldr	r2, [pc, #308]	@ (80017c4 <os_aes+0x6ec>)
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4053      	eors	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <os_aes+0x6f0>)
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4053      	eors	r3, r2
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <os_aes+0x6f4>)
 80016b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4053      	eors	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <os_aes+0x6f8>)
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4053      	eors	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	0e1b      	lsrs	r3, r3, #24
 80016d8:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <os_aes+0x6ec>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4053      	eors	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	4a39      	ldr	r2, [pc, #228]	@ (80017d4 <os_aes+0x6fc>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f6:	4053      	eors	r3, r2
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <os_aes+0x6fc>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800170a:	4053      	eors	r3, r2
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <os_aes+0x6fc>)
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171e:	4053      	eors	r3, r2
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <os_aes+0x6fc>)
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	461a      	mov	r2, r3
 800172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001730:	4053      	eors	r3, r2
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	0e1b      	lsrs	r3, r3, #24
 800173e:	4a25      	ldr	r2, [pc, #148]	@ (80017d4 <os_aes+0x6fc>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001746:	4053      	eors	r3, r2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <os_aes+0x6fc>)
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175a:	4053      	eors	r3, r2
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <os_aes+0x6fc>)
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800176e:	4053      	eors	r3, r2
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <os_aes+0x6fc>)
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	461a      	mov	r2, r3
 800177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001780:	4053      	eors	r3, r2
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	0e1b      	lsrs	r3, r3, #24
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <os_aes+0x6fc>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	061b      	lsls	r3, r3, #24
 8001794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001796:	4053      	eors	r3, r2
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <os_aes+0x6fc>)
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	4053      	eors	r3, r2
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <os_aes+0x6fc>)
 80017b8:	5c9b      	ldrb	r3, [r3, r2]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017be:	4053      	eors	r3, r2
 80017c0:	e00a      	b.n	80017d8 <os_aes+0x700>
 80017c2:	bf00      	nop
 80017c4:	0800f284 	.word	0x0800f284
 80017c8:	0800fe84 	.word	0x0800fe84
 80017cc:	0800fa84 	.word	0x0800fa84
 80017d0:	0800f684 	.word	0x0800f684
 80017d4:	0800f184 	.word	0x0800f184
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <os_aes+0x888>)
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	461a      	mov	r2, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	4053      	eors	r3, r2
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	0e1b      	lsrs	r3, r3, #24
 80017f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001960 <os_aes+0x888>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	061b      	lsls	r3, r3, #24
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	4053      	eors	r3, r2
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <os_aes+0x888>)
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	4053      	eors	r3, r2
 8001814:	623b      	str	r3, [r7, #32]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <os_aes+0x888>)
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	6a3a      	ldr	r2, [r7, #32]
 8001826:	4053      	eors	r3, r2
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <os_aes+0x888>)
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	461a      	mov	r2, r3
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	4053      	eors	r3, r2
 800183a:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d056      	beq.n	80018f4 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	111b      	asrs	r3, r3, #4
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d041      	beq.n	80018da <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	0fdb      	lsrs	r3, r3, #31
 800185a:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	005a      	lsls	r2, r3, #1
 8001860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001862:	0fdb      	lsrs	r3, r3, #31
 8001864:	4313      	orrs	r3, r2
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8001868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186a:	005a      	lsls	r2, r3, #1
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	0fdb      	lsrs	r3, r3, #31
 8001870:	4313      	orrs	r3, r2
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	005a      	lsls	r2, r3, #1
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	0fdb      	lsrs	r3, r3, #31
 800187c:	4313      	orrs	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <os_aes+0x7bc>
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8001892:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	3b01      	subs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1da      	bne.n	8001856 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <os_aes+0x88c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	4053      	eors	r3, r2
 80018a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001964 <os_aes+0x88c>)
 80018aa:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <os_aes+0x88c>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	4053      	eors	r3, r2
 80018b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <os_aes+0x88c>)
 80018b6:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <os_aes+0x88c>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	4053      	eors	r3, r2
 80018c0:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <os_aes+0x88c>)
 80018c2:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <os_aes+0x88c>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	4053      	eors	r3, r2
 80018cc:	4a25      	ldr	r2, [pc, #148]	@ (8001964 <os_aes+0x88c>)
 80018ce:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018d6:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 80018d8:	e4ad      	b.n	8001236 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 80018da:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <os_aes+0x88c>)
 80018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018de:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <os_aes+0x88c>)
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 80018e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <os_aes+0x88c>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 80018ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <os_aes+0x88c>)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	60d3      	str	r3, [r2, #12]
 80018f2:	e094      	b.n	8001a1e <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d034      	beq.n	8001968 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	2b10      	cmp	r3, #16
 8001902:	bf28      	it	cs
 8001904:	2310      	movcs	r3, #16
 8001906:	b29b      	uxth	r3, r3
 8001908:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e01d      	b.n	800194c <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4413      	add	r3, r2
 8001916:	7819      	ldrb	r1, [r3, #0]
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	0e1b      	lsrs	r3, r3, #24
 800191c:	b2da      	uxtb	r2, r3
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4403      	add	r3, r0
 8001924:	404a      	eors	r2, r1
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b03      	cmp	r3, #3
 8001938:	d105      	bne.n	8001946 <os_aes+0x86e>
                            a0 = a1;
 800193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3301      	adds	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3dd      	bcc.n	8001910 <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <os_aes+0x88c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	4a02      	ldr	r2, [pc, #8]	@ (8001964 <os_aes+0x88c>)
 800195c:	60d3      	str	r3, [r2, #12]
 800195e:	e05e      	b.n	8001a1e <os_aes+0x946>
 8001960:	0800f184 	.word	0x0800f184
 8001964:	200000fc 	.word	0x200000fc
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8001968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196a:	0e1b      	lsrs	r3, r3, #24
 800196c:	b2da      	uxtb	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001974:	0c1a      	lsrs	r2, r3, #16
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	0a1a      	lsrs	r2, r3, #8
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3303      	adds	r3, #3
 800198e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	0e1a      	lsrs	r2, r3, #24
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3304      	adds	r3, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	0c1a      	lsrs	r2, r3, #16
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3305      	adds	r3, #5
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	0a1a      	lsrs	r2, r3, #8
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3306      	adds	r3, #6
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3307      	adds	r3, #7
 80019bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	0e1a      	lsrs	r2, r3, #24
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	3308      	adds	r3, #8
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	0c1a      	lsrs	r2, r3, #16
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3309      	adds	r3, #9
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	0a1a      	lsrs	r2, r3, #8
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	330a      	adds	r3, #10
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	330b      	adds	r3, #11
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	0e1a      	lsrs	r2, r3, #24
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	330c      	adds	r3, #12
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	0c1a      	lsrs	r2, r3, #16
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	330d      	adds	r3, #13
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	0a1a      	lsrs	r2, r3, #8
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	330e      	adds	r3, #14
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	330f      	adds	r3, #15
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <os_aes+0x95a>
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <os_aes+0x966>
                buf += 16;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3310      	adds	r3, #16
 8001a36:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	3b10      	subs	r3, #16
 8001a3c:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f73f abba 	bgt.w	80011c4 <os_aes+0xec>
        }
        return AESAUX[0];
 8001a50:	4b02      	ldr	r3, [pc, #8]	@ (8001a5c <os_aes+0x984>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000fc 	.word	0x200000fc

08001a60 <cayenne_lpp_reset>:
#include <string.h>

#include "cayenne_lpp.h"

void cayenne_lpp_reset(cayenne_lpp_t *lpp)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    memset(lpp->buffer, 0, CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	222a      	movs	r2, #42	@ 0x2a
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00c fac9 	bl	800e006 <memset>
    lpp->cursor = 0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <cayenne_lpp_add_temperature>:
    lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_temperature(cayenne_lpp_t *lpp, uint8_t channel,
                                 float celsius)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a92:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_TEMPERATURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	2b29      	cmp	r3, #41	@ 0x29
 8001a9e:	d905      	bls.n	8001aac <cayenne_lpp_add_temperature+0x28>
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <cayenne_lpp_add_temperature+0xb0>)
 8001aa2:	4a25      	ldr	r2, [pc, #148]	@ (8001b38 <cayenne_lpp_add_temperature+0xb4>)
 8001aa4:	215f      	movs	r1, #95	@ 0x5f
 8001aa6:	4825      	ldr	r0, [pc, #148]	@ (8001b3c <cayenne_lpp_add_temperature+0xb8>)
 8001aa8:	f00c f978 	bl	800dd9c <__assert_func>

    int16_t val = celsius * 10;
 8001aac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001abc:	ee17 3a90 	vmov	r3, s15
 8001ac0:	82fb      	strh	r3, [r7, #22]
    lpp->buffer[lpp->cursor++] = channel;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	b2d1      	uxtb	r1, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	7afa      	ldrb	r2, [r7, #11]
 8001ad8:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_TEMPERATURE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	b2d1      	uxtb	r1, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2167      	movs	r1, #103	@ 0x67
 8001af0:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val >> 8;
 8001af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001af6:	121b      	asrs	r3, r3, #8
 8001af8:	b219      	sxth	r1, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	b2d0      	uxtb	r0, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	b2c9      	uxtb	r1, r1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	b2d1      	uxtb	r1, r2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001b22:	461a      	mov	r2, r3
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	b2d9      	uxtb	r1, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	5499      	strb	r1, [r3, r2]
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0800eeec 	.word	0x0800eeec
 8001b38:	08010284 	.word	0x08010284
 8001b3c:	0800ed50 	.word	0x0800ed50

08001b40 <cayenne_lpp_add_relative_humidity>:

void cayenne_lpp_add_relative_humidity(cayenne_lpp_t *lpp, uint8_t channel,
                                       float rh)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4e:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_RELATIVE_HUMIDITY_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b56:	3303      	adds	r3, #3
 8001b58:	2b29      	cmp	r3, #41	@ 0x29
 8001b5a:	d905      	bls.n	8001b68 <cayenne_lpp_add_relative_humidity+0x28>
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <cayenne_lpp_add_relative_humidity+0x8c>)
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <cayenne_lpp_add_relative_humidity+0x90>)
 8001b60:	216b      	movs	r1, #107	@ 0x6b
 8001b62:	481c      	ldr	r0, [pc, #112]	@ (8001bd4 <cayenne_lpp_add_relative_humidity+0x94>)
 8001b64:	f00c f91a 	bl	800dd9c <__assert_func>

    uint8_t val = rh * 2;
 8001b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b74:	edc7 7a00 	vstr	s15, [r7]
 8001b78:	783b      	ldrb	r3, [r7, #0]
 8001b7a:	75fb      	strb	r3, [r7, #23]
    lpp->buffer[lpp->cursor++] = channel;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	b2d1      	uxtb	r1, r2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	7afa      	ldrb	r2, [r7, #11]
 8001b92:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_RELATIVE_HUMIDITY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	b2d1      	uxtb	r1, r2
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2168      	movs	r1, #104	@ 0x68
 8001baa:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	b2d1      	uxtb	r1, r2
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	7dfa      	ldrb	r2, [r7, #23]
 8001bc2:	545a      	strb	r2, [r3, r1]
}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800ef38 	.word	0x0800ef38
 8001bd0:	080102a0 	.word	0x080102a0
 8001bd4:	0800ed50 	.word	0x0800ed50

08001bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	4a32      	ldr	r2, [pc, #200]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfa:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a26      	ldr	r2, [pc, #152]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <MX_GPIO_Init+0xe4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f648 0180 	movw	r1, #34944	@ 0x8880
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c40:	f009 f816 	bl	800ac70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	481d      	ldr	r0, [pc, #116]	@ (8001cc0 <MX_GPIO_Init+0xe8>)
 8001c4a:	f009 f811 	bl	800ac70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 8001c4e:	f648 0380 	movw	r3, #34944	@ 0x8880
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f008 fe97 	bl	800a99c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	480e      	ldr	r0, [pc, #56]	@ (8001cc0 <MX_GPIO_Init+0xe8>)
 8001c86:	f008 fe89 	bl	800a99c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001c8a:	23c0      	movs	r3, #192	@ 0xc0
 8001c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <MX_GPIO_Init+0xe8>)
 8001ca0:	f008 fe7c 	bl	800a99c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2017      	movs	r0, #23
 8001caa:	f008 fe00 	bl	800a8ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cae:	2017      	movs	r0, #23
 8001cb0:	f008 fe19 	bl	800a8e6 <HAL_NVIC_EnableIRQ>

}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <hal_io_init>:


// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfe:	f008 ffb7 	bl	800ac70 <HAL_GPIO_WritePin>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b08c      	sub	sp, #48	@ 0x30
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <hal_pin_rst+0x16>
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d116      	bne.n	8001d4e <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001d20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d24:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d38:	f008 fe30 	bl	800a99c <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d48:	f008 ff92 	bl	800ac70 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001d4c:	e00e      	b.n	8001d6c <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001d4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d52:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d66:	f008 fe19 	bl	800a99c <HAL_GPIO_Init>
    }
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	@ 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b40      	cmp	r3, #64	@ 0x40
 8001d82:	d102      	bne.n	8001d8a <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f004 f961 	bl	800604c <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	2b80      	cmp	r3, #128	@ 0x80
 8001d8e:	d102      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f004 f95b 	bl	800604c <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 8001db6:	2300      	movs	r3, #0
 8001db8:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001dba:	2300      	movs	r3, #0
 8001dbc:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001dc2:	f107 0208 	add.w	r2, r7, #8
 8001dc6:	f107 010c 	add.w	r1, r7, #12
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <hal_spi+0x38>)
 8001dd4:	f00b f87b 	bl	800cece <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001dd8:	7a3b      	ldrb	r3, [r7, #8]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000434 	.word	0x20000434

08001de8 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <hal_ticks>:

u4_t hal_ticks () {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001dfe:	f000 f8b9 	bl	8001f74 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <hal_ticks+0x58>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <hal_ticks+0x5c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <hal_ticks+0x5c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d10d      	bne.n	8001e3a <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <hal_ticks+0x5c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d106      	bne.n	8001e3a <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <hal_ticks+0x5c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	807b      	strh	r3, [r7, #2]
    		t++;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3301      	adds	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001e3a:	f000 f8ab 	bl	8001f94 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	4313      	orrs	r3, r2
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001bc 	.word	0x200001bc
 8001e54:	200004e8 	.word	0x200004e8

08001e58 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001e60:	f7ff ffca 	bl	8001df8 <hal_ticks>
 8001e64:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dc01      	bgt.n	8001e78 <deltaticks+0x20>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e008      	b.n	8001e8a <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	141b      	asrs	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <deltaticks+0x2e>
 8001e80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e84:	e001      	b.n	8001e8a <deltaticks+0x32>
    return (u2_t)d;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	b29b      	uxth	r3, r3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001e9a:	bf00      	nop
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffdb 	bl	8001e58 <deltaticks>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f9      	bne.n	8001e9c <hal_waitUntil+0xa>
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <hal_checkTimer+0x78>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <hal_checkTimer+0x78>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0202 	bic.w	r2, r2, #2
 8001eca:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffc3 	bl	8001e58 <deltaticks>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	81fb      	strh	r3, [r7, #14]
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d809      	bhi.n	8001ef0 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <hal_checkTimer+0x78>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <hal_checkTimer+0x78>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0202 	bic.w	r2, r2, #2
 8001eea:	60da      	str	r2, [r3, #12]
        return 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e018      	b.n	8001f22 <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <hal_checkTimer+0x78>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ef6:	89fa      	ldrh	r2, [r7, #14]
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <hal_checkTimer+0x78>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	440a      	add	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <hal_checkTimer+0x78>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <hal_checkTimer+0x78>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0202 	orr.w	r2, r2, #2
 8001f0e:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <hal_checkTimer+0x78>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <hal_checkTimer+0x78>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	621a      	str	r2, [r3, #32]
        return 0;
 8001f20:	2300      	movs	r3, #0
    }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200004e8 	.word	0x200004e8

08001f30 <HAL_TIM_PeriodElapsedCallback>:

//Callback deja renseigne dans le main.c
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d104      	bne.n	8001f4e <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a07      	ldr	r2, [pc, #28]	@ (8001f68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f4c:	6053      	str	r3, [r2, #4]
    }

	if(htim == &htim6) HAL_ADC_Start_IT(&hadc1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d102      	bne.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001f56:	4806      	ldr	r0, [pc, #24]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f58:	f007 fbbe 	bl	80096d8 <HAL_ADC_Start_IT>

}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200004e8 	.word	0x200004e8
 8001f68:	200001bc 	.word	0x200001bc
 8001f6c:	2000049c 	.word	0x2000049c
 8001f70:	20000098 	.word	0x20000098

08001f74 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <hal_disableIRQs+0x1c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a03      	ldr	r2, [pc, #12]	@ (8001f90 <hal_disableIRQs+0x1c>)
 8001f84:	6013      	str	r3, [r2, #0]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	200001bc 	.word	0x200001bc

08001f94 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001f98:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <hal_enableIRQs+0x24>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	4a06      	ldr	r2, [pc, #24]	@ (8001fb8 <hal_enableIRQs+0x24>)
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <hal_enableIRQs+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001faa:	b662      	cpsie	i
}
 8001fac:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	200001bc 	.word	0x200001bc

08001fbc <hal_sleep>:

void hal_sleep () {
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001fc0:	bf30      	wfi
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4807      	ldr	r0, [pc, #28]	@ (8001ff4 <hal_init+0x28>)
 8001fd6:	f00c f816 	bl	800e006 <memset>
    hal_disableIRQs();
 8001fda:	f7ff ffcb 	bl	8001f74 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 8001fde:	f7ff fe71 	bl	8001cc4 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 8001fe2:	f7ff fedc 	bl	8001d9e <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 8001fe6:	f7ff feff 	bl	8001de8 <hal_time_init>
    hal_enableIRQs();
 8001fea:	f7ff ffd3 	bl	8001f94 <hal_enableIRQs>
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200001bc 	.word	0x200001bc

08001ff8 <hal_failed>:

void hal_failed () {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001ffc:	f7ff ffba 	bl	8001f74 <hal_disableIRQs>
    hal_sleep();
 8002000:	f7ff ffdc 	bl	8001fbc <hal_sleep>
    while(1);
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <hal_failed+0xc>

08002008 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <MX_I2C1_Init+0x74>)
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <MX_I2C1_Init+0x78>)
 8002010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_I2C1_Init+0x74>)
 8002014:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <MX_I2C1_Init+0x7c>)
 8002016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <MX_I2C1_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_I2C1_Init+0x74>)
 8002020:	2201      	movs	r2, #1
 8002022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_I2C1_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_I2C1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_I2C1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002042:	480e      	ldr	r0, [pc, #56]	@ (800207c <MX_I2C1_Init+0x74>)
 8002044:	f008 fe44 	bl	800acd0 <HAL_I2C_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800204e:	f003 fa95 	bl	800557c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002052:	2100      	movs	r1, #0
 8002054:	4809      	ldr	r0, [pc, #36]	@ (800207c <MX_I2C1_Init+0x74>)
 8002056:	f009 fcb3 	bl	800b9c0 <HAL_I2CEx_ConfigAnalogFilter>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002060:	f003 fa8c 	bl	800557c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002064:	2100      	movs	r1, #0
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_I2C1_Init+0x74>)
 8002068:	f009 fcf5 	bl	800ba56 <HAL_I2CEx_ConfigDigitalFilter>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002072:	f003 fa83 	bl	800557c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200001c4 	.word	0x200001c4
 8002080:	40005400 	.word	0x40005400
 8002084:	10d19ce4 	.word	0x10d19ce4

08002088 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09e      	sub	sp, #120	@ 0x78
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	2254      	movs	r2, #84	@ 0x54
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00b ffac 	bl	800e006 <memset>
  if(i2cHandle->Instance==I2C1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002130 <HAL_I2C_MspInit+0xa8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d137      	bne.n	8002128 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020b8:	2340      	movs	r3, #64	@ 0x40
 80020ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020bc:	2300      	movs	r3, #0
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00a fb77 	bl	800c7b8 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020d0:	f003 fa54 	bl	800557c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <HAL_I2C_MspInit+0xac>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d8:	4a16      	ldr	r2, [pc, #88]	@ (8002134 <HAL_I2C_MspInit+0xac>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_I2C_MspInit+0xac>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f2:	2312      	movs	r3, #18
 80020f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020fe:	2304      	movs	r3, #4
 8002100:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210c:	f008 fc46 	bl	800a99c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <HAL_I2C_MspInit+0xac>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <HAL_I2C_MspInit+0xac>)
 8002116:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800211a:	6593      	str	r3, [r2, #88]	@ 0x58
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_I2C_MspInit+0xac>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002128:	bf00      	nop
 800212a:	3778      	adds	r7, #120	@ 0x78
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40005400 	.word	0x40005400
 8002134:	40021000 	.word	0x40021000

08002138 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	80fb      	strh	r3, [r7, #6]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	b29b      	uxth	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b29b      	uxth	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	460a      	mov	r2, r1
 80021aa:	80fb      	strh	r3, [r7, #6]
 80021ac:	4613      	mov	r3, r2
 80021ae:	717b      	strb	r3, [r7, #5]
 80021b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	797b      	ldrb	r3, [r7, #5]
 80021bc:	015b      	lsls	r3, r3, #5
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	09db      	lsrs	r3, r3, #7
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	6039      	str	r1, [r7, #0]
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002206:	b21a      	sxth	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	01db      	lsls	r3, r3, #7
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21b      	sxth	r3, r3
 8002212:	b29b      	uxth	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	b29b      	uxth	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	6039      	str	r1, [r7, #0]
 8002248:	80fb      	strh	r3, [r7, #6]
 800224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	b21a      	sxth	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21b      	sxth	r3, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	3301      	adds	r3, #1
 800227a:	4a04      	ldr	r2, [pc, #16]	@ (800228c <updr2rps+0x20>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	080102c4 	.word	0x080102c4

08002290 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ffe5 	bl	800226c <updr2rps>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ffa3 	bl	80021f2 <setNocrc>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <decDR+0x2c>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	2bff      	cmp	r3, #255	@ 0xff
 80022ca:	d003      	beq.n	80022d4 <decDR+0x1c>
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e000      	b.n	80022d6 <decDR+0x1e>
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	080102c4 	.word	0x080102c4

080022e8 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a06      	ldr	r2, [pc, #24]	@ (8002310 <validDR+0x28>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	2bff      	cmp	r3, #255	@ 0xff
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	080102c4 	.word	0x080102c4

08002314 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	460a      	mov	r2, r1
 800231e:	71fb      	strb	r3, [r7, #7]
 8002320:	4613      	mov	r3, r2
 8002322:	71bb      	strb	r3, [r7, #6]
 8002324:	e005      	b.n	8002332 <lowerDR+0x1e>
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ffc5 	bl	80022b8 <decDR>
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	71ba      	strb	r2, [r7, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f4      	bne.n	8002326 <lowerDR+0x12>
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b21a      	sxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21b      	sxth	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b21b      	sxth	r3, r3
 8002362:	b29b      	uxth	r3, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3301      	adds	r3, #1
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3302      	adds	r3, #2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3303      	adds	r3, #3
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	4313      	orrs	r3, r2
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3303      	adds	r3, #3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3302      	adds	r3, #2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	4313      	orrs	r3, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3301      	adds	r3, #1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	4313      	orrs	r3, r2
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	0a1a      	lsrs	r2, r3, #8
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3301      	adds	r3, #1
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	0c1a      	lsrs	r2, r3, #16
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3302      	adds	r3, #2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	0e1a      	lsrs	r2, r3, #24
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3303      	adds	r3, #3
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3303      	adds	r3, #3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	0a1a      	lsrs	r2, r3, #8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3302      	adds	r3, #2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	0c1a      	lsrs	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	0e1b      	lsrs	r3, r3, #24
 8002484:	b2da      	uxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	701a      	strb	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 800249a:	23ff      	movs	r3, #255	@ 0xff
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 80024a6:	b480      	push	{r7}
 80024a8:	b087      	sub	sp, #28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 80024b4:	f241 0321 	movw	r3, #4129	@ 0x1021
 80024b8:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	e026      	b.n	800250e <os_crc16+0x68>
        remainder ^= data[i] << 8;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024d0:	4053      	eors	r3, r2
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80024d6:	2308      	movs	r3, #8
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e012      	b.n	8002502 <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 80024dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da08      	bge.n	80024f6 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 80024e4:	8afb      	ldrh	r3, [r7, #22]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	b21a      	sxth	r2, r3
 80024ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024ee:	4053      	eors	r3, r2
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	82fb      	strh	r3, [r7, #22]
 80024f4:	e002      	b.n	80024fc <os_crc16+0x56>
            else 
                remainder <<= 1;
 80024f6:	8afb      	ldrh	r3, [r7, #22]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	3b01      	subs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e9      	bne.n	80024dc <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	3301      	adds	r3, #1
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d3d4      	bcc.n	80024c0 <os_crc16+0x1a>
        }
    }
    return remainder;
 8002516:	8afb      	ldrh	r3, [r7, #22]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 8002532:	2210      	movs	r2, #16
 8002534:	2100      	movs	r1, #0
 8002536:	4810      	ldr	r0, [pc, #64]	@ (8002578 <micB0+0x54>)
 8002538:	f00b fd65 	bl	800e006 <memset>
    AESaux[0]  = 0x49;
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <micB0+0x54>)
 800253e:	2249      	movs	r2, #73	@ 0x49
 8002540:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <micB0+0x58>)
 8002550:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8002552:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <micB0+0x5c>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <micB0+0x60>)
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff57 	bl	8002412 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8002564:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <micB0+0x64>)
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff52 	bl	8002412 <os_wlsbf4>
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200000fc 	.word	0x200000fc
 800257c:	20000101 	.word	0x20000101
 8002580:	2000010b 	.word	0x2000010b
 8002584:	20000102 	.word	0x20000102
 8002588:	20000106 	.word	0x20000106

0800258c <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68b8      	ldr	r0, [r7, #8]
 80025a2:	f7ff ffbf 	bl	8002524 <micB0>
    os_copyMem(AESkey,key,16);
 80025a6:	2210      	movs	r2, #16
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <aes_verifyMic+0x54>)
 80025ac:	f00b fda7 	bl	800e0fe <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6a39      	ldr	r1, [r7, #32]
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7fe fd8d 	bl	80010d8 <os_aes>
 80025be:	4604      	mov	r4, r0
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	6a3a      	ldr	r2, [r7, #32]
 80025c4:	4413      	add	r3, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff feef 	bl	80023aa <os_rmsbf4>
 80025cc:	4603      	mov	r3, r0
 80025ce:	429c      	cmp	r4, r3
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	2000010c 	.word	0x2000010c

080025e4 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	68b8      	ldr	r0, [r7, #8]
 80025fa:	f7ff ff93 	bl	8002524 <micB0>
    os_copyMem(AESkey,key,16);
 80025fe:	2210      	movs	r2, #16
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	480b      	ldr	r0, [pc, #44]	@ (8002630 <aes_appendMic+0x4c>)
 8002604:	f00b fd7b 	bl	800e0fe <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	18d4      	adds	r4, r2, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	2002      	movs	r0, #2
 8002618:	f7fe fd5e 	bl	80010d8 <os_aes>
 800261c:	4603      	mov	r3, r0
 800261e:	4619      	mov	r1, r3
 8002620:	4620      	mov	r0, r4
 8002622:	f7ff ff17 	bl	8002454 <os_wmsbf4>
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	2000010c 	.word	0x2000010c

08002634 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800263e:	480b      	ldr	r0, [pc, #44]	@ (800266c <aes_appendMic0+0x38>)
 8002640:	f002 fe38 	bl	80052b4 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	18d4      	adds	r4, r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	200a      	movs	r0, #10
 8002654:	f7fe fd40 	bl	80010d8 <os_aes>
 8002658:	4603      	mov	r3, r0
 800265a:	4619      	mov	r1, r3
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff fef9 	bl	8002454 <os_wmsbf4>
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	2000010c 	.word	0x2000010c

08002670 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800267a:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <aes_verifyMic0+0x40>)
 800267c:	f002 fe1a 	bl	80052b4 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	200a      	movs	r0, #10
 800268a:	f7fe fd25 	bl	80010d8 <os_aes>
 800268e:	4604      	mov	r4, r0
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fe87 	bl	80023aa <os_rmsbf4>
 800269c:	4603      	mov	r3, r0
 800269e:	429c      	cmp	r4, r3
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	2000010c 	.word	0x2000010c

080026b4 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80026be:	4807      	ldr	r0, [pc, #28]	@ (80026dc <aes_encrypt+0x28>)
 80026c0:	f002 fdf8 	bl	80052b4 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fd03 	bl	80010d8 <os_aes>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000010c 	.word	0x2000010c

080026e0 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dd29      	ble.n	8002748 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 80026f4:	2210      	movs	r2, #16
 80026f6:	2100      	movs	r1, #0
 80026f8:	4815      	ldr	r0, [pc, #84]	@ (8002750 <aes_cipher+0x70>)
 80026fa:	f00b fc84 	bl	800e006 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <aes_cipher+0x74>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <aes_cipher+0x70>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <aes_cipher+0x78>)
 8002718:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <aes_cipher+0x7c>)
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fe77 	bl	8002412 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <aes_cipher+0x80>)
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe72 	bl	8002412 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 800272e:	2210      	movs	r2, #16
 8002730:	68f9      	ldr	r1, [r7, #12]
 8002732:	480c      	ldr	r0, [pc, #48]	@ (8002764 <aes_cipher+0x84>)
 8002734:	f00b fce3 	bl	800e0fe <memcpy>
    os_aes(AES_CTR, payload, len);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	2004      	movs	r0, #4
 8002742:	f7fe fcc9 	bl	80010d8 <os_aes>
 8002746:	e000      	b.n	800274a <aes_cipher+0x6a>
        return;
 8002748:	bf00      	nop
}
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200000fc 	.word	0x200000fc
 8002754:	2000010b 	.word	0x2000010b
 8002758:	20000101 	.word	0x20000101
 800275c:	20000102 	.word	0x20000102
 8002760:	20000106 	.word	0x20000106
 8002764:	2000010c 	.word	0x2000010c

08002768 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4603      	mov	r3, r0
 8002776:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8002778:	2210      	movs	r2, #16
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f00b fc42 	bl	800e006 <memset>
    nwkkey[0] = 0x01;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	2206      	movs	r2, #6
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	4618      	mov	r0, r3
 8002792:	f00b fcb4 	bl	800e0fe <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3307      	adds	r3, #7
 800279a:	89fa      	ldrh	r2, [r7, #14]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fe20 	bl	80023e4 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 80027a4:	2210      	movs	r2, #16
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	f00b fca8 	bl	800e0fe <memcpy>
    artkey[0] = 0x02;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 80027b4:	4809      	ldr	r0, [pc, #36]	@ (80027dc <aes_sessKeys+0x74>)
 80027b6:	f002 fd7d 	bl	80052b4 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 80027ba:	2210      	movs	r2, #16
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fc8a 	bl	80010d8 <os_aes>
    os_getDevKey(AESkey);
 80027c4:	4805      	ldr	r0, [pc, #20]	@ (80027dc <aes_sessKeys+0x74>)
 80027c6:	f002 fd75 	bl	80052b4 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 80027ca:	2210      	movs	r2, #16
 80027cc:	6839      	ldr	r1, [r7, #0]
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fc82 	bl	80010d8 <os_aes>
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000010c 	.word	0x2000010c

080027e0 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fca3 	bl	8002138 <getSf>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461c      	mov	r4, r3
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fcad 	bl	8002158 <getBw>
 80027fe:	4603      	mov	r3, r0
 8002800:	4619      	mov	r1, r3
 8002802:	4a06      	ldr	r2, [pc, #24]	@ (800281c <getSensitivity+0x3c>)
 8002804:	4623      	mov	r3, r4
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4423      	add	r3, r4
 800280a:	4413      	add	r3, r2
 800280c:	440b      	add	r3, r1
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	3b8d      	subs	r3, #141	@ 0x8d
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}
 800281a:	bf00      	nop
 800281c:	080102e0 	.word	0x080102e0

08002820 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	460a      	mov	r2, r1
 800282a:	80fb      	strh	r3, [r7, #6]
 800282c:	4613      	mov	r3, r2
 800282e:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc90 	bl	8002158 <getBw>
 8002838:	4603      	mov	r3, r0
 800283a:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fc7a 	bl	8002138 <getSf>
 8002844:	4603      	mov	r3, r0
 8002846:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8002848:	7abb      	ldrb	r3, [r7, #10]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 800284e:	797b      	ldrb	r3, [r7, #5]
 8002850:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8002852:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	4a3c      	ldr	r2, [pc, #240]	@ (800294c <calcAirTime+0x12c>)
 800285c:	fb82 1203 	smull	r1, r2, r2, r3
 8002860:	1312      	asrs	r2, r2, #12
 8002862:	17db      	asrs	r3, r3, #31
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	e06d      	b.n	8002944 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8002868:	7abb      	ldrb	r3, [r7, #10]
 800286a:	3306      	adds	r3, #6
 800286c:	b2db      	uxtb	r3, r3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8002872:	7abb      	ldrb	r3, [r7, #10]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d901      	bls.n	800287c <calcAirTime+0x5c>
 8002878:	2308      	movs	r3, #8
 800287a:	e000      	b.n	800287e <calcAirTime+0x5e>
 800287c:	2300      	movs	r3, #0
 800287e:	7dfa      	ldrb	r2, [r7, #23]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8002884:	797b      	ldrb	r3, [r7, #5]
 8002886:	00da      	lsls	r2, r3, #3
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f103 041c 	add.w	r4, r3, #28
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fc9d 	bl	80021d2 <getNocrc>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <calcAirTime+0x82>
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <calcAirTime+0x84>
 80028a2:	2310      	movs	r3, #16
 80028a4:	441c      	add	r4, r3
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fcb9 	bl	8002220 <getIh>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <calcAirTime+0x98>
 80028b4:	2314      	movs	r3, #20
 80028b6:	e000      	b.n	80028ba <calcAirTime+0x9a>
 80028b8:	2300      	movs	r3, #0
 80028ba:	1ae3      	subs	r3, r4, r3
 80028bc:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dd15      	ble.n	80028f0 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 80028c4:	7a7a      	ldrb	r2, [r7, #9]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	1e5a      	subs	r2, r3, #1
 80028cc:	7a7b      	ldrb	r3, [r7, #9]
 80028ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80028d2:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc50 	bl	800217c <getCr>
 80028dc:	4603      	mov	r3, r0
 80028de:	1d5a      	adds	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	613b      	str	r3, [r7, #16]
        tmp += 8;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3308      	adds	r3, #8
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e001      	b.n	80028f4 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 80028f0:	2308      	movs	r3, #8
 80028f2:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	3331      	adds	r3, #49	@ 0x31
 80028fa:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 80028fc:	7aba      	ldrb	r2, [r7, #10]
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3301      	adds	r3, #1
 8002906:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8002908:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800290c:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d907      	bls.n	8002924 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	3b04      	subs	r3, #4
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	fa42 f303 	asr.w	r3, r2, r3
 800291e:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8002920:	2304      	movs	r3, #4
 8002922:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002930:	fb03 f202 	mul.w	r2, r3, r2
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0fd9      	lsrs	r1, r3, #31
 8002938:	440b      	add	r3, r1
 800293a:	105b      	asrs	r3, r3, #1
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	14f8b589 	.word	0x14f8b589

08002950 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	460a      	mov	r2, r1
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	4613      	mov	r3, r2
 800295e:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d108      	bne.n	8002978 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <calcRxWindow+0xa0>)
 8002968:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800296c:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 800296e:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <calcRxWindow+0xa0>)
 8002970:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e011      	b.n	800299c <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <calcRxWindow+0xa0>)
 800297a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800297e:	461a      	mov	r2, r3
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	11db      	asrs	r3, r3, #7
 8002988:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 800298a:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <calcRxWindow+0xa0>)
 800298c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002990:	461a      	mov	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	11db      	asrs	r3, r3, #7
 800299a:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 800299c:	2305      	movs	r3, #5
 800299e:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <calcRxWindow+0xa0>)
 80029a2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <calcRxWindow+0xa0>)
 80029aa:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <calcRxWindow+0xa4>)
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3305      	adds	r3, #5
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <calcRxWindow+0xa0>)
 80029ce:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	3b08      	subs	r3, #8
 80029d4:	79ba      	ldrb	r2, [r7, #6]
 80029d6:	4907      	ldr	r1, [pc, #28]	@ (80029f4 <calcRxWindow+0xa4>)
 80029d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80029dc:	fb03 f202 	mul.w	r2, r3, r2
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4413      	add	r3, r2
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	20000218 	.word	0x20000218
 80029f4:	08010304 	.word	0x08010304

080029f8 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 80029f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fc:	b087      	sub	sp, #28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4606      	mov	r6, r0
 8002a02:	4608      	mov	r0, r1
 8002a04:	4631      	mov	r1, r6
 8002a06:	73f9      	strb	r1, [r7, #15]
 8002a08:	4601      	mov	r1, r0
 8002a0a:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8002a0c:	7bb9      	ldrb	r1, [r7, #14]
 8002a0e:	2900      	cmp	r1, #0
 8002a10:	d014      	beq.n	8002a3c <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 8002a12:	493b      	ldr	r1, [pc, #236]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002a14:	2000      	movs	r0, #0
 8002a16:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8002a1a:	4939      	ldr	r1, [pc, #228]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 8002a22:	4937      	ldr	r1, [pc, #220]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002a24:	2000      	movs	r0, #0
 8002a26:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002a2a:	4935      	ldr	r1, [pc, #212]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002a2c:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8002a30:	f041 010c 	orr.w	r1, r1, #12
 8002a34:	b2c8      	uxtb	r0, r1
 8002a36:	4932      	ldr	r1, [pc, #200]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002a38:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8002a3c:	2142      	movs	r1, #66	@ 0x42
 8002a3e:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8002a40:	7bf9      	ldrb	r1, [r7, #15]
 8002a42:	2000      	movs	r0, #0
 8002a44:	460c      	mov	r4, r1
 8002a46:	4605      	mov	r5, r0
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f04f 0a00 	mov.w	sl, #0
 8002a50:	f04f 0b00 	mov.w	fp, #0
 8002a54:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a58:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a5c:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a60:	4650      	mov	r0, sl
 8002a62:	4659      	mov	r1, fp
 8002a64:	1b02      	subs	r2, r0, r4
 8002a66:	eb61 0305 	sbc.w	r3, r1, r5
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	0099      	lsls	r1, r3, #2
 8002a74:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a78:	0090      	lsls	r0, r2, #2
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	eb12 0804 	adds.w	r8, r2, r4
 8002a82:	eb43 0905 	adc.w	r9, r3, r5
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8002a92:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002a96:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4642      	mov	r2, r8
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8002aa6:	1851      	adds	r1, r2, r1
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	f143 0300 	adc.w	r3, r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002abc:	f7fd fff6 	bl	8000aac <__aeabi_ldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3305      	adds	r3, #5
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002ad2:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002ad8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002adc:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002ae2:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8002ae6:	3b08      	subs	r3, #8
 8002ae8:	6979      	ldr	r1, [r7, #20]
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a03      	ldr	r2, [pc, #12]	@ (8002b00 <calcBcnRxWindowFromMillis+0x108>)
 8002af2:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b00:	20000218 	.word	0x20000218

08002b04 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	2100      	movs	r1, #0
 8002b10:	482e      	ldr	r0, [pc, #184]	@ (8002bcc <rxschedInit+0xc8>)
 8002b12:	f00b fa78 	bl	800e006 <memset>
    os_clearMem(LMIC.frame+8,8);
 8002b16:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <rxschedInit+0xcc>)
 8002b18:	2208      	movs	r2, #8
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00b fa72 	bl	800e006 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8002b22:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd4 <rxschedInit+0xd0>)
 8002b24:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b28:	4619      	mov	r1, r3
 8002b2a:	482b      	ldr	r0, [pc, #172]	@ (8002bd8 <rxschedInit+0xd4>)
 8002b2c:	f7ff fc71 	bl	8002412 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8002b30:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <rxschedInit+0xd8>)
 8002b32:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <rxschedInit+0xd0>)
 8002b34:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7ff fc69 	bl	8002412 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8002b40:	2210      	movs	r2, #16
 8002b42:	4925      	ldr	r1, [pc, #148]	@ (8002bd8 <rxschedInit+0xd4>)
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe fac7 	bl	80010d8 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8002b50:	4821      	ldr	r0, [pc, #132]	@ (8002bd8 <rxschedInit+0xd4>)
 8002b52:	f7ff fbf8 	bl	8002346 <os_rlsbf2>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	f1c3 0307 	rsb	r3, r3, #7
 8002b60:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002b64:	fa42 f303 	asr.w	r3, r2, r3
 8002b68:	400b      	ands	r3, r1
 8002b6a:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <rxschedInit+0xd0>)
 8002b6e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 8002b72:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8002b7e:	440b      	add	r3, r1
 8002b80:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8002b84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b88:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685c      	ldr	r4, [r3, #4]
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7ff fecf 	bl	8002950 <calcRxWindow>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	1ae2      	subs	r2, r4, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <rxschedInit+0xd0>)
 8002bbc:	7c1a      	ldrb	r2, [r3, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	70da      	strb	r2, [r3, #3]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000010c 	.word	0x2000010c
 8002bd0:	20000368 	.word	0x20000368
 8002bd4:	20000218 	.word	0x20000218
 8002bd8:	20000360 	.word	0x20000360
 8002bdc:	20000364 	.word	0x20000364

08002be0 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db01      	blt.n	8002bfa <rxschedNext+0x1a>
        return 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e03a      	b.n	8002c70 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	789b      	ldrb	r3, [r3, #2]
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da01      	bge.n	8002c0c <rxschedNext+0x2c>
        return 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e031      	b.n	8002c70 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	461a      	mov	r2, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	4093      	lsls	r3, r2
 8002c16:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	709a      	strb	r2, [r3, #2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	789b      	ldrb	r3, [r3, #2]
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da01      	bge.n	8002c34 <rxschedNext+0x54>
        return 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e01d      	b.n	8002c70 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	049b      	lsls	r3, r3, #18
 8002c42:	11db      	asrs	r3, r3, #7
 8002c44:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	7bbb      	ldrb	r3, [r7, #14]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3302      	adds	r3, #2
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	4610      	mov	r0, r2
 8002c5a:	f7ff fe79 	bl	8002950 <calcRxWindow>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <rxschedNext+0x98>)
 8002c68:	7c1a      	ldrb	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	70da      	strb	r2, [r3, #3]
    goto again;
 8002c6e:	e7bc      	b.n	8002bea <rxschedNext+0xa>
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000218 	.word	0x20000218

08002c7c <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8002c86:	f003 f9bb 	bl	8006000 <radio_rand1>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	b21c      	sxth	r4, r3
 8002c90:	f003 f9b6 	bl	8006000 <radio_rand1>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	4323      	orrs	r3, r4
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002ca8:	dd0b      	ble.n	8002cc2 <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	4a11      	ldr	r2, [pc, #68]	@ (8002cf4 <rndDelay+0x78>)
 8002cae:	fba2 1203 	umull	r1, r2, r2, r3
 8002cb2:	0ad2      	lsrs	r2, r2, #11
 8002cb4:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002cb8:	fb01 f202 	mul.w	r2, r1, r2
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002cc8:	897b      	ldrh	r3, [r7, #10]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cd2:	fb01 f202 	mul.w	r2, r1, r2
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    return delay;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	10624dd3 	.word	0x10624dd3

08002cf8 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ffb8 	bl	8002c7c <rndDelay>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002d14:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <txDelay+0x58>)
 8002d16:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <txDelay+0x34>
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <txDelay+0x58>)
 8002d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dd0c      	ble.n	8002d46 <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002d2c:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <txDelay+0x58>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <txDelay+0x58>)
 8002d36:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <txDelay+0x58>)
 8002d42:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000218 	.word	0x20000218

08002d54 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <setDrJoin+0x24>)
 8002d66:	79bb      	ldrb	r3, [r7, #6]
 8002d68:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	20000218 	.word	0x20000218

08002d7c <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
 8002d86:	460b      	mov	r3, r1
 8002d88:	71bb      	strb	r3, [r7, #6]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002d8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d92:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002d96:	d003      	beq.n	8002da0 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002d98:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd4 <setDrTxpow+0x58>)
 8002d9a:	797b      	ldrb	r3, [r7, #5]
 8002d9c:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <setDrTxpow+0x58>)
 8002da2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002da6:	79ba      	ldrb	r2, [r7, #6]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d00c      	beq.n	8002dc6 <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002dac:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <setDrTxpow+0x58>)
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002db4:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <setDrTxpow+0x58>)
 8002db6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002dba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <setDrTxpow+0x58>)
 8002dc2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000218 	.word	0x20000218

08002dd8 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	2100      	movs	r1, #0
 8002de6:	483a      	ldr	r0, [pc, #232]	@ (8002ed0 <initDefaultChannels+0xf8>)
 8002de8:	f00b f90d 	bl	800e006 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002dec:	2220      	movs	r2, #32
 8002dee:	2100      	movs	r1, #0
 8002df0:	4838      	ldr	r0, [pc, #224]	@ (8002ed4 <initDefaultChannels+0xfc>)
 8002df2:	f00b f908 	bl	800e006 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002df6:	2220      	movs	r2, #32
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4837      	ldr	r0, [pc, #220]	@ (8002ed8 <initDefaultChannels+0x100>)
 8002dfc:	f00b f903 	bl	800e006 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002e00:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <initDefaultChannels+0x104>)
 8002e02:	223f      	movs	r2, #63	@ 0x3f
 8002e04:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <initDefaultChannels+0x3a>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <initDefaultChannels+0x3c>
 8002e12:	2306      	movs	r3, #6
 8002e14:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002e16:	2300      	movs	r3, #0
 8002e18:	73bb      	strb	r3, [r7, #14]
 8002e1a:	e014      	b.n	8002e46 <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	492f      	ldr	r1, [pc, #188]	@ (8002ee0 <initDefaultChannels+0x108>)
 8002e22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002e26:	492d      	ldr	r1, [pc, #180]	@ (8002edc <initDefaultChannels+0x104>)
 8002e28:	3310      	adds	r3, #16
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	@ (8002edc <initDefaultChannels+0x104>)
 8002e32:	3340      	adds	r3, #64	@ 0x40
 8002e34:	213f      	movs	r1, #63	@ 0x3f
 8002e36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002e3a:	7bbb      	ldrb	r3, [r7, #14]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	73bb      	strb	r3, [r7, #14]
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	3301      	adds	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d9e7      	bls.n	8002e1c <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002e4c:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <initDefaultChannels+0x104>)
 8002e4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e52:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002e54:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <initDefaultChannels+0x104>)
 8002e56:	220e      	movs	r2, #14
 8002e58:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002e5c:	f003 f8d0 	bl	8006000 <radio_rand1>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <initDefaultChannels+0x104>)
 8002e6a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <initDefaultChannels+0x104>)
 8002e70:	2264      	movs	r2, #100	@ 0x64
 8002e72:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <initDefaultChannels+0x104>)
 8002e76:	220e      	movs	r2, #14
 8002e78:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002e7c:	f003 f8c0 	bl	8006000 <radio_rand1>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <initDefaultChannels+0x104>)
 8002e8a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 8002e8e:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <initDefaultChannels+0x104>)
 8002e90:	220a      	movs	r2, #10
 8002e92:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <initDefaultChannels+0x104>)
 8002e96:	221b      	movs	r2, #27
 8002e98:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002e9c:	f003 f8b0 	bl	8006000 <radio_rand1>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <initDefaultChannels+0x104>)
 8002eaa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 8002eae:	f002 fb7d 	bl	80055ac <os_getTime>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <initDefaultChannels+0x104>)
 8002eb6:	6353      	str	r3, [r2, #52]	@ 0x34
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <initDefaultChannels+0x104>)
 8002eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <initDefaultChannels+0x104>)
 8002ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <initDefaultChannels+0x104>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002ec4:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <initDefaultChannels+0x104>)
 8002ec6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000258 	.word	0x20000258
 8002ed4:	20000298 	.word	0x20000298
 8002ed8:	20000238 	.word	0x20000238
 8002edc:	20000218 	.word	0x20000218
 8002ee0:	08010324 	.word	0x08010324

08002ee4 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6039      	str	r1, [r7, #0]
 8002eec:	4611      	mov	r1, r2
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	71fb      	strb	r3, [r7, #7]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	80bb      	strh	r3, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	d901      	bls.n	8002f06 <LMIC_setupChannel+0x22>
        return 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e054      	b.n	8002fb0 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 8002f06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d121      	bne.n	8002f54 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4a2a      	ldr	r2, [pc, #168]	@ (8002fbc <LMIC_setupChannel+0xd8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d908      	bls.n	8002f2a <LMIC_setupChannel+0x46>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4a29      	ldr	r2, [pc, #164]	@ (8002fc0 <LMIC_setupChannel+0xdc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d804      	bhi.n	8002f2a <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	e021      	b.n	8002f6e <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4a25      	ldr	r2, [pc, #148]	@ (8002fc4 <LMIC_setupChannel+0xe0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d903      	bls.n	8002f3a <LMIC_setupChannel+0x56>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <LMIC_setupChannel+0xe4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d907      	bls.n	8002f4a <LMIC_setupChannel+0x66>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <LMIC_setupChannel+0xe8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d315      	bcc.n	8002f6e <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <LMIC_setupChannel+0xec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d811      	bhi.n	8002f6e <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	e00c      	b.n	8002f6e <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8002f54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	dd01      	ble.n	8002f60 <LMIC_setupChannel+0x7c>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e027      	b.n	8002fb0 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	4918      	ldr	r1, [pc, #96]	@ (8002fd4 <LMIC_setupChannel+0xf0>)
 8002f72:	3310      	adds	r3, #16
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <LMIC_setupChannel+0xa0>
 8002f80:	88ba      	ldrh	r2, [r7, #4]
 8002f82:	e000      	b.n	8002f86 <LMIC_setupChannel+0xa2>
 8002f84:	223f      	movs	r2, #63	@ 0x3f
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4912      	ldr	r1, [pc, #72]	@ (8002fd4 <LMIC_setupChannel+0xf0>)
 8002f8a:	3340      	adds	r3, #64	@ 0x40
 8002f8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 8002f90:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <LMIC_setupChannel+0xf0>)
 8002f92:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <LMIC_setupChannel+0xf0>)
 8002faa:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	33d1fdbf 	.word	0x33d1fdbf
 8002fc0:	33d5ce50 	.word	0x33d5ce50
 8002fc4:	33bca0ff 	.word	0x33bca0ff
 8002fc8:	33c5c8c0 	.word	0x33c5c8c0
 8002fcc:	33d691a0 	.word	0x33d691a0
 8002fd0:	33db2580 	.word	0x33db2580
 8002fd4:	20000218 	.word	0x20000218

08002fd8 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f9c3 	bl	8002370 <os_rlsbf4>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	2264      	movs	r2, #100	@ 0x64
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <convFreq+0x3c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d303      	bcc.n	8003006 <convFreq+0x2e>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a05      	ldr	r2, [pc, #20]	@ (8003018 <convFreq+0x40>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <convFreq+0x32>
        freq = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
    return freq;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	337055c0 	.word	0x337055c0
 8003018:	33db2580 	.word	0x33db2580

0800301c <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	460a      	mov	r2, r1
 8003026:	71fb      	strb	r3, [r7, #7]
 8003028:	4613      	mov	r3, r2
 800302a:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <mapChannels+0x2c>
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <mapChannels+0x2c>
 8003038:	88ba      	ldrh	r2, [r7, #4]
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <mapChannels+0x90>)
 800303c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8003040:	43db      	mvns	r3, r3
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <mapChannels+0x30>
        return 0;  // illegal input
 8003048:	2300      	movs	r3, #0
 800304a:	e028      	b.n	800309e <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e01d      	b.n	800308e <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 8003052:	88ba      	ldrh	r2, [r7, #4]
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	fa42 f303 	asr.w	r3, r2, r3
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <mapChannels+0x6c>
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	4a11      	ldr	r2, [pc, #68]	@ (80030ac <mapChannels+0x90>)
 8003066:	3310      	adds	r3, #16
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2201      	movs	r2, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	b21b      	sxth	r3, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	b21a      	sxth	r2, r3
 800307e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003082:	4013      	ands	r3, r2
 8003084:	b21b      	sxth	r3, r3
 8003086:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d9de      	bls.n	8003052 <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 8003094:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <mapChannels+0x90>)
 8003096:	88bb      	ldrh	r3, [r7, #4]
 8003098:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000218 	.word	0x20000218

080030b0 <updateTx>:


static void updateTx (ostime_t txbeg) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 80030b8:	4b21      	ldr	r3, [pc, #132]	@ (8003140 <updateTx+0x90>)
 80030ba:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80030be:	4a20      	ldr	r2, [pc, #128]	@ (8003140 <updateTx+0x90>)
 80030c0:	3310      	adds	r3, #16
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <updateTx+0x90>)
 80030ca:	89db      	ldrh	r3, [r3, #14]
 80030cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003140 <updateTx+0x90>)
 80030ce:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fba3 	bl	8002820 <calcAirTime>
 80030da:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3304      	adds	r3, #4
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <updateTx+0x90>)
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <updateTx+0x90>)
 80030f4:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80030fc:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <updateTx+0x90>)
 80030fe:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fb03 f202 	mul.w	r2, r3, r2
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	441a      	add	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <updateTx+0x90>)
 8003116:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 800311e:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <updateTx+0x90>)
 8003120:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8003124:	461a      	mov	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fa03 f202 	lsl.w	r2, r3, r2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	4a03      	ldr	r2, [pc, #12]	@ (8003140 <updateTx+0x90>)
 8003132:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000218 	.word	0x20000218

08003144 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 800314c:	230f      	movs	r3, #15
 800314e:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4b48      	ldr	r3, [pc, #288]	@ (8003274 <nextTx+0x130>)
 8003154:	4413      	add	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 800315c:	2300      	movs	r3, #0
 800315e:	73bb      	strb	r3, [r7, #14]
 8003160:	e01d      	b.n	800319e <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 8003162:	7dfa      	ldrb	r2, [r7, #23]
 8003164:	7bbb      	ldrb	r3, [r7, #14]
 8003166:	fa42 f303 	asr.w	r3, r2, r3
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <nextTx+0x54>
 8003172:	7bbb      	ldrb	r3, [r7, #14]
 8003174:	4a40      	ldr	r2, [pc, #256]	@ (8003278 <nextTx+0x134>)
 8003176:	3304      	adds	r3, #4
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	dd08      	ble.n	8003198 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 8003186:	7bbb      	ldrb	r3, [r7, #14]
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	4a3a      	ldr	r2, [pc, #232]	@ (8003278 <nextTx+0x134>)
 800318e:	3304      	adds	r3, #4
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8003198:	7bbb      	ldrb	r3, [r7, #14]
 800319a:	3301      	adds	r3, #1
 800319c:	73bb      	strb	r3, [r7, #14]
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d9de      	bls.n	8003162 <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4a34      	ldr	r2, [pc, #208]	@ (8003278 <nextTx+0x134>)
 80031a8:	3304      	adds	r3, #4
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	78db      	ldrb	r3, [r3, #3]
 80031b0:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80031b2:	2300      	movs	r3, #0
 80031b4:	733b      	strb	r3, [r7, #12]
 80031b6:	e042      	b.n	800323e <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 80031b8:	7b7b      	ldrb	r3, [r7, #13]
 80031ba:	3301      	adds	r3, #1
 80031bc:	737b      	strb	r3, [r7, #13]
 80031be:	7b7b      	ldrb	r3, [r7, #13]
 80031c0:	2b0f      	cmp	r3, #15
 80031c2:	d902      	bls.n	80031ca <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 80031c4:	7b7b      	ldrb	r3, [r7, #13]
 80031c6:	3b10      	subs	r3, #16
 80031c8:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <nextTx+0x134>)
 80031cc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80031d0:	461a      	mov	r2, r3
 80031d2:	7b7b      	ldrb	r3, [r7, #13]
 80031d4:	fa42 f303 	asr.w	r3, r2, r3
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02b      	beq.n	8003238 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 80031e0:	7b7b      	ldrb	r3, [r7, #13]
 80031e2:	4a25      	ldr	r2, [pc, #148]	@ (8003278 <nextTx+0x134>)
 80031e4:	3340      	adds	r3, #64	@ 0x40
 80031e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <nextTx+0x134>)
 80031ee:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	fa42 f303 	asr.w	r3, r2, r3
 80031fa:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	7b7b      	ldrb	r3, [r7, #13]
 8003206:	491c      	ldr	r1, [pc, #112]	@ (8003278 <nextTx+0x134>)
 8003208:	3310      	adds	r3, #16
 800320a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800320e:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8003212:	429a      	cmp	r2, r3
 8003214:	d110      	bne.n	8003238 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	4917      	ldr	r1, [pc, #92]	@ (8003278 <nextTx+0x134>)
 800321a:	1d13      	adds	r3, r2, #4
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	7b79      	ldrb	r1, [r7, #13]
 8003222:	70d9      	strb	r1, [r3, #3]
 8003224:	4914      	ldr	r1, [pc, #80]	@ (8003278 <nextTx+0x134>)
 8003226:	1d13      	adds	r3, r2, #4
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	78da      	ldrb	r2, [r3, #3]
 800322e:	4b12      	ldr	r3, [pc, #72]	@ (8003278 <nextTx+0x134>)
 8003230:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	e016      	b.n	8003266 <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8003238:	7b3b      	ldrb	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	733b      	strb	r3, [r7, #12]
 800323e:	7b3b      	ldrb	r3, [r7, #12]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d9b9      	bls.n	80031b8 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2201      	movs	r2, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	b25b      	sxtb	r3, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	b25a      	sxtb	r2, r3
 8003252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003256:	4013      	ands	r3, r2
 8003258:	b25b      	sxtb	r3, r3
 800325a:	75fb      	strb	r3, [r7, #23]
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f af76 	bne.w	8003150 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 8003264:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 8003266:	4618      	mov	r0, r3
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	44aa2000 	.word	0x44aa2000
 8003278:	20000218 	.word	0x20000218

0800327c <setBcnRxParams>:


static void setBcnRxParams (void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 8003280:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <setBcnRxParams+0x48>)
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8003288:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <setBcnRxParams+0x48>)
 800328a:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 800328e:	4a0d      	ldr	r2, [pc, #52]	@ (80032c4 <setBcnRxParams+0x48>)
 8003290:	3310      	adds	r3, #16
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <setBcnRxParams+0x48>)
 800329c:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800329e:	2003      	movs	r0, #3
 80032a0:	f7fe fff6 	bl	8002290 <dndr2rps>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe ffa2 	bl	80021f2 <setNocrc>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2111      	movs	r1, #17
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe ffc3 	bl	800223e <setIh>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b01      	ldr	r3, [pc, #4]	@ (80032c4 <setBcnRxParams+0x48>)
 80032be:	81da      	strh	r2, [r3, #14]
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000218 	.word	0x20000218

080032c8 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 80032c8:	b598      	push	{r3, r4, r7, lr}
 80032ca:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 80032cc:	f002 fe98 	bl	8006000 <radio_rand1>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b15      	ldr	r3, [pc, #84]	@ (800332c <initJoinLoop+0x64>)
 80032d6:	fba3 1302 	umull	r1, r3, r3, r2
 80032da:	0899      	lsrs	r1, r3, #2
 80032dc:	460b      	mov	r3, r1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	440b      	add	r3, r1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <initJoinLoop+0x68>)
 80032ea:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <initJoinLoop+0x68>)
 80032f0:	220e      	movs	r2, #14
 80032f2:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 80032f6:	2105      	movs	r1, #5
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7ff fd2b 	bl	8002d54 <setDrJoin>
    initDefaultChannels(1);
 80032fe:	2001      	movs	r0, #1
 8003300:	f7ff fd6a 	bl	8002dd8 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8003304:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <initJoinLoop+0x68>)
 8003306:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800330a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <initJoinLoop+0x4e>
 8003312:	f7fe fe71 	bl	8001ff8 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <initJoinLoop+0x68>)
 8003318:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800331a:	2008      	movs	r0, #8
 800331c:	f7ff fcae 	bl	8002c7c <rndDelay>
 8003320:	4603      	mov	r3, r0
 8003322:	4423      	add	r3, r4
 8003324:	4a02      	ldr	r2, [pc, #8]	@ (8003330 <initJoinLoop+0x68>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	bd98      	pop	{r3, r4, r7, pc}
 800332c:	aaaaaaab 	.word	0xaaaaaaab
 8003330:	20000218 	.word	0x20000218

08003334 <nextJoinState>:


static ostime_t nextJoinState (void) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 800333e:	4b30      	ldr	r3, [pc, #192]	@ (8003400 <nextJoinState+0xcc>)
 8003340:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8003344:	3301      	adds	r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b2d      	ldr	r3, [pc, #180]	@ (8003400 <nextJoinState+0xcc>)
 800334a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 800334e:	4b2c      	ldr	r3, [pc, #176]	@ (8003400 <nextJoinState+0xcc>)
 8003350:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8003354:	2b06      	cmp	r3, #6
 8003356:	d103      	bne.n	8003360 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 8003358:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <nextJoinState+0xcc>)
 800335a:	2200      	movs	r2, #0
 800335c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8003360:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <nextJoinState+0xcc>)
 8003362:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003366:	3301      	adds	r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <nextJoinState+0xcc>)
 800336c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8003370:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <nextJoinState+0xcc>)
 8003372:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d112      	bne.n	80033a4 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <nextJoinState+0xcc>)
 8003380:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8003388:	2301      	movs	r3, #1
 800338a:	71fb      	strb	r3, [r7, #7]
 800338c:	e00a      	b.n	80033a4 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <nextJoinState+0xcc>)
 8003390:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe ff8f 	bl	80022b8 <decDR>
 800339a:	4603      	mov	r3, r0
 800339c:	4619      	mov	r1, r3
 800339e:	2001      	movs	r0, #1
 80033a0:	f7ff fcd8 	bl	8002d54 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 80033a4:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <nextJoinState+0xcc>)
 80033a6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80033aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <nextJoinState+0xcc>)
 80033b2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 80033b6:	f002 f8f9 	bl	80055ac <os_getTime>
 80033ba:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 80033bc:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <nextJoinState+0xcc>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da02      	bge.n	80033ce <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 80033c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <nextJoinState+0xcc>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <nextJoinState+0xcc>)
 80033d0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80033d4:	461a      	mov	r2, r3
 80033d6:	23ff      	movs	r3, #255	@ 0xff
 80033d8:	4113      	asrs	r3, r2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fc4d 	bl	8002c7c <rndDelay>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 80033e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	4a03      	ldr	r2, [pc, #12]	@ (8003400 <nextJoinState+0xcc>)
 80033f2:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 80033f4:	79fb      	ldrb	r3, [r7, #7]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000218 	.word	0x20000218

08003404 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    engineUpdate();
 800340c:	f001 fcb6 	bl	8004d7c <engineUpdate>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <reportEvent>:


static void reportEvent (ev_t ev) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f001 ffbd 	bl	80053a4 <onEvent>
    engineUpdate();
 800342a:	f001 fca7 	bl	8004d7c <engineUpdate>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <runReset>:


static void runReset (xref2osjob_t osjob) {
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 800343e:	f001 fe67 	bl	8005110 <LMIC_reset>
    LMIC_startJoining();
 8003442:	f001 fa0f 	bl	8004864 <LMIC_startJoining>
    reportEvent(EV_RESET);
 8003446:	200c      	movs	r0, #12
 8003448:	f7ff ffe6 	bl	8003418 <reportEvent>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <stateJustJoined>:

static void stateJustJoined (void) {
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8003458:	4b2f      	ldr	r3, [pc, #188]	@ (8003518 <stateJustJoined+0xc4>)
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8003460:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <stateJustJoined+0xc4>)
 8003462:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003466:	4a2c      	ldr	r2, [pc, #176]	@ (8003518 <stateJustJoined+0xc4>)
 8003468:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 800346c:	4b2a      	ldr	r3, [pc, #168]	@ (8003518 <stateJustJoined+0xc4>)
 800346e:	2200      	movs	r2, #0
 8003470:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8003474:	4b28      	ldr	r3, [pc, #160]	@ (8003518 <stateJustJoined+0xc4>)
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 800347c:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <stateJustJoined+0xc4>)
 800347e:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8003482:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <stateJustJoined+0xc4>)
 8003484:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8003488:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <stateJustJoined+0xc4>)
 800348a:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <stateJustJoined+0xc4>)
 8003490:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8003494:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <stateJustJoined+0xc4>)
 8003496:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 800349a:	4b1f      	ldr	r3, [pc, #124]	@ (8003518 <stateJustJoined+0xc4>)
 800349c:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <stateJustJoined+0xc4>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 80034a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <stateJustJoined+0xc4>)
 80034aa:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 80034ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <stateJustJoined+0xc4>)
 80034b0:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 80034b4:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <stateJustJoined+0xc4>)
 80034b6:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <stateJustJoined+0xc4>)
 80034bc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <stateJustJoined+0xc4>)
 80034c2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <stateJustJoined+0xc4>)
 80034c8:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <stateJustJoined+0xc4>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 80034d4:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <stateJustJoined+0xc4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 80034dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <stateJustJoined+0xc4>)
 80034de:	22f4      	movs	r2, #244	@ 0xf4
 80034e0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <stateJustJoined+0xc4>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <stateJustJoined+0xc4>)
 80034ee:	4a0b      	ldr	r2, [pc, #44]	@ (800351c <stateJustJoined+0xc8>)
 80034f0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <stateJustJoined+0xc4>)
 80034f6:	2205      	movs	r2, #5
 80034f8:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 80034fc:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <stateJustJoined+0xc4>)
 80034fe:	4a07      	ldr	r2, [pc, #28]	@ (800351c <stateJustJoined+0xc8>)
 8003500:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <stateJustJoined+0xc4>)
 8003506:	2203      	movs	r2, #3
 8003508:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000218 	.word	0x20000218
 800351c:	33d3e608 	.word	0x33d3e608

08003520 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <decodeBeacon+0x120>)
 8003528:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800352c:	2b11      	cmp	r3, #17
 800352e:	d001      	beq.n	8003534 <decodeBeacon+0x14>
 8003530:	f7fe fd62 	bl	8001ff8 <hal_failed>
    xref2u1_t d = LMIC.frame;
 8003534:	4b43      	ldr	r3, [pc, #268]	@ (8003644 <decodeBeacon+0x124>)
 8003536:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3307      	adds	r3, #7
 800353c:	781c      	ldrb	r4, [r3, #0]
 800353e:	2107      	movs	r1, #7
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fe ffb0 	bl	80024a6 <os_crc16>
 8003546:	4603      	mov	r3, r0
 8003548:	b2db      	uxtb	r3, r3
    if(
 800354a:	429c      	cmp	r4, r3
 800354c:	d001      	beq.n	8003552 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 800354e:	2300      	movs	r3, #0
 8003550:	e071      	b.n	8003636 <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe ff0c 	bl	8002370 <os_rlsbf4>
 8003558:	4603      	mov	r3, r0
 800355a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800355e:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8003560:	4b37      	ldr	r3, [pc, #220]	@ (8003640 <decodeBeacon+0x120>)
 8003562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d002      	beq.n	8003572 <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	e061      	b.n	8003636 <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 8003572:	4b33      	ldr	r3, [pc, #204]	@ (8003640 <decodeBeacon+0x120>)
 8003574:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003578:	f023 0303 	bic.w	r3, r3, #3
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b30      	ldr	r3, [pc, #192]	@ (8003640 <decodeBeacon+0x120>)
 8003580:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8003584:	4b2e      	ldr	r3, [pc, #184]	@ (8003640 <decodeBeacon+0x120>)
 8003586:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800358a:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <decodeBeacon+0x120>)
 800358c:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <decodeBeacon+0x120>)
 8003592:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <decodeBeacon+0x120>)
 8003598:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 800359c:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <decodeBeacon+0x120>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 80035a4:	3b0c      	subs	r3, #12
 80035a6:	4a26      	ldr	r2, [pc, #152]	@ (8003640 <decodeBeacon+0x120>)
 80035a8:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3303      	adds	r3, #3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fedd 	bl	8002370 <os_rlsbf4>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4a21      	ldr	r2, [pc, #132]	@ (8003640 <decodeBeacon+0x120>)
 80035ba:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 80035be:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <decodeBeacon+0x120>)
 80035c0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <decodeBeacon+0x120>)
 80035cc:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	330f      	adds	r3, #15
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe feb6 	bl	8002346 <os_rlsbf2>
 80035da:	4603      	mov	r3, r0
 80035dc:	461c      	mov	r4, r3
 80035de:	210f      	movs	r1, #15
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fe ff60 	bl	80024a6 <os_crc16>
 80035e6:	4603      	mov	r3, r0
 80035e8:	429c      	cmp	r4, r3
 80035ea:	d001      	beq.n	80035f0 <decodeBeacon+0xd0>
        return 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e022      	b.n	8003636 <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3308      	adds	r3, #8
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe febb 	bl	8002370 <os_rlsbf4>
 80035fa:	4603      	mov	r3, r0
 80035fc:	121b      	asrs	r3, r3, #8
 80035fe:	4a10      	ldr	r2, [pc, #64]	@ (8003640 <decodeBeacon+0x120>)
 8003600:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	330b      	adds	r3, #11
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe feb1 	bl	8002370 <os_rlsbf4>
 800360e:	4603      	mov	r3, r0
 8003610:	121b      	asrs	r3, r3, #8
 8003612:	4a0b      	ldr	r2, [pc, #44]	@ (8003640 <decodeBeacon+0x120>)
 8003614:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7a1a      	ldrb	r2, [r3, #8]
 800361c:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <decodeBeacon+0x120>)
 800361e:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 8003622:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <decodeBeacon+0x120>)
 8003624:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b04      	ldr	r3, [pc, #16]	@ (8003640 <decodeBeacon+0x120>)
 8003630:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 8003634:	2302      	movs	r3, #2
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	bf00      	nop
 8003640:	20000218 	.word	0x20000218
 8003644:	20000360 	.word	0x20000360

08003648 <decodeFrame>:


static bit_t decodeFrame (void) {
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b09b      	sub	sp, #108	@ 0x6c
 800364c:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 800364e:	4b98      	ldr	r3, [pc, #608]	@ (80038b0 <decodeFrame+0x268>)
 8003650:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 8003652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 800365a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800365e:	f023 031f 	bic.w	r3, r3, #31
 8003662:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 8003666:	4b93      	ldr	r3, [pc, #588]	@ (80038b4 <decodeFrame+0x26c>)
 8003668:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800366c:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 800366e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003670:	2b0b      	cmp	r3, #11
 8003672:	dd0d      	ble.n	8003690 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8003674:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003678:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8003680:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003684:	2b60      	cmp	r3, #96	@ 0x60
 8003686:	d014      	beq.n	80036b2 <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8003688:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800368c:	2ba0      	cmp	r3, #160	@ 0xa0
 800368e:	d010      	beq.n	80036b2 <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8003690:	bf00      	nop
 8003692:	e008      	b.n	80036a6 <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8003694:	bf00      	nop
 8003696:	e006      	b.n	80036a6 <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 80036a4:	bf00      	nop
        LMIC.dataLen = 0;
 80036a6:	4b83      	ldr	r3, [pc, #524]	@ (80038b4 <decodeFrame+0x26c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e2f6      	b.n	8003ca0 <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 80036b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b4:	3305      	adds	r3, #5
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 80036ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036bc:	3301      	adds	r3, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fe56 	bl	8002370 <os_rlsbf4>
 80036c4:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 80036c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c8:	3306      	adds	r3, #6
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fe3b 	bl	8002346 <os_rlsbf2>
 80036d0:	4603      	mov	r3, r0
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 80036d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	115b      	asrs	r3, r3, #5
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	3308      	adds	r3, #8
 80036ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 80036ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ee:	3b04      	subs	r3, #4
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 80036f2:	4b70      	ldr	r3, [pc, #448]	@ (80038b4 <decodeFrame+0x26c>)
 80036f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80036f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d1ca      	bne.n	8003694 <decodeFrame+0x4c>
    if( poff > pend ) {
 80036fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	429a      	cmp	r2, r3
 8003704:	dcc8      	bgt.n	8003698 <decodeFrame+0x50>
    int port = -1;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 8003710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003714:	429a      	cmp	r2, r3
 8003716:	dd07      	ble.n	8003728 <decodeFrame+0xe0>
        port = d[poff++];
 8003718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800371e:	461a      	mov	r2, r3
 8003720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8003728:	4b62      	ldr	r3, [pc, #392]	@ (80038b4 <decodeFrame+0x26c>)
 800372a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800372e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003730:	b291      	uxth	r1, r2
 8003732:	4a60      	ldr	r2, [pc, #384]	@ (80038b4 <decodeFrame+0x26c>)
 8003734:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8003738:	b292      	uxth	r2, r2
 800373a:	1a8a      	subs	r2, r1, r2
 800373c:	b292      	uxth	r2, r2
 800373e:	4413      	add	r3, r2
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8003742:	4b5c      	ldr	r3, [pc, #368]	@ (80038b4 <decodeFrame+0x26c>)
 8003744:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2301      	movs	r3, #1
 8003752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003754:	4858      	ldr	r0, [pc, #352]	@ (80038b8 <decodeFrame+0x270>)
 8003756:	f7fe ff19 	bl	800258c <aes_verifyMic>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d09d      	beq.n	800369c <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8003760:	4b54      	ldr	r3, [pc, #336]	@ (80038b4 <decodeFrame+0x26c>)
 8003762:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003768:	429a      	cmp	r2, r3
 800376a:	d219      	bcs.n	80037a0 <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 800376c:	4b51      	ldr	r3, [pc, #324]	@ (80038b4 <decodeFrame+0x26c>)
 800376e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003772:	461a      	mov	r2, r3
 8003774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003776:	429a      	cmp	r2, r3
 8003778:	db92      	blt.n	80036a0 <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 800377a:	4b4e      	ldr	r3, [pc, #312]	@ (80038b4 <decodeFrame+0x26c>)
 800377c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003780:	3b01      	subs	r3, #1
 8003782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003784:	429a      	cmp	r2, r3
 8003786:	d18d      	bne.n	80036a4 <decodeFrame+0x5c>
 8003788:	4b4a      	ldr	r3, [pc, #296]	@ (80038b4 <decodeFrame+0x26c>)
 800378a:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800378e:	2b00      	cmp	r3, #0
 8003790:	d088      	beq.n	80036a4 <decodeFrame+0x5c>
 8003792:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003796:	2ba0      	cmp	r3, #160	@ 0xa0
 8003798:	d184      	bne.n	80036a4 <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	657b      	str	r3, [r7, #84]	@ 0x54
 800379e:	e00e      	b.n	80037be <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a43      	ldr	r2, [pc, #268]	@ (80038b4 <decodeFrame+0x26c>)
 80037a6:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 80037aa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80037ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80037b0:	d101      	bne.n	80037b6 <decodeFrame+0x16e>
 80037b2:	2220      	movs	r2, #32
 80037b4:	e000      	b.n	80037b8 <decodeFrame+0x170>
 80037b6:	2200      	movs	r2, #0
 80037b8:	4b3e      	ldr	r3, [pc, #248]	@ (80038b4 <decodeFrame+0x26c>)
 80037ba:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 80037be:	4b3d      	ldr	r3, [pc, #244]	@ (80038b4 <decodeFrame+0x26c>)
 80037c0:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <decodeFrame+0x18a>
 80037c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 80037d2:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <decodeFrame+0x26c>)
 80037d4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80037d8:	f043 0310 	orr.w	r3, r3, #16
 80037dc:	b29a      	uxth	r2, r3
 80037de:	4b35      	ldr	r3, [pc, #212]	@ (80038b4 <decodeFrame+0x26c>)
 80037e0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 80037e4:	4b33      	ldr	r3, [pc, #204]	@ (80038b4 <decodeFrame+0x26c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 80037ec:	4b31      	ldr	r3, [pc, #196]	@ (80038b4 <decodeFrame+0x26c>)
 80037ee:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80037f2:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <decodeFrame+0x26c>)
 80037f4:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 80037f8:	4b2e      	ldr	r3, [pc, #184]	@ (80038b4 <decodeFrame+0x26c>)
 80037fa:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80037fe:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8003802:	d003      	beq.n	800380c <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8003804:	4b2b      	ldr	r3, [pc, #172]	@ (80038b4 <decodeFrame+0x26c>)
 8003806:	22f4      	movs	r2, #244	@ 0xf4
 8003808:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 800380c:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <decodeFrame+0x26c>)
 800380e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003812:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8003816:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <decodeFrame+0x26c>)
 8003818:	89db      	ldrh	r3, [r3, #14]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe ffe0 	bl	80027e0 <getSensitivity>
 8003820:	4603      	mov	r3, r0
 8003822:	1ae3      	subs	r3, r4, r3
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	db05      	blt.n	8003838 <decodeFrame+0x1f0>
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003830:	bfa8      	it	ge
 8003832:	23fe      	movge	r3, #254	@ 0xfe
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e000      	b.n	800383a <decodeFrame+0x1f2>
 8003838:	2300      	movs	r3, #0
 800383a:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <decodeFrame+0x26c>)
 800383c:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8003840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003842:	3308      	adds	r3, #8
 8003844:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 800384a:	e1b5      	b.n	8003bb8 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 800384c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	3b02      	subs	r3, #2
 8003856:	2b10      	cmp	r3, #16
 8003858:	f200 81ba 	bhi.w	8003bd0 <decodeFrame+0x588>
 800385c:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <decodeFrame+0x21c>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	080038a9 	.word	0x080038a9
 8003868:	080038bd 	.word	0x080038bd
 800386c:	08003a1b 	.word	0x08003a1b
 8003870:	08003997 	.word	0x08003997
 8003874:	08003987 	.word	0x08003987
 8003878:	08003a69 	.word	0x08003a69
 800387c:	08003bd1 	.word	0x08003bd1
 8003880:	08003bd1 	.word	0x08003bd1
 8003884:	08003bd1 	.word	0x08003bd1
 8003888:	08003bd1 	.word	0x08003bd1
 800388c:	08003bd1 	.word	0x08003bd1
 8003890:	08003bd1 	.word	0x08003bd1
 8003894:	08003bd1 	.word	0x08003bd1
 8003898:	08003bd1 	.word	0x08003bd1
 800389c:	08003bd1 	.word	0x08003bd1
 80038a0:	08003af5 	.word	0x08003af5
 80038a4:	08003b37 	.word	0x08003b37
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 80038a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038aa:	3303      	adds	r3, #3
 80038ac:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 80038ae:	e183      	b.n	8003bb8 <decodeFrame+0x570>
 80038b0:	20000360 	.word	0x20000360
 80038b4:	20000218 	.word	0x20000218
 80038b8:	2000030c 	.word	0x2000030c
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 80038bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038be:	3301      	adds	r3, #1
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	4413      	add	r3, r2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 80038c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ca:	3302      	adds	r3, #2
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	4413      	add	r3, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fd38 	bl	8002346 <os_rlsbf2>
 80038d6:	4603      	mov	r3, r0
 80038d8:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 80038da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038dc:	3304      	adds	r3, #4
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	4413      	add	r3, r2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f023 030f 	bic.w	r3, r3, #15
 80038e8:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 80038ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ec:	3304      	adds	r3, #4
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 80038fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038fc:	3305      	adds	r3, #5
 80038fe:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8003900:	4bb0      	ldr	r3, [pc, #704]	@ (8003bc4 <decodeFrame+0x57c>)
 8003902:	2287      	movs	r2, #135	@ 0x87
 8003904:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8003908:	893a      	ldrh	r2, [r7, #8]
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fb84 	bl	800301c <mapChannels>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 800391a:	4baa      	ldr	r3, [pc, #680]	@ (8003bc4 <decodeFrame+0x57c>)
 800391c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4ba7      	ldr	r3, [pc, #668]	@ (8003bc4 <decodeFrame+0x57c>)
 8003928:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 800392c:	7abb      	ldrb	r3, [r7, #10]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 8003932:	797b      	ldrb	r3, [r7, #5]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fcd7 	bl	80022e8 <validDR>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8003940:	4ba0      	ldr	r3, [pc, #640]	@ (8003bc4 <decodeFrame+0x57c>)
 8003942:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003946:	f023 0302 	bic.w	r3, r3, #2
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b9d      	ldr	r3, [pc, #628]	@ (8003bc4 <decodeFrame+0x57c>)
 800394e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8003952:	4b9c      	ldr	r3, [pc, #624]	@ (8003bc4 <decodeFrame+0x57c>)
 8003954:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800395c:	2b07      	cmp	r3, #7
 800395e:	d10d      	bne.n	800397c <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8003960:	4a98      	ldr	r2, [pc, #608]	@ (8003bc4 <decodeFrame+0x57c>)
 8003962:	79bb      	ldrb	r3, [r7, #6]
 8003964:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8003968:	7abb      	ldrb	r3, [r7, #10]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	4a96      	ldr	r2, [pc, #600]	@ (8003bc8 <decodeFrame+0x580>)
 8003970:	56d2      	ldrsb	r2, [r2, r3]
 8003972:	797b      	ldrb	r3, [r7, #5]
 8003974:	4619      	mov	r1, r3
 8003976:	2004      	movs	r0, #4
 8003978:	f7ff fa00 	bl	8002d7c <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 800397c:	4b91      	ldr	r3, [pc, #580]	@ (8003bc4 <decodeFrame+0x57c>)
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 8003984:	e118      	b.n	8003bb8 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8003986:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc4 <decodeFrame+0x57c>)
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 800398e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003990:	3301      	adds	r3, #1
 8003992:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003994:	e110      	b.n	8003bb8 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8003996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003998:	3301      	adds	r3, #1
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 80039a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a8:	3302      	adds	r3, #2
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	4413      	add	r3, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fb12 	bl	8002fd8 <convFreq>
 80039b4:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 80039b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b8:	3305      	adds	r3, #5
 80039ba:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 80039bc:	4b81      	ldr	r3, [pc, #516]	@ (8003bc4 <decodeFrame+0x57c>)
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 80039c4:	7cbb      	ldrb	r3, [r7, #18]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fc8e 	bl	80022e8 <validDR>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 80039d2:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc4 <decodeFrame+0x57c>)
 80039d4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b79      	ldr	r3, [pc, #484]	@ (8003bc4 <decodeFrame+0x57c>)
 80039e0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 80039ea:	4b76      	ldr	r3, [pc, #472]	@ (8003bc4 <decodeFrame+0x57c>)
 80039ec:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b73      	ldr	r3, [pc, #460]	@ (8003bc4 <decodeFrame+0x57c>)
 80039f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 80039fc:	4b71      	ldr	r3, [pc, #452]	@ (8003bc4 <decodeFrame+0x57c>)
 80039fe:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003a02:	2b83      	cmp	r3, #131	@ 0x83
 8003a04:	f040 80d7 	bne.w	8003bb6 <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8003a08:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a0a:	7cbb      	ldrb	r3, [r7, #18]
 8003a0c:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 8003a10:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8003a18:	e0cd      	b.n	8003bb6 <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	4413      	add	r3, r2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 8003a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a28:	3302      	adds	r3, #2
 8003a2a:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	2bff      	cmp	r3, #255	@ 0xff
 8003a30:	d108      	bne.n	8003a44 <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8003a32:	4b64      	ldr	r3, [pc, #400]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a34:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	4b61      	ldr	r3, [pc, #388]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a40:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a4e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8003a52:	f001 fdab 	bl	80055ac <os_getTime>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4a5a      	ldr	r2, [pc, #360]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a5a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003a5e:	4b59      	ldr	r3, [pc, #356]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 8003a66:	e0a7      	b.n	8003bb8 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8003a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	4413      	add	r3, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8003a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a76:	3302      	adds	r3, #2
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff faab 	bl	8002fd8 <convFreq>
 8003a82:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 8003a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a86:	3305      	adds	r3, #5
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8003a90:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc4 <decodeFrame+0x57c>)
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d026      	beq.n	8003aec <decodeFrame+0x4a4>
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	b21a      	sxth	r2, r3
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f1c3 030f 	rsb	r3, r3, #15
 8003ab8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003abc:	fa41 f303 	asr.w	r3, r1, r3
 8003ac0:	b21b      	sxth	r3, r3
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	7ef8      	ldrb	r0, [r7, #27]
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	f7ff fa08 	bl	8002ee4 <LMIC_setupChannel>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8003ada:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc4 <decodeFrame+0x57c>)
 8003adc:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003ae0:	f043 0303 	orr.w	r3, r3, #3
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b37      	ldr	r3, [pc, #220]	@ (8003bc4 <decodeFrame+0x57c>)
 8003ae8:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 8003aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aee:	3306      	adds	r3, #6
 8003af0:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003af2:	e061      	b.n	8003bb8 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8003af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af6:	3301      	adds	r3, #1
 8003af8:	6a3a      	ldr	r2, [r7, #32]
 8003afa:	4413      	add	r3, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fa6b 	bl	8002fd8 <convFreq>
 8003b02:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 8003b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b06:	3304      	adds	r3, #4
 8003b08:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 8003b0a:	2380      	movs	r3, #128	@ 0x80
 8003b0c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8003b16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 8003b22:	4a28      	ldr	r2, [pc, #160]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8003b2a:	4a26      	ldr	r2, [pc, #152]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b30:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 8003b34:	e040      	b.n	8003bb8 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8003b36:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b38:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d134      	bne.n	8003bae <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 8003b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b46:	3303      	adds	r3, #3
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b50:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b56:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	4b18      	ldr	r3, [pc, #96]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b62:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8003b66:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b68:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <decodeFrame+0x52c>
 8003b70:	f7fe fa42 	bl	8001ff8 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003b74:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b76:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	4413      	add	r3, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fbe0 	bl	8002346 <os_rlsbf2>
 8003b86:	4603      	mov	r3, r0
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	019b      	lsls	r3, r3, #6
 8003b92:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <decodeFrame+0x584>)
 8003b96:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003b98:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <decodeFrame+0x57c>)
 8003b9a:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <decodeFrame+0x57c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	201e      	movs	r0, #30
 8003baa:	f7fe ff25 	bl	80029f8 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8003bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003bb4:	e000      	b.n	8003bb8 <decodeFrame+0x570>
            continue;
 8003bb6:	bf00      	nop
    while( oidx < olen ) {
 8003bb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	f6ff ae45 	blt.w	800384c <decodeFrame+0x204>
 8003bc2:	e006      	b.n	8003bd2 <decodeFrame+0x58a>
 8003bc4:	20000218 	.word	0x20000218
 8003bc8:	080102d0 	.word	0x080102d0
 8003bcc:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003bd0:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11d      	bne.n	8003c14 <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8003bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db1a      	blt.n	8003c14 <decodeFrame+0x5cc>
 8003bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	dd15      	ble.n	8003c14 <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8003be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dc01      	bgt.n	8003bf2 <decodeFrame+0x5aa>
 8003bee:	482e      	ldr	r0, [pc, #184]	@ (8003ca8 <decodeFrame+0x660>)
 8003bf0:	e000      	b.n	8003bf4 <decodeFrame+0x5ac>
 8003bf2:	482e      	ldr	r0, [pc, #184]	@ (8003cac <decodeFrame+0x664>)
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb0 <decodeFrame+0x668>)
 8003bf6:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 8003bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bfe:	4413      	add	r3, r2
 8003c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c04:	1a8a      	subs	r2, r1, r2
 8003c06:	9201      	str	r2, [sp, #4]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c0e:	4621      	mov	r1, r4
 8003c10:	f7fe fd66 	bl	80026e0 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <decodeFrame+0x668>)
 8003c1a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003c22:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <decodeFrame+0x668>)
 8003c24:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d002      	beq.n	8003c36 <decodeFrame+0x5ee>
 8003c30:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003c34:	e000      	b.n	8003c38 <decodeFrame+0x5f0>
 8003c36:	2240      	movs	r2, #64	@ 0x40
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b25b      	sxtb	r3, r3
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb0 <decodeFrame+0x668>)
 8003c40:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 8003c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da12      	bge.n	8003c70 <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003c4a:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <decodeFrame+0x668>)
 8003c4c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003c50:	f043 0320 	orr.w	r3, r3, #32
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <decodeFrame+0x668>)
 8003c58:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <decodeFrame+0x668>)
 8003c62:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 8003c66:	4b12      	ldr	r3, [pc, #72]	@ (8003cb0 <decodeFrame+0x668>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003c6e:	e016      	b.n	8003c9e <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003c70:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb0 <decodeFrame+0x668>)
 8003c72:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003c76:	f043 0310 	orr.w	r3, r3, #16
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <decodeFrame+0x668>)
 8003c7e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <decodeFrame+0x668>)
 8003c88:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <decodeFrame+0x668>)
 8003c9a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 8003c9e:	2301      	movs	r3, #1
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3764      	adds	r7, #100	@ 0x64
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd90      	pop	{r4, r7, pc}
 8003ca8:	2000030c 	.word	0x2000030c
 8003cac:	2000031c 	.word	0x2000031c
 8003cb0:	20000218 	.word	0x20000218

08003cb4 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <setupRx2+0x3c>)
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <setupRx2+0x3c>)
 8003cc2:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fae2 	bl	8002290 <dndr2rps>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <setupRx2+0x3c>)
 8003cd2:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <setupRx2+0x3c>)
 8003cd6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003cda:	4a05      	ldr	r2, [pc, #20]	@ (8003cf0 <setupRx2+0x3c>)
 8003cdc:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003cde:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <setupRx2+0x3c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 8003ce6:	2002      	movs	r0, #2
 8003ce8:	f002 fa86 	bl	80061f8 <os_radio>
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000218 	.word	0x20000218

08003cf4 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003d38 <schedRx2+0x44>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	18d1      	adds	r1, r2, r3
 8003d06:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <schedRx2+0x44>)
 8003d08:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <schedRx2+0x48>)
 8003d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	4a06      	ldr	r2, [pc, #24]	@ (8003d38 <schedRx2+0x44>)
 8003d1e:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <schedRx2+0x44>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	3b40      	subs	r3, #64	@ 0x40
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4805      	ldr	r0, [pc, #20]	@ (8003d40 <schedRx2+0x4c>)
 8003d2c:	f001 fca8 	bl	8005680 <os_setTimedCallback>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000218 	.word	0x20000218
 8003d3c:	08010304 	.word	0x08010304
 8003d40:	2000022c 	.word	0x2000022c

08003d44 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <setupRx1+0x40>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <setupRx1+0x40>)
 8003d56:	89db      	ldrh	r3, [r3, #14]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fa49 	bl	80021f2 <setNocrc>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <setupRx1+0x40>)
 8003d66:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003d68:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <setupRx1+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <setupRx1+0x40>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003d76:	2002      	movs	r0, #2
 8003d78:	f002 fa3e 	bl	80061f8 <os_radio>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000218 	.word	0x20000218

08003d88 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 8003d92:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <txDone+0x94>)
 8003d94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f240 6302 	movw	r3, #1538	@ 0x602
 8003d9e:	4013      	ands	r3, r2
 8003da0:	f240 4202 	movw	r2, #1026	@ 0x402
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10b      	bne.n	8003dc0 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003da8:	481d      	ldr	r0, [pc, #116]	@ (8003e20 <txDone+0x98>)
 8003daa:	f7fe feab 	bl	8002b04 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003dae:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <txDone+0x94>)
 8003db0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003db4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <txDone+0x94>)
 8003dbc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003dc0:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <txDone+0x94>)
 8003dc2:	7c1b      	ldrb	r3, [r3, #16]
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	d10a      	bne.n	8003dde <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003dc8:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <txDone+0x94>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b05      	subs	r3, #5
 8003dd2:	4a12      	ldr	r2, [pc, #72]	@ (8003e1c <txDone+0x94>)
 8003dd4:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	@ (8003e1c <txDone+0x94>)
 8003dd8:	2208      	movs	r2, #8
 8003dda:	741a      	strb	r2, [r3, #16]
 8003ddc:	e012      	b.n	8003e04 <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003dde:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <txDone+0x94>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	18d1      	adds	r1, r2, r3
 8003de6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <txDone+0x94>)
 8003de8:	7c5b      	ldrb	r3, [r3, #17]
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <txDone+0x9c>)
 8003dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <txDone+0x94>)
 8003dfc:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <txDone+0x94>)
 8003e00:	2205      	movs	r2, #5
 8003e02:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <txDone+0x94>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	3b40      	subs	r3, #64	@ 0x40
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4806      	ldr	r0, [pc, #24]	@ (8003e28 <txDone+0xa0>)
 8003e10:	f001 fc36 	bl	8005680 <os_setTimedCallback>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000218 	.word	0x20000218
 8003e20:	2000034c 	.word	0x2000034c
 8003e24:	08010304 	.word	0x08010304
 8003e28:	2000022c 	.word	0x2000022c

08003e2c <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 8003e34:	2008      	movs	r0, #8
 8003e36:	f7ff faef 	bl	8003418 <reportEvent>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003e4a:	4b99      	ldr	r3, [pc, #612]	@ (80040b0 <processJoinAccept+0x26c>)
 8003e4c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <processJoinAccept+0x1e>
 8003e54:	4b96      	ldr	r3, [pc, #600]	@ (80040b0 <processJoinAccept+0x26c>)
 8003e56:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <processJoinAccept+0x1e>
 8003e5e:	f7fe f8cb 	bl	8001ff8 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003e62:	4b93      	ldr	r3, [pc, #588]	@ (80040b0 <processJoinAccept+0x26c>)
 8003e64:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <processJoinAccept+0x30>
 8003e70:	f7fe f8c2 	bl	8001ff8 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003e74:	4b8e      	ldr	r3, [pc, #568]	@ (80040b0 <processJoinAccept+0x26c>)
 8003e76:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d14c      	bne.n	8003f18 <processJoinAccept+0xd4>
      nojoinframe:
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 8003e82:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003e84:	4b8a      	ldr	r3, [pc, #552]	@ (80040b0 <processJoinAccept+0x26c>)
 8003e86:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d123      	bne.n	8003eda <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8003e92:	4b87      	ldr	r3, [pc, #540]	@ (80040b0 <processJoinAccept+0x26c>)
 8003e94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <processJoinAccept+0x60>
 8003ea0:	f7fe f8aa 	bl	8001ff8 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003ea4:	4b82      	ldr	r3, [pc, #520]	@ (80040b0 <processJoinAccept+0x26c>)
 8003ea6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003eaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <processJoinAccept+0x26c>)
 8003eb2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 8003eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80040b0 <processJoinAccept+0x26c>)
 8003eb8:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003ebc:	2b09      	cmp	r3, #9
 8003ebe:	d807      	bhi.n	8003ed0 <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80040b0 <processJoinAccept+0x26c>)
 8003ec2:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4b79      	ldr	r3, [pc, #484]	@ (80040b0 <processJoinAccept+0x26c>)
 8003ecc:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003ed0:	2009      	movs	r0, #9
 8003ed2:	f7ff faa1 	bl	8003418 <reportEvent>
            return 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0e6      	b.n	80040a8 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003eda:	4b75      	ldr	r3, [pc, #468]	@ (80040b0 <processJoinAccept+0x26c>)
 8003edc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	4b72      	ldr	r3, [pc, #456]	@ (80040b0 <processJoinAccept+0x26c>)
 8003ee8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8003eec:	f7ff fa22 	bl	8003334 <nextJoinState>
 8003ef0:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003ef2:	f001 fb5b 	bl	80055ac <os_getTime>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <processJoinAccept+0xc6>
 8003f06:	4b6b      	ldr	r3, [pc, #428]	@ (80040b4 <processJoinAccept+0x270>)
 8003f08:	e000      	b.n	8003f0c <processJoinAccept+0xc8>
 8003f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80040b8 <processJoinAccept+0x274>)
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	486b      	ldr	r0, [pc, #428]	@ (80040bc <processJoinAccept+0x278>)
 8003f10:	f001 fbb6 	bl	8005680 <os_setTimedCallback>
        return 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0c7      	b.n	80040a8 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 8003f18:	4b65      	ldr	r3, [pc, #404]	@ (80040b0 <processJoinAccept+0x26c>)
 8003f1a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8003f1e:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 8003f20:	4b63      	ldr	r3, [pc, #396]	@ (80040b0 <processJoinAccept+0x26c>)
 8003f22:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003f26:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	3b04      	subs	r3, #4
 8003f2c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003f30:	4a5f      	ldr	r2, [pc, #380]	@ (80040b0 <processJoinAccept+0x26c>)
 8003f32:	4413      	add	r3, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fa1b 	bl	8002370 <os_rlsbf4>
 8003f3a:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b11      	cmp	r3, #17
 8003f40:	d002      	beq.n	8003f48 <processJoinAccept+0x104>
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	2b21      	cmp	r3, #33	@ 0x21
 8003f46:	d104      	bne.n	8003f52 <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 8003f48:	7d7b      	ldrb	r3, [r7, #21]
 8003f4a:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d00b      	beq.n	8003f6a <processJoinAccept+0x126>
      badframe:
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 8003f56:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003f58:	4b55      	ldr	r3, [pc, #340]	@ (80040b0 <processJoinAccept+0x26c>)
 8003f5a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d08d      	beq.n	8003e82 <processJoinAccept+0x3e>
            return 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e09e      	b.n	80040a8 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8003f6a:	4a55      	ldr	r2, [pc, #340]	@ (80040c0 <processJoinAccept+0x27c>)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7fe fb9e 	bl	80026b4 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4851      	ldr	r0, [pc, #324]	@ (80040c4 <processJoinAccept+0x280>)
 8003f80:	f7fe fb76 	bl	8002670 <aes_verifyMic0>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0e5      	beq.n	8003f56 <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80040c8 <processJoinAccept+0x284>)
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe f9ef 	bl	8002370 <os_rlsbf4>
 8003f92:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 8003f94:	4a46      	ldr	r2, [pc, #280]	@ (80040b0 <processJoinAccept+0x26c>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003f9c:	484b      	ldr	r0, [pc, #300]	@ (80040cc <processJoinAccept+0x288>)
 8003f9e:	f7fe f9e7 	bl	8002370 <os_rlsbf4>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003fa8:	4a41      	ldr	r2, [pc, #260]	@ (80040b0 <processJoinAccept+0x26c>)
 8003faa:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f7fe ff12 	bl	8002dd8 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b11      	cmp	r3, #17
 8003fb8:	d920      	bls.n	8003ffc <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003fba:	230d      	movs	r3, #13
 8003fbc:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	75bb      	strb	r3, [r7, #22]
 8003fc2:	e018      	b.n	8003ff6 <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003fca:	4a39      	ldr	r2, [pc, #228]	@ (80040b0 <processJoinAccept+0x26c>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff f802 	bl	8002fd8 <convFreq>
 8003fd4:	60b8      	str	r0, [r7, #8]
            if( freq )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003fdc:	7db8      	ldrb	r0, [r7, #22]
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	f7fe ff7d 	bl	8002ee4 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003fea:	7dbb      	ldrb	r3, [r7, #22]
 8003fec:	3301      	adds	r3, #1
 8003fee:	75bb      	strb	r3, [r7, #22]
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	3303      	adds	r3, #3
 8003ff4:	75fb      	strb	r3, [r7, #23]
 8003ff6:	7dbb      	ldrb	r3, [r7, #22]
 8003ff8:	2b07      	cmp	r3, #7
 8003ffa:	d9e3      	bls.n	8003fc4 <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80040b0 <processJoinAccept+0x26c>)
 8003ffe:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8004002:	3b01      	subs	r3, #1
 8004004:	b298      	uxth	r0, r3
 8004006:	4b32      	ldr	r3, [pc, #200]	@ (80040d0 <processJoinAccept+0x28c>)
 8004008:	4a32      	ldr	r2, [pc, #200]	@ (80040d4 <processJoinAccept+0x290>)
 800400a:	492d      	ldr	r1, [pc, #180]	@ (80040c0 <processJoinAccept+0x27c>)
 800400c:	f7fe fbac 	bl	8002768 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 8004010:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <processJoinAccept+0x26c>)
 8004012:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004016:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <processJoinAccept+0x1de>
 800401e:	f7fd ffeb 	bl	8001ff8 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004022:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <processJoinAccept+0x26c>)
 8004024:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00e      	beq.n	800404e <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8004030:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <processJoinAccept+0x26c>)
 8004032:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004036:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <processJoinAccept+0x26c>)
 8004038:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe f968 	bl	8002314 <lowerDR>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <processJoinAccept+0x26c>)
 800404a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 800404e:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <processJoinAccept+0x26c>)
 8004050:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004054:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8004058:	f023 0302 	bic.w	r3, r3, #2
 800405c:	b29a      	uxth	r2, r3
 800405e:	4b14      	ldr	r3, [pc, #80]	@ (80040b0 <processJoinAccept+0x26c>)
 8004060:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 8004064:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <processJoinAccept+0x26c>)
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 800406c:	f7ff f9f2 	bl	8003454 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8004070:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <processJoinAccept+0x26c>)
 8004072:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <processJoinAccept+0x26c>)
 800407e:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <processJoinAccept+0x26c>)
 8004084:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8004088:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <processJoinAccept+0x26c>)
 800408a:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <processJoinAccept+0x26c>)
 8004090:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <processJoinAccept+0x25c>
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <processJoinAccept+0x26c>)
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 80040a0:	2006      	movs	r0, #6
 80040a2:	f7ff f9b9 	bl	8003418 <reportEvent>
    return 1;
 80040a6:	2301      	movs	r3, #1
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000218 	.word	0x20000218
 80040b4:	08003e2d 	.word	0x08003e2d
 80040b8:	08003405 	.word	0x08003405
 80040bc:	2000022c 	.word	0x2000022c
 80040c0:	20000361 	.word	0x20000361
 80040c4:	20000360 	.word	0x20000360
 80040c8:	20000367 	.word	0x20000367
 80040cc:	20000364 	.word	0x20000364
 80040d0:	2000031c 	.word	0x2000031c
 80040d4:	2000030c 	.word	0x2000030c

080040d8 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 80040e0:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <processRx2Jacc+0x28>)
 80040e2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <processRx2Jacc+0x28>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 80040f2:	f7ff fea7 	bl	8003e44 <processJoinAccept>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000218 	.word	0x20000218

08004104 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 800410c:	4b04      	ldr	r3, [pc, #16]	@ (8004120 <setupRx2Jacc+0x1c>)
 800410e:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <setupRx2Jacc+0x20>)
 8004110:	61da      	str	r2, [r3, #28]
    setupRx2();
 8004112:	f7ff fdcf 	bl	8003cb4 <setupRx2>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000218 	.word	0x20000218
 8004124:	080040d9 	.word	0x080040d9

08004128 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 8004130:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <processRx1Jacc+0x2c>)
 8004132:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <processRx1Jacc+0x1c>
 800413a:	f7ff fe83 	bl	8003e44 <processJoinAccept>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8004144:	4904      	ldr	r1, [pc, #16]	@ (8004158 <processRx1Jacc+0x30>)
 8004146:	4805      	ldr	r0, [pc, #20]	@ (800415c <processRx1Jacc+0x34>)
 8004148:	f7ff fdd4 	bl	8003cf4 <schedRx2>
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000218 	.word	0x20000218
 8004158:	08004105 	.word	0x08004105
 800415c:	0002ee00 	.word	0x0002ee00

08004160 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8004168:	4803      	ldr	r0, [pc, #12]	@ (8004178 <setupRx1Jacc+0x18>)
 800416a:	f7ff fdeb 	bl	8003d44 <setupRx1>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	08004129 	.word	0x08004129

0800417c <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8004184:	4903      	ldr	r1, [pc, #12]	@ (8004194 <jreqDone+0x18>)
 8004186:	4804      	ldr	r0, [pc, #16]	@ (8004198 <jreqDone+0x1c>)
 8004188:	f7ff fdfe 	bl	8003d88 <txDone>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	08004161 	.word	0x08004161
 8004198:	00027100 	.word	0x00027100

0800419c <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
    processDnData();
 80041a4:	f000 fbc6 	bl	8004934 <processDnData>
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 80041b8:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <processRx2DnData+0x48>)
 80041ba:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d115      	bne.n	80041ee <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <processRx2DnData+0x48>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 80041ca:	f001 f9ef 	bl	80055ac <os_getTime>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 80041d4:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fe fd4f 	bl	8002c7c <rndDelay>
 80041de:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 80041e0:	4423      	add	r3, r4
 80041e2:	4a06      	ldr	r2, [pc, #24]	@ (80041fc <processRx2DnData+0x4c>)
 80041e4:	4619      	mov	r1, r3
 80041e6:	4806      	ldr	r0, [pc, #24]	@ (8004200 <processRx2DnData+0x50>)
 80041e8:	f001 fa4a 	bl	8005680 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 80041ec:	e001      	b.n	80041f2 <processRx2DnData+0x42>
    }
    processDnData();
 80041ee:	f000 fba1 	bl	8004934 <processDnData>
}
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}
 80041f8:	20000218 	.word	0x20000218
 80041fc:	0800419d 	.word	0x0800419d
 8004200:	2000022c 	.word	0x2000022c

08004204 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <setupRx2DnData+0x1c>)
 800420e:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <setupRx2DnData+0x20>)
 8004210:	61da      	str	r2, [r3, #28]
    setupRx2();
 8004212:	f7ff fd4f 	bl	8003cb4 <setupRx2>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000218 	.word	0x20000218
 8004224:	080041b1 	.word	0x080041b1

08004228 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <processRx1DnData+0x40>)
 8004232:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <processRx1DnData+0x1c>
 800423a:	f000 fb7b 	bl	8004934 <processDnData>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10c      	bne.n	800425e <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 8004244:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <processRx1DnData+0x40>)
 8004246:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 800424a:	3301      	adds	r3, #1
 800424c:	461a      	mov	r2, r3
 800424e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	4905      	ldr	r1, [pc, #20]	@ (800426c <processRx1DnData+0x44>)
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fd4b 	bl	8003cf4 <schedRx2>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000218 	.word	0x20000218
 800426c:	08004205 	.word	0x08004205

08004270 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8004278:	4803      	ldr	r0, [pc, #12]	@ (8004288 <setupRx1DnData+0x18>)
 800427a:	f7ff fd63 	bl	8003d44 <setupRx1>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	08004229 	.word	0x08004229

0800428c <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8004294:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <updataDone+0x28>)
 8004296:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 800429a:	461a      	mov	r2, r3
 800429c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	4904      	ldr	r1, [pc, #16]	@ (80042b8 <updataDone+0x2c>)
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd6e 	bl	8003d88 <txDone>
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000218 	.word	0x20000218
 80042b8:	08004271 	.word	0x08004271

080042bc <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b087      	sub	sp, #28
 80042c0:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 80042c2:	4ba3      	ldr	r3, [pc, #652]	@ (8004550 <buildDataFrame+0x294>)
 80042c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80042c8:	f003 0318 	and.w	r3, r3, #24
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <buildDataFrame+0x2a>
 80042de:	4b9c      	ldr	r3, [pc, #624]	@ (8004550 <buildDataFrame+0x294>)
 80042e0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80042e4:	e000      	b.n	80042e8 <buildDataFrame+0x2c>
 80042e6:	2300      	movs	r3, #0
 80042e8:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 80042ea:	2308      	movs	r3, #8
 80042ec:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 80042ee:	4b98      	ldr	r3, [pc, #608]	@ (8004550 <buildDataFrame+0x294>)
 80042f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80042f4:	461a      	mov	r2, r3
 80042f6:	f240 4302 	movw	r3, #1026	@ 0x402
 80042fa:	4013      	ands	r3, r2
 80042fc:	f240 4202 	movw	r2, #1026	@ 0x402
 8004300:	4293      	cmp	r3, r2
 8004302:	d11c      	bne.n	800433e <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 8004304:	4a92      	ldr	r2, [pc, #584]	@ (8004550 <buildDataFrame+0x294>)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800430e:	2210      	movs	r2, #16
 8004310:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 8004312:	4b8f      	ldr	r3, [pc, #572]	@ (8004550 <buildDataFrame+0x294>)
 8004314:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8004318:	b25a      	sxtb	r2, r3
 800431a:	4b8d      	ldr	r3, [pc, #564]	@ (8004550 <buildDataFrame+0x294>)
 800431c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	b25b      	sxtb	r3, r3
 8004324:	4313      	orrs	r3, r2
 8004326:	b25a      	sxtb	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3301      	adds	r3, #1
 800432c:	b2d1      	uxtb	r1, r2
 800432e:	4a88      	ldr	r2, [pc, #544]	@ (8004550 <buildDataFrame+0x294>)
 8004330:	4413      	add	r3, r2
 8004332:	460a      	mov	r2, r1
 8004334:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3302      	adds	r3, #2
 800433c:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 800433e:	4b84      	ldr	r3, [pc, #528]	@ (8004550 <buildDataFrame+0x294>)
 8004340:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8004348:	4a81      	ldr	r2, [pc, #516]	@ (8004550 <buildDataFrame+0x294>)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004352:	2204      	movs	r2, #4
 8004354:	701a      	strb	r2, [r3, #0]
        end += 1;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3301      	adds	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 800435c:	4b7c      	ldr	r3, [pc, #496]	@ (8004550 <buildDataFrame+0x294>)
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 8004364:	4b7a      	ldr	r3, [pc, #488]	@ (8004550 <buildDataFrame+0x294>)
 8004366:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01a      	beq.n	80043a4 <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 800436e:	4a78      	ldr	r2, [pc, #480]	@ (8004550 <buildDataFrame+0x294>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4413      	add	r3, r2
 8004374:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004378:	2205      	movs	r2, #5
 800437a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 800437c:	4b74      	ldr	r3, [pc, #464]	@ (8004550 <buildDataFrame+0x294>)
 800437e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	f002 0203 	and.w	r2, r2, #3
 800438a:	b2d1      	uxtb	r1, r2
 800438c:	4a70      	ldr	r2, [pc, #448]	@ (8004550 <buildDataFrame+0x294>)
 800438e:	4413      	add	r3, r2
 8004390:	460a      	mov	r2, r1
 8004392:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3302      	adds	r3, #2
 800439a:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 800439c:	4b6c      	ldr	r3, [pc, #432]	@ (8004550 <buildDataFrame+0x294>)
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 80043a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004550 <buildDataFrame+0x294>)
 80043a6:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d021      	beq.n	80043f2 <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 80043ae:	4a68      	ldr	r2, [pc, #416]	@ (8004550 <buildDataFrame+0x294>)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80043b8:	2206      	movs	r2, #6
 80043ba:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1c5c      	adds	r4, r3, #1
 80043c0:	f7fe f869 	bl	8002496 <os_getBattLevel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b61      	ldr	r3, [pc, #388]	@ (8004550 <buildDataFrame+0x294>)
 80043ca:	4423      	add	r3, r4
 80043cc:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3302      	adds	r3, #2
 80043d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004550 <buildDataFrame+0x294>)
 80043d6:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 80043da:	4a5d      	ldr	r2, [pc, #372]	@ (8004550 <buildDataFrame+0x294>)
 80043dc:	4413      	add	r3, r2
 80043de:	460a      	mov	r2, r1
 80043e0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	3303      	adds	r3, #3
 80043e8:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 80043ea:	4b59      	ldr	r3, [pc, #356]	@ (8004550 <buildDataFrame+0x294>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 80043f2:	4b57      	ldr	r3, [pc, #348]	@ (8004550 <buildDataFrame+0x294>)
 80043f4:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01a      	beq.n	8004432 <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 80043fc:	4a54      	ldr	r2, [pc, #336]	@ (8004550 <buildDataFrame+0x294>)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004406:	2203      	movs	r2, #3
 8004408:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 800440a:	4b51      	ldr	r3, [pc, #324]	@ (8004550 <buildDataFrame+0x294>)
 800440c:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3301      	adds	r3, #1
 8004414:	f002 0207 	and.w	r2, r2, #7
 8004418:	b2d1      	uxtb	r1, r2
 800441a:	4a4d      	ldr	r2, [pc, #308]	@ (8004550 <buildDataFrame+0x294>)
 800441c:	4413      	add	r3, r2
 800441e:	460a      	mov	r2, r1
 8004420:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3302      	adds	r3, #2
 8004428:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 800442a:	4b49      	ldr	r3, [pc, #292]	@ (8004550 <buildDataFrame+0x294>)
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <buildDataFrame+0x294>)
 8004434:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 800443c:	4a44      	ldr	r2, [pc, #272]	@ (8004550 <buildDataFrame+0x294>)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004446:	2212      	movs	r2, #18
 8004448:	701a      	strb	r2, [r3, #0]
        end += 1;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3301      	adds	r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 8004450:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <buildDataFrame+0x294>)
 8004452:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 800445a:	4b3d      	ldr	r3, [pc, #244]	@ (8004550 <buildDataFrame+0x294>)
 800445c:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004460:	2b00      	cmp	r3, #0
 8004462:	da03      	bge.n	800446c <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 8004464:	4b3a      	ldr	r3, [pc, #232]	@ (8004550 <buildDataFrame+0x294>)
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 800446c:	4b38      	ldr	r3, [pc, #224]	@ (8004550 <buildDataFrame+0x294>)
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8004474:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <buildDataFrame+0x294>)
 8004476:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01a      	beq.n	80044b4 <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 800447e:	4a34      	ldr	r2, [pc, #208]	@ (8004550 <buildDataFrame+0x294>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4413      	add	r3, r2
 8004484:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004488:	2211      	movs	r2, #17
 800448a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 800448c:	4b30      	ldr	r3, [pc, #192]	@ (8004550 <buildDataFrame+0x294>)
 800448e:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	f002 0201 	and.w	r2, r2, #1
 800449a:	b2d1      	uxtb	r1, r2
 800449c:	4a2c      	ldr	r2, [pc, #176]	@ (8004550 <buildDataFrame+0x294>)
 800449e:	4413      	add	r3, r2
 80044a0:	460a      	mov	r2, r1
 80044a2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3302      	adds	r3, #2
 80044aa:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 80044ac:	4b28      	ldr	r3, [pc, #160]	@ (8004550 <buildDataFrame+0x294>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 80044b4:	4b26      	ldr	r3, [pc, #152]	@ (8004550 <buildDataFrame+0x294>)
 80044b6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01a      	beq.n	80044f4 <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 80044be:	4a24      	ldr	r2, [pc, #144]	@ (8004550 <buildDataFrame+0x294>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80044c8:	2207      	movs	r2, #7
 80044ca:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 80044cc:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <buildDataFrame+0x294>)
 80044ce:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	f002 0203 	and.w	r2, r2, #3
 80044da:	b2d1      	uxtb	r1, r2
 80044dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <buildDataFrame+0x294>)
 80044de:	4413      	add	r3, r2
 80044e0:	460a      	mov	r2, r1
 80044e2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3302      	adds	r3, #2
 80044ea:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 80044ec:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <buildDataFrame+0x294>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b18      	cmp	r3, #24
 80044f8:	dd01      	ble.n	80044fe <buildDataFrame+0x242>
 80044fa:	f7fd fd7d 	bl	8001ff8 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <buildDataFrame+0x250>
 8004504:	79bb      	ldrb	r3, [r7, #6]
 8004506:	3305      	adds	r3, #5
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e000      	b.n	800450e <buildDataFrame+0x252>
 800450c:	2304      	movs	r3, #4
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	4413      	add	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b40      	cmp	r3, #64	@ 0x40
 800451a:	d905      	bls.n	8004528 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	3304      	adds	r3, #4
 8004526:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <buildDataFrame+0x294>)
 800452a:	2240      	movs	r2, #64	@ 0x40
 800452c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <buildDataFrame+0x294>)
 8004532:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <buildDataFrame+0x294>)
 8004538:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 800453c:	4313      	orrs	r3, r2
 800453e:	b2db      	uxtb	r3, r3
 8004540:	b25b      	sxtb	r3, r3
 8004542:	4a03      	ldr	r2, [pc, #12]	@ (8004550 <buildDataFrame+0x294>)
 8004544:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8004548:	2a00      	cmp	r2, #0
 800454a:	db03      	blt.n	8004554 <buildDataFrame+0x298>
 800454c:	2240      	movs	r2, #64	@ 0x40
 800454e:	e002      	b.n	8004556 <buildDataFrame+0x29a>
 8004550:	20000218 	.word	0x20000218
 8004554:	2200      	movs	r2, #0
 8004556:	4313      	orrs	r3, r2
 8004558:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	3b08      	subs	r3, #8
 8004560:	b2db      	uxtb	r3, r3
 8004562:	b25b      	sxtb	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b25b      	sxtb	r3, r3
 8004568:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 800456a:	4b40      	ldr	r3, [pc, #256]	@ (800466c <buildDataFrame+0x3b0>)
 800456c:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8004570:	4a3f      	ldr	r2, [pc, #252]	@ (8004670 <buildDataFrame+0x3b4>)
 8004572:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <buildDataFrame+0x3b0>)
 8004574:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7fd ff49 	bl	8002412 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 8004580:	4b3a      	ldr	r3, [pc, #232]	@ (800466c <buildDataFrame+0x3b0>)
 8004582:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 800458a:	4b38      	ldr	r3, [pc, #224]	@ (800466c <buildDataFrame+0x3b0>)
 800458c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004590:	3301      	adds	r3, #1
 8004592:	4a36      	ldr	r2, [pc, #216]	@ (800466c <buildDataFrame+0x3b0>)
 8004594:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8004598:	4a36      	ldr	r2, [pc, #216]	@ (8004674 <buildDataFrame+0x3b8>)
 800459a:	4b34      	ldr	r3, [pc, #208]	@ (800466c <buildDataFrame+0x3b0>)
 800459c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f7fd ff1b 	bl	80023e4 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 80045ae:	4b2f      	ldr	r3, [pc, #188]	@ (800466c <buildDataFrame+0x3b0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d03e      	beq.n	800463a <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <buildDataFrame+0x3b0>)
 80045be:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 80045c6:	4b29      	ldr	r3, [pc, #164]	@ (800466c <buildDataFrame+0x3b0>)
 80045c8:	2280      	movs	r2, #128	@ 0x80
 80045ca:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 80045ce:	4b27      	ldr	r3, [pc, #156]	@ (800466c <buildDataFrame+0x3b0>)
 80045d0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <buildDataFrame+0x324>
 80045d8:	4b24      	ldr	r3, [pc, #144]	@ (800466c <buildDataFrame+0x3b0>)
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <buildDataFrame+0x3b0>)
 80045e2:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 80045e6:	4a21      	ldr	r2, [pc, #132]	@ (800466c <buildDataFrame+0x3b0>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80045f0:	460a      	mov	r2, r1
 80045f2:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3301      	adds	r3, #1
 80045f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <buildDataFrame+0x3bc>)
 80045fa:	4413      	add	r3, r2
 80045fc:	79ba      	ldrb	r2, [r7, #6]
 80045fe:	491f      	ldr	r1, [pc, #124]	@ (800467c <buildDataFrame+0x3c0>)
 8004600:	4618      	mov	r0, r3
 8004602:	f009 fd7c 	bl	800e0fe <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8004606:	4b19      	ldr	r3, [pc, #100]	@ (800466c <buildDataFrame+0x3b0>)
 8004608:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <buildDataFrame+0x358>
 8004610:	481b      	ldr	r0, [pc, #108]	@ (8004680 <buildDataFrame+0x3c4>)
 8004612:	e000      	b.n	8004616 <buildDataFrame+0x35a>
 8004614:	481b      	ldr	r0, [pc, #108]	@ (8004684 <buildDataFrame+0x3c8>)
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <buildDataFrame+0x3b0>)
 8004618:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 800461c:	4b13      	ldr	r3, [pc, #76]	@ (800466c <buildDataFrame+0x3b0>)
 800461e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8004622:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8004628:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <buildDataFrame+0x3bc>)
 800462a:	4413      	add	r3, r2
 800462c:	79ba      	ldrb	r2, [r7, #6]
 800462e:	9201      	str	r2, [sp, #4]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	4622      	mov	r2, r4
 8004636:	f7fe f853 	bl	80026e0 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 800463a:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <buildDataFrame+0x3b0>)
 800463c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <buildDataFrame+0x3b0>)
 8004642:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004646:	1e5a      	subs	r2, r3, #1
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	3b04      	subs	r3, #4
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <buildDataFrame+0x3bc>)
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	480a      	ldr	r0, [pc, #40]	@ (8004680 <buildDataFrame+0x3c4>)
 8004656:	f7fd ffc5 	bl	80025e4 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 800465a:	4a04      	ldr	r2, [pc, #16]	@ (800466c <buildDataFrame+0x3b0>)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bd90      	pop	{r4, r7, pc}
 800466a:	bf00      	nop
 800466c:	20000218 	.word	0x20000218
 8004670:	20000361 	.word	0x20000361
 8004674:	20000366 	.word	0x20000366
 8004678:	20000360 	.word	0x20000360
 800467c:	200002d5 	.word	0x200002d5
 8004680:	2000030c 	.word	0x2000030c
 8004684:	2000031c 	.word	0x2000031c

08004688 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8004690:	2000      	movs	r0, #0
 8004692:	f001 fdb1 	bl	80061f8 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004696:	4823      	ldr	r0, [pc, #140]	@ (8004724 <onBcnRx+0x9c>)
 8004698:	f000 ffae 	bl	80055f8 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 800469c:	4b22      	ldr	r3, [pc, #136]	@ (8004728 <onBcnRx+0xa0>)
 800469e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <onBcnRx+0xa0>)
 80046a8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046ac:	f023 0303 	bic.w	r3, r3, #3
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <onBcnRx+0xa0>)
 80046b4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 80046b8:	2001      	movs	r0, #1
 80046ba:	f7fe fead 	bl	8003418 <reportEvent>
        return;
 80046be:	e02d      	b.n	800471c <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 80046c0:	f7fe ff2e 	bl	8003520 <decodeBeacon>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dc0f      	bgt.n	80046ea <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <onBcnRx+0xa0>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 80046d2:	2003      	movs	r0, #3
 80046d4:	f001 fd90 	bl	80061f8 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <onBcnRx+0xa0>)
 80046da:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80046de:	4a13      	ldr	r2, [pc, #76]	@ (800472c <onBcnRx+0xa4>)
 80046e0:	4619      	mov	r1, r3
 80046e2:	4810      	ldr	r0, [pc, #64]	@ (8004724 <onBcnRx+0x9c>)
 80046e4:	f000 ffcc 	bl	8005680 <os_setTimedCallback>
        return;
 80046e8:	e018      	b.n	800471c <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 80046ea:	2101      	movs	r1, #1
 80046ec:	200d      	movs	r0, #13
 80046ee:	f7fe f983 	bl	80029f8 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <onBcnRx+0xa0>)
 80046f4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <onBcnRx+0xa0>)
 8004700:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8004704:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <onBcnRx+0xa0>)
 8004706:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	b29a      	uxth	r2, r3
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <onBcnRx+0xa0>)
 8004712:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8004716:	2002      	movs	r0, #2
 8004718:	f7fe fe7e 	bl	8003418 <reportEvent>
}
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000022c 	.word	0x2000022c
 8004728:	20000218 	.word	0x20000218
 800472c:	08004689 	.word	0x08004689

08004730 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8004734:	4b27      	ldr	r3, [pc, #156]	@ (80047d4 <startScan+0xa4>)
 8004736:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800473a:	2b00      	cmp	r3, #0
 800473c:	d006      	beq.n	800474c <startScan+0x1c>
 800473e:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <startScan+0xa4>)
 8004740:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <startScan+0x20>
 800474c:	f7fd fc54 	bl	8001ff8 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8004750:	4b20      	ldr	r3, [pc, #128]	@ (80047d4 <startScan+0xa4>)
 8004752:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d137      	bne.n	80047ce <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 800475e:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <startScan+0xa4>)
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8004766:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <startScan+0xa4>)
 8004768:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 800476c:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <startScan+0xa4>)
 800476e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8004772:	4b18      	ldr	r3, [pc, #96]	@ (80047d4 <startScan+0xa4>)
 8004774:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8004778:	4b16      	ldr	r3, [pc, #88]	@ (80047d4 <startScan+0xa4>)
 800477a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <startScan+0xa4>)
 8004780:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800478e:	b29a      	uxth	r2, r3
 8004790:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <startScan+0xa4>)
 8004792:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 8004796:	f7fe fd71 	bl	800327c <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 800479a:	f000 ff07 	bl	80055ac <os_getTime>
 800479e:	4603      	mov	r3, r0
 80047a0:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 80047a4:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 80047a8:	4a0a      	ldr	r2, [pc, #40]	@ (80047d4 <startScan+0xa4>)
 80047aa:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 80047ae:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <startScan+0xa4>)
 80047b0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80047b4:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <startScan+0xa4>)
 80047b6:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 80047b8:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <startScan+0xa4>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a06      	ldr	r2, [pc, #24]	@ (80047d8 <startScan+0xa8>)
 80047be:	4619      	mov	r1, r3
 80047c0:	4806      	ldr	r0, [pc, #24]	@ (80047dc <startScan+0xac>)
 80047c2:	f000 ff5d 	bl	8005680 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 80047c6:	2003      	movs	r0, #3
 80047c8:	f001 fd16 	bl	80061f8 <os_radio>
 80047cc:	e000      	b.n	80047d0 <startScan+0xa0>
        return;
 80047ce:	bf00      	nop
}
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000218 	.word	0x20000218
 80047d8:	08004689 	.word	0x08004689
 80047dc:	2000022c 	.word	0x2000022c

080047e0 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 80047ea:	4b16      	ldr	r3, [pc, #88]	@ (8004844 <buildJoinRequest+0x64>)
 80047ec:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	79fa      	ldrb	r2, [r7, #7]
 80047f2:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fd33 	bl	8005264 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3309      	adds	r3, #9
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fd42 	bl	800528c <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3311      	adds	r3, #17
 800480c:	4a0e      	ldr	r2, [pc, #56]	@ (8004848 <buildJoinRequest+0x68>)
 800480e:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd fde5 	bl	80023e4 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 800481a:	2113      	movs	r1, #19
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7fd ff09 	bl	8002634 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8004822:	4b09      	ldr	r3, [pc, #36]	@ (8004848 <buildJoinRequest+0x68>)
 8004824:	2217      	movs	r2, #23
 8004826:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <buildJoinRequest+0x68>)
 800482c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8004830:	3301      	adds	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <buildJoinRequest+0x68>)
 8004836:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000360 	.word	0x20000360
 8004848:	20000218 	.word	0x20000218

0800484c <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8004854:	2005      	movs	r0, #5
 8004856:	f7fe fddf 	bl	8003418 <reportEvent>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8004868:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <LMIC_startJoining+0x88>)
 800486a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800486e:	2b00      	cmp	r3, #0
 8004870:	d138      	bne.n	80048e4 <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8004872:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <LMIC_startJoining+0x88>)
 8004874:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004878:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <LMIC_startJoining+0x20>
 8004880:	f7fd fbba 	bl	8001ff8 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8004884:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <LMIC_startJoining+0x88>)
 8004886:	2200      	movs	r2, #0
 8004888:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 800488c:	4b17      	ldr	r3, [pc, #92]	@ (80048ec <LMIC_startJoining+0x88>)
 800488e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004892:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	4b13      	ldr	r3, [pc, #76]	@ (80048ec <LMIC_startJoining+0x88>)
 800489e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 80048a2:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <LMIC_startJoining+0x88>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <LMIC_startJoining+0x88>)
 80048ac:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 80048b0:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <LMIC_startJoining+0x88>)
 80048b2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <LMIC_startJoining+0x88>)
 80048b8:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <LMIC_startJoining+0x88>)
 80048be:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 80048c2:	f7fe fd01 	bl	80032c8 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 80048c6:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <LMIC_startJoining+0x88>)
 80048c8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <LMIC_startJoining+0x88>)
 80048d4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 80048d8:	4905      	ldr	r1, [pc, #20]	@ (80048f0 <LMIC_startJoining+0x8c>)
 80048da:	4806      	ldr	r0, [pc, #24]	@ (80048f4 <LMIC_startJoining+0x90>)
 80048dc:	f000 feaa 	bl	8005634 <os_setCallback>
        return 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000218 	.word	0x20000218
 80048f0:	0800484d 	.word	0x0800484d
 80048f4:	2000022c 	.word	0x2000022c

080048f8 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <processPingRx+0x38>)
 8004902:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <processPingRx+0x38>)
 800490c:	2204      	movs	r2, #4
 800490e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 8004912:	f7fe fe99 	bl	8003648 <decodeFrame>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 800491c:	200d      	movs	r0, #13
 800491e:	f7fe fd7b 	bl	8003418 <reportEvent>
            return;
 8004922:	e001      	b.n	8004928 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8004924:	f000 fa2a 	bl	8004d7c <engineUpdate>
}
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000218 	.word	0x20000218

08004934 <processDnData>:


static bit_t processDnData (void) {
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8004938:	4b76      	ldr	r3, [pc, #472]	@ (8004b14 <processDnData+0x1e0>)
 800493a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800493e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <processDnData+0x16>
 8004946:	f7fd fb57 	bl	8001ff8 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 800494a:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <processDnData+0x1e0>)
 800494c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 80ce 	bne.w	8004af2 <processDnData+0x1be>
      norx:
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 800495a:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 800495c:	4b6d      	ldr	r3, [pc, #436]	@ (8004b14 <processDnData+0x1e0>)
 800495e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004962:	2b00      	cmp	r3, #0
 8004964:	d038      	beq.n	80049d8 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8004966:	4b6b      	ldr	r3, [pc, #428]	@ (8004b14 <processDnData+0x1e0>)
 8004968:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800496c:	2b07      	cmp	r3, #7
 800496e:	d82e      	bhi.n	80049ce <processDnData+0x9a>
                LMIC.txCnt += 1;
 8004970:	4b68      	ldr	r3, [pc, #416]	@ (8004b14 <processDnData+0x1e0>)
 8004972:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004976:	3301      	adds	r3, #1
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4b66      	ldr	r3, [pc, #408]	@ (8004b14 <processDnData+0x1e0>)
 800497c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8004980:	4b64      	ldr	r3, [pc, #400]	@ (8004b14 <processDnData+0x1e0>)
 8004982:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004986:	4a63      	ldr	r2, [pc, #396]	@ (8004b14 <processDnData+0x1e0>)
 8004988:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 800498c:	4611      	mov	r1, r2
 800498e:	4a62      	ldr	r2, [pc, #392]	@ (8004b18 <processDnData+0x1e4>)
 8004990:	5c52      	ldrb	r2, [r2, r1]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f7fd fcbd 	bl	8002314 <lowerDR>
 800499a:	4603      	mov	r3, r0
 800499c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80049a0:	4619      	mov	r1, r3
 80049a2:	2002      	movs	r0, #2
 80049a4:	f7fe f9ea 	bl	8002d7c <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 80049a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b14 <processDnData+0x1e0>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2103      	movs	r1, #3
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe f9a2 	bl	8002cf8 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 80049b4:	4b57      	ldr	r3, [pc, #348]	@ (8004b14 <processDnData+0x1e0>)
 80049b6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80049ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049be:	b29a      	uxth	r2, r3
 80049c0:	4b54      	ldr	r3, [pc, #336]	@ (8004b14 <processDnData+0x1e0>)
 80049c2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 80049c6:	f000 f9d9 	bl	8004d7c <engineUpdate>
                return 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e09f      	b.n	8004b0e <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 80049ce:	4b51      	ldr	r3, [pc, #324]	@ (8004b14 <processDnData+0x1e0>)
 80049d0:	2260      	movs	r2, #96	@ 0x60
 80049d2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 80049d6:	e003      	b.n	80049e0 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 80049d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004b14 <processDnData+0x1e0>)
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 80049e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004b14 <processDnData+0x1e0>)
 80049e2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80049e6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80049ea:	d009      	beq.n	8004a00 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 80049ec:	4b49      	ldr	r3, [pc, #292]	@ (8004b14 <processDnData+0x1e0>)
 80049ee:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	b25a      	sxtb	r2, r3
 80049fa:	4b46      	ldr	r3, [pc, #280]	@ (8004b14 <processDnData+0x1e0>)
 80049fc:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8004a00:	4b44      	ldr	r3, [pc, #272]	@ (8004b14 <processDnData+0x1e0>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8004a08:	4b42      	ldr	r3, [pc, #264]	@ (8004b14 <processDnData+0x1e0>)
 8004a0a:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <processDnData+0x1e0>)
 8004a10:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8004a14:	e000      	b.n	8004a18 <processDnData+0xe4>
    }
    goto txcomplete;
 8004a16:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8004a18:	4b3e      	ldr	r3, [pc, #248]	@ (8004b14 <processDnData+0x1e0>)
 8004a1a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	4b3b      	ldr	r3, [pc, #236]	@ (8004b14 <processDnData+0x1e0>)
 8004a26:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <processDnData+0x1e0>)
 8004a2c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <processDnData+0x12a>
 8004a38:	4b36      	ldr	r3, [pc, #216]	@ (8004b14 <processDnData+0x1e0>)
 8004a3a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8004a46:	4b33      	ldr	r3, [pc, #204]	@ (8004b14 <processDnData+0x1e0>)
 8004a48:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <processDnData+0x1e0>)
 8004a54:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 8004a58:	200f      	movs	r0, #15
 8004a5a:	f7fe fcdd 	bl	8003418 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8004a5e:	200a      	movs	r0, #10
 8004a60:	f7fe fcda 	bl	8003418 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8004a64:	4b2b      	ldr	r3, [pc, #172]	@ (8004b14 <processDnData+0x1e0>)
 8004a66:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004a6a:	2b18      	cmp	r3, #24
 8004a6c:	dd1c      	ble.n	8004aa8 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8004a6e:	4b29      	ldr	r3, [pc, #164]	@ (8004b14 <processDnData+0x1e0>)
 8004a70:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd fc1f 	bl	80022b8 <decDR>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004a80:	4619      	mov	r1, r3
 8004a82:	2003      	movs	r0, #3
 8004a84:	f7fe f97a 	bl	8002d7c <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8004a88:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <processDnData+0x1e0>)
 8004a8a:	220c      	movs	r2, #12
 8004a8c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004a90:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <processDnData+0x1e0>)
 8004a92:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a96:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <processDnData+0x1e0>)
 8004a9e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 8004aa2:	200e      	movs	r0, #14
 8004aa4:	f7fe fcb8 	bl	8003418 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b14 <processDnData+0x1e0>)
 8004aaa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01d      	beq.n	8004aee <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <processDnData+0x1e0>)
 8004ab4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8004ac0:	2002      	movs	r0, #2
 8004ac2:	f7fe fca9 	bl	8003418 <reportEvent>
                LMIC.bcninfoTries = 0;
 8004ac6:	4b13      	ldr	r3, [pc, #76]	@ (8004b14 <processDnData+0x1e0>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004ace:	e00e      	b.n	8004aee <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8004ad0:	4b10      	ldr	r3, [pc, #64]	@ (8004b14 <processDnData+0x1e0>)
 8004ad2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b0e      	ldr	r3, [pc, #56]	@ (8004b14 <processDnData+0x1e0>)
 8004adc:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <processDnData+0x1e0>)
 8004ae2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8004aea:	f7ff fe21 	bl	8004730 <startScan>
        return 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00d      	b.n	8004b0e <processDnData+0x1da>
    if( !decodeFrame() ) {
 8004af2:	f7fe fda9 	bl	8003648 <decodeFrame>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d18c      	bne.n	8004a16 <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <processDnData+0x1e0>)
 8004afe:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f43f af27 	beq.w	800495a <processDnData+0x26>
            return 0;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000218 	.word	0x20000218
 8004b18:	080102f8 	.word	0x080102f8

08004b1c <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8004b24:	4b81      	ldr	r3, [pc, #516]	@ (8004d2c <processBeacon+0x210>)
 8004b26:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004b2a:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8004b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d2c <processBeacon+0x210>)
 8004b2e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004b32:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004b34:	4b7d      	ldr	r3, [pc, #500]	@ (8004d2c <processBeacon+0x210>)
 8004b36:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8087 	beq.w	8004c4e <processBeacon+0x132>
 8004b40:	f7fe fcee 	bl	8003520 <decodeBeacon>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f340 8081 	ble.w	8004c4e <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	200d      	movs	r0, #13
 8004b5e:	f7fd ff4b 	bl	80029f8 <calcBcnRxWindowFromMillis>
            goto rev;
 8004b62:	e0d2      	b.n	8004d0a <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	4b70      	ldr	r3, [pc, #448]	@ (8004d2c <processBeacon+0x210>)
 8004b6a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8004b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8004d2c <processBeacon+0x210>)
 8004b7e:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d013      	beq.n	8004bae <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8004b86:	4b69      	ldr	r3, [pc, #420]	@ (8004d2c <processBeacon+0x210>)
 8004b88:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b92:	4966      	ldr	r1, [pc, #408]	@ (8004d2c <processBeacon+0x210>)
 8004b94:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8004b98:	1a59      	subs	r1, r3, r1
 8004b9a:	4b64      	ldr	r3, [pc, #400]	@ (8004d2c <processBeacon+0x210>)
 8004b9c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	fb91 f3f3 	sdiv	r3, r1, r3
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8004bae:	4b5f      	ldr	r3, [pc, #380]	@ (8004d2c <processBeacon+0x210>)
 8004bb0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d127      	bne.n	8004c0c <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8004bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004d2c <processBeacon+0x210>)
 8004bbe:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	8abb      	ldrh	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8004bcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	da03      	bge.n	8004bdc <processBeacon+0xc0>
 8004bd4:	8a7b      	ldrh	r3, [r7, #18]
 8004bd6:	425b      	negs	r3, r3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8004bdc:	4a53      	ldr	r2, [pc, #332]	@ (8004d2c <processBeacon+0x210>)
 8004bde:	8a7b      	ldrh	r3, [r7, #18]
 8004be0:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 8004be4:	4b51      	ldr	r3, [pc, #324]	@ (8004d2c <processBeacon+0x210>)
 8004be6:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8004bea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	dd03      	ble.n	8004bfa <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8004bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8004d2c <processBeacon+0x210>)
 8004bf4:	8a7b      	ldrh	r3, [r7, #18]
 8004bf6:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8004d2c <processBeacon+0x210>)
 8004bfc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004c00:	f023 0308 	bic.w	r3, r3, #8
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <processBeacon+0x210>)
 8004c08:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 8004c0c:	4a47      	ldr	r2, [pc, #284]	@ (8004d2c <processBeacon+0x210>)
 8004c0e:	8abb      	ldrh	r3, [r7, #20]
 8004c10:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8004c14:	4b45      	ldr	r3, [pc, #276]	@ (8004d2c <processBeacon+0x210>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8004c1c:	4b43      	ldr	r3, [pc, #268]	@ (8004d2c <processBeacon+0x210>)
 8004c1e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004c22:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <processBeacon+0x210>)
 8004c24:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004c28:	4b40      	ldr	r3, [pc, #256]	@ (8004d2c <processBeacon+0x210>)
 8004c2a:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004c2e:	f023 0304 	bic.w	r3, r3, #4
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	4b3d      	ldr	r3, [pc, #244]	@ (8004d2c <processBeacon+0x210>)
 8004c36:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d2c <processBeacon+0x210>)
 8004c3c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d14c      	bne.n	8004ce2 <processBeacon+0x1c6>
 8004c48:	f7fd f9d6 	bl	8001ff8 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004c4c:	e049      	b.n	8004ce2 <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8004c52:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <processBeacon+0x210>)
 8004c54:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8004c58:	4b34      	ldr	r3, [pc, #208]	@ (8004d2c <processBeacon+0x210>)
 8004c5a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004c5e:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8004c62:	4413      	add	r3, r2
 8004c64:	4a31      	ldr	r2, [pc, #196]	@ (8004d2c <processBeacon+0x210>)
 8004c66:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004c6a:	4b30      	ldr	r3, [pc, #192]	@ (8004d2c <processBeacon+0x210>)
 8004c6c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8004c70:	3380      	adds	r3, #128	@ 0x80
 8004c72:	4a2e      	ldr	r2, [pc, #184]	@ (8004d2c <processBeacon+0x210>)
 8004c74:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 8004c78:	4b2c      	ldr	r3, [pc, #176]	@ (8004d2c <processBeacon+0x210>)
 8004c7a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004c7e:	3301      	adds	r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4b2a      	ldr	r3, [pc, #168]	@ (8004d2c <processBeacon+0x210>)
 8004c84:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004c88:	4b28      	ldr	r3, [pc, #160]	@ (8004d2c <processBeacon+0x210>)
 8004c8a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004c8e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004c92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c96:	2104      	movs	r1, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe f82d 	bl	8002cf8 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004c9e:	4b23      	ldr	r3, [pc, #140]	@ (8004d2c <processBeacon+0x210>)
 8004ca0:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004ca4:	2b14      	cmp	r3, #20
 8004ca6:	d908      	bls.n	8004cba <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004ca8:	4b20      	ldr	r3, [pc, #128]	@ (8004d2c <processBeacon+0x210>)
 8004caa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004cae:	f043 0320 	orr.w	r3, r3, #32
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d2c <processBeacon+0x210>)
 8004cb6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004cba:	4b1c      	ldr	r3, [pc, #112]	@ (8004d2c <processBeacon+0x210>)
 8004cbc:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004cc0:	2b64      	cmp	r3, #100	@ 0x64
 8004cc2:	d90f      	bls.n	8004ce4 <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004cc4:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <processBeacon+0x210>)
 8004cc6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004cca:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8004cce:	f023 0302 	bic.w	r3, r3, #2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	4b15      	ldr	r3, [pc, #84]	@ (8004d2c <processBeacon+0x210>)
 8004cd6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004cda:	200b      	movs	r0, #11
 8004cdc:	f7fe fb9c 	bl	8003418 <reportEvent>
            return;
 8004ce0:	e021      	b.n	8004d26 <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004ce2:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004ce4:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <processBeacon+0x210>)
 8004ce6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004cea:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 8004cee:	2103      	movs	r1, #3
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fd fe2d 	bl	8002950 <calcRxWindow>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	1ae3      	subs	r3, r4, r3
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004d2c <processBeacon+0x210>)
 8004cfc:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004d00:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <processBeacon+0x210>)
 8004d02:	7c1a      	ldrb	r2, [r3, #16]
 8004d04:	4b09      	ldr	r3, [pc, #36]	@ (8004d2c <processBeacon+0x210>)
 8004d06:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004d0a:	4b08      	ldr	r3, [pc, #32]	@ (8004d2c <processBeacon+0x210>)
 8004d0c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004d18:	4805      	ldr	r0, [pc, #20]	@ (8004d30 <processBeacon+0x214>)
 8004d1a:	f7fd fef3 	bl	8002b04 <rxschedInit>
    reportEvent(ev);
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fb79 	bl	8003418 <reportEvent>
}
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}
 8004d2c:	20000218 	.word	0x20000218
 8004d30:	2000034c 	.word	0x2000034c

08004d34 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <startRxBcn+0x1c>)
 8004d3e:	4a05      	ldr	r2, [pc, #20]	@ (8004d54 <startRxBcn+0x20>)
 8004d40:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004d42:	2002      	movs	r0, #2
 8004d44:	f001 fa58 	bl	80061f8 <os_radio>
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000218 	.word	0x20000218
 8004d54:	08004b1d 	.word	0x08004b1d

08004d58 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8004d60:	4b04      	ldr	r3, [pc, #16]	@ (8004d74 <startRxPing+0x1c>)
 8004d62:	4a05      	ldr	r2, [pc, #20]	@ (8004d78 <startRxPing+0x20>)
 8004d64:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004d66:	2002      	movs	r0, #2
 8004d68:	f001 fa46 	bl	80061f8 <os_radio>
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000218 	.word	0x20000218
 8004d78:	080048f9 	.word	0x080048f9

08004d7c <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 8004d82:	4b90      	ldr	r3, [pc, #576]	@ (8004fc4 <engineUpdate+0x248>)
 8004d84:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004d88:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 81ab 	bne.w	80050e8 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8004d92:	4b8c      	ldr	r3, [pc, #560]	@ (8004fc4 <engineUpdate+0x248>)
 8004d94:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <engineUpdate+0x34>
 8004d9c:	4b89      	ldr	r3, [pc, #548]	@ (8004fc4 <engineUpdate+0x248>)
 8004d9e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <engineUpdate+0x34>
        LMIC_startJoining();
 8004daa:	f7ff fd5b 	bl	8004864 <LMIC_startJoining>
        return;
 8004dae:	e19e      	b.n	80050ee <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004db0:	f000 fbfc 	bl	80055ac <os_getTime>
 8004db4:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004dbe:	4b81      	ldr	r3, [pc, #516]	@ (8004fc4 <engineUpdate+0x248>)
 8004dc0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00f      	beq.n	8004dec <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004dd2:	4b7c      	ldr	r3, [pc, #496]	@ (8004fc4 <engineUpdate+0x248>)
 8004dd4:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	dd01      	ble.n	8004de2 <engineUpdate+0x66>
 8004dde:	f7fd f90b 	bl	8001ff8 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004de2:	4b78      	ldr	r3, [pc, #480]	@ (8004fc4 <engineUpdate+0x248>)
 8004de4:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004de8:	3b40      	subs	r3, #64	@ 0x40
 8004dea:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004dec:	4b75      	ldr	r3, [pc, #468]	@ (8004fc4 <engineUpdate+0x248>)
 8004dee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004df2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80f2 	beq.w	8004fe0 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004dfc:	4b71      	ldr	r3, [pc, #452]	@ (8004fc4 <engineUpdate+0x248>)
 8004dfe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e02:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 8004e12:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc4 <engineUpdate+0x248>)
 8004e14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d012      	beq.n	8004e46 <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 8004e20:	68b8      	ldr	r0, [r7, #8]
 8004e22:	f7fe f98f 	bl	8003144 <nextTx>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a66      	ldr	r2, [pc, #408]	@ (8004fc4 <engineUpdate+0x248>)
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b65      	ldr	r3, [pc, #404]	@ (8004fc4 <engineUpdate+0x248>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 8004e32:	4b64      	ldr	r3, [pc, #400]	@ (8004fc4 <engineUpdate+0x248>)
 8004e34:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	4b61      	ldr	r3, [pc, #388]	@ (8004fc4 <engineUpdate+0x248>)
 8004e40:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8004e44:	e002      	b.n	8004e4c <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 8004e46:	4b5f      	ldr	r3, [pc, #380]	@ (8004fc4 <engineUpdate+0x248>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc4 <engineUpdate+0x248>)
 8004e4e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <engineUpdate+0xe8>
 8004e56:	4b5b      	ldr	r3, [pc, #364]	@ (8004fc4 <engineUpdate+0x248>)
 8004e58:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <engineUpdate+0xfe>
 8004e64:	4b57      	ldr	r3, [pc, #348]	@ (8004fc4 <engineUpdate+0x248>)
 8004e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da03      	bge.n	8004e7a <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 8004e72:	4b54      	ldr	r3, [pc, #336]	@ (8004fc4 <engineUpdate+0x248>)
 8004e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e78:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004e7a:	4b52      	ldr	r3, [pc, #328]	@ (8004fc4 <engineUpdate+0x248>)
 8004e7c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d017      	beq.n	8004eb8 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <engineUpdate+0x116>
 8004e8e:	4a4e      	ldr	r2, [pc, #312]	@ (8004fc8 <engineUpdate+0x24c>)
 8004e90:	e000      	b.n	8004e94 <engineUpdate+0x118>
 8004e92:	4a4e      	ldr	r2, [pc, #312]	@ (8004fcc <engineUpdate+0x250>)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	441a      	add	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dd0b      	ble.n	8004eb8 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004ea6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004eaa:	2110      	movs	r1, #16
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd ff23 	bl	8002cf8 <txDelay>
            txbeg = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004eb6:	e09b      	b.n	8004ff0 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	3340      	adds	r3, #64	@ 0x40
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da70      	bge.n	8004fa6 <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc4 <engineUpdate+0x248>)
 8004eca:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004ece:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01d      	beq.n	8004f12 <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc4 <engineUpdate+0x248>)
 8004ed8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00c      	beq.n	8004efe <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004ee4:	4b37      	ldr	r3, [pc, #220]	@ (8004fc4 <engineUpdate+0x248>)
 8004ee6:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd fa10 	bl	8002314 <lowerDR>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004ef8:	23c0      	movs	r3, #192	@ 0xc0
 8004efa:	73bb      	strb	r3, [r7, #14]
 8004efc:	e001      	b.n	8004f02 <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 8004f02:	7bbb      	ldrb	r3, [r7, #14]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fc6b 	bl	80047e0 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc4 <engineUpdate+0x248>)
 8004f0c:	4a30      	ldr	r2, [pc, #192]	@ (8004fd0 <engineUpdate+0x254>)
 8004f0e:	61da      	str	r2, [r3, #28]
 8004f10:	e01d      	b.n	8004f4e <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 8004f12:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <engineUpdate+0x248>)
 8004f14:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8004f18:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8004f1c:	d907      	bls.n	8004f2e <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 8004f22:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8004f24:	492b      	ldr	r1, [pc, #172]	@ (8004fd4 <engineUpdate+0x258>)
 8004f26:	482c      	ldr	r0, [pc, #176]	@ (8004fd8 <engineUpdate+0x25c>)
 8004f28:	f000 fb84 	bl	8005634 <os_setCallback>
                    return;
 8004f2c:	e0df      	b.n	80050ee <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8004f2e:	4b25      	ldr	r3, [pc, #148]	@ (8004fc4 <engineUpdate+0x248>)
 8004f30:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <engineUpdate+0x1c8>
 8004f38:	4b22      	ldr	r3, [pc, #136]	@ (8004fc4 <engineUpdate+0x248>)
 8004f3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d0ee      	beq.n	8004f22 <engineUpdate+0x1a6>
                }
                buildDataFrame();
 8004f44:	f7ff f9ba 	bl	80042bc <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8004f48:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc4 <engineUpdate+0x248>)
 8004f4a:	4a24      	ldr	r2, [pc, #144]	@ (8004fdc <engineUpdate+0x260>)
 8004f4c:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fd f98b 	bl	800226c <updr2rps>
 8004f56:	4603      	mov	r3, r0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <engineUpdate+0x248>)
 8004f5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fd f91c 	bl	80021a0 <setCr>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b15      	ldr	r3, [pc, #84]	@ (8004fc4 <engineUpdate+0x248>)
 8004f6e:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8004f70:	4a14      	ldr	r2, [pc, #80]	@ (8004fc4 <engineUpdate+0x248>)
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8004f76:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <engineUpdate+0x248>)
 8004f78:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f7c:	b21b      	sxth	r3, r3
 8004f7e:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <engineUpdate+0x248>)
 8004f8e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 8004f92:	6938      	ldr	r0, [r7, #16]
 8004f94:	f7fe f88c 	bl	80030b0 <updateTx>
            reportEvent(EV_TXSTART);
 8004f98:	2011      	movs	r0, #17
 8004f9a:	f7fe fa3d 	bl	8003418 <reportEvent>
            os_radio(RADIO_TX);
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f001 f92a 	bl	80061f8 <os_radio>
            return;
 8004fa4:	e0a3      	b.n	80050ee <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004fa6:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <engineUpdate+0x248>)
 8004fa8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 808c 	beq.w	80050ce <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d119      	bne.n	8004ff0 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e015      	b.n	8004ff0 <engineUpdate+0x274>
 8004fc4:	20000218 	.word	0x20000218
 8004fc8:	00046500 	.word	0x00046500
 8004fcc:	0002ee00 	.word	0x0002ee00
 8004fd0:	0800417d 	.word	0x0800417d
 8004fd4:	08003437 	.word	0x08003437
 8004fd8:	2000022c 	.word	0x2000022c
 8004fdc:	0800428d 	.word	0x0800428d
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004fe0:	4b44      	ldr	r3, [pc, #272]	@ (80050f4 <engineUpdate+0x378>)
 8004fe2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07e      	beq.n	80050ec <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 8004fee:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004ff0:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <engineUpdate+0x378>)
 8004ff2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d041      	beq.n	8005082 <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3340      	adds	r3, #64	@ 0x40
 8005002:	4619      	mov	r1, r3
 8005004:	483c      	ldr	r0, [pc, #240]	@ (80050f8 <engineUpdate+0x37c>)
 8005006:	f7fd fdeb 	bl	8002be0 <rxschedNext>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d038      	beq.n	8005082 <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <engineUpdate+0x2a8>
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <engineUpdate+0x378>)
 8005018:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	db56      	blt.n	80050d2 <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 8005024:	4b33      	ldr	r3, [pc, #204]	@ (80050f4 <engineUpdate+0x378>)
 8005026:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 800502a:	4b32      	ldr	r3, [pc, #200]	@ (80050f4 <engineUpdate+0x378>)
 800502c:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 800502e:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <engineUpdate+0x378>)
 8005030:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8005034:	4a2f      	ldr	r2, [pc, #188]	@ (80050f4 <engineUpdate+0x378>)
 8005036:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 8005038:	4b2e      	ldr	r3, [pc, #184]	@ (80050f4 <engineUpdate+0x378>)
 800503a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800503e:	4a2d      	ldr	r2, [pc, #180]	@ (80050f4 <engineUpdate+0x378>)
 8005040:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <engineUpdate+0x378>)
 8005044:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8005048:	4618      	mov	r0, r3
 800504a:	f7fd f921 	bl	8002290 <dndr2rps>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	4b28      	ldr	r3, [pc, #160]	@ (80050f4 <engineUpdate+0x378>)
 8005054:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 8005056:	4b27      	ldr	r3, [pc, #156]	@ (80050f4 <engineUpdate+0x378>)
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 800505e:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <engineUpdate+0x378>)
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 800506a:	da01      	bge.n	8005070 <engineUpdate+0x2f4>
 800506c:	f7fc ffc4 	bl	8001ff8 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8005070:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <engineUpdate+0x378>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	3b40      	subs	r3, #64	@ 0x40
 8005076:	4a21      	ldr	r2, [pc, #132]	@ (80050fc <engineUpdate+0x380>)
 8005078:	4619      	mov	r1, r3
 800507a:	4821      	ldr	r0, [pc, #132]	@ (8005100 <engineUpdate+0x384>)
 800507c:	f000 fb00 	bl	8005680 <os_setTimedCallback>
            return;
 8005080:	e035      	b.n	80050ee <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <engineUpdate+0x316>
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	db21      	blt.n	80050d6 <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 8005092:	f7fe f8f3 	bl	800327c <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8005096:	4b17      	ldr	r3, [pc, #92]	@ (80050f4 <engineUpdate+0x378>)
 8005098:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 800509c:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <engineUpdate+0x378>)
 800509e:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 80050a0:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <engineUpdate+0x378>)
 80050a2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80050a6:	4a13      	ldr	r2, [pc, #76]	@ (80050f4 <engineUpdate+0x378>)
 80050a8:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db06      	blt.n	80050c2 <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80050b4:	4b0f      	ldr	r3, [pc, #60]	@ (80050f4 <engineUpdate+0x378>)
 80050b6:	4a13      	ldr	r2, [pc, #76]	@ (8005104 <engineUpdate+0x388>)
 80050b8:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 80050ba:	2002      	movs	r0, #2
 80050bc:	f001 f89c 	bl	80061f8 <os_radio>
        return;
 80050c0:	e015      	b.n	80050ee <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 80050c2:	4a11      	ldr	r2, [pc, #68]	@ (8005108 <engineUpdate+0x38c>)
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	480e      	ldr	r0, [pc, #56]	@ (8005100 <engineUpdate+0x384>)
 80050c8:	f000 fada 	bl	8005680 <os_setTimedCallback>
    return;
 80050cc:	e00f      	b.n	80050ee <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 80050ce:	bf00      	nop
 80050d0:	e002      	b.n	80050d8 <engineUpdate+0x35c>
                goto txdelay;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <engineUpdate+0x35c>
        goto txdelay;
 80050d6:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3b40      	subs	r3, #64	@ 0x40
 80050dc:	4a0b      	ldr	r2, [pc, #44]	@ (800510c <engineUpdate+0x390>)
 80050de:	4619      	mov	r1, r3
 80050e0:	4807      	ldr	r0, [pc, #28]	@ (8005100 <engineUpdate+0x384>)
 80050e2:	f000 facd 	bl	8005680 <os_setTimedCallback>
 80050e6:	e002      	b.n	80050ee <engineUpdate+0x372>
        return;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <engineUpdate+0x372>
            return;
 80050ec:	bf00      	nop
}
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000218 	.word	0x20000218
 80050f8:	2000034c 	.word	0x2000034c
 80050fc:	08004d59 	.word	0x08004d59
 8005100:	2000022c 	.word	0x2000022c
 8005104:	08004b1d 	.word	0x08004b1d
 8005108:	08004d35 	.word	0x08004d35
 800510c:	08003405 	.word	0x08003405

08005110 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 8005110:	b598      	push	{r3, r4, r7, lr}
 8005112:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 8005114:	2000      	movs	r0, #0
 8005116:	f001 f86f 	bl	80061f8 <os_radio>
    os_clearCallback(&LMIC.osjob);
 800511a:	4821      	ldr	r0, [pc, #132]	@ (80051a0 <LMIC_reset+0x90>)
 800511c:	f000 fa6c 	bl	80055f8 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 8005120:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8005124:	2100      	movs	r1, #0
 8005126:	481f      	ldr	r0, [pc, #124]	@ (80051a4 <LMIC_reset+0x94>)
 8005128:	f008 ff6d 	bl	800e006 <memset>
    LMIC.devaddr      =  0;
 800512c:	4b1d      	ldr	r3, [pc, #116]	@ (80051a4 <LMIC_reset+0x94>)
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 8005134:	f000 ff64 	bl	8006000 <radio_rand1>
 8005138:	4603      	mov	r3, r0
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	b21c      	sxth	r4, r3
 800513e:	f000 ff5f 	bl	8006000 <radio_rand1>
 8005142:	4603      	mov	r3, r0
 8005144:	b21b      	sxth	r3, r3
 8005146:	4323      	orrs	r3, r4
 8005148:	b21b      	sxth	r3, r3
 800514a:	b29a      	uxth	r2, r3
 800514c:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <LMIC_reset+0x94>)
 800514e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 8005152:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <LMIC_reset+0x94>)
 8005154:	2200      	movs	r2, #0
 8005156:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 800515a:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <LMIC_reset+0x94>)
 800515c:	2200      	movs	r2, #0
 800515e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 8005162:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <LMIC_reset+0x94>)
 8005164:	2280      	movs	r2, #128	@ 0x80
 8005166:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <LMIC_reset+0x94>)
 800516c:	2200      	movs	r2, #0
 800516e:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 8005172:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <LMIC_reset+0x94>)
 8005174:	4a0c      	ldr	r2, [pc, #48]	@ (80051a8 <LMIC_reset+0x98>)
 8005176:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <LMIC_reset+0x94>)
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 8005182:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <LMIC_reset+0x94>)
 8005184:	4a08      	ldr	r2, [pc, #32]	@ (80051a8 <LMIC_reset+0x98>)
 8005186:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 800518a:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <LMIC_reset+0x94>)
 800518c:	2203      	movs	r2, #3
 800518e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 8005192:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <LMIC_reset+0x94>)
 8005194:	22ff      	movs	r2, #255	@ 0xff
 8005196:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 800519a:	bf00      	nop
 800519c:	bd98      	pop	{r3, r4, r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000022c 	.word	0x2000022c
 80051a4:	20000218 	.word	0x20000218
 80051a8:	33d3e608 	.word	0x33d3e608

080051ac <LMIC_init>:


void LMIC_init (void) {
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <LMIC_init+0x18>)
 80051b2:	2240      	movs	r2, #64	@ 0x40
 80051b4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000218 	.word	0x20000218

080051c8 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <LMIC_setTxData+0x34>)
 80051ce:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80051d2:	f043 0308 	orr.w	r3, r3, #8
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <LMIC_setTxData+0x34>)
 80051da:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 80051de:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <LMIC_setTxData+0x34>)
 80051e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 80051ec:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <LMIC_setTxData+0x34>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    engineUpdate();
 80051f4:	f7ff fdc2 	bl	8004d7c <engineUpdate>
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000218 	.word	0x20000218

08005200 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6039      	str	r1, [r7, #0]
 8005208:	4611      	mov	r1, r2
 800520a:	461a      	mov	r2, r3
 800520c:	4603      	mov	r3, r0
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	460b      	mov	r3, r1
 8005212:	71bb      	strb	r3, [r7, #6]
 8005214:	4613      	mov	r3, r2
 8005216:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 8005218:	79bb      	ldrb	r3, [r7, #6]
 800521a:	2b34      	cmp	r3, #52	@ 0x34
 800521c:	d902      	bls.n	8005224 <LMIC_setTxData2+0x24>
        return -2;
 800521e:	f06f 0301 	mvn.w	r3, #1
 8005222:	e017      	b.n	8005254 <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 800522a:	79bb      	ldrb	r3, [r7, #6]
 800522c:	461a      	mov	r2, r3
 800522e:	6839      	ldr	r1, [r7, #0]
 8005230:	480a      	ldr	r0, [pc, #40]	@ (800525c <LMIC_setTxData2+0x5c>)
 8005232:	f008 ff64 	bl	800e0fe <memcpy>
    LMIC.pendTxConf = confirmed;
 8005236:	4a0a      	ldr	r2, [pc, #40]	@ (8005260 <LMIC_setTxData2+0x60>)
 8005238:	797b      	ldrb	r3, [r7, #5]
 800523a:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
    LMIC.pendTxPort = port;
 800523e:	4a08      	ldr	r2, [pc, #32]	@ (8005260 <LMIC_setTxData2+0x60>)
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
    LMIC.pendTxLen  = dlen;
 8005246:	4a06      	ldr	r2, [pc, #24]	@ (8005260 <LMIC_setTxData2+0x60>)
 8005248:	79bb      	ldrb	r3, [r7, #6]
 800524a:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC_setTxData();
 800524e:	f7ff ffbb 	bl	80051c8 <LMIC_setTxData>
    return 0;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	200002d5 	.word	0x200002d5
 8005260:	20000218 	.word	0x20000218

08005264 <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4906      	ldr	r1, [pc, #24]	@ (8005288 <os_getArtEui+0x24>)
 8005270:	461a      	mov	r2, r3
 8005272:	460b      	mov	r3, r1
 8005274:	cb03      	ldmia	r3!, {r0, r1}
 8005276:	6010      	str	r0, [r2, #0]
 8005278:	6051      	str	r1, [r2, #4]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	08010354 	.word	0x08010354

0800528c <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4906      	ldr	r1, [pc, #24]	@ (80052b0 <os_getDevEui+0x24>)
 8005298:	461a      	mov	r2, r3
 800529a:	460b      	mov	r3, r1
 800529c:	cb03      	ldmia	r3!, {r0, r1}
 800529e:	6010      	str	r0, [r2, #0]
 80052a0:	6051      	str	r1, [r2, #4]
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	0801035c 	.word	0x0801035c

080052b4 <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 80052b4:	b4b0      	push	{r4, r5, r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a06      	ldr	r2, [pc, #24]	@ (80052d8 <os_getDevKey+0x24>)
 80052c0:	461c      	mov	r4, r3
 80052c2:	4615      	mov	r5, r2
 80052c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052c6:	6020      	str	r0, [r4, #0]
 80052c8:	6061      	str	r1, [r4, #4]
 80052ca:	60a2      	str	r2, [r4, #8]
 80052cc:	60e3      	str	r3, [r4, #12]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bcb0      	pop	{r4, r5, r7}
 80052d6:	4770      	bx	lr
 80052d8:	08010364 	.word	0x08010364

080052dc <initsensor>:
void initsensor(){
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET); //alimente le capteur de temperature
 80052e0:	2201      	movs	r2, #1
 80052e2:	2180      	movs	r1, #128	@ 0x80
 80052e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052e8:	f005 fcc2 	bl	800ac70 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80052ec:	217f      	movs	r1, #127	@ 0x7f
 80052ee:	4802      	ldr	r0, [pc, #8]	@ (80052f8 <initsensor+0x1c>)
 80052f0:	f005 f970 	bl	800a5d4 <HAL_ADCEx_Calibration_Start>
}
 80052f4:	bf00      	nop
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000098 	.word	0x20000098

080052fc <initfunc>:

void initfunc (osjob_t* j) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 8005304:	f7ff ffea 	bl	80052dc <initsensor>
	// reset MAC state
	LMIC_reset();
 8005308:	f7ff ff02 	bl	8005110 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 800530c:	f7ff faaa 	bl	8004864 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <reportfunc>:
	return  (188686 - 147 * raw_adc1_in15);
}

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]



	// BME680

	if (bme68x_single_measure(&data) == 0) {
 8005320:	481d      	ldr	r0, [pc, #116]	@ (8005398 <reportfunc+0x80>)
 8005322:	f003 fb0f 	bl	8008944 <bme68x_single_measure>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <reportfunc+0x2a>

		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 800532c:	f003 fd8a 	bl	8008e44 <bme68x_iaq>
 8005330:	eef0 7a40 	vmov.f32	s15, s0
 8005334:	4b18      	ldr	r3, [pc, #96]	@ (8005398 <reportfunc+0x80>)
 8005336:	edc3 7a02 	vstr	s15, [r3, #8]

		HAL_Delay(2000);
 800533a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800533e:	f003 fe65 	bl	800900c <HAL_Delay>

//	LMIC_setTxData2(1, LMIC.frame, 4, 0); // (port 1, 2 bytes, unconfirmed)


	// avec cayenne
	cayenne_lpp_reset(&cayenne_packet);
 8005342:	4816      	ldr	r0, [pc, #88]	@ (800539c <reportfunc+0x84>)
 8005344:	f7fc fb8c 	bl	8001a60 <cayenne_lpp_reset>

	cayenne_lpp_add_temperature(&cayenne_packet, 0, data.temperature);
 8005348:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <reportfunc+0x80>)
 800534a:	edd3 7a03 	vldr	s15, [r3, #12]
 800534e:	eeb0 0a67 	vmov.f32	s0, s15
 8005352:	2100      	movs	r1, #0
 8005354:	4811      	ldr	r0, [pc, #68]	@ (800539c <reportfunc+0x84>)
 8005356:	f7fc fb95 	bl	8001a84 <cayenne_lpp_add_temperature>
	cayenne_lpp_add_relative_humidity(&cayenne_packet, 0, data.humidity);
 800535a:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <reportfunc+0x80>)
 800535c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005360:	eeb0 0a67 	vmov.f32	s0, s15
 8005364:	2100      	movs	r1, #0
 8005366:	480d      	ldr	r0, [pc, #52]	@ (800539c <reportfunc+0x84>)
 8005368:	f7fc fbea 	bl	8001b40 <cayenne_lpp_add_relative_humidity>
	//cayenne_lpp_add_barometric_pressure(&cayenne_packet, 1, data.pressure);

	//cayenne_lpp_add_analog_input(&cayenne_packet, 3, data.gas_index);

	LMIC_setTxData2(1, cayenne_packet.buffer, sizeof(cayenne_packet), 0);
 800536c:	2300      	movs	r3, #0
 800536e:	222b      	movs	r2, #43	@ 0x2b
 8005370:	490a      	ldr	r1, [pc, #40]	@ (800539c <reportfunc+0x84>)
 8005372:	2001      	movs	r0, #1
 8005374:	f7ff ff44 	bl	8005200 <LMIC_setTxData2>

	// reschedule job in 60 seconds
	os_setTimedCallback(j, os_getTime()+sec2osticks(15), reportfunc);
 8005378:	f000 f918 	bl	80055ac <os_getTime>
 800537c:	4603      	mov	r3, r0
 800537e:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8005382:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005386:	4a06      	ldr	r2, [pc, #24]	@ (80053a0 <reportfunc+0x88>)
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f978 	bl	8005680 <os_setTimedCallback>
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	200003f4 	.word	0x200003f4
 800539c:	200003c8 	.word	0x200003c8
 80053a0:	08005319 	.word	0x08005319

080053a4 <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
	switch(ev) {
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	2b0e      	cmp	r3, #14
 80053b4:	d824      	bhi.n	8005400 <onEvent+0x5c>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <onEvent+0x18>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	08005401 	.word	0x08005401
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	08005401 	.word	0x08005401
 80053cc:	08005401 	.word	0x08005401
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005401 	.word	0x08005401
 80053e8:	08005401 	.word	0x08005401
 80053ec:	08005401 	.word	0x08005401
 80053f0:	08005401 	.word	0x08005401
 80053f4:	08005401 	.word	0x08005401
	// network joined, session established
		case EV_JOINING:
			break;

		case EV_JOINED:
			reportfunc(&reportjob);
 80053f8:	4804      	ldr	r0, [pc, #16]	@ (800540c <onEvent+0x68>)
 80053fa:	f7ff ff8d 	bl	8005318 <reportfunc>
			break;
 80053fe:	e000      	b.n	8005402 <onEvent+0x5e>
		case EV_LINK_DEAD:
			break;
		case EV_LINK_ALIVE:
			break;
		default:
			break;
 8005400:	bf00      	nop
	}
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000410 	.word	0x20000410

08005410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005416:	f003 fd84 	bl	8008f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800541a:	f000 f849 	bl	80054b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800541e:	f7fc fbdb 	bl	8001bd8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8005422:	f000 ff15 	bl	8006250 <MX_SPI3_Init>
  MX_TIM7_Init();
 8005426:	f001 f933 	bl	8006690 <MX_TIM7_Init>
  MX_TIM6_Init();
 800542a:	f001 f8f9 	bl	8006620 <MX_TIM6_Init>
  MX_ADC1_Init();
 800542e:	f7fb fd05 	bl	8000e3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8005432:	f7fc fde9 	bl	8002008 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* BME680 API forced mode test */
  bme68x_start(&data, &hi2c1);
 8005436:	4918      	ldr	r1, [pc, #96]	@ (8005498 <main+0x88>)
 8005438:	4818      	ldr	r0, [pc, #96]	@ (800549c <main+0x8c>)
 800543a:	f003 fa2d 	bl	8008898 <bme68x_start>



  HAL_TIM_Base_Start_IT(&htim6); //demarrage du timer 6 en interruption toutes les secondes pour la mesure temperature
 800543e:	4818      	ldr	r0, [pc, #96]	@ (80054a0 <main+0x90>)
 8005440:	f008 fa34 	bl	800d8ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8005444:	4817      	ldr	r0, [pc, #92]	@ (80054a4 <main+0x94>)
 8005446:	f008 fa31 	bl	800d8ac <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 800544a:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <main+0x98>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b15      	ldr	r3, [pc, #84]	@ (80054a8 <main+0x98>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005458:	601a      	str	r2, [r3, #0]

  osjob_t initjob;
  // initialize runtime env
  os_init();
 800545a:	f000 f895 	bl	8005588 <os_init>
  // setup initial job
  os_setCallback(&initjob, initfunc);
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	4912      	ldr	r1, [pc, #72]	@ (80054ac <main+0x9c>)
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f8e6 	bl	8005634 <os_setCallback>


  // test BME
  if (bme68x_single_measure(&data) == 0) {
 8005468:	480c      	ldr	r0, [pc, #48]	@ (800549c <main+0x8c>)
 800546a:	f003 fa6b 	bl	8008944 <bme68x_single_measure>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <main+0x7a>

	// Measurement is successful, so continue with IAQ
	data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8005474:	f003 fce6 	bl	8008e44 <bme68x_iaq>
 8005478:	eef0 7a40 	vmov.f32	s15, s0
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <main+0x8c>)
 800547e:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_Delay(2000);
 8005482:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005486:	f003 fdc1 	bl	800900c <HAL_Delay>
  }



  // execute scheduled jobs and events
  os_runloop();
 800548a:	f000 f92f 	bl	80056ec <os_runloop>
  // (not reached)
  return 0;
 800548e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	200001c4 	.word	0x200001c4
 800549c:	200003f4 	.word	0x200003f4
 80054a0:	2000049c 	.word	0x2000049c
 80054a4:	200004e8 	.word	0x200004e8
 80054a8:	20000434 	.word	0x20000434
 80054ac:	080052fd 	.word	0x080052fd

080054b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b096      	sub	sp, #88	@ 0x58
 80054b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	2244      	movs	r2, #68	@ 0x44
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f008 fda1 	bl	800e006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054c4:	463b      	mov	r3, r7
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	609a      	str	r2, [r3, #8]
 80054ce:	60da      	str	r2, [r3, #12]
 80054d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80054d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80054d6:	f006 fb19 	bl	800bb0c <HAL_PWREx_ControlVoltageScaling>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80054e0:	f000 f84c 	bl	800557c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054e4:	2302      	movs	r3, #2
 80054e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054ee:	2310      	movs	r3, #16
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054f2:	2302      	movs	r3, #2
 80054f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054f6:	2302      	movs	r3, #2
 80054f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80054fe:	230a      	movs	r3, #10
 8005500:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005502:	2307      	movs	r3, #7
 8005504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005506:	2302      	movs	r3, #2
 8005508:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800550a:	2302      	movs	r3, #2
 800550c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800550e:	f107 0314 	add.w	r3, r7, #20
 8005512:	4618      	mov	r0, r3
 8005514:	f006 fb50 	bl	800bbb8 <HAL_RCC_OscConfig>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800551e:	f000 f82d 	bl	800557c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005522:	230f      	movs	r3, #15
 8005524:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005526:	2303      	movs	r3, #3
 8005528:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005536:	463b      	mov	r3, r7
 8005538:	2104      	movs	r1, #4
 800553a:	4618      	mov	r0, r3
 800553c:	f006 ff50 	bl	800c3e0 <HAL_RCC_ClockConfig>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005546:	f000 f819 	bl	800557c <Error_Handler>
  }
}
 800554a:	bf00      	nop
 800554c:	3758      	adds	r7, #88	@ 0x58
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_ADC_ConvCpltCallback>:
//	}
//}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	raw_adc1_in15 = HAL_ADC_GetValue(&hadc1);
 800555c:	4805      	ldr	r0, [pc, #20]	@ (8005574 <HAL_ADC_ConvCpltCallback+0x20>)
 800555e:	f004 f96f 	bl	8009840 <HAL_ADC_GetValue>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <HAL_ADC_ConvCpltCallback+0x24>)
 8005568:	601a      	str	r2, [r3, #0]
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000098 	.word	0x20000098
 8005578:	200003c4 	.word	0x200003c4

0800557c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005580:	b672      	cpsid	i
}
 8005582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <Error_Handler+0x8>

08005588 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 800558c:	2208      	movs	r2, #8
 800558e:	2100      	movs	r1, #0
 8005590:	4805      	ldr	r0, [pc, #20]	@ (80055a8 <os_init+0x20>)
 8005592:	f008 fd38 	bl	800e006 <memset>
    hal_init();
 8005596:	f7fc fd19 	bl	8001fcc <hal_init>
    radio_init();
 800559a:	f000 fcbd 	bl	8005f18 <radio_init>
    LMIC_init();
 800559e:	f7ff fe05 	bl	80051ac <LMIC_init>
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	2000041c 	.word	0x2000041c

080055ac <os_getTime>:

ostime_t os_getTime () {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
    return hal_ticks();
 80055b0:	f7fc fc22 	bl	8001df8 <hal_ticks>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}

080055ba <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80055c4:	e00d      	b.n	80055e2 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d105      	bne.n	80055dc <unlinkjob+0x22>
            *pnext = job->next;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]
            return 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	e007      	b.n	80055ec <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ed      	bne.n	80055c6 <unlinkjob+0xc>
        }
    }
    return 0;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8005600:	f7fc fcb8 	bl	8001f74 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4809      	ldr	r0, [pc, #36]	@ (800562c <os_clearCallback+0x34>)
 8005608:	f7ff ffd7 	bl	80055ba <unlinkjob>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <os_clearCallback+0x26>
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4806      	ldr	r0, [pc, #24]	@ (8005630 <os_clearCallback+0x38>)
 8005616:	f7ff ffd0 	bl	80055ba <unlinkjob>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 800561e:	f7fc fcb9 	bl	8001f94 <hal_enableIRQs>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2000041c 	.word	0x2000041c
 8005630:	20000420 	.word	0x20000420

08005634 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 800563e:	f7fc fc99 	bl	8001f74 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	480d      	ldr	r0, [pc, #52]	@ (800567c <os_setCallback+0x48>)
 8005646:	f7ff ffb8 	bl	80055ba <unlinkjob>
    // fill-in job
    job->func = cb;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <os_setCallback+0x48>)
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	e002      	b.n	8005662 <os_setCallback+0x2e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f8      	bne.n	800565c <os_setCallback+0x28>
    *pnext = job;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005670:	f7fc fc90 	bl	8001f94 <hal_enableIRQs>
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000420 	.word	0x20000420

08005680 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 800568c:	f7fc fc72 	bl	8001f74 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	4815      	ldr	r0, [pc, #84]	@ (80056e8 <os_setTimedCallback+0x68>)
 8005694:	f7ff ff91 	bl	80055ba <unlinkjob>
    // fill-in job
    job->deadline = time;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	605a      	str	r2, [r3, #4]
    job->func = cb;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80056aa:	4b0f      	ldr	r3, [pc, #60]	@ (80056e8 <os_setTimedCallback+0x68>)
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e00e      	b.n	80056ce <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	dd04      	ble.n	80056c8 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	601a      	str	r2, [r3, #0]
            break;
 80056c6:	e006      	b.n	80056d6 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ec      	bne.n	80056b0 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 80056dc:	f7fc fc5a 	bl	8001f94 <hal_enableIRQs>
}
 80056e0:	bf00      	nop
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	2000041c 	.word	0x2000041c

080056ec <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 80056f6:	f7fc fc3d 	bl	8001f74 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 80056fa:	4b16      	ldr	r3, [pc, #88]	@ (8005754 <os_runloop+0x68>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <os_runloop+0x26>
            j = OS.runnablejobs;
 8005702:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <os_runloop+0x68>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a11      	ldr	r2, [pc, #68]	@ (8005754 <os_runloop+0x68>)
 800570e:	6053      	str	r3, [r2, #4]
 8005710:	e016      	b.n	8005740 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8005712:	4b10      	ldr	r3, [pc, #64]	@ (8005754 <os_runloop+0x68>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d010      	beq.n	800573c <os_runloop+0x50>
 800571a:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <os_runloop+0x68>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4618      	mov	r0, r3
 8005722:	f7fc fbc7 	bl	8001eb4 <hal_checkTimer>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <os_runloop+0x50>
            j = OS.scheduledjobs;
 800572c:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <os_runloop+0x68>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a07      	ldr	r2, [pc, #28]	@ (8005754 <os_runloop+0x68>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e001      	b.n	8005740 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 800573c:	f7fc fc3e 	bl	8001fbc <hal_sleep>
        }
        hal_enableIRQs();
 8005740:	f7fc fc28 	bl	8001f94 <hal_enableIRQs>
        if(j) { // run job callback
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0d3      	beq.n	80056f2 <os_runloop+0x6>
            j->func(j);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
    while(1) {
 8005752:	e7ce      	b.n	80056f2 <os_runloop+0x6>
 8005754:	2000041c 	.word	0x2000041c

08005758 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	460a      	mov	r2, r1
 8005762:	71fb      	strb	r3, [r7, #7]
 8005764:	4613      	mov	r3, r2
 8005766:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005768:	2000      	movs	r0, #0
 800576a:	f7fc fabd 	bl	8001ce8 <hal_pin_nss>
    hal_spi(addr | 0x80);
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4618      	mov	r0, r3
 8005778:	f7fc fb18 	bl	8001dac <hal_spi>
    hal_spi(data);
 800577c:	79bb      	ldrb	r3, [r7, #6]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc fb14 	bl	8001dac <hal_spi>
    hal_pin_nss(1);
 8005784:	2001      	movs	r0, #1
 8005786:	f7fc faaf 	bl	8001ce8 <hal_pin_nss>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <readReg>:

static u1_t readReg (u1_t addr) {
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 800579c:	2000      	movs	r0, #0
 800579e:	f7fc faa3 	bl	8001ce8 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fc fafe 	bl	8001dac <hal_spi>
    u1_t val = hal_spi(0x00);
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7fc fafb 	bl	8001dac <hal_spi>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 80057ba:	2001      	movs	r0, #1
 80057bc:	f7fc fa94 	bl	8001ce8 <hal_pin_nss>
    return val;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	4603      	mov	r3, r0
 80057d2:	6039      	str	r1, [r7, #0]
 80057d4:	71fb      	strb	r3, [r7, #7]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80057da:	2000      	movs	r0, #0
 80057dc:	f7fc fa84 	bl	8001ce8 <hal_pin_nss>
    hal_spi(addr | 0x80);
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fc fadf 	bl	8001dac <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	e009      	b.n	8005808 <writeBuf+0x3e>
        hal_spi(buf[i]);
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	4413      	add	r3, r2
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fc fad5 	bl	8001dac <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3301      	adds	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	7bfa      	ldrb	r2, [r7, #15]
 800580a:	79bb      	ldrb	r3, [r7, #6]
 800580c:	429a      	cmp	r2, r3
 800580e:	d3f1      	bcc.n	80057f4 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8005810:	2001      	movs	r0, #1
 8005812:	f7fc fa69 	bl	8001ce8 <hal_pin_nss>
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 800581e:	b590      	push	{r4, r7, lr}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	6039      	str	r1, [r7, #0]
 8005828:	71fb      	strb	r3, [r7, #7]
 800582a:	4613      	mov	r3, r2
 800582c:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800582e:	2000      	movs	r0, #0
 8005830:	f7fc fa5a 	bl	8001ce8 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800583a:	b2db      	uxtb	r3, r3
 800583c:	4618      	mov	r0, r3
 800583e:	f7fc fab5 	bl	8001dac <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	e00a      	b.n	800585e <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	18d4      	adds	r4, r2, r3
 800584e:	2000      	movs	r0, #0
 8005850:	f7fc faac 	bl	8001dac <hal_spi>
 8005854:	4603      	mov	r3, r0
 8005856:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	3301      	adds	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	79bb      	ldrb	r3, [r7, #6]
 8005862:	429a      	cmp	r2, r3
 8005864:	d3f0      	bcc.n	8005848 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8005866:	2001      	movs	r0, #1
 8005868:	f7fc fa3e 	bl	8001ce8 <hal_pin_nss>
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bd90      	pop	{r4, r7, pc}

08005874 <opmode>:

static void opmode (u1_t mode) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800587e:	2001      	movs	r0, #1
 8005880:	f7ff ff87 	bl	8005792 <readReg>
 8005884:	4603      	mov	r3, r0
 8005886:	b25b      	sxtb	r3, r3
 8005888:	f023 0307 	bic.w	r3, r3, #7
 800588c:	b25a      	sxtb	r2, r3
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	4313      	orrs	r3, r2
 8005894:	b25b      	sxtb	r3, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	4619      	mov	r1, r3
 800589a:	2001      	movs	r0, #1
 800589c:	f7ff ff5c 	bl	8005758 <writeReg>
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <opmodeLora>:

static void opmodeLora() {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	f043 0308 	orr.w	r3, r3, #8
 80058b8:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	4619      	mov	r1, r3
 80058be:	2001      	movs	r0, #1
 80058c0:	f7ff ff4a 	bl	8005758 <writeReg>
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <opmodeFSK>:

static void opmodeFSK() {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
    u1_t u = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	f043 0308 	orr.w	r3, r3, #8
 80058dc:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	4619      	mov	r1, r3
 80058e2:	2001      	movs	r0, #1
 80058e4:	f7ff ff38 	bl	8005758 <writeReg>
}
 80058e8:	bf00      	nop
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80058f6:	4b54      	ldr	r3, [pc, #336]	@ (8005a48 <configLoraModem+0x158>)
 80058f8:	89db      	ldrh	r3, [r3, #14]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fc fc1c 	bl	8002138 <getSf>
 8005900:	4603      	mov	r3, r0
 8005902:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	71fb      	strb	r3, [r7, #7]
 8005908:	2300      	movs	r3, #0
 800590a:	71bb      	strb	r3, [r7, #6]
 800590c:	2300      	movs	r3, #0
 800590e:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8005910:	4b4d      	ldr	r3, [pc, #308]	@ (8005a48 <configLoraModem+0x158>)
 8005912:	89db      	ldrh	r3, [r3, #14]
 8005914:	4618      	mov	r0, r3
 8005916:	f7fc fc1f 	bl	8002158 <getBw>
 800591a:	4603      	mov	r3, r0
 800591c:	2b02      	cmp	r3, #2
 800591e:	d010      	beq.n	8005942 <configLoraModem+0x52>
 8005920:	2b02      	cmp	r3, #2
 8005922:	dc13      	bgt.n	800594c <configLoraModem+0x5c>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <configLoraModem+0x3e>
 8005928:	2b01      	cmp	r3, #1
 800592a:	d005      	beq.n	8005938 <configLoraModem+0x48>
 800592c:	e00e      	b.n	800594c <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8005934:	71fb      	strb	r3, [r7, #7]
 8005936:	e00b      	b.n	8005950 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800593e:	71fb      	strb	r3, [r7, #7]
 8005940:	e006      	b.n	8005950 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8005948:	71fb      	strb	r3, [r7, #7]
 800594a:	e001      	b.n	8005950 <configLoraModem+0x60>
        default:
            ASSERT(0);
 800594c:	f7fc fb54 	bl	8001ff8 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005950:	4b3d      	ldr	r3, [pc, #244]	@ (8005a48 <configLoraModem+0x158>)
 8005952:	89db      	ldrh	r3, [r3, #14]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fc fc11 	bl	800217c <getCr>
 800595a:	4603      	mov	r3, r0
 800595c:	2b03      	cmp	r3, #3
 800595e:	d81f      	bhi.n	80059a0 <configLoraModem+0xb0>
 8005960:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <configLoraModem+0x78>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	08005983 	.word	0x08005983
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005997 	.word	0x08005997
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	f043 0302 	orr.w	r3, r3, #2
 800597e:	71fb      	strb	r3, [r7, #7]
 8005980:	e010      	b.n	80059a4 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	f043 0304 	orr.w	r3, r3, #4
 8005988:	71fb      	strb	r3, [r7, #7]
 800598a:	e00b      	b.n	80059a4 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f043 0306 	orr.w	r3, r3, #6
 8005992:	71fb      	strb	r3, [r7, #7]
 8005994:	e006      	b.n	80059a4 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	f043 0308 	orr.w	r3, r3, #8
 800599c:	71fb      	strb	r3, [r7, #7]
 800599e:	e001      	b.n	80059a4 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 80059a0:	f7fc fb2a 	bl	8001ff8 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 80059a4:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <configLoraModem+0x158>)
 80059a6:	89db      	ldrh	r3, [r3, #14]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fc fc39 	bl	8002220 <getIh>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 80059bc:	4b22      	ldr	r3, [pc, #136]	@ (8005a48 <configLoraModem+0x158>)
 80059be:	89db      	ldrh	r3, [r3, #14]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fc fc2d 	bl	8002220 <getIh>
 80059c6:	4603      	mov	r3, r0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	2022      	movs	r0, #34	@ 0x22
 80059ce:	f7ff fec3 	bl	8005758 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	4619      	mov	r1, r3
 80059d6:	201d      	movs	r0, #29
 80059d8:	f7ff febe 	bl	8005758 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 80059dc:	793b      	ldrb	r3, [r7, #4]
 80059de:	3b01      	subs	r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	3370      	adds	r3, #112	@ 0x70
 80059e8:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 80059ea:	4b17      	ldr	r3, [pc, #92]	@ (8005a48 <configLoraModem+0x158>)
 80059ec:	89db      	ldrh	r3, [r3, #14]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fbef 	bl	80021d2 <getNocrc>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80059fa:	79bb      	ldrb	r3, [r7, #6]
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 8005a02:	79bb      	ldrb	r3, [r7, #6]
 8005a04:	4619      	mov	r1, r3
 8005a06:	201e      	movs	r0, #30
 8005a08:	f7ff fea6 	bl	8005758 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8005a10:	793b      	ldrb	r3, [r7, #4]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d002      	beq.n	8005a1c <configLoraModem+0x12c>
 8005a16:	793b      	ldrb	r3, [r7, #4]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d10b      	bne.n	8005a34 <configLoraModem+0x144>
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <configLoraModem+0x158>)
 8005a1e:	89db      	ldrh	r3, [r3, #14]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fc fb99 	bl	8002158 <getBw>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8005a2c:	797b      	ldrb	r3, [r7, #5]
 8005a2e:	f043 0308 	orr.w	r3, r3, #8
 8005a32:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8005a34:	797b      	ldrb	r3, [r7, #5]
 8005a36:	4619      	mov	r1, r3
 8005a38:	2026      	movs	r0, #38	@ 0x26
 8005a3a:	f7ff fe8d 	bl	8005758 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000218 	.word	0x20000218

08005a4c <configChannel>:

static void configChannel () {
 8005a4c:	b5b0      	push	{r4, r5, r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8005a52:	4c1b      	ldr	r4, [pc, #108]	@ (8005ac0 <configChannel+0x74>)
 8005a54:	68a4      	ldr	r4, [r4, #8]
 8005a56:	2500      	movs	r5, #0
 8005a58:	4622      	mov	r2, r4
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	0b51      	lsrs	r1, r2, #13
 8005a5e:	04d0      	lsls	r0, r2, #19
 8005a60:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <configChannel+0x78>)
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	f7fb f871 	bl	8000b4c <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	0c02      	lsrs	r2, r0, #16
 8005a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005a84:	0c0b      	lsrs	r3, r1, #16
 8005a86:	b2d3      	uxtb	r3, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	2006      	movs	r0, #6
 8005a8c:	f7ff fe64 	bl	8005758 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	0a02      	lsrs	r2, r0, #8
 8005a9e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005aa2:	0a0b      	lsrs	r3, r1, #8
 8005aa4:	b2d3      	uxtb	r3, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	2007      	movs	r0, #7
 8005aaa:	f7ff fe55 	bl	8005758 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005aae:	783b      	ldrb	r3, [r7, #0]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	2008      	movs	r0, #8
 8005ab4:	f7ff fe50 	bl	8005758 <writeReg>
}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac0:	20000218 	.word	0x20000218
 8005ac4:	01e84800 	.word	0x01e84800

08005ac8 <configPower>:



static void configPower () {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <configPower+0x5c>)
 8005ad0:	7c9b      	ldrb	r3, [r3, #18]
 8005ad2:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	dd02      	ble.n	8005ae2 <configPower+0x1a>
        pw = 15;
 8005adc:	230f      	movs	r3, #15
 8005ade:	71fb      	strb	r3, [r7, #7]
 8005ae0:	e005      	b.n	8005aee <configPower+0x26>
    } else if(pw < 2) {
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	dc01      	bgt.n	8005aee <configPower+0x26>
        pw = 2;
 8005aea:	2302      	movs	r3, #2
 8005aec:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	b25b      	sxtb	r3, r3
 8005af6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	2009      	movs	r0, #9
 8005b02:	f7ff fe29 	bl	8005758 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 8005b06:	205a      	movs	r0, #90	@ 0x5a
 8005b08:	f7ff fe43 	bl	8005792 <readReg>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	4619      	mov	r1, r3
 8005b16:	205a      	movs	r0, #90	@ 0x5a
 8005b18:	f7ff fe1e 	bl	8005758 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000218 	.word	0x20000218

08005b28 <txfsk>:

static void txfsk () {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8005b2c:	2110      	movs	r1, #16
 8005b2e:	2001      	movs	r0, #1
 8005b30:	f7ff fe12 	bl	8005758 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 8005b34:	2001      	movs	r0, #1
 8005b36:	f7ff fe2c 	bl	8005792 <readReg>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d001      	beq.n	8005b44 <txfsk+0x1c>
 8005b40:	f7fc fa5a 	bl	8001ff8 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7ff fe95 	bl	8005874 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f7ff fe03 	bl	8005758 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005b52:	2180      	movs	r1, #128	@ 0x80
 8005b54:	2003      	movs	r0, #3
 8005b56:	f7ff fdff 	bl	8005758 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	2004      	movs	r0, #4
 8005b5e:	f7ff fdfb 	bl	8005758 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005b62:	2199      	movs	r1, #153	@ 0x99
 8005b64:	2005      	movs	r0, #5
 8005b66:	f7ff fdf7 	bl	8005758 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	2025      	movs	r0, #37	@ 0x25
 8005b6e:	f7ff fdf3 	bl	8005758 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005b72:	2105      	movs	r1, #5
 8005b74:	2026      	movs	r0, #38	@ 0x26
 8005b76:	f7ff fdef 	bl	8005758 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005b7a:	2112      	movs	r1, #18
 8005b7c:	2027      	movs	r0, #39	@ 0x27
 8005b7e:	f7ff fdeb 	bl	8005758 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005b82:	21d0      	movs	r1, #208	@ 0xd0
 8005b84:	2030      	movs	r0, #48	@ 0x30
 8005b86:	f7ff fde7 	bl	8005758 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005b8a:	2140      	movs	r1, #64	@ 0x40
 8005b8c:	2031      	movs	r0, #49	@ 0x31
 8005b8e:	f7ff fde3 	bl	8005758 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005b92:	21c1      	movs	r1, #193	@ 0xc1
 8005b94:	2028      	movs	r0, #40	@ 0x28
 8005b96:	f7ff fddf 	bl	8005758 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005b9a:	2194      	movs	r1, #148	@ 0x94
 8005b9c:	2029      	movs	r0, #41	@ 0x29
 8005b9e:	f7ff fddb 	bl	8005758 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005ba2:	21c1      	movs	r1, #193	@ 0xc1
 8005ba4:	202a      	movs	r0, #42	@ 0x2a
 8005ba6:	f7ff fdd7 	bl	8005758 <writeReg>
    // configure frequency
    configChannel();
 8005baa:	f7ff ff4f 	bl	8005a4c <configChannel>
    // configure output power
    configPower();
 8005bae:	f7ff ff8b 	bl	8005ac8 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005bb2:	2134      	movs	r1, #52	@ 0x34
 8005bb4:	2040      	movs	r0, #64	@ 0x40
 8005bb6:	f7ff fdcf 	bl	8005758 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8005bba:	4b10      	ldr	r3, [pc, #64]	@ (8005bfc <txfsk+0xd4>)
 8005bbc:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	2032      	movs	r0, #50	@ 0x32
 8005bc8:	f7ff fdc6 	bl	8005758 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <txfsk+0xd4>)
 8005bce:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7ff fdbf 	bl	8005758 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005bda:	4b08      	ldr	r3, [pc, #32]	@ (8005bfc <txfsk+0xd4>)
 8005bdc:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005be0:	461a      	mov	r2, r3
 8005be2:	4907      	ldr	r1, [pc, #28]	@ (8005c00 <txfsk+0xd8>)
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7ff fdf0 	bl	80057ca <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005bea:	2001      	movs	r0, #1
 8005bec:	f7fc f871 	bl	8001cd2 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005bf0:	2003      	movs	r0, #3
 8005bf2:	f7ff fe3f 	bl	8005874 <opmode>
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000218 	.word	0x20000218
 8005c00:	20000360 	.word	0x20000360

08005c04 <txlora>:

static void txlora () {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8005c08:	f7ff fe4e 	bl	80058a8 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	f7ff fdc0 	bl	8005792 <readReg>
 8005c12:	4603      	mov	r3, r0
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db01      	blt.n	8005c1e <txlora+0x1a>
 8005c1a:	f7fc f9ed 	bl	8001ff8 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f7ff fe28 	bl	8005874 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8005c24:	f7ff fe64 	bl	80058f0 <configLoraModem>
    // configure frequency
    configChannel();
 8005c28:	f7ff ff10 	bl	8005a4c <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	f7ff fdb0 	bl	8005792 <readReg>
 8005c32:	4603      	mov	r3, r0
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	f023 030f 	bic.w	r3, r3, #15
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	b25b      	sxtb	r3, r3
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	200a      	movs	r0, #10
 8005c48:	f7ff fd86 	bl	8005758 <writeReg>
    configPower();
 8005c4c:	f7ff ff3c 	bl	8005ac8 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005c50:	2134      	movs	r1, #52	@ 0x34
 8005c52:	2039      	movs	r0, #57	@ 0x39
 8005c54:	f7ff fd80 	bl	8005758 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005c58:	21f0      	movs	r1, #240	@ 0xf0
 8005c5a:	2040      	movs	r0, #64	@ 0x40
 8005c5c:	f7ff fd7c 	bl	8005758 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005c60:	21ff      	movs	r1, #255	@ 0xff
 8005c62:	2012      	movs	r0, #18
 8005c64:	f7ff fd78 	bl	8005758 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005c68:	21f7      	movs	r1, #247	@ 0xf7
 8005c6a:	2011      	movs	r0, #17
 8005c6c:	f7ff fd74 	bl	8005758 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005c70:	2100      	movs	r1, #0
 8005c72:	200e      	movs	r0, #14
 8005c74:	f7ff fd70 	bl	8005758 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005c78:	2100      	movs	r1, #0
 8005c7a:	200d      	movs	r0, #13
 8005c7c:	f7ff fd6c 	bl	8005758 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <txlora+0xac>)
 8005c82:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005c86:	4619      	mov	r1, r3
 8005c88:	2022      	movs	r0, #34	@ 0x22
 8005c8a:	f7ff fd65 	bl	8005758 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005c8e:	4b08      	ldr	r3, [pc, #32]	@ (8005cb0 <txlora+0xac>)
 8005c90:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005c94:	461a      	mov	r2, r3
 8005c96:	4907      	ldr	r1, [pc, #28]	@ (8005cb4 <txlora+0xb0>)
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f7ff fd96 	bl	80057ca <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f7fc f817 	bl	8001cd2 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005ca4:	2003      	movs	r0, #3
 8005ca6:	f7ff fde5 	bl	8005874 <opmode>
}
 8005caa:	bf00      	nop
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000218 	.word	0x20000218
 8005cb4:	20000360 	.word	0x20000360

08005cb8 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	f7ff fd68 	bl	8005792 <readReg>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <starttx+0x18>
 8005ccc:	f7fc f994 	bl	8001ff8 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005cd0:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <starttx+0x38>)
 8005cd2:	89db      	ldrh	r3, [r3, #14]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fc fa2f 	bl	8002138 <getSf>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <starttx+0x2e>
        txfsk();
 8005ce0:	f7ff ff22 	bl	8005b28 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005ce4:	e001      	b.n	8005cea <starttx+0x32>
        txlora();
 8005ce6:	f7ff ff8d 	bl	8005c04 <txlora>
}
 8005cea:	bf00      	nop
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000218 	.word	0x20000218

08005cf4 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8005cfe:	f7ff fdd3 	bl	80058a8 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005d02:	2001      	movs	r0, #1
 8005d04:	f7ff fd45 	bl	8005792 <readReg>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	db01      	blt.n	8005d14 <rxlora+0x20>
 8005d10:	f7fc f972 	bl	8001ff8 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005d14:	2001      	movs	r0, #1
 8005d16:	f7ff fdad 	bl	8005874 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d108      	bne.n	8005d32 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8005d20:	210a      	movs	r1, #10
 8005d22:	201d      	movs	r0, #29
 8005d24:	f7ff fd18 	bl	8005758 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8005d28:	2170      	movs	r1, #112	@ 0x70
 8005d2a:	201e      	movs	r0, #30
 8005d2c:	f7ff fd14 	bl	8005758 <writeReg>
 8005d30:	e003      	b.n	8005d3a <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8005d32:	f7ff fddd 	bl	80058f0 <configLoraModem>
        // configure frequency
        configChannel();
 8005d36:	f7ff fe89 	bl	8005a4c <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8005d3a:	2121      	movs	r1, #33	@ 0x21
 8005d3c:	200c      	movs	r0, #12
 8005d3e:	f7ff fd0b 	bl	8005758 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8005d42:	2140      	movs	r1, #64	@ 0x40
 8005d44:	2023      	movs	r0, #35	@ 0x23
 8005d46:	f7ff fd07 	bl	8005758 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8005d4a:	4b26      	ldr	r3, [pc, #152]	@ (8005de4 <rxlora+0xf0>)
 8005d4c:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005d54:	2033      	movs	r0, #51	@ 0x33
 8005d56:	f7ff fd1c 	bl	8005792 <readReg>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4619      	mov	r1, r3
 8005d64:	2033      	movs	r0, #51	@ 0x33
 8005d66:	f7ff fcf7 	bl	8005758 <writeReg>
 8005d6a:	e00a      	b.n	8005d82 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005d6c:	2033      	movs	r0, #51	@ 0x33
 8005d6e:	f7ff fd10 	bl	8005792 <readReg>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	2033      	movs	r0, #51	@ 0x33
 8005d7e:	f7ff fceb 	bl	8005758 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005d82:	4b18      	ldr	r3, [pc, #96]	@ (8005de4 <rxlora+0xf0>)
 8005d84:	7c1b      	ldrb	r3, [r3, #16]
 8005d86:	4619      	mov	r1, r3
 8005d88:	201f      	movs	r0, #31
 8005d8a:	f7ff fce5 	bl	8005758 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005d8e:	2134      	movs	r1, #52	@ 0x34
 8005d90:	2039      	movs	r0, #57	@ 0x39
 8005d92:	f7ff fce1 	bl	8005758 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8005d96:	21c0      	movs	r1, #192	@ 0xc0
 8005d98:	2040      	movs	r0, #64	@ 0x40
 8005d9a:	f7ff fcdd 	bl	8005758 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005d9e:	21ff      	movs	r1, #255	@ 0xff
 8005da0:	2012      	movs	r0, #18
 8005da2:	f7ff fcd9 	bl	8005758 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	4a0f      	ldr	r2, [pc, #60]	@ (8005de8 <rxlora+0xf4>)
 8005daa:	5cd3      	ldrb	r3, [r2, r3]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	2011      	movs	r0, #17
 8005db4:	f7ff fcd0 	bl	8005758 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005db8:	2000      	movs	r0, #0
 8005dba:	f7fb ff8a 	bl	8001cd2 <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d108      	bne.n	8005dd6 <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <rxlora+0xf0>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fc f862 	bl	8001e92 <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005dce:	2006      	movs	r0, #6
 8005dd0:	f7ff fd50 	bl	8005874 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005dd4:	e002      	b.n	8005ddc <rxlora+0xe8>
        opmode(OPMODE_RX); 
 8005dd6:	2005      	movs	r0, #5
 8005dd8:	f7ff fd4c 	bl	8005874 <opmode>
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000218 	.word	0x20000218
 8005de8:	08010374 	.word	0x08010374

08005dec <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <rxfsk+0x14>
 8005dfc:	f7fc f8fc 	bl	8001ff8 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005e00:	f7ff fd64 	bl	80058cc <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005e04:	2001      	movs	r0, #1
 8005e06:	f7ff fcc4 	bl	8005792 <readReg>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da01      	bge.n	8005e16 <rxfsk+0x2a>
 8005e12:	f7fc f8f1 	bl	8001ff8 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005e16:	2001      	movs	r0, #1
 8005e18:	f7ff fd2c 	bl	8005874 <opmode>
    // configure frequency
    configChannel();
 8005e1c:	f7ff fe16 	bl	8005a4c <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8005e20:	2121      	movs	r1, #33	@ 0x21
 8005e22:	200c      	movs	r0, #12
 8005e24:	f7ff fc98 	bl	8005758 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8005e28:	211e      	movs	r1, #30
 8005e2a:	200d      	movs	r0, #13
 8005e2c:	f7ff fc94 	bl	8005758 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8005e30:	210b      	movs	r1, #11
 8005e32:	2012      	movs	r0, #18
 8005e34:	f7ff fc90 	bl	8005758 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8005e38:	2112      	movs	r1, #18
 8005e3a:	2013      	movs	r0, #19
 8005e3c:	f7ff fc8c 	bl	8005758 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005e40:	21aa      	movs	r1, #170	@ 0xaa
 8005e42:	201f      	movs	r0, #31
 8005e44:	f7ff fc88 	bl	8005758 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8005e48:	2112      	movs	r1, #18
 8005e4a:	2027      	movs	r0, #39	@ 0x27
 8005e4c:	f7ff fc84 	bl	8005758 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005e50:	21d8      	movs	r1, #216	@ 0xd8
 8005e52:	2030      	movs	r0, #48	@ 0x30
 8005e54:	f7ff fc80 	bl	8005758 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005e58:	2140      	movs	r1, #64	@ 0x40
 8005e5a:	2031      	movs	r0, #49	@ 0x31
 8005e5c:	f7ff fc7c 	bl	8005758 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005e60:	21c1      	movs	r1, #193	@ 0xc1
 8005e62:	2028      	movs	r0, #40	@ 0x28
 8005e64:	f7ff fc78 	bl	8005758 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005e68:	2194      	movs	r1, #148	@ 0x94
 8005e6a:	2029      	movs	r0, #41	@ 0x29
 8005e6c:	f7ff fc74 	bl	8005758 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005e70:	21c1      	movs	r1, #193	@ 0xc1
 8005e72:	202a      	movs	r0, #42	@ 0x2a
 8005e74:	f7ff fc70 	bl	8005758 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8005e78:	21ff      	movs	r1, #255	@ 0xff
 8005e7a:	2021      	movs	r0, #33	@ 0x21
 8005e7c:	f7ff fc6c 	bl	8005758 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005e80:	2102      	movs	r1, #2
 8005e82:	2002      	movs	r0, #2
 8005e84:	f7ff fc68 	bl	8005758 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005e88:	2180      	movs	r1, #128	@ 0x80
 8005e8a:	2003      	movs	r0, #3
 8005e8c:	f7ff fc64 	bl	8005758 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005e90:	2101      	movs	r1, #1
 8005e92:	2004      	movs	r0, #4
 8005e94:	f7ff fc60 	bl	8005758 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005e98:	2199      	movs	r1, #153	@ 0x99
 8005e9a:	2005      	movs	r0, #5
 8005e9c:	f7ff fc5c 	bl	8005758 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005ea0:	2138      	movs	r1, #56	@ 0x38
 8005ea2:	2040      	movs	r0, #64	@ 0x40
 8005ea4:	f7ff fc58 	bl	8005758 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f7fb ff12 	bl	8001cd2 <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005eae:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <rxfsk+0xdc>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fb ffed 	bl	8001e92 <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8005eb8:	2005      	movs	r0, #5
 8005eba:	f7ff fcdb 	bl	8005874 <opmode>
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000218 	.word	0x20000218

08005ecc <startrx>:

static void startrx (u1_t rxmode) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	f7ff fc5b 	bl	8005792 <readReg>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <startrx+0x1e>
 8005ee6:	f7fc f887 	bl	8001ff8 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005eea:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <startrx+0x48>)
 8005eec:	89db      	ldrh	r3, [r3, #14]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fc f922 	bl	8002138 <getSf>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <startrx+0x38>
        rxfsk(rxmode);
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ff75 	bl	8005dec <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 8005f02:	e003      	b.n	8005f0c <startrx+0x40>
        rxlora(rxmode);
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fef4 	bl	8005cf4 <rxlora>
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000218 	.word	0x20000218

08005f18 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8005f1e:	f7fc f829 	bl	8001f74 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 8005f22:	2000      	movs	r0, #0
 8005f24:	f7fb fef1 	bl	8001d0a <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8005f28:	f7ff fb40 	bl	80055ac <os_getTime>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	3320      	adds	r3, #32
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fb ffae 	bl	8001e92 <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 8005f36:	2002      	movs	r0, #2
 8005f38:	f7fb fee7 	bl	8001d0a <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8005f3c:	f7ff fb36 	bl	80055ac <os_getTime>
 8005f40:	4603      	mov	r3, r0
 8005f42:	33a0      	adds	r3, #160	@ 0xa0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fb ffa4 	bl	8001e92 <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f7ff fc92 	bl	8005874 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8005f50:	2042      	movs	r0, #66	@ 0x42
 8005f52:	f7ff fc1e 	bl	8005792 <readReg>
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	2b12      	cmp	r3, #18
 8005f5e:	d001      	beq.n	8005f64 <radio_init+0x4c>
 8005f60:	f7fc f84a 	bl	8001ff8 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8005f64:	2002      	movs	r0, #2
 8005f66:	f7ff fec5 	bl	8005cf4 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8005f6a:	bf00      	nop
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f7ff fc10 	bl	8005792 <readReg>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d1f7      	bne.n	8005f6c <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e02c      	b.n	8005fdc <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 8005f82:	2300      	movs	r3, #0
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	e023      	b.n	8005fd0 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8005f88:	bf00      	nop
 8005f8a:	202c      	movs	r0, #44	@ 0x2c
 8005f8c:	f7ff fc01 	bl	8005792 <readReg>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	71bb      	strb	r3, [r7, #6]
 8005f98:	79bc      	ldrb	r4, [r7, #6]
 8005f9a:	202c      	movs	r0, #44	@ 0x2c
 8005f9c:	f7ff fbf9 	bl	8005792 <readReg>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d0ef      	beq.n	8005f8a <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8005faa:	4a14      	ldr	r2, [pc, #80]	@ (8005ffc <radio_init+0xe4>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	b25a      	sxtb	r2, r3
 8005fb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b25b      	sxtb	r3, r3
 8005fbe:	b2d9      	uxtb	r1, r3
 8005fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8005ffc <radio_init+0xe4>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b07      	cmp	r3, #7
 8005fd4:	ddd8      	ble.n	8005f88 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	ddcf      	ble.n	8005f82 <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 8005fe2:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <radio_init+0xe4>)
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7ff fc43 	bl	8005874 <opmode>

    hal_enableIRQs();
 8005fee:	f7fb ffd1 	bl	8001f94 <hal_enableIRQs>
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000424 	.word	0x20000424

08006000 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 8006006:	4b10      	ldr	r3, [pc, #64]	@ (8006048 <radio_rand1+0x48>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <radio_rand1+0x16>
 8006012:	f7fb fff1 	bl	8001ff8 <hal_failed>
    if( i==16 ) {
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b10      	cmp	r3, #16
 800601a:	d106      	bne.n	800602a <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 800601c:	2210      	movs	r2, #16
 800601e:	490a      	ldr	r1, [pc, #40]	@ (8006048 <radio_rand1+0x48>)
 8006020:	2000      	movs	r0, #0
 8006022:	f7fb f859 	bl	80010d8 <os_aes>
        i = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	71fa      	strb	r2, [r7, #7]
 8006030:	461a      	mov	r2, r3
 8006032:	4b05      	ldr	r3, [pc, #20]	@ (8006048 <radio_rand1+0x48>)
 8006034:	5c9b      	ldrb	r3, [r3, r2]
 8006036:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 8006038:	4a03      	ldr	r2, [pc, #12]	@ (8006048 <radio_rand1+0x48>)
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	7013      	strb	r3, [r2, #0]
    return v;
 800603e:	79bb      	ldrb	r3, [r7, #6]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000424 	.word	0x20000424

0800604c <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 8006056:	f7ff faa9 	bl	80055ac <os_getTime>
 800605a:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 800605c:	2001      	movs	r0, #1
 800605e:	f7ff fb98 	bl	8005792 <readReg>
 8006062:	4603      	mov	r3, r0
 8006064:	b25b      	sxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	da74      	bge.n	8006154 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 800606a:	2012      	movs	r0, #18
 800606c:	f7ff fb91 	bl	8005792 <readReg>
 8006070:	4603      	mov	r3, r0
 8006072:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8006074:	7a7b      	ldrb	r3, [r7, #9]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b01      	subs	r3, #1
 8006082:	4a59      	ldr	r2, [pc, #356]	@ (80061e8 <radio_irq_handler+0x19c>)
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e05c      	b.n	8006142 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8006088:	7a7b      	ldrb	r3, [r7, #9]
 800608a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d04f      	beq.n	8006132 <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8006092:	4b55      	ldr	r3, [pc, #340]	@ (80061e8 <radio_irq_handler+0x19c>)
 8006094:	89db      	ldrh	r3, [r3, #14]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fc f85e 	bl	8002158 <getBw>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 80060a2:	4b51      	ldr	r3, [pc, #324]	@ (80061e8 <radio_irq_handler+0x19c>)
 80060a4:	89db      	ldrh	r3, [r3, #14]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fc f846 	bl	8002138 <getSf>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	4b4e      	ldr	r3, [pc, #312]	@ (80061ec <radio_irq_handler+0x1a0>)
 80060b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80060b6:	461a      	mov	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 80060be:	4a4a      	ldr	r2, [pc, #296]	@ (80061e8 <radio_irq_handler+0x19c>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 80060c4:	201d      	movs	r0, #29
 80060c6:	f7ff fb64 	bl	8005792 <readReg>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 80060d4:	2022      	movs	r0, #34	@ 0x22
 80060d6:	f7ff fb5c 	bl	8005792 <readReg>
 80060da:	4603      	mov	r3, r0
 80060dc:	461a      	mov	r2, r3
 80060de:	e004      	b.n	80060ea <radio_irq_handler+0x9e>
 80060e0:	2013      	movs	r0, #19
 80060e2:	f7ff fb56 	bl	8005792 <readReg>
 80060e6:	4603      	mov	r3, r0
 80060e8:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 80060ea:	4b3f      	ldr	r3, [pc, #252]	@ (80061e8 <radio_irq_handler+0x19c>)
 80060ec:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 80060f0:	2010      	movs	r0, #16
 80060f2:	f7ff fb4e 	bl	8005792 <readReg>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4619      	mov	r1, r3
 80060fa:	200d      	movs	r0, #13
 80060fc:	f7ff fb2c 	bl	8005758 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006100:	4b39      	ldr	r3, [pc, #228]	@ (80061e8 <radio_irq_handler+0x19c>)
 8006102:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006106:	461a      	mov	r2, r3
 8006108:	4939      	ldr	r1, [pc, #228]	@ (80061f0 <radio_irq_handler+0x1a4>)
 800610a:	2000      	movs	r0, #0
 800610c:	f7ff fb87 	bl	800581e <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8006110:	2019      	movs	r0, #25
 8006112:	f7ff fb3e 	bl	8005792 <readReg>
 8006116:	4603      	mov	r3, r0
 8006118:	b25a      	sxtb	r2, r3
 800611a:	4b33      	ldr	r3, [pc, #204]	@ (80061e8 <radio_irq_handler+0x19c>)
 800611c:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 800611e:	201a      	movs	r0, #26
 8006120:	f7ff fb37 	bl	8005792 <readReg>
 8006124:	4603      	mov	r3, r0
 8006126:	3b3d      	subs	r3, #61	@ 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	b25a      	sxtb	r2, r3
 800612c:	4b2e      	ldr	r3, [pc, #184]	@ (80061e8 <radio_irq_handler+0x19c>)
 800612e:	731a      	strb	r2, [r3, #12]
 8006130:	e007      	b.n	8006142 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 8006132:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006136:	2b00      	cmp	r3, #0
 8006138:	da03      	bge.n	8006142 <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 800613a:	4b2b      	ldr	r3, [pc, #172]	@ (80061e8 <radio_irq_handler+0x19c>)
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8006142:	21ff      	movs	r1, #255	@ 0xff
 8006144:	2011      	movs	r0, #17
 8006146:	f7ff fb07 	bl	8005758 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 800614a:	21ff      	movs	r1, #255	@ 0xff
 800614c:	2012      	movs	r0, #18
 800614e:	f7ff fb03 	bl	8005758 <writeReg>
 8006152:	e03c      	b.n	80061ce <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8006154:	203e      	movs	r0, #62	@ 0x3e
 8006156:	f7ff fb1c 	bl	8005792 <readReg>
 800615a:	4603      	mov	r3, r0
 800615c:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 800615e:	203f      	movs	r0, #63	@ 0x3f
 8006160:	f7ff fb17 	bl	8005792 <readReg>
 8006164:	4603      	mov	r3, r0
 8006166:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8006168:	7abb      	ldrb	r3, [r7, #10]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8006172:	4a1d      	ldr	r2, [pc, #116]	@ (80061e8 <radio_irq_handler+0x19c>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e029      	b.n	80061ce <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 800617a:	7abb      	ldrb	r3, [r7, #10]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d019      	beq.n	80061b8 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8006184:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <radio_irq_handler+0x19c>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 800618a:	2032      	movs	r0, #50	@ 0x32
 800618c:	f7ff fb01 	bl	8005792 <readReg>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	4b14      	ldr	r3, [pc, #80]	@ (80061e8 <radio_irq_handler+0x19c>)
 8006196:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800619a:	4b13      	ldr	r3, [pc, #76]	@ (80061e8 <radio_irq_handler+0x19c>)
 800619c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80061a0:	461a      	mov	r2, r3
 80061a2:	4913      	ldr	r1, [pc, #76]	@ (80061f0 <radio_irq_handler+0x1a4>)
 80061a4:	2000      	movs	r0, #0
 80061a6:	f7ff fb3a 	bl	800581e <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 80061aa:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <radio_irq_handler+0x19c>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 80061b0:	4b0d      	ldr	r3, [pc, #52]	@ (80061e8 <radio_irq_handler+0x19c>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	731a      	strb	r2, [r3, #12]
 80061b6:	e00a      	b.n	80061ce <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 80061c2:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <radio_irq_handler+0x19c>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80061ca:	e000      	b.n	80061ce <radio_irq_handler+0x182>
        } else {
            while(1);
 80061cc:	e7fe      	b.n	80061cc <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7ff fb50 	bl	8005874 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 80061d4:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <radio_irq_handler+0x19c>)
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4619      	mov	r1, r3
 80061da:	4806      	ldr	r0, [pc, #24]	@ (80061f4 <radio_irq_handler+0x1a8>)
 80061dc:	f7ff fa2a 	bl	8005634 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000218 	.word	0x20000218
 80061ec:	08010378 	.word	0x08010378
 80061f0:	20000360 	.word	0x20000360
 80061f4:	2000022c 	.word	0x2000022c

080061f8 <os_radio>:

void os_radio (u1_t mode) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 8006202:	f7fb feb7 	bl	8001f74 <hal_disableIRQs>
    switch (mode) {
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d81a      	bhi.n	8006242 <os_radio+0x4a>
 800620c:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <os_radio+0x1c>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006225 	.word	0x08006225
 8006218:	0800622d 	.word	0x0800622d
 800621c:	08006233 	.word	0x08006233
 8006220:	0800623b 	.word	0x0800623b
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8006224:	2000      	movs	r0, #0
 8006226:	f7ff fb25 	bl	8005874 <opmode>
        break;
 800622a:	e00a      	b.n	8006242 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 800622c:	f7ff fd44 	bl	8005cb8 <starttx>
        break;
 8006230:	e007      	b.n	8006242 <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8006232:	2000      	movs	r0, #0
 8006234:	f7ff fe4a 	bl	8005ecc <startrx>
        break;
 8006238:	e003      	b.n	8006242 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 800623a:	2001      	movs	r0, #1
 800623c:	f7ff fe46 	bl	8005ecc <startrx>
        break;
 8006240:	bf00      	nop
    }
    hal_enableIRQs();
 8006242:	f7fb fea7 	bl	8001f94 <hal_enableIRQs>
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006254:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006256:	4a1c      	ldr	r2, [pc, #112]	@ (80062c8 <MX_SPI3_Init+0x78>)
 8006258:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800625a:	4b1a      	ldr	r3, [pc, #104]	@ (80062c4 <MX_SPI3_Init+0x74>)
 800625c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006260:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006262:	4b18      	ldr	r3, [pc, #96]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006264:	2200      	movs	r2, #0
 8006266:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006268:	4b16      	ldr	r3, [pc, #88]	@ (80062c4 <MX_SPI3_Init+0x74>)
 800626a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800626e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006270:	4b14      	ldr	r3, [pc, #80]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006276:	4b13      	ldr	r3, [pc, #76]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800627c:	4b11      	ldr	r3, [pc, #68]	@ (80062c4 <MX_SPI3_Init+0x74>)
 800627e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006282:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006284:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006286:	2228      	movs	r2, #40	@ 0x28
 8006288:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800628a:	4b0e      	ldr	r3, [pc, #56]	@ (80062c4 <MX_SPI3_Init+0x74>)
 800628c:	2200      	movs	r2, #0
 800628e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006292:	2200      	movs	r2, #0
 8006294:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006296:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <MX_SPI3_Init+0x74>)
 8006298:	2200      	movs	r2, #0
 800629a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800629c:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <MX_SPI3_Init+0x74>)
 800629e:	2207      	movs	r2, #7
 80062a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062a2:	4b08      	ldr	r3, [pc, #32]	@ (80062c4 <MX_SPI3_Init+0x74>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <MX_SPI3_Init+0x74>)
 80062aa:	2208      	movs	r2, #8
 80062ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80062ae:	4805      	ldr	r0, [pc, #20]	@ (80062c4 <MX_SPI3_Init+0x74>)
 80062b0:	f006 fd6a 	bl	800cd88 <HAL_SPI_Init>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80062ba:	f7ff f95f 	bl	800557c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000434 	.word	0x20000434
 80062c8:	40003c00 	.word	0x40003c00

080062cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	@ 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	609a      	str	r2, [r3, #8]
 80062e0:	60da      	str	r2, [r3, #12]
 80062e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006358 <HAL_SPI_MspInit+0x8c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d12f      	bne.n	800634e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80062ee:	4b1b      	ldr	r3, [pc, #108]	@ (800635c <HAL_SPI_MspInit+0x90>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f2:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_SPI_MspInit+0x90>)
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062fa:	4b18      	ldr	r3, [pc, #96]	@ (800635c <HAL_SPI_MspInit+0x90>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006306:	4b15      	ldr	r3, [pc, #84]	@ (800635c <HAL_SPI_MspInit+0x90>)
 8006308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630a:	4a14      	ldr	r2, [pc, #80]	@ (800635c <HAL_SPI_MspInit+0x90>)
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <HAL_SPI_MspInit+0x90>)
 8006314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800631e:	2338      	movs	r3, #56	@ 0x38
 8006320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006322:	2302      	movs	r3, #2
 8006324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800632a:	2303      	movs	r3, #3
 800632c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800632e:	2306      	movs	r3, #6
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	4619      	mov	r1, r3
 8006338:	4809      	ldr	r0, [pc, #36]	@ (8006360 <HAL_SPI_MspInit+0x94>)
 800633a:	f004 fb2f 	bl	800a99c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	2033      	movs	r0, #51	@ 0x33
 8006344:	f004 fab3 	bl	800a8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8006348:	2033      	movs	r0, #51	@ 0x33
 800634a:	f004 facc 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800634e:	bf00      	nop
 8006350:	3728      	adds	r7, #40	@ 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40003c00 	.word	0x40003c00
 800635c:	40021000 	.word	0x40021000
 8006360:	48000400 	.word	0x48000400

08006364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800636a:	4b0f      	ldr	r3, [pc, #60]	@ (80063a8 <HAL_MspInit+0x44>)
 800636c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636e:	4a0e      	ldr	r2, [pc, #56]	@ (80063a8 <HAL_MspInit+0x44>)
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	6613      	str	r3, [r2, #96]	@ 0x60
 8006376:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <HAL_MspInit+0x44>)
 8006378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006382:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <HAL_MspInit+0x44>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006386:	4a08      	ldr	r2, [pc, #32]	@ (80063a8 <HAL_MspInit+0x44>)
 8006388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800638c:	6593      	str	r3, [r2, #88]	@ 0x58
 800638e:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <HAL_MspInit+0x44>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000

080063ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <NMI_Handler+0x4>

080063b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <HardFault_Handler+0x4>

080063bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <MemManage_Handler+0x4>

080063c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063c8:	bf00      	nop
 80063ca:	e7fd      	b.n	80063c8 <BusFault_Handler+0x4>

080063cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <UsageFault_Handler+0x4>

080063d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063e2:	b480      	push	{r7}
 80063e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006402:	f002 fde3 	bl	8008fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006410:	4802      	ldr	r0, [pc, #8]	@ (800641c <ADC1_IRQHandler+0x10>)
 8006412:	f003 fa22 	bl	800985a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000098 	.word	0x20000098

08006420 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8006424:	2040      	movs	r0, #64	@ 0x40
 8006426:	f004 fc3b 	bl	800aca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 800642a:	2080      	movs	r0, #128	@ 0x80
 800642c:	f004 fc38 	bl	800aca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006430:	bf00      	nop
 8006432:	bd80      	pop	{r7, pc}

08006434 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006438:	4802      	ldr	r0, [pc, #8]	@ (8006444 <SPI3_IRQHandler+0x10>)
 800643a:	f006 ff67 	bl	800d30c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000434 	.word	0x20000434

08006448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800644c:	4802      	ldr	r0, [pc, #8]	@ (8006458 <TIM6_DAC_IRQHandler+0x10>)
 800644e:	f007 fa81 	bl	800d954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	2000049c 	.word	0x2000049c

0800645c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006460:	4802      	ldr	r0, [pc, #8]	@ (800646c <TIM7_IRQHandler+0x10>)
 8006462:	f007 fa77 	bl	800d954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200004e8 	.word	0x200004e8

08006470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return 1;
 8006474:	2301      	movs	r3, #1
}
 8006476:	4618      	mov	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <_kill>:

int _kill(int pid, int sig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800648a:	f007 fe0b 	bl	800e0a4 <__errno>
 800648e:	4603      	mov	r3, r0
 8006490:	2216      	movs	r2, #22
 8006492:	601a      	str	r2, [r3, #0]
  return -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <_exit>:

void _exit (int status)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80064a8:	f04f 31ff 	mov.w	r1, #4294967295
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ffe7 	bl	8006480 <_kill>
  while (1) {}    /* Make sure we hang here */
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <_exit+0x12>

080064b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e00a      	b.n	80064de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80064c8:	f3af 8000 	nop.w
 80064cc:	4601      	mov	r1, r0
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	60ba      	str	r2, [r7, #8]
 80064d4:	b2ca      	uxtb	r2, r1
 80064d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	3301      	adds	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	dbf0      	blt.n	80064c8 <_read+0x12>
  }

  return len;
 80064e6:	687b      	ldr	r3, [r7, #4]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e009      	b.n	8006516 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	60ba      	str	r2, [r7, #8]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	3301      	adds	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	dbf1      	blt.n	8006502 <_write+0x12>
  }
  return len;
 800651e:	687b      	ldr	r3, [r7, #4]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <_close>:

int _close(int file)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006550:	605a      	str	r2, [r3, #4]
  return 0;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <_isatty>:

int _isatty(int file)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006568:	2301      	movs	r3, #1
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006598:	4a14      	ldr	r2, [pc, #80]	@ (80065ec <_sbrk+0x5c>)
 800659a:	4b15      	ldr	r3, [pc, #84]	@ (80065f0 <_sbrk+0x60>)
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065a4:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <_sbrk+0x64>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065ac:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <_sbrk+0x64>)
 80065ae:	4a12      	ldr	r2, [pc, #72]	@ (80065f8 <_sbrk+0x68>)
 80065b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065b2:	4b10      	ldr	r3, [pc, #64]	@ (80065f4 <_sbrk+0x64>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d207      	bcs.n	80065d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065c0:	f007 fd70 	bl	800e0a4 <__errno>
 80065c4:	4603      	mov	r3, r0
 80065c6:	220c      	movs	r2, #12
 80065c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	e009      	b.n	80065e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065d0:	4b08      	ldr	r3, [pc, #32]	@ (80065f4 <_sbrk+0x64>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065d6:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <_sbrk+0x64>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	4a05      	ldr	r2, [pc, #20]	@ (80065f4 <_sbrk+0x64>)
 80065e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20010000 	.word	0x20010000
 80065f0:	00000400 	.word	0x00000400
 80065f4:	20000498 	.word	0x20000498
 80065f8:	20000760 	.word	0x20000760

080065fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006600:	4b06      	ldr	r3, [pc, #24]	@ (800661c <SystemInit+0x20>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006606:	4a05      	ldr	r2, [pc, #20]	@ (800661c <SystemInit+0x20>)
 8006608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800660c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000ed00 	.word	0xe000ed00

08006620 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006630:	4b15      	ldr	r3, [pc, #84]	@ (8006688 <MX_TIM6_Init+0x68>)
 8006632:	4a16      	ldr	r2, [pc, #88]	@ (800668c <MX_TIM6_Init+0x6c>)
 8006634:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 8006636:	4b14      	ldr	r3, [pc, #80]	@ (8006688 <MX_TIM6_Init+0x68>)
 8006638:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800663c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800663e:	4b12      	ldr	r3, [pc, #72]	@ (8006688 <MX_TIM6_Init+0x68>)
 8006640:	2200      	movs	r2, #0
 8006642:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8006644:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <MX_TIM6_Init+0x68>)
 8006646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800664a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800664c:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <MX_TIM6_Init+0x68>)
 800664e:	2200      	movs	r2, #0
 8006650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006652:	480d      	ldr	r0, [pc, #52]	@ (8006688 <MX_TIM6_Init+0x68>)
 8006654:	f007 f8d2 	bl	800d7fc <HAL_TIM_Base_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800665e:	f7fe ff8d 	bl	800557c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800666a:	1d3b      	adds	r3, r7, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4806      	ldr	r0, [pc, #24]	@ (8006688 <MX_TIM6_Init+0x68>)
 8006670:	f007 fb10 	bl	800dc94 <HAL_TIMEx_MasterConfigSynchronization>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800667a:	f7fe ff7f 	bl	800557c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	2000049c 	.word	0x2000049c
 800668c:	40001000 	.word	0x40001000

08006690 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80066a0:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066a2:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <MX_TIM7_Init+0x6c>)
 80066a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 80066a6:	4b14      	ldr	r3, [pc, #80]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066a8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80066ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ae:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80066b4:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066bc:	4b0e      	ldr	r3, [pc, #56]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066be:	2200      	movs	r2, #0
 80066c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80066c2:	480d      	ldr	r0, [pc, #52]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066c4:	f007 f89a 	bl	800d7fc <HAL_TIM_Base_Init>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80066ce:	f7fe ff55 	bl	800557c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4806      	ldr	r0, [pc, #24]	@ (80066f8 <MX_TIM7_Init+0x68>)
 80066e0:	f007 fad8 	bl	800dc94 <HAL_TIMEx_MasterConfigSynchronization>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80066ea:	f7fe ff47 	bl	800557c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	200004e8 	.word	0x200004e8
 80066fc:	40001400 	.word	0x40001400

08006700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1a      	ldr	r2, [pc, #104]	@ (8006778 <HAL_TIM_Base_MspInit+0x78>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d114      	bne.n	800673c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006712:	4b1a      	ldr	r3, [pc, #104]	@ (800677c <HAL_TIM_Base_MspInit+0x7c>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	4a19      	ldr	r2, [pc, #100]	@ (800677c <HAL_TIM_Base_MspInit+0x7c>)
 8006718:	f043 0310 	orr.w	r3, r3, #16
 800671c:	6593      	str	r3, [r2, #88]	@ 0x58
 800671e:	4b17      	ldr	r3, [pc, #92]	@ (800677c <HAL_TIM_Base_MspInit+0x7c>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800672a:	2200      	movs	r2, #0
 800672c:	2100      	movs	r1, #0
 800672e:	2036      	movs	r0, #54	@ 0x36
 8006730:	f004 f8bd 	bl	800a8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006734:	2036      	movs	r0, #54	@ 0x36
 8006736:	f004 f8d6 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800673a:	e018      	b.n	800676e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0f      	ldr	r2, [pc, #60]	@ (8006780 <HAL_TIM_Base_MspInit+0x80>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d113      	bne.n	800676e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <HAL_TIM_Base_MspInit+0x7c>)
 8006748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674a:	4a0c      	ldr	r2, [pc, #48]	@ (800677c <HAL_TIM_Base_MspInit+0x7c>)
 800674c:	f043 0320 	orr.w	r3, r3, #32
 8006750:	6593      	str	r3, [r2, #88]	@ 0x58
 8006752:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <HAL_TIM_Base_MspInit+0x7c>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	60bb      	str	r3, [r7, #8]
 800675c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800675e:	2200      	movs	r2, #0
 8006760:	2100      	movs	r1, #0
 8006762:	2037      	movs	r0, #55	@ 0x37
 8006764:	f004 f8a3 	bl	800a8ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006768:	2037      	movs	r0, #55	@ 0x37
 800676a:	f004 f8bc 	bl	800a8e6 <HAL_NVIC_EnableIRQ>
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40001000 	.word	0x40001000
 800677c:	40021000 	.word	0x40021000
 8006780:	40001400 	.word	0x40001400

08006784 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bme68x_soft_reset(dev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f901 	bl	8006994 <bme68x_soft_reset>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8006796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d120      	bne.n	80067e0 <bme68x_init+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	20d0      	movs	r0, #208	@ 0xd0
 80067a6:	f000 f8b1 	bl	800690c <bme68x_get_regs>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80067ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d114      	bne.n	80067e0 <bme68x_init+0x5c>
        {
            if (dev->chip_id == BME68X_CHIP_ID)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b61      	cmp	r3, #97	@ 0x61
 80067bc:	d10e      	bne.n	80067dc <bme68x_init+0x58>
            {
                /* Read Variant ID */
                rslt = read_variant_id(dev);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f002 f84c 	bl	800885c <read_variant_id>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME68X_OK)
 80067c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d107      	bne.n	80067e0 <bme68x_init+0x5c>
                {
                    /* Get the Calibration data */
                    rslt = get_calib_data(dev);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 ff3f 	bl	8008654 <get_calib_data>
 80067d6:	4603      	mov	r3, r0
 80067d8:	73fb      	strb	r3, [r7, #15]
 80067da:	e001      	b.n	80067e0 <bme68x_init+0x5c>
                }
            }
            else
            {
                rslt = BME68X_E_DEV_NOT_FOUND;
 80067dc:	23fd      	movs	r3, #253	@ 0xfd
 80067de:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80067e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	b08a      	sub	sp, #40	@ 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	605a      	str	r2, [r3, #4]
 8006808:	609a      	str	r2, [r3, #8]
 800680a:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800680c:	6838      	ldr	r0, [r7, #0]
 800680e:	f001 fcfb 	bl	8008208 <null_ptr_check>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8006818:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800681c:	2b00      	cmp	r3, #0
 800681e:	d16c      	bne.n	80068fa <bme68x_set_regs+0x10e>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d069      	beq.n	80068fa <bme68x_set_regs+0x10e>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d066      	beq.n	80068fa <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d05d      	beq.n	80068ee <bme68x_set_regs+0x102>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b0a      	cmp	r3, #10
 8006836:	d85a      	bhi.n	80068ee <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8006838:	2300      	movs	r3, #0
 800683a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800683c:	e034      	b.n	80068a8 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	7b1b      	ldrb	r3, [r3, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d118      	bne.n	8006878 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8006846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fc18 	bl	8008086 <set_mem_page>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800685c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	3328      	adds	r3, #40	@ 0x28
 8006870:	443b      	add	r3, r7
 8006872:	f803 2c18 	strb.w	r2, [r3, #-24]
 8006876:	e009      	b.n	800688c <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8006878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	441a      	add	r2, r3
 800687e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	3328      	adds	r3, #40	@ 0x28
 8006886:	443b      	add	r3, r7
 8006888:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 800688c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	441a      	add	r2, r3
 8006892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	3301      	adds	r3, #1
 8006898:	7812      	ldrb	r2, [r2, #0]
 800689a:	3328      	adds	r3, #40	@ 0x28
 800689c:	443b      	add	r3, r7
 800689e:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 80068a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068a4:	3301      	adds	r3, #1
 80068a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80068a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d8c6      	bhi.n	800683e <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 80068b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11e      	bne.n	80068f6 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80068bc:	7c38      	ldrb	r0, [r7, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	1e5a      	subs	r2, r3, #1
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685d      	ldr	r5, [r3, #4]
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	1c59      	adds	r1, r3, #1
 80068ce:	462b      	mov	r3, r5
 80068d0:	47a0      	blx	r4
 80068d2:	4603      	mov	r3, r0
 80068d4:	461a      	mov	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 80068e6:	23fe      	movs	r3, #254	@ 0xfe
 80068e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 80068ec:	e003      	b.n	80068f6 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 80068ee:	23fc      	movs	r3, #252	@ 0xfc
 80068f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80068f4:	e004      	b.n	8006900 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 80068f6:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80068f8:	e002      	b.n	8006900 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80068fa:	23ff      	movs	r3, #255	@ 0xff
 80068fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006900:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006904:	4618      	mov	r0, r3
 8006906:	3728      	adds	r7, #40	@ 0x28
 8006908:	46bd      	mov	sp, r7
 800690a:	bdb0      	pop	{r4, r5, r7, pc}

0800690c <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 800690c:	b590      	push	{r4, r7, lr}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800691c:	6838      	ldr	r0, [r7, #0]
 800691e:	f001 fc73 	bl	8008208 <null_ptr_check>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8006926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d12a      	bne.n	8006984 <bme68x_get_regs+0x78>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d027      	beq.n	8006984 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	7b1b      	ldrb	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10e      	bne.n	800695a <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fba0 	bl	8008086 <set_mem_page>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 800694a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006958:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	7bf8      	ldrb	r0, [r7, #15]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	47a0      	blx	r4
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 800697e:	23fe      	movs	r3, #254	@ 0xfe
 8006980:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8006982:	e001      	b.n	8006988 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006984:	23ff      	movs	r3, #255	@ 0xff
 8006986:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006988:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	bd90      	pop	{r4, r7, pc}

08006994 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 800699c:	23e0      	movs	r3, #224	@ 0xe0
 800699e:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80069a0:	23b6      	movs	r3, #182	@ 0xb6
 80069a2:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fc2f 	bl	8008208 <null_ptr_check>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d12b      	bne.n	8006a0e <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7b1b      	ldrb	r3, [r3, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fbc6 	bl	8008150 <get_mem_page>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80069c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11e      	bne.n	8006a0e <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80069d0:	f107 010d 	add.w	r1, r7, #13
 80069d4:	f107 000e 	add.w	r0, r7, #14
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f7ff ff06 	bl	80067ec <bme68x_set_regs>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]

            /* Wait for 5ms */
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6852      	ldr	r2, [r2, #4]
 80069ec:	4611      	mov	r1, r2
 80069ee:	f242 7010 	movw	r0, #10000	@ 0x2710
 80069f2:	4798      	blx	r3
            if (rslt == BME68X_OK)
 80069f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <bme68x_soft_reset+0x7a>
            {
                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7b1b      	ldrb	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fba3 	bl	8008150 <get_mem_page>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8006a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8006a26:	2300      	movs	r3, #0
 8006a28:	77bb      	strb	r3, [r7, #30]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8006a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c20 <bme68x_set_conf+0x204>)
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a38:	6018      	str	r0, [r3, #0]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	2300      	movs	r3, #0
 8006a44:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8006a46:	f107 031c 	add.w	r3, r7, #28
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f94a 	bl	8006ce6 <bme68x_get_op_mode>
 8006a52:	4603      	mov	r3, r0
 8006a54:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8006a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	2000      	movs	r0, #0
 8006a62:	f000 f8df 	bl	8006c24 <bme68x_set_op_mode>
 8006a66:	4603      	mov	r3, r0
 8006a68:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8006a70:	23ff      	movs	r3, #255	@ 0xff
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e0b2      	b.n	8006bdc <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8006a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 80ae 	bne.w	8006bdc <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8006a80:	7d38      	ldrb	r0, [r7, #20]
 8006a82:	f107 010c 	add.w	r1, r7, #12
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2205      	movs	r2, #5
 8006a8a:	f7ff ff3f 	bl	800690c <bme68x_get_regs>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8006a9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d108      	bne.n	8006ab4 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3303      	adds	r3, #3
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	2107      	movs	r1, #7
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fb7f 	bl	80081ae <boundary_check>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d108      	bne.n	8006ace <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	2105      	movs	r1, #5
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fb72 	bl	80081ae <boundary_check>
 8006aca:	4603      	mov	r3, r0
 8006acc:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d108      	bne.n	8006ae8 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3302      	adds	r3, #2
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	2105      	movs	r1, #5
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 fb65 	bl	80081ae <boundary_check>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006ae8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d107      	bne.n	8006b00 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	2105      	movs	r1, #5
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 fb59 	bl	80081ae <boundary_check>
 8006afc:	4603      	mov	r3, r0
 8006afe:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006b00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d108      	bne.n	8006b1a <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	2108      	movs	r1, #8
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fb4c 	bl	80081ae <boundary_check>
 8006b16:	4603      	mov	r3, r0
 8006b18:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d15c      	bne.n	8006bdc <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8006b22:	7c3b      	ldrb	r3, [r7, #16]
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f023 031c 	bic.w	r3, r3, #28
 8006b2a:	b25a      	sxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	78db      	ldrb	r3, [r3, #3]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	b25b      	sxtb	r3, r3
 8006b34:	f003 031c 	and.w	r3, r3, #28
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	b25b      	sxtb	r3, r3
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	b25a      	sxtb	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	015b      	lsls	r3, r3, #5
 8006b52:	b25b      	sxtb	r3, r3
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	f023 031c 	bic.w	r3, r3, #28
 8006b64:	b25a      	sxtb	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	789b      	ldrb	r3, [r3, #2]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	f003 031c 	and.w	r3, r3, #28
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b25b      	sxtb	r3, r3
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8006b7c:	7b7b      	ldrb	r3, [r7, #13]
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	b25a      	sxtb	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	b25b      	sxtb	r3, r3
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	b25b      	sxtb	r3, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	791b      	ldrb	r3, [r3, #4]
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d004      	beq.n	8006bac <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	791b      	ldrb	r3, [r3, #4]
 8006ba6:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8006bac:	7c3b      	ldrb	r3, [r7, #16]
 8006bae:	b25b      	sxtb	r3, r3
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	b25a      	sxtb	r2, r3
 8006bb6:	7fbb      	ldrb	r3, [r7, #30]
 8006bb8:	015b      	lsls	r3, r3, #5
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8006bc4:	7b3b      	ldrb	r3, [r7, #12]
 8006bc6:	b25b      	sxtb	r3, r3
 8006bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bcc:	b25a      	sxtb	r2, r3
 8006bce:	7f7b      	ldrb	r3, [r7, #29]
 8006bd0:	01db      	lsls	r3, r3, #7
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b25b      	sxtb	r3, r3
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8006bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8006be4:	f107 010c 	add.w	r1, r7, #12
 8006be8:	f107 0014 	add.w	r0, r7, #20
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2205      	movs	r2, #5
 8006bf0:	f7ff fdfc 	bl	80067ec <bme68x_set_regs>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006bf8:	7f3b      	ldrb	r3, [r7, #28]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <bme68x_set_conf+0x1f8>
 8006bfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8006c06:	7f3b      	ldrb	r3, [r7, #28]
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f80a 	bl	8006c24 <bme68x_set_op_mode>
 8006c10:	4603      	mov	r3, r0
 8006c12:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006c14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	0800f0c0 	.word	0x0800f0c0

08006c24 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	6039      	str	r1, [r7, #0]
 8006c2e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8006c34:	2374      	movs	r3, #116	@ 0x74
 8006c36:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8006c38:	f107 010d 	add.w	r1, r7, #13
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	2074      	movs	r0, #116	@ 0x74
 8006c42:	f7ff fe63 	bl	800690c <bme68x_get_regs>
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8006c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d11d      	bne.n	8006c8e <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8006c52:	7b7b      	ldrb	r3, [r7, #13]
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d016      	beq.n	8006c8e <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8006c60:	7b7b      	ldrb	r3, [r7, #13]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006c6a:	f107 010d 	add.w	r1, r7, #13
 8006c6e:	f107 000c 	add.w	r0, r7, #12
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f7ff fdb9 	bl	80067ec <bme68x_set_regs>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	6852      	ldr	r2, [r2, #4]
 8006c86:	4611      	mov	r1, r2
 8006c88:	f242 7010 	movw	r0, #10000	@ 0x2710
 8006c8c:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <bme68x_set_op_mode+0x78>
 8006c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0cd      	beq.n	8006c38 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01b      	beq.n	8006cda <bme68x_set_op_mode+0xb6>
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d117      	bne.n	8006cda <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8006caa:	7b7b      	ldrb	r3, [r7, #13]
 8006cac:	b25b      	sxtb	r3, r3
 8006cae:	f023 0303 	bic.w	r3, r3, #3
 8006cb2:	b25a      	sxtb	r2, r3
 8006cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006cc6:	f107 010d 	add.w	r1, r7, #13
 8006cca:	f107 000c 	add.w	r0, r7, #12
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f7ff fd8b 	bl	80067ec <bme68x_set_regs>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00f      	beq.n	8006d16 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8006cf6:	f107 010e 	add.w	r1, r7, #14
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	2074      	movs	r0, #116	@ 0x74
 8006d00:	f7ff fe04 	bl	800690c <bme68x_get_regs>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e001      	b.n	8006d1a <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006d16:	23ff      	movs	r3, #255	@ 0xff
 8006d18:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	@ 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8006d36:	2300      	movs	r3, #0
 8006d38:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8006d3a:	4a34      	ldr	r2, [pc, #208]	@ (8006e0c <bme68x_get_meas_dur+0xe4>)
 8006d3c:	f107 0314 	add.w	r3, r7, #20
 8006d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d44:	6018      	str	r0, [r3, #0]
 8006d46:	3304      	adds	r3, #4
 8006d48:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d058      	beq.n	8006e02 <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3301      	adds	r3, #1
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	2105      	movs	r1, #5
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fa28 	bl	80081ae <boundary_check>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 8006d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3302      	adds	r3, #2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	2105      	movs	r1, #5
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 fa1a 	bl	80081ae <boundary_check>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	2105      	movs	r1, #5
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fa0d 	bl	80081ae <boundary_check>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006d9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d12f      	bne.n	8006e02 <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	3328      	adds	r3, #40	@ 0x28
 8006da8:	443b      	add	r3, r7
 8006daa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006dae:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	789b      	ldrb	r3, [r3, #2]
 8006db4:	3328      	adds	r3, #40	@ 0x28
 8006db6:	443b      	add	r3, r7
 8006db8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	3328      	adds	r3, #40	@ 0x28
 8006dca:	443b      	add	r3, r7
 8006dcc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8006dea:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8006df2:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d003      	beq.n	8006e02 <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006e00:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8006e02:	6a3b      	ldr	r3, [r7, #32]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3728      	adds	r7, #40	@ 0x28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	0800f0c8 	.word	0x0800f0c8

08006e10 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8006e10:	b5b0      	push	{r4, r5, r7, lr}
 8006e12:	b09e      	sub	sp, #120	@ 0x78
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    struct bme68x_data *field_ptr[3] = { 0 };
 8006e32:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8006e3e:	f107 0314 	add.w	r3, r7, #20
 8006e42:	2254      	movs	r2, #84	@ 0x54
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f007 f8dd 	bl	800e006 <memset>

    field_ptr[0] = &field_data[0];
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	66bb      	str	r3, [r7, #104]	@ 0x68
    field_ptr[1] = &field_data[1];
 8006e52:	f107 0314 	add.w	r3, r7, #20
 8006e56:	331c      	adds	r3, #28
 8006e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    field_ptr[2] = &field_data[2];
 8006e5a:	f107 0314 	add.w	r3, r7, #20
 8006e5e:	3338      	adds	r3, #56	@ 0x38
 8006e60:	673b      	str	r3, [r7, #112]	@ 0x70

    rslt = null_ptr_check(dev);
 8006e62:	6838      	ldr	r0, [r7, #0]
 8006e64:	f001 f9d0 	bl	8008208 <null_ptr_check>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if ((rslt == BME68X_OK) && (data != NULL))
 8006e6e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 80c1 	bne.w	8006ffa <bme68x_get_data+0x1ea>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80bd 	beq.w	8006ffa <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d11c      	bne.n	8006ec0 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f000 fd8b 	bl	80079a6 <read_field_data>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (rslt == BME68X_OK)
 8006e96:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 80a1 	bne.w	8006fe2 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	da03      	bge.n	8006eb2 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8006eb0:	e097      	b.n	8006fe2 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
                    rslt = BME68X_W_NO_NEW_DATA;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006ebe:	e090      	b.n	8006fe2 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d003      	beq.n	8006ece <bme68x_get_data+0xbe>
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	f040 8087 	bne.w	8006fdc <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8006ece:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 feaa 	bl	8007c2e <read_all_field_data>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            new_fields = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006eec:	e014      	b.n	8006f18 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8006eee:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	3378      	adds	r3, #120	@ 0x78
 8006ef6:	443b      	add	r3, r7
 8006ef8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da04      	bge.n	8006f0e <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8006f04:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8006f0e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f12:	3301      	adds	r3, #1
 8006f14:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006f18:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d803      	bhi.n	8006f28 <bme68x_get_data+0x118>
 8006f20:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0e2      	beq.n	8006eee <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006f2e:	e01c      	b.n	8006f6a <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8006f30:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f34:	3301      	adds	r3, #1
 8006f36:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006f3a:	e00d      	b.n	8006f58 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8006f3c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8006f40:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 8006f44:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fb09 	bl	8008560 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8006f4e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006f52:	3301      	adds	r3, #1
 8006f54:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006f58:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d9ed      	bls.n	8006f3c <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006f60:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f64:	3301      	adds	r3, #1
 8006f66:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006f6a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d803      	bhi.n	8006f7a <bme68x_get_data+0x16a>
 8006f72:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0da      	beq.n	8006f30 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006f80:	e01c      	b.n	8006fbc <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8006f82:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	3378      	adds	r3, #120	@ 0x78
 8006f8a:	443b      	add	r3, r7
 8006f8c:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8006f90:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8006f94:	4613      	mov	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	461c      	mov	r4, r3
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006faa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006fb2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006fbc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d803      	bhi.n	8006fcc <bme68x_get_data+0x1bc>
 8006fc4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0da      	beq.n	8006f82 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8006fcc:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (new_fields == 0)
 8006fda:	e002      	b.n	8006fe2 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        }

        if (n_data == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8006fe8:	23ff      	movs	r3, #255	@ 0xff
 8006fea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        if (n_data == NULL)
 8006fee:	e007      	b.n	8007000 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8006ff6:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8006ff8:	e002      	b.n	8007000 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006ffa:	23ff      	movs	r3, #255	@ 0xff
 8006ffc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    }

    return rslt;
 8007000:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8007004:	4618      	mov	r0, r3
 8007006:	3778      	adds	r7, #120	@ 0x78
 8007008:	46bd      	mov	sp, r7
 800700a:	bdb0      	pop	{r4, r5, r7, pc}

0800700c <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8007022:	f247 1370 	movw	r3, #29040	@ 0x7170
 8007026:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d06e      	beq.n	800710c <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	2000      	movs	r0, #0
 8007032:	f7ff fdf7 	bl	8006c24 <bme68x_set_op_mode>
 8007036:	4603      	mov	r3, r0
 8007038:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 800703a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d108      	bne.n	8007054 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8007042:	f107 021c 	add.w	r2, r7, #28
 8007046:	7bf9      	ldrb	r1, [r7, #15]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68b8      	ldr	r0, [r7, #8]
 800704c:	f001 f8fc 	bl	8008248 <set_conf>
 8007050:	4603      	mov	r3, r0
 8007052:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8007054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d159      	bne.n	8007110 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 800705c:	f107 0118 	add.w	r1, r7, #24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	2070      	movs	r0, #112	@ 0x70
 8007066:	f7ff fc51 	bl	800690c <bme68x_get_regs>
 800706a:	4603      	mov	r3, r0
 800706c:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 800706e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d14c      	bne.n	8007110 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10b      	bne.n	8007096 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 800707e:	2300      	movs	r3, #0
 8007080:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d102      	bne.n	8007090 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 800708a:	2302      	movs	r3, #2
 800708c:	777b      	strb	r3, [r7, #29]
 800708e:	e006      	b.n	800709e <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8007090:	2301      	movs	r3, #1
 8007092:	777b      	strb	r3, [r7, #29]
 8007094:	e003      	b.n	800709e <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8007096:	2301      	movs	r3, #1
 8007098:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 800709a:	2300      	movs	r3, #0
 800709c:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800709e:	7e3b      	ldrb	r3, [r7, #24]
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	f023 0308 	bic.w	r3, r3, #8
 80070a6:	b25a      	sxtb	r2, r3
 80070a8:	7fbb      	ldrb	r3, [r7, #30]
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	b25b      	sxtb	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b25b      	sxtb	r3, r3
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80070bc:	7e7b      	ldrb	r3, [r7, #25]
 80070be:	b25b      	sxtb	r3, r3
 80070c0:	f023 030f 	bic.w	r3, r3, #15
 80070c4:	b25a      	sxtb	r2, r3
 80070c6:	7f3b      	ldrb	r3, [r7, #28]
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80070d8:	7e7b      	ldrb	r3, [r7, #25]
 80070da:	b25b      	sxtb	r3, r3
 80070dc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80070e0:	b25a      	sxtb	r2, r3
 80070e2:	7f7b      	ldrb	r3, [r7, #29]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b25b      	sxtb	r3, r3
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80070f6:	f107 0118 	add.w	r1, r7, #24
 80070fa:	f107 0014 	add.w	r0, r7, #20
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f7ff fb73 	bl	80067ec <bme68x_set_regs>
 8007106:	4603      	mov	r3, r0
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e001      	b.n	8007110 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800710c:	23ff      	movs	r3, #255	@ 0xff
 800710e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8007110:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007130:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007214 <calc_temperature+0xf8>
 8007134:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	8bdb      	ldrh	r3, [r3, #30]
 800713c:	ee07 3a90 	vmov	s15, r3
 8007140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007144:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8007218 <calc_temperature+0xfc>
 8007148:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800714c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007170:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800721c <calc_temperature+0x100>
 8007174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	8bdb      	ldrh	r3, [r3, #30]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8007220 <calc_temperature+0x104>
 8007188:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800718c:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800721c <calc_temperature+0x100>
 800719e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	8bdb      	ldrh	r3, [r3, #30]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80071ae:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007220 <calc_temperature+0x104>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80071ba:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071cc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80071d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 80071d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d8:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80071dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80071e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80071e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80071f4:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8007224 <calc_temperature+0x108>
 80071f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071fc:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	ee07 3a90 	vmov	s15, r3
}
 8007206:	eeb0 0a67 	vmov.f32	s0, s15
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	46800000 	.word	0x46800000
 8007218:	44800000 	.word	0x44800000
 800721c:	48000000 	.word	0x48000000
 8007220:	46000000 	.word	0x46000000
 8007224:	45a00000 	.word	0x45a00000

08007228 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007238:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800723c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007240:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 800747c <calc_pressure+0x254>
 8007244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007248:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 800724c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007250:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007262:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 8007480 <calc_pressure+0x258>
 8007266:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007280:	edd7 7a04 	vldr	s15, [r7, #16]
 8007284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007288:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800728c:	ed97 7a03 	vldr	s14, [r7, #12]
 8007290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007294:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8007298:	edd7 7a03 	vldr	s15, [r7, #12]
 800729c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80072a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b2:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8007484 <calc_pressure+0x25c>
 80072b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072be:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80072d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80072dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e0:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007488 <calc_pressure+0x260>
 80072e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80072f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80072fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007302:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800748c <calc_pressure+0x264>
 8007306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800730a:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 800730e:	ed97 7a04 	vldr	s14, [r7, #16]
 8007312:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007490 <calc_pressure+0x268>
 8007316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800731a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800731e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007340:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8007494 <calc_pressure+0x26c>
 8007344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007348:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 800734c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007354:	ee17 3a90 	vmov	r3, s15
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8081 	beq.w	8007460 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800735e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007362:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8007498 <calc_pressure+0x270>
 8007366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800736a:	ed97 7a05 	vldr	s14, [r7, #20]
 800736e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007372:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800749c <calc_pressure+0x274>
 8007376:	ee67 6a87 	vmul.f32	s13, s15, s14
 800737a:	ed97 7a04 	vldr	s14, [r7, #16]
 800737e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007382:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 800738c:	ee07 3a90 	vmov	s15, r3
 8007390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007394:	edd7 7a05 	vldr	s15, [r7, #20]
 8007398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800739c:	edd7 7a05 	vldr	s15, [r7, #20]
 80073a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073a4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80074a0 <calc_pressure+0x278>
 80073a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073ac:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073be:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8007490 <calc_pressure+0x268>
 80073c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80073d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80073d6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80074a4 <calc_pressure+0x27c>
 80073da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80073de:	edd7 6a05 	vldr	s13, [r7, #20]
 80073e2:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80074a4 <calc_pressure+0x27c>
 80073e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80073ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80073f2:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80074a4 <calc_pressure+0x27c>
 80073f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80073fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800740c:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8007480 <calc_pressure+0x258>
 8007410:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007418:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 800741c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007420:	edd7 7a03 	vldr	s15, [r7, #12]
 8007424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007428:	edd7 7a02 	vldr	s15, [r7, #8]
 800742c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800743e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80074a8 <calc_pressure+0x280>
 8007442:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800744a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800744e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007452:	ed97 7a05 	vldr	s14, [r7, #20]
 8007456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800745a:	edc7 7a05 	vstr	s15, [r7, #20]
 800745e:	e002      	b.n	8007466 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	ee07 3a90 	vmov	s15, r3
}
 800746c:	eeb0 0a67 	vmov.f32	s0, s15
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	477a0000 	.word	0x477a0000
 8007480:	48000000 	.word	0x48000000
 8007484:	47800000 	.word	0x47800000
 8007488:	46800000 	.word	0x46800000
 800748c:	49000000 	.word	0x49000000
 8007490:	47000000 	.word	0x47000000
 8007494:	49800000 	.word	0x49800000
 8007498:	45800000 	.word	0x45800000
 800749c:	45c35000 	.word	0x45c35000
 80074a0:	4f000000 	.word	0x4f000000
 80074a4:	43800000 	.word	0x43800000
 80074a8:	43000000 	.word	0x43000000

080074ac <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b089      	sub	sp, #36	@ 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80074be:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8007628 <calc_humidity+0x17c>
 80074c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074c6:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	8a1b      	ldrh	r3, [r3, #16]
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80074e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f6:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80074fa:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80074fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8007502:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007506:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 800750a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800750e:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	8a5b      	ldrh	r3, [r3, #18]
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800762c <calc_humidity+0x180>
 8007522:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007534:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8007630 <calc_humidity+0x184>
 8007538:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800753c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007548:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800755a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8007634 <calc_humidity+0x188>
 800755e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8007562:	edd7 7a06 	vldr	s15, [r7, #24]
 8007566:	ee26 6a27 	vmul.f32	s12, s12, s15
 800756a:	edd7 7a06 	vldr	s15, [r7, #24]
 800756e:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 800757a:	ed97 7a05 	vldr	s14, [r7, #20]
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	7ddb      	ldrb	r3, [r3, #23]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007592:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007630 <calc_humidity+0x184>
 8007596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800759a:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ac:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8007638 <calc_humidity+0x18c>
 80075b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075b4:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80075b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80075bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80075c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80075c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80075d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80075d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80075e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075e4:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 80075e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80075ec:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800763c <calc_humidity+0x190>
 80075f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f8:	dd02      	ble.n	8007600 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 80075fa:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <calc_humidity+0x194>)
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	e009      	b.n	8007614 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8007600:	edd7 7a07 	vldr	s15, [r7, #28]
 8007604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760c:	d502      	bpl.n	8007614 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	ee07 3a90 	vmov	s15, r3
}
 800761a:	eeb0 0a67 	vmov.f32	s0, s15
 800761e:	3724      	adds	r7, #36	@ 0x24
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	45a00000 	.word	0x45a00000
 800762c:	48800000 	.word	0x48800000
 8007630:	46800000 	.word	0x46800000
 8007634:	49800000 	.word	0x49800000
 8007638:	4a000000 	.word	0x4a000000
 800763c:	42c80000 	.word	0x42c80000
 8007640:	42c80000 	.word	0x42c80000

08007644 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8007644:	b4b0      	push	{r4, r5, r7}
 8007646:	b0a9      	sub	sp, #164	@ 0xa4
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	603a      	str	r2, [r7, #0]
 800764e:	80fb      	strh	r3, [r7, #6]
 8007650:	460b      	mov	r3, r1
 8007652:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8007662:	797b      	ldrb	r3, [r7, #5]
 8007664:	2201      	movs	r2, #1
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 8007676:	4b3e      	ldr	r3, [pc, #248]	@ (8007770 <calc_gas_resistance_low+0x12c>)
 8007678:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800767c:	461d      	mov	r5, r3
 800767e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800768e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8007692:	4b38      	ldr	r3, [pc, #224]	@ (8007774 <calc_gas_resistance_low+0x130>)
 8007694:	f107 0408 	add.w	r4, r7, #8
 8007698:	461d      	mov	r5, r3
 800769a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800769c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800769e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80076aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80076c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8007778 <calc_gas_resistance_low+0x134>
 80076c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076cc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80076d0:	797b      	ldrb	r3, [r7, #5]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	33a0      	adds	r3, #160	@ 0xa0
 80076d6:	443b      	add	r3, r7
 80076d8:	3b58      	subs	r3, #88	@ 0x58
 80076da:	ed93 7a00 	vldr	s14, [r3]
 80076de:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800777c <calc_gas_resistance_low+0x138>
 80076e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076ee:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80076fa:	797b      	ldrb	r3, [r7, #5]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	33a0      	adds	r3, #160	@ 0xa0
 8007700:	443b      	add	r3, r7
 8007702:	3b98      	subs	r3, #152	@ 0x98
 8007704:	ed93 7a00 	vldr	s14, [r3]
 8007708:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800777c <calc_gas_resistance_low+0x138>
 800770c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007714:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007718:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 800771c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8007720:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8007780 <calc_gas_resistance_low+0x13c>
 8007724:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007728:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800772c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007730:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8007734:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8007784 <calc_gas_resistance_low+0x140>
 8007738:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800773c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8007740:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007750:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007758:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 800775c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007760:	ee07 3a90 	vmov	s15, r3
}
 8007764:	eeb0 0a67 	vmov.f32	s0, s15
 8007768:	37a4      	adds	r7, #164	@ 0xa4
 800776a:	46bd      	mov	sp, r7
 800776c:	bcb0      	pop	{r4, r5, r7}
 800776e:	4770      	bx	lr
 8007770:	0800f0d0 	.word	0x0800f0d0
 8007774:	0800f110 	.word	0x0800f110
 8007778:	44a78000 	.word	0x44a78000
 800777c:	42c80000 	.word	0x42c80000
 8007780:	340637bd 	.word	0x340637bd
 8007784:	44000000 	.word	0x44000000

08007788 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	460a      	mov	r2, r1
 8007792:	80fb      	strh	r3, [r7, #6]
 8007794:	4613      	mov	r3, r2
 8007796:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8007798:	797b      	ldrb	r3, [r7, #5]
 800779a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800779e:	fa22 f303 	lsr.w	r3, r2, r3
 80077a2:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80077aa:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4613      	mov	r3, r2
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4413      	add	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077bc:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80077f8 <calc_gas_resistance_high+0x70>
 80077cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	ee07 3a90 	vmov	s15, r3
}
 80077e8:	eeb0 0a67 	vmov.f32	s0, s15
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	49742400 	.word	0x49742400

080077fc <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b08b      	sub	sp, #44	@ 0x2c
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8007808:	89fb      	ldrh	r3, [r7, #14]
 800780a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800780e:	d902      	bls.n	8007816 <calc_res_heat+0x1a>
    {
        temp = 400;
 8007810:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007814:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007824:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8007828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800782c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007940 <calc_res_heat+0x144>
 8007830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007834:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007846:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8007944 <calc_res_heat+0x148>
 800784a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800784e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8007948 <calc_res_heat+0x14c>
 8007852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007856:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800794c <calc_res_heat+0x150>
 800785a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800785e:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007870:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007950 <calc_res_heat+0x154>
 8007874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007878:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007886:	edd7 7a08 	vldr	s15, [r7, #32]
 800788a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007896:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789e:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80078b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80078bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078c0:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80078d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078da:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80078e6:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 80078f0:	ee07 3a90 	vmov	s15, r3
 80078f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078f8:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8007954 <calc_res_heat+0x158>
 80078fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007904:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007908:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800790c:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8007910:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007914:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8007918:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 800791c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007958 <calc_res_heat+0x15c>
 8007920:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8007924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007928:	edc7 7a01 	vstr	s15, [r7, #4]
 800792c:	793b      	ldrb	r3, [r7, #4]
 800792e:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8007930:	7cfb      	ldrb	r3, [r7, #19]
}
 8007932:	4618      	mov	r0, r3
 8007934:	372c      	adds	r7, #44	@ 0x2c
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	42440000 	.word	0x42440000
 8007944:	47000000 	.word	0x47000000
 8007948:	3a03126f 	.word	0x3a03126f
 800794c:	3b1a0275 	.word	0x3b1a0275
 8007950:	44800000 	.word	0x44800000
 8007954:	3b03126f 	.word	0x3b03126f
 8007958:	4059999a 	.word	0x4059999a

0800795c <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8007970:	d308      	bcc.n	8007984 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8007972:	23ff      	movs	r3, #255	@ 0xff
 8007974:	73bb      	strb	r3, [r7, #14]
 8007976:	e00f      	b.n	8007998 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	089b      	lsrs	r3, r3, #2
 800797c:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	3301      	adds	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	2b3f      	cmp	r3, #63	@ 0x3f
 8007988:	d8f6      	bhi.n	8007978 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	b2da      	uxtb	r2, r3
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	019b      	lsls	r3, r3, #6
 8007992:	b2db      	uxtb	r3, r3
 8007994:	4413      	add	r3, r2
 8007996:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8007998:	7bbb      	ldrb	r3, [r7, #14]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b08e      	sub	sp, #56	@ 0x38
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	4603      	mov	r3, r0
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 80079ba:	2300      	movs	r3, #0
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	f107 0314 	add.w	r3, r7, #20
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	609a      	str	r2, [r3, #8]
 80079ca:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 80079cc:	2305      	movs	r3, #5
 80079ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 80079d2:	e11d      	b.n	8007c10 <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	461a      	mov	r2, r3
 80079d8:	0112      	lsls	r2, r2, #4
 80079da:	4413      	add	r3, r2
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	331d      	adds	r3, #29
 80079e0:	b2d8      	uxtb	r0, r3
 80079e2:	f107 0110 	add.w	r1, r7, #16
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2211      	movs	r2, #17
 80079ea:	f7fe ff8f 	bl	800690c <bme68x_get_regs>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d103      	bne.n	8007a02 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 80079fa:	23ff      	movs	r3, #255	@ 0xff
 80079fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8007a00:	e10f      	b.n	8007c22 <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8007a02:	7c3b      	ldrb	r3, [r7, #16]
 8007a04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8007a0e:	7c3b      	ldrb	r3, [r7, #16]
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8007a1a:	7c7a      	ldrb	r2, [r7, #17]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8007a20:	7cbb      	ldrb	r3, [r7, #18]
 8007a22:	031a      	lsls	r2, r3, #12
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	7d3a      	ldrb	r2, [r7, #20]
 8007a2c:	0912      	lsrs	r2, r2, #4
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	4313      	orrs	r3, r2
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8007a34:	7d7b      	ldrb	r3, [r7, #21]
 8007a36:	031a      	lsls	r2, r3, #12
 8007a38:	7dbb      	ldrb	r3, [r7, #22]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	7dfa      	ldrb	r2, [r7, #23]
 8007a40:	0912      	lsrs	r2, r2, #4
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	4313      	orrs	r3, r2
 8007a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8007a48:	7e3b      	ldrb	r3, [r7, #24]
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	7e7a      	ldrb	r2, [r7, #25]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8007a54:	7f7b      	ldrb	r3, [r7, #29]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	7fba      	ldrb	r2, [r7, #30]
 8007a5c:	0992      	lsrs	r2, r2, #6
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	4313      	orrs	r3, r2
 8007a62:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8007a64:	7ffb      	ldrb	r3, [r7, #31]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007a6e:	0992      	lsrs	r2, r2, #6
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	4313      	orrs	r3, r2
 8007a74:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8007a76:	7fbb      	ldrb	r3, [r7, #30]
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8007a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d11c      	bne.n	8007ace <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b25a      	sxtb	r2, r3
 8007a9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a9e:	b25b      	sxtb	r3, r3
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b25b      	sxtb	r3, r3
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b25a      	sxtb	r2, r3
 8007ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	b25b      	sxtb	r3, r3
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e019      	b.n	8007b02 <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	b25a      	sxtb	r2, r3
 8007ad4:	7fbb      	ldrb	r3, [r7, #30]
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b25a      	sxtb	r2, r3
 8007aee:	7fbb      	ldrb	r3, [r7, #30]
 8007af0:	b25b      	sxtb	r3, r3
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	b25b      	sxtb	r3, r3
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b25b      	sxtb	r3, r3
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b25b      	sxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	da70      	bge.n	8007bee <read_field_data+0x248>
 8007b0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d16c      	bne.n	8007bee <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	335a      	adds	r3, #90	@ 0x5a
 8007b1a:	b2d8      	uxtb	r0, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	1cd9      	adds	r1, r3, #3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f7fe fef2 	bl	800690c <bme68x_get_regs>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 8007b2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10c      	bne.n	8007b50 <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	3350      	adds	r3, #80	@ 0x50
 8007b3c:	b2d8      	uxtb	r0, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	1d19      	adds	r1, r3, #4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f7fe fee1 	bl	800690c <bme68x_get_regs>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8007b50:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10c      	bne.n	8007b72 <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	3364      	adds	r3, #100	@ 0x64
 8007b5e:	b2d8      	uxtb	r0, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	1d59      	adds	r1, r3, #5
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f7fe fed0 	bl	800690c <bme68x_get_regs>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8007b72:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d139      	bne.n	8007bee <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b7e:	f7ff facd 	bl	800711c <calc_temperature>
 8007b82:	eef0 7a40 	vmov.f32	s15, s0
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	edc3 7a03 	vstr	s15, [r3, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b90:	f7ff fb4a 	bl	8007228 <calc_pressure>
 8007b94:	eef0 7a40 	vmov.f32	s15, s0
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	edc3 7a04 	vstr	s15, [r3, #16]
                data->humidity = calc_humidity(adc_hum, dev);
 8007b9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fc82 	bl	80074ac <calc_humidity>
 8007ba8:	eef0 7a40 	vmov.f32	s15, s0
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	edc3 7a05 	vstr	s15, [r3, #20]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10c      	bne.n	8007bd4 <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8007bba:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007bbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fde0 	bl	8007788 <calc_gas_resistance_high>
 8007bc8:	eef0 7a40 	vmov.f32	s15, s0
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	edc3 7a06 	vstr	s15, [r3, #24]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8007bd2:	e026      	b.n	8007c22 <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8007bd4:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007bd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fd31 	bl	8007644 <calc_gas_resistance_low>
 8007be2:	eef0 7a40 	vmov.f32	s15, s0
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	edc3 7a06 	vstr	s15, [r3, #24]
                break;
 8007bec:	e019      	b.n	8007c22 <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 8007bee:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d107      	bne.n	8007c06 <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6852      	ldr	r2, [r2, #4]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	f242 7010 	movw	r0, #10000	@ 0x2710
 8007c04:	4798      	blx	r3
        }

        tries--;
 8007c06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 8007c10:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <read_field_data+0x27c>
 8007c18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f43f aed9 	beq.w	80079d4 <read_field_data+0x2e>
    }

    return rslt;
 8007c22:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3738      	adds	r7, #56	@ 0x38
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8007c2e:	b590      	push	{r4, r7, lr}
 8007c30:	b09d      	sub	sp, #116	@ 0x74
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8007c3e:	2300      	movs	r3, #0
 8007c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c46:	222f      	movs	r2, #47	@ 0x2f
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f006 f9db 	bl	800e006 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8007c50:	2300      	movs	r3, #0
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	f107 030c 	add.w	r3, r7, #12
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	609a      	str	r2, [r3, #8]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	611a      	str	r2, [r3, #16]
 8007c64:	615a      	str	r2, [r3, #20]
 8007c66:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10c      	bne.n	8007c8a <read_all_field_data+0x5c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d107      	bne.n	8007c8a <read_all_field_data+0x5c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8007c84:	23ff      	movs	r3, #255	@ 0xff
 8007c86:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007c8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8007c92:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2233      	movs	r2, #51	@ 0x33
 8007c9a:	201d      	movs	r0, #29
 8007c9c:	f7fe fe36 	bl	800690c <bme68x_get_regs>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007ca6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8007cae:	f107 0108 	add.w	r1, r7, #8
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	221e      	movs	r2, #30
 8007cb6:	2050      	movs	r0, #80	@ 0x50
 8007cb8:	f7fe fe28 	bl	800690c <bme68x_get_regs>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007cc8:	e1ce      	b.n	8008068 <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8007cca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007cce:	461a      	mov	r2, r3
 8007cd0:	0112      	lsls	r2, r2, #4
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8007cd8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007cdc:	3370      	adds	r3, #112	@ 0x70
 8007cde:	443b      	add	r3, r7
 8007ce0:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007ce4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	440b      	add	r3, r1
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8007cf8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007cfc:	3370      	adds	r3, #112	@ 0x70
 8007cfe:	443b      	add	r3, r7
 8007d00:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007d04:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	440b      	add	r3, r1
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f002 020f 	and.w	r2, r2, #15
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8007d18:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	440b      	add	r3, r1
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3270      	adds	r2, #112	@ 0x70
 8007d2c:	443a      	add	r2, r7
 8007d2e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007d32:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8007d34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007d38:	3302      	adds	r3, #2
 8007d3a:	3370      	adds	r3, #112	@ 0x70
 8007d3c:	443b      	add	r3, r7
 8007d3e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007d42:	031a      	lsls	r2, r3, #12
 8007d44:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007d48:	3303      	adds	r3, #3
 8007d4a:	3370      	adds	r3, #112	@ 0x70
 8007d4c:	443b      	add	r3, r7
 8007d4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8007d56:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007d5a:	3204      	adds	r2, #4
 8007d5c:	3270      	adds	r2, #112	@ 0x70
 8007d5e:	443a      	add	r2, r7
 8007d60:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007d64:	0912      	lsrs	r2, r2, #4
 8007d66:	b2d2      	uxtb	r2, r2
        adc_pres =
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8007d6c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007d70:	3305      	adds	r3, #5
 8007d72:	3370      	adds	r3, #112	@ 0x70
 8007d74:	443b      	add	r3, r7
 8007d76:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007d7a:	031a      	lsls	r2, r3, #12
 8007d7c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007d80:	3306      	adds	r3, #6
 8007d82:	3370      	adds	r3, #112	@ 0x70
 8007d84:	443b      	add	r3, r7
 8007d86:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8007d8e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007d92:	3207      	adds	r2, #7
 8007d94:	3270      	adds	r2, #112	@ 0x70
 8007d96:	443a      	add	r2, r7
 8007d98:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007d9c:	0912      	lsrs	r2, r2, #4
 8007d9e:	b2d2      	uxtb	r2, r2
        adc_temp =
 8007da0:	4313      	orrs	r3, r2
 8007da2:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8007da4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007da8:	3308      	adds	r3, #8
 8007daa:	3370      	adds	r3, #112	@ 0x70
 8007dac:	443b      	add	r3, r7
 8007dae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007dba:	3209      	adds	r2, #9
 8007dbc:	3270      	adds	r2, #112	@ 0x70
 8007dbe:	443a      	add	r2, r7
 8007dc0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8007dca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007dce:	330d      	adds	r3, #13
 8007dd0:	3370      	adds	r3, #112	@ 0x70
 8007dd2:	443b      	add	r3, r7
 8007dd4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007de0:	320e      	adds	r2, #14
 8007de2:	3270      	adds	r2, #112	@ 0x70
 8007de4:	443a      	add	r2, r7
 8007de6:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007dea:	0992      	lsrs	r2, r2, #6
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8007df4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007df8:	330f      	adds	r3, #15
 8007dfa:	3370      	adds	r3, #112	@ 0x70
 8007dfc:	443b      	add	r3, r7
 8007dfe:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007e0a:	3210      	adds	r2, #16
 8007e0c:	3270      	adds	r2, #112	@ 0x70
 8007e0e:	443a      	add	r2, r7
 8007e10:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007e14:	0992      	lsrs	r2, r2, #6
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8007e1e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007e22:	330e      	adds	r3, #14
 8007e24:	3370      	adds	r3, #112	@ 0x70
 8007e26:	443b      	add	r3, r7
 8007e28:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8007e34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007e38:	3310      	adds	r3, #16
 8007e3a:	3370      	adds	r3, #112	@ 0x70
 8007e3c:	443b      	add	r3, r7
 8007e3e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d13a      	bne.n	8007ec8 <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8007e52:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b25a      	sxtb	r2, r3
 8007e62:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007e66:	3310      	adds	r3, #16
 8007e68:	3370      	adds	r3, #112	@ 0x70
 8007e6a:	443b      	add	r3, r7
 8007e6c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007e70:	b25b      	sxtb	r3, r3
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	b25b      	sxtb	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b259      	sxtb	r1, r3
 8007e7c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	4413      	add	r3, r2
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	b2ca      	uxtb	r2, r1
 8007e8a:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8007e8c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4413      	add	r3, r2
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b25a      	sxtb	r2, r3
 8007e9c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ea0:	3310      	adds	r3, #16
 8007ea2:	3370      	adds	r3, #112	@ 0x70
 8007ea4:	443b      	add	r3, r7
 8007ea6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	b25b      	sxtb	r3, r3
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	b259      	sxtb	r1, r3
 8007eb6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	b2ca      	uxtb	r2, r1
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e039      	b.n	8007f3c <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8007ec8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b25a      	sxtb	r2, r3
 8007ed8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007edc:	330e      	adds	r3, #14
 8007ede:	3370      	adds	r3, #112	@ 0x70
 8007ee0:	443b      	add	r3, r7
 8007ee2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	b25b      	sxtb	r3, r3
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	b259      	sxtb	r1, r3
 8007ef2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4413      	add	r3, r2
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	b2ca      	uxtb	r2, r1
 8007f00:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8007f02:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b25a      	sxtb	r2, r3
 8007f12:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f16:	330e      	adds	r3, #14
 8007f18:	3370      	adds	r3, #112	@ 0x70
 8007f1a:	443b      	add	r3, r7
 8007f1c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f20:	b25b      	sxtb	r3, r3
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	b259      	sxtb	r1, r3
 8007f2c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	4413      	add	r3, r2
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	b2ca      	uxtb	r2, r1
 8007f3a:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8007f3c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8007f5c:	443a      	add	r2, r7
 8007f5e:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007f62:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8007f64:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	f103 020a 	add.w	r2, r3, #10
 8007f76:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	440b      	add	r3, r1
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3270      	adds	r2, #112	@ 0x70
 8007f84:	443a      	add	r2, r7
 8007f86:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007f8a:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8007f8c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4413      	add	r3, r2
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	f103 0214 	add.w	r2, r3, #20
 8007f9e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	440b      	add	r3, r1
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3270      	adds	r2, #112	@ 0x70
 8007fac:	443a      	add	r2, r7
 8007fae:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007fb2:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8007fb4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	681c      	ldr	r4, [r3, #0]
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007fc4:	f7ff f8aa 	bl	800711c <calc_temperature>
 8007fc8:	eef0 7a40 	vmov.f32	s15, s0
 8007fcc:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8007fd0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	681c      	ldr	r4, [r3, #0]
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007fe0:	f7ff f922 	bl	8007228 <calc_pressure>
 8007fe4:	eef0 7a40 	vmov.f32	s15, s0
 8007fe8:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8007fec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	681c      	ldr	r4, [r3, #0]
 8007ff8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fa54 	bl	80074ac <calc_humidity>
 8008004:	eef0 7a40 	vmov.f32	s15, s0
 8008008:	edc4 7a05 	vstr	s15, [r4, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d112      	bne.n	800803a <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8008014:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	681c      	ldr	r4, [r3, #0]
 8008020:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008024:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fbac 	bl	8007788 <calc_gas_resistance_high>
 8008030:	eef0 7a40 	vmov.f32	s15, s0
 8008034:	edc4 7a06 	vstr	s15, [r4, #24]
 8008038:	e011      	b.n	800805e <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800803a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	4413      	add	r3, r2
 8008044:	681c      	ldr	r4, [r3, #0]
 8008046:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 800804a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff faf7 	bl	8007644 <calc_gas_resistance_low>
 8008056:	eef0 7a40 	vmov.f32	s15, s0
 800805a:	edc4 7a06 	vstr	s15, [r4, #24]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800805e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008062:	3301      	adds	r3, #1
 8008064:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8008068:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800806c:	2b02      	cmp	r3, #2
 800806e:	d804      	bhi.n	800807a <read_all_field_data+0x44c>
 8008070:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008074:	2b00      	cmp	r3, #0
 8008076:	f43f ae28 	beq.w	8007cca <read_all_field_data+0x9c>
        }
    }

    return rslt;
 800807a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800807e:	4618      	mov	r0, r3
 8008080:	3774      	adds	r7, #116	@ 0x74
 8008082:	46bd      	mov	sp, r7
 8008084:	bd90      	pop	{r4, r7, pc}

08008086 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8008086:	b590      	push	{r4, r7, lr}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	4603      	mov	r3, r0
 800808e:	6039      	str	r1, [r7, #0]
 8008090:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8008092:	6838      	ldr	r0, [r7, #0]
 8008094:	f000 f8b8 	bl	8008208 <null_ptr_check>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800809c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d14f      	bne.n	8008144 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80080a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da02      	bge.n	80080b2 <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]
 80080b0:	e001      	b.n	80080b6 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80080b2:	2310      	movs	r3, #16
 80080b4:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	7b5b      	ldrb	r3, [r3, #13]
 80080ba:	7bba      	ldrb	r2, [r7, #14]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d041      	beq.n	8008144 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	7bba      	ldrb	r2, [r7, #14]
 80080c4:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f107 010d 	add.w	r1, r7, #13
 80080d2:	2201      	movs	r2, #1
 80080d4:	20f3      	movs	r0, #243	@ 0xf3
 80080d6:	47a0      	blx	r4
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80080ec:	23fe      	movs	r3, #254	@ 0xfe
 80080ee:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80080f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d125      	bne.n	8008144 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80080f8:	7b7b      	ldrb	r3, [r7, #13]
 80080fa:	f023 0310 	bic.w	r3, r3, #16
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	7b5b      	ldrb	r3, [r3, #13]
 8008106:	b25b      	sxtb	r3, r3
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	b25a      	sxtb	r2, r3
 800810e:	7b7b      	ldrb	r3, [r7, #13]
 8008110:	b25b      	sxtb	r3, r3
 8008112:	4313      	orrs	r3, r2
 8008114:	b25b      	sxtb	r3, r3
 8008116:	b2db      	uxtb	r3, r3
 8008118:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f107 010d 	add.w	r1, r7, #13
 8008126:	2201      	movs	r2, #1
 8008128:	2073      	movs	r0, #115	@ 0x73
 800812a:	47a0      	blx	r4
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8008140:	23fe      	movs	r3, #254	@ 0xfe
 8008142:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8008144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	bd90      	pop	{r4, r7, pc}

08008150 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8008150:	b590      	push	{r4, r7, lr}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f855 	bl	8008208 <null_ptr_check>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8008162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d11b      	bne.n	80081a2 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f107 010e 	add.w	r1, r7, #14
 8008176:	2201      	movs	r2, #1
 8008178:	20f3      	movs	r0, #243	@ 0xf3
 800817a:	47a0      	blx	r4
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8008190:	23fe      	movs	r3, #254	@ 0xfe
 8008192:	73fb      	strb	r3, [r7, #15]
 8008194:	e005      	b.n	80081a2 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	b2da      	uxtb	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80081a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd90      	pop	{r4, r7, pc}

080081ae <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b086      	sub	sp, #24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	460b      	mov	r3, r1
 80081b8:	607a      	str	r2, [r7, #4]
 80081ba:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f823 	bl	8008208 <null_ptr_check>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <boundary_check+0x4a>
 80081cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d111      	bne.n	80081f8 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20e      	bcs.n	80081fc <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7afa      	ldrb	r2, [r7, #11]
 80081e2:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 80081f6:	e001      	b.n	80081fc <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80081f8:	23ff      	movs	r3, #255	@ 0xff
 80081fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80081fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <null_ptr_check+0x2a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <null_ptr_check+0x2a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <null_ptr_check+0x2a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8008232:	23ff      	movs	r3, #255	@ 0xff
 8008234:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b093      	sub	sp, #76	@ 0x4c
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	460b      	mov	r3, r1
 8008256:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8008264:	236e      	movs	r3, #110	@ 0x6e
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800826a:	4aa1      	ldr	r2, [pc, #644]	@ (80084f0 <set_conf+0x2a8>)
 800826c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008270:	ca07      	ldmia	r2, {r0, r1, r2}
 8008272:	c303      	stmia	r3!, {r0, r1}
 8008274:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008276:	4a9e      	ldr	r2, [pc, #632]	@ (80084f0 <set_conf+0x2a8>)
 8008278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800827c:	ca07      	ldmia	r2, {r0, r1, r2}
 800827e:	c303      	stmia	r3!, {r0, r1}
 8008280:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008282:	4a9b      	ldr	r2, [pc, #620]	@ (80084f0 <set_conf+0x2a8>)
 8008284:	f107 0320 	add.w	r3, r7, #32
 8008288:	ca07      	ldmia	r2, {r0, r1, r2}
 800828a:	c303      	stmia	r3!, {r0, r1}
 800828c:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800828e:	4a98      	ldr	r2, [pc, #608]	@ (80084f0 <set_conf+0x2a8>)
 8008290:	f107 0314 	add.w	r3, r7, #20
 8008294:	ca07      	ldmia	r2, {r0, r1, r2}
 8008296:	c303      	stmia	r3!, {r0, r1}
 8008298:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 800829a:	7afb      	ldrb	r3, [r7, #11]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d024      	beq.n	80082ea <set_conf+0xa2>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	f300 80f9 	bgt.w	8008498 <set_conf+0x250>
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d002      	beq.n	80082b0 <set_conf+0x68>
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d07c      	beq.n	80083a8 <set_conf+0x160>
 80082ae:	e0f3      	b.n	8008498 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80082b0:	235a      	movs	r3, #90	@ 0x5a
 80082b2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fa9d 	bl	80077fc <calc_res_heat>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80082c8:	2364      	movs	r3, #100	@ 0x64
 80082ca:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	889b      	ldrh	r3, [r3, #4]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fb42 	bl	800795c <calc_gas_wait>
 80082d8:	4603      	mov	r3, r0
 80082da:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 80082e8:	e0db      	b.n	80084a2 <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <set_conf+0xb2>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80082fa:	23ff      	movs	r3, #255	@ 0xff
 80082fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8008300:	e0cf      	b.n	80084a2 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8008302:	2300      	movs	r3, #0
 8008304:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008308:	e03f      	b.n	800838a <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 800830a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800830e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008312:	325a      	adds	r2, #90	@ 0x5a
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	3348      	adds	r3, #72	@ 0x48
 8008318:	443b      	add	r3, r7
 800831a:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fa62 	bl	80077fc <calc_res_heat>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8008340:	443b      	add	r3, r7
 8008342:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8008346:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800834a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800834e:	3264      	adds	r2, #100	@ 0x64
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	3348      	adds	r3, #72	@ 0x48
 8008354:	443b      	add	r3, r7
 8008356:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	4413      	add	r3, r2
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff faf5 	bl	800795c <calc_gas_wait>
 8008372:	4603      	mov	r3, r0
 8008374:	461a      	mov	r2, r3
 8008376:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800837a:	443b      	add	r3, r7
 800837c:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8008380:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008384:	3301      	adds	r3, #1
 8008386:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	7c1b      	ldrb	r3, [r3, #16]
 800838e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008392:	429a      	cmp	r2, r3
 8008394:	d3b9      	bcc.n	800830a <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	7c1a      	ldrb	r2, [r3, #16]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	7c1b      	ldrb	r3, [r3, #16]
 80083a2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 80083a6:	e07c      	b.n	80084a2 <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <set_conf+0x170>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d103      	bne.n	80083c0 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 80083b8:	23ff      	movs	r3, #255	@ 0xff
 80083ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80083be:	e070      	b.n	80084a2 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8a5b      	ldrh	r3, [r3, #18]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 80083c8:	2303      	movs	r3, #3
 80083ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80083d4:	e03a      	b.n	800844c <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80083d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80083da:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80083de:	325a      	adds	r2, #90	@ 0x5a
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	3348      	adds	r3, #72	@ 0x48
 80083e4:	443b      	add	r3, r7
 80083e6:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff f9fc 	bl	80077fc <calc_res_heat>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800840c:	443b      	add	r3, r7
 800840e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8008412:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008416:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800841a:	3264      	adds	r2, #100	@ 0x64
 800841c:	b2d2      	uxtb	r2, r2
 800841e:	3348      	adds	r3, #72	@ 0x48
 8008420:	443b      	add	r3, r7
 8008422:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	4413      	add	r3, r2
 8008432:	881a      	ldrh	r2, [r3, #0]
 8008434:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	3348      	adds	r3, #72	@ 0x48
 800843c:	443b      	add	r3, r7
 800843e:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8008442:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008446:	3301      	adds	r3, #1
 8008448:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	7c1b      	ldrb	r3, [r3, #16]
 8008450:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008454:	429a      	cmp	r2, r3
 8008456:	d3be      	bcc.n	80083d6 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	7c1a      	ldrb	r2, [r3, #16]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	7c1b      	ldrb	r3, [r3, #16]
 8008464:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8a5b      	ldrh	r3, [r3, #18]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 f841 	bl	80084f4 <calc_heatr_dur_shared>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8008478:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10f      	bne.n	80084a0 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8008480:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8008484:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2201      	movs	r2, #1
 800848c:	f7fe f9ae 	bl	80067ec <bme68x_set_regs>
 8008490:	4603      	mov	r3, r0
 8008492:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8008496:	e003      	b.n	80084a0 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800849e:	e000      	b.n	80084a2 <set_conf+0x25a>
            break;
 80084a0:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 80084a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 80084aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80084ae:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80084b2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	f7fe f998 	bl	80067ec <bme68x_set_regs>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 80084c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80084ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80084ce:	f107 0114 	add.w	r1, r7, #20
 80084d2:	f107 0020 	add.w	r0, r7, #32
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	f7fe f988 	bl	80067ec <bme68x_set_regs>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80084e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	374c      	adds	r7, #76	@ 0x4c
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd90      	pop	{r4, r7, pc}
 80084ee:	bf00      	nop
 80084f0:	0800f150 	.word	0x0800f150

080084f4 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	f240 7282 	movw	r2, #1922	@ 0x782
 8008508:	4293      	cmp	r3, r2
 800850a:	d902      	bls.n	8008512 <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 800850c:	23ff      	movs	r3, #255	@ 0xff
 800850e:	73bb      	strb	r3, [r7, #14]
 8008510:	e01d      	b.n	800854e <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008518:	fb03 f202 	mul.w	r2, r3, r2
 800851c:	4b0f      	ldr	r3, [pc, #60]	@ (800855c <calc_heatr_dur_shared+0x68>)
 800851e:	fba3 1302 	umull	r1, r3, r3, r2
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	0852      	lsrs	r2, r2, #1
 8008526:	4413      	add	r3, r2
 8008528:	0a1b      	lsrs	r3, r3, #8
 800852a:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 800852c:	e005      	b.n	800853a <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	089b      	lsrs	r3, r3, #2
 8008532:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	3301      	adds	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	2b3f      	cmp	r3, #63	@ 0x3f
 800853e:	d8f6      	bhi.n	800852e <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	b2da      	uxtb	r2, r3
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	019b      	lsls	r3, r3, #6
 8008548:	b2db      	uxtb	r3, r3
 800854a:	4413      	add	r3, r2
 800854c:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 800854e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	12c8b89f 	.word	0x12c8b89f

08008560 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	603a      	str	r2, [r7, #0]
 800856a:	71fb      	strb	r3, [r7, #7]
 800856c:	460b      	mov	r3, r1
 800856e:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	4413      	add	r3, r2
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	789b      	ldrb	r3, [r3, #2]
 800857c:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 800857e:	79bb      	ldrb	r3, [r7, #6]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4413      	add	r3, r2
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	789b      	ldrb	r3, [r3, #2]
 800858a:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	4413      	add	r3, r2
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b25b      	sxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	da21      	bge.n	80085e2 <sort_sensor_data+0x82>
 800859e:	79bb      	ldrb	r3, [r7, #6]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da18      	bge.n	80085e2 <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 80085b0:	89ba      	ldrh	r2, [r7, #12]
 80085b2:	89fb      	ldrh	r3, [r7, #14]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80085ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085be:	f113 0f02 	cmn.w	r3, #2
 80085c2:	db03      	blt.n	80085cc <sort_sensor_data+0x6c>
 80085c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db03      	blt.n	80085d4 <sort_sensor_data+0x74>
 80085cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	dd16      	ble.n	8008602 <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 80085d4:	79b9      	ldrb	r1, [r7, #6]
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f816 	bl	800860c <swap_fields>
    {
 80085e0:	e00f      	b.n	8008602 <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 80085e2:	79bb      	ldrb	r3, [r7, #6]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4413      	add	r3, r2
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b25b      	sxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da07      	bge.n	8008604 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 80085f4:	79b9      	ldrb	r1, [r7, #6]
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f806 	bl	800860c <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8008600:	e000      	b.n	8008604 <sort_sensor_data+0xa4>
    {
 8008602:	bf00      	nop
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	603a      	str	r2, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
 8008618:	460b      	mov	r3, r1
 800861a:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	4413      	add	r3, r2
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8008628:	79bb      	ldrb	r3, [r7, #6]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	441a      	add	r2, r3
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	440b      	add	r3, r1
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 800863c:	79bb      	ldrb	r3, [r7, #6]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4413      	add	r3, r2
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	601a      	str	r2, [r3, #0]
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08e      	sub	sp, #56	@ 0x38
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 800865c:	f107 010c 	add.w	r1, r7, #12
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2217      	movs	r2, #23
 8008664:	208a      	movs	r0, #138	@ 0x8a
 8008666:	f7fe f951 	bl	800690c <bme68x_get_regs>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8008670:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10b      	bne.n	8008690 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8008678:	f107 030c 	add.w	r3, r7, #12
 800867c:	f103 0117 	add.w	r1, r3, #23
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	220e      	movs	r2, #14
 8008684:	20e1      	movs	r0, #225	@ 0xe1
 8008686:	f7fe f941 	bl	800690c <bme68x_get_regs>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8008690:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10b      	bne.n	80086b0 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2205      	movs	r2, #5
 80086a4:	2000      	movs	r0, #0
 80086a6:	f7fe f931 	bl	800690c <bme68x_get_regs>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 80086b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 80cb 	bne.w	8008850 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 80086ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	b21a      	sxth	r2, r3
 80086c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086c6:	b21b      	sxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b21b      	sxth	r3, r3
 80086cc:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 80086d2:	7b7b      	ldrb	r3, [r7, #13]
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	b21a      	sxth	r2, r3
 80086d8:	7b3b      	ldrb	r3, [r7, #12]
 80086da:	b21b      	sxth	r3, r3
 80086dc:	4313      	orrs	r3, r2
 80086de:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	b25a      	sxtb	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 80086ee:	7c7b      	ldrb	r3, [r7, #17]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	b21a      	sxth	r2, r3
 80086f4:	7c3b      	ldrb	r3, [r7, #16]
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b21b      	sxth	r3, r3
 80086fc:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8008702:	7cfb      	ldrb	r3, [r7, #19]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	b21a      	sxth	r2, r3
 8008708:	7cbb      	ldrb	r3, [r7, #18]
 800870a:	b21b      	sxth	r3, r3
 800870c:	4313      	orrs	r3, r2
 800870e:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8008714:	7d3b      	ldrb	r3, [r7, #20]
 8008716:	b25a      	sxtb	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	b21a      	sxth	r2, r3
 8008724:	7dbb      	ldrb	r3, [r7, #22]
 8008726:	b21b      	sxth	r3, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8008730:	7e7b      	ldrb	r3, [r7, #25]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	b21a      	sxth	r2, r3
 8008736:	7e3b      	ldrb	r3, [r7, #24]
 8008738:	b21b      	sxth	r3, r3
 800873a:	4313      	orrs	r3, r2
 800873c:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8008742:	7efb      	ldrb	r3, [r7, #27]
 8008744:	b25a      	sxtb	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 800874c:	7ebb      	ldrb	r3, [r7, #26]
 800874e:	b25a      	sxtb	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8008756:	7ffb      	ldrb	r3, [r7, #31]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b21a      	sxth	r2, r3
 800875c:	7fbb      	ldrb	r3, [r7, #30]
 800875e:	b21b      	sxth	r3, r3
 8008760:	4313      	orrs	r3, r2
 8008762:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8008768:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	b21a      	sxth	r2, r3
 8008770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008774:	b21b      	sxth	r3, r3
 8008776:	4313      	orrs	r3, r2
 8008778:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 800877e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008788:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8008790:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008794:	b21b      	sxth	r3, r3
 8008796:	f003 030f 	and.w	r3, r3, #15
 800879a:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800879c:	4313      	orrs	r3, r2
 800879e:	b21b      	sxth	r3, r3
 80087a0:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 80087a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	b21a      	sxth	r2, r3
 80087ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087b2:	091b      	lsrs	r3, r3, #4
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	b21b      	sxth	r3, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	b21b      	sxth	r3, r3
 80087bc:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 80087c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087c6:	b25a      	sxtb	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 80087cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087d0:	b25a      	sxtb	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 80087d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80087da:	b25a      	sxtb	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 80087e0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 80087e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80087ec:	b25a      	sxtb	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 80087f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087f6:	b25a      	sxtb	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 80087fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b21a      	sxth	r2, r3
 8008804:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008808:	b21b      	sxth	r3, r3
 800880a:	4313      	orrs	r3, r2
 800880c:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8008812:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008816:	b25a      	sxtb	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800881c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008820:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008824:	2b00      	cmp	r3, #0
 8008826:	da00      	bge.n	800882a <get_calib_data+0x1d6>
 8008828:	330f      	adds	r3, #15
 800882a:	111b      	asrs	r3, r3, #4
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8008834:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8008838:	b25a      	sxtb	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8008840:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008844:	b25b      	sxtb	r3, r3
 8008846:	111b      	asrs	r3, r3, #4
 8008848:	b25a      	sxtb	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8008850:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008854:	4618      	mov	r0, r3
 8008856:	3738      	adds	r7, #56	@ 0x38
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8008868:	f107 010e 	add.w	r1, r7, #14
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	20f0      	movs	r0, #240	@ 0xf0
 8008872:	f7fe f84b 	bl	800690c <bme68x_get_regs>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 800887a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 800888a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <bme68x_start>:


volatile uint8_t err_code_2;

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 80088a2:	2254      	movs	r2, #84	@ 0x54
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	4820      	ldr	r0, [pc, #128]	@ (8008928 <bme68x_start+0x90>)
 80088a8:	f005 fc29 	bl	800e0fe <memcpy>

	// Init.
	//TODO: bme mal init ici ........!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	err_code_2 = bme68x_interface_init(&bme, BME68X_I2C_INTF);
 80088ac:	2101      	movs	r1, #1
 80088ae:	481f      	ldr	r0, [pc, #124]	@ (800892c <bme68x_start+0x94>)
 80088b0:	f000 f8f0 	bl	8008a94 <bme68x_interface_init>
 80088b4:	4603      	mov	r3, r0
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008930 <bme68x_start+0x98>)
 80088ba:	701a      	strb	r2, [r3, #0]
	bme68x_init(&bme);
 80088bc:	481b      	ldr	r0, [pc, #108]	@ (800892c <bme68x_start+0x94>)
 80088be:	f7fd ff61 	bl	8006784 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 80088c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008934 <bme68x_start+0x9c>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 80088c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008938 <bme68x_start+0xa0>)
 80088ca:	2202      	movs	r2, #2
 80088cc:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 80088ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008938 <bme68x_start+0xa0>)
 80088d0:	2208      	movs	r2, #8
 80088d2:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 80088d4:	4b18      	ldr	r3, [pc, #96]	@ (8008938 <bme68x_start+0xa0>)
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 80088da:	4b17      	ldr	r3, [pc, #92]	@ (8008938 <bme68x_start+0xa0>)
 80088dc:	2203      	movs	r2, #3
 80088de:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 80088e0:	4b15      	ldr	r3, [pc, #84]	@ (8008938 <bme68x_start+0xa0>)
 80088e2:	2204      	movs	r2, #4
 80088e4:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 80088e6:	4911      	ldr	r1, [pc, #68]	@ (800892c <bme68x_start+0x94>)
 80088e8:	4813      	ldr	r0, [pc, #76]	@ (8008938 <bme68x_start+0xa0>)
 80088ea:	f7fe f897 	bl	8006a1c <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 80088ee:	4b13      	ldr	r3, [pc, #76]	@ (800893c <bme68x_start+0xa4>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 80088f4:	4b11      	ldr	r3, [pc, #68]	@ (800893c <bme68x_start+0xa4>)
 80088f6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80088fa:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 80088fc:	4b0f      	ldr	r3, [pc, #60]	@ (800893c <bme68x_start+0xa4>)
 80088fe:	2296      	movs	r2, #150	@ 0x96
 8008900:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8008902:	4a0a      	ldr	r2, [pc, #40]	@ (800892c <bme68x_start+0x94>)
 8008904:	490d      	ldr	r1, [pc, #52]	@ (800893c <bme68x_start+0xa4>)
 8008906:	2001      	movs	r0, #1
 8008908:	f7fe fb80 	bl	800700c <bme68x_set_heatr_conf>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	4b0b      	ldr	r3, [pc, #44]	@ (8008940 <bme68x_start+0xa8>)
 8008912:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8008914:	f000 f908 	bl	8008b28 <bme68x_GetGasReference>

	return rslt;
 8008918:	4b09      	ldr	r3, [pc, #36]	@ (8008940 <bme68x_start+0xa8>)
 800891a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000534 	.word	0x20000534
 800892c:	20000588 	.word	0x20000588
 8008930:	2000060d 	.word	0x2000060d
 8008934:	200005d8 	.word	0x200005d8
 8008938:	200005e0 	.word	0x200005e0
 800893c:	200005e8 	.word	0x200005e8
 8008940:	200005dc 	.word	0x200005dc

08008944 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 800894c:	4916      	ldr	r1, [pc, #88]	@ (80089a8 <bme68x_single_measure+0x64>)
 800894e:	2001      	movs	r0, #1
 8008950:	f7fe f968 	bl	8006c24 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8008954:	4a14      	ldr	r2, [pc, #80]	@ (80089a8 <bme68x_single_measure+0x64>)
 8008956:	4915      	ldr	r1, [pc, #84]	@ (80089ac <bme68x_single_measure+0x68>)
 8008958:	2001      	movs	r0, #1
 800895a:	f7fe f9e5 	bl	8006d28 <bme68x_get_meas_dur>
 800895e:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8008960:	4a13      	ldr	r2, [pc, #76]	@ (80089b0 <bme68x_single_measure+0x6c>)
 8008962:	8892      	ldrh	r2, [r2, #4]
 8008964:	4611      	mov	r1, r2
 8008966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800896a:	fb01 f202 	mul.w	r2, r1, r2
 800896e:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8008970:	4a10      	ldr	r2, [pc, #64]	@ (80089b4 <bme68x_single_measure+0x70>)
 8008972:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000); // modification pour la compatibilite stack lora
 8008974:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <bme68x_single_measure+0x70>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a0f      	ldr	r2, [pc, #60]	@ (80089b8 <bme68x_single_measure+0x74>)
 800897a:	fba2 2303 	umull	r2, r3, r2, r3
 800897e:	099b      	lsrs	r3, r3, #6
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fb43 	bl	800900c <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8008986:	4b08      	ldr	r3, [pc, #32]	@ (80089a8 <bme68x_single_measure+0x64>)
 8008988:	4a0c      	ldr	r2, [pc, #48]	@ (80089bc <bme68x_single_measure+0x78>)
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	2001      	movs	r0, #1
 800898e:	f7fe fa3f 	bl	8006e10 <bme68x_get_data>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	4b0a      	ldr	r3, [pc, #40]	@ (80089c0 <bme68x_single_measure+0x7c>)
 8008998:	701a      	strb	r2, [r3, #0]
	return rslt;
 800899a:	4b09      	ldr	r3, [pc, #36]	@ (80089c0 <bme68x_single_measure+0x7c>)
 800899c:	f993 3000 	ldrsb.w	r3, [r3]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000588 	.word	0x20000588
 80089ac:	200005e0 	.word	0x200005e0
 80089b0:	200005e8 	.word	0x200005e8
 80089b4:	200005fc 	.word	0x200005fc
 80089b8:	10624dd3 	.word	0x10624dd3
 80089bc:	20000600 	.word	0x20000600
 80089c0:	200005dc 	.word	0x200005dc

080089c4 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	@ 0x28
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	b299      	uxth	r1, r3
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	200f      	movs	r0, #15
 80089ec:	9002      	str	r0, [sp, #8]
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	2301      	movs	r3, #1
 80089f6:	4806      	ldr	r0, [pc, #24]	@ (8008a10 <bme68x_i2c_write+0x4c>)
 80089f8:	f002 fa06 	bl	800ae08 <HAL_I2C_Mem_Write>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	e000      	b.n	8008a08 <bme68x_i2c_write+0x44>

	return 1;
 8008a06:	2301      	movs	r3, #1
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20000534 	.word	0x20000534

08008a14 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	@ 0x28
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	b21b      	sxth	r3, r3
 8008a30:	f043 0301 	orr.w	r3, r3, #1
 8008a34:	b21b      	sxth	r3, r3
 8008a36:	b299      	uxth	r1, r3
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	200f      	movs	r0, #15
 8008a42:	9002      	str	r0, [sp, #8]
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4806      	ldr	r0, [pc, #24]	@ (8008a68 <bme68x_i2c_read+0x54>)
 8008a4e:	f002 faef 	bl	800b030 <HAL_I2C_Mem_Read>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e000      	b.n	8008a5e <bme68x_i2c_read+0x4a>

	return 1;
 8008a5c:	2301      	movs	r3, #1
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000534 	.word	0x20000534

08008a6c <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a05      	ldr	r2, [pc, #20]	@ (8008a90 <bme68x_delay_us+0x24>)
 8008a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7e:	099b      	lsrs	r3, r3, #6
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fac3 	bl	800900c <HAL_Delay>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	10624dd3 	.word	0x10624dd3

08008a94 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d02c      	beq.n	8008b04 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8008aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b14 <bme68x_interface_init+0x80>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	b299      	uxth	r1, r3
 8008ab2:	2305      	movs	r3, #5
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	4818      	ldr	r0, [pc, #96]	@ (8008b18 <bme68x_interface_init+0x84>)
 8008ab8:	f002 fbd4 	bl	800b264 <HAL_I2C_IsDeviceReady>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <bme68x_interface_init+0x3a>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d118      	bne.n	8008afe <bme68x_interface_init+0x6a>
 8008acc:	e004      	b.n	8008ad8 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8008ace:	23fe      	movs	r3, #254	@ 0xfe
 8008ad0:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8008ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad6:	e019      	b.n	8008b0c <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a10      	ldr	r2, [pc, #64]	@ (8008b1c <bme68x_interface_init+0x88>)
 8008adc:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8008b20 <bme68x_interface_init+0x8c>)
 8008ae2:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a0d      	ldr	r2, [pc, #52]	@ (8008b24 <bme68x_interface_init+0x90>)
 8008aee:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a08      	ldr	r2, [pc, #32]	@ (8008b14 <bme68x_interface_init+0x80>)
 8008af4:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	221e      	movs	r2, #30
 8008afa:	739a      	strb	r2, [r3, #14]
 8008afc:	e004      	b.n	8008b08 <bme68x_interface_init+0x74>
			return -2;
 8008afe:	f06f 0301 	mvn.w	r3, #1
 8008b02:	e003      	b.n	8008b0c <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8008b04:	23ff      	movs	r3, #255	@ 0xff
 8008b06:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8008b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	20000004 	.word	0x20000004
 8008b18:	20000534 	.word	0x20000534
 8008b1c:	08008a15 	.word	0x08008a15
 8008b20:	080089c5 	.word	0x080089c5
 8008b24:	08008a6d 	.word	0x08008a6d

08008b28 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8008b2e:	230a      	movs	r3, #10
 8008b30:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8008b32:	2301      	movs	r3, #1
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	e013      	b.n	8008b60 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8008b38:	4b14      	ldr	r3, [pc, #80]	@ (8008b8c <bme68x_GetGasReference+0x64>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ff01 	bl	8008944 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8008b42:	4b12      	ldr	r3, [pc, #72]	@ (8008b8c <bme68x_GetGasReference+0x64>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	ed93 7a06 	vldr	s14, [r3, #24]
 8008b4a:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <bme68x_GetGasReference+0x68>)
 8008b4c:	edd3 7a00 	vldr	s15, [r3]
 8008b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b54:	4b0e      	ldr	r3, [pc, #56]	@ (8008b90 <bme68x_GetGasReference+0x68>)
 8008b56:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	607b      	str	r3, [r7, #4]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	dde7      	ble.n	8008b38 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8008b68:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <bme68x_GetGasReference+0x68>)
 8008b6a:	edd3 6a00 	vldr	s13, [r3]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	ee07 3a90 	vmov	s15, r3
 8008b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <bme68x_GetGasReference+0x68>)
 8008b7e:	edc3 7a00 	vstr	s15, [r3]

}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200005d8 	.word	0x200005d8
 8008b90:	20000008 	.word	0x20000008
 8008b94:	00000000 	.word	0x00000000

08008b98 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8008b98:	b5b0      	push	{r4, r5, r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8008b9e:	4b52      	ldr	r3, [pc, #328]	@ (8008ce8 <bme68x_GetHumidityScore+0x150>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ba6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008cec <bme68x_GetHumidityScore+0x154>
 8008baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb2:	db0e      	blt.n	8008bd2 <bme68x_GetHumidityScore+0x3a>
 8008bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8008ce8 <bme68x_GetHumidityScore+0x150>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	edd3 7a05 	vldr	s15, [r3, #20]
 8008bbc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8008cf0 <bme68x_GetHumidityScore+0x158>
 8008bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc8:	d803      	bhi.n	8008bd2 <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8008bca:	4b4a      	ldr	r3, [pc, #296]	@ (8008cf4 <bme68x_GetHumidityScore+0x15c>)
 8008bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8008cf8 <bme68x_GetHumidityScore+0x160>)
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	e076      	b.n	8008cc0 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8008bd2:	4b45      	ldr	r3, [pc, #276]	@ (8008ce8 <bme68x_GetHumidityScore+0x150>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8008bda:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8008cec <bme68x_GetHumidityScore+0x154>
 8008bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be6:	d52e      	bpl.n	8008c46 <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8008be8:	4b44      	ldr	r3, [pc, #272]	@ (8008cfc <bme68x_GetHumidityScore+0x164>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7f7 fca3 	bl	8000538 <__aeabi_f2d>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	f04f 0000 	mov.w	r0, #0
 8008bfa:	4941      	ldr	r1, [pc, #260]	@ (8008d00 <bme68x_GetHumidityScore+0x168>)
 8008bfc:	f7f7 fe1e 	bl	800083c <__aeabi_ddiv>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4614      	mov	r4, r2
 8008c06:	461d      	mov	r5, r3
 8008c08:	4b37      	ldr	r3, [pc, #220]	@ (8008ce8 <bme68x_GetHumidityScore+0x150>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7f7 fc92 	bl	8000538 <__aeabi_f2d>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4620      	mov	r0, r4
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 fce4 	bl	80005e8 <__aeabi_dmul>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4610      	mov	r0, r2
 8008c26:	4619      	mov	r1, r3
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	4b35      	ldr	r3, [pc, #212]	@ (8008d04 <bme68x_GetHumidityScore+0x16c>)
 8008c2e:	f7f7 fcdb 	bl	80005e8 <__aeabi_dmul>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4610      	mov	r0, r2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f7f7 fee7 	bl	8000a0c <__aeabi_d2f>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4a2c      	ldr	r2, [pc, #176]	@ (8008cf4 <bme68x_GetHumidityScore+0x15c>)
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e03c      	b.n	8008cc0 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008c46:	4b2d      	ldr	r3, [pc, #180]	@ (8008cfc <bme68x_GetHumidityScore+0x164>)
 8008c48:	edd3 7a00 	vldr	s15, [r3]
 8008c4c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8008d08 <bme68x_GetHumidityScore+0x170>
 8008c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c54:	ee17 0a90 	vmov	r0, s15
 8008c58:	f7f7 fc6e 	bl	8000538 <__aeabi_f2d>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	f04f 0000 	mov.w	r0, #0
 8008c64:	4929      	ldr	r1, [pc, #164]	@ (8008d0c <bme68x_GetHumidityScore+0x174>)
 8008c66:	f7f7 fde9 	bl	800083c <__aeabi_ddiv>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4614      	mov	r4, r2
 8008c70:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 8008c72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce8 <bme68x_GetHumidityScore+0x150>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7f7 fc5d 	bl	8000538 <__aeabi_f2d>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4620      	mov	r0, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 fcaf 	bl	80005e8 <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4610      	mov	r0, r2
 8008c90:	4619      	mov	r1, r3
 8008c92:	a313      	add	r3, pc, #76	@ (adr r3, 8008ce0 <bme68x_GetHumidityScore+0x148>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 faf0 	bl	800027c <__adddf3>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	4b16      	ldr	r3, [pc, #88]	@ (8008d04 <bme68x_GetHumidityScore+0x16c>)
 8008caa:	f7f7 fc9d 	bl	80005e8 <__aeabi_dmul>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7f7 fea9 	bl	8000a0c <__aeabi_d2f>
 8008cba:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf4 <bme68x_GetHumidityScore+0x15c>)
 8008cbe:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <bme68x_GetHumidityScore+0x15c>)
 8008cc2:	edd3 7a00 	vldr	s15, [r3]
 8008cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cca:	edc7 7a01 	vstr	s15, [r7, #4]
 8008cce:	793b      	ldrb	r3, [r7, #4]
 8008cd0:	b25b      	sxtb	r3, r3
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	ded6ba8c 	.word	0xded6ba8c
 8008ce4:	3fdaaaa7 	.word	0x3fdaaaa7
 8008ce8:	200005d8 	.word	0x200005d8
 8008cec:	42180000 	.word	0x42180000
 8008cf0:	42280000 	.word	0x42280000
 8008cf4:	20000604 	.word	0x20000604
 8008cf8:	41c80000 	.word	0x41c80000
 8008cfc:	2000000c 	.word	0x2000000c
 8008d00:	3fd00000 	.word	0x3fd00000
 8008d04:	40590000 	.word	0x40590000
 8008d08:	42c80000 	.word	0x42c80000
 8008d0c:	bfd00000 	.word	0xbfd00000

08008d10 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 8008d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008d18:	4b42      	ldr	r3, [pc, #264]	@ (8008e24 <bme68x_GetGasScore+0x114>)
 8008d1a:	ed93 7a00 	vldr	s14, [r3]
 8008d1e:	4b42      	ldr	r3, [pc, #264]	@ (8008e28 <bme68x_GetGasScore+0x118>)
 8008d20:	edd3 7a00 	vldr	s15, [r3]
 8008d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d28:	ee17 0a90 	vmov	r0, s15
 8008d2c:	f7f7 fc04 	bl	8000538 <__aeabi_f2d>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	f04f 0000 	mov.w	r0, #0
 8008d38:	493c      	ldr	r1, [pc, #240]	@ (8008e2c <bme68x_GetGasScore+0x11c>)
 8008d3a:	f7f7 fd7f 	bl	800083c <__aeabi_ddiv>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4614      	mov	r4, r2
 8008d44:	461d      	mov	r5, r3
 8008d46:	4b3a      	ldr	r3, [pc, #232]	@ (8008e30 <bme68x_GetGasScore+0x120>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f7 fbf4 	bl	8000538 <__aeabi_f2d>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4620      	mov	r0, r4
 8008d56:	4629      	mov	r1, r5
 8008d58:	f7f7 fc46 	bl	80005e8 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4690      	mov	r8, r2
 8008d62:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8008d64:	4b30      	ldr	r3, [pc, #192]	@ (8008e28 <bme68x_GetGasScore+0x118>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f7 fbe5 	bl	8000538 <__aeabi_f2d>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	4b2c      	ldr	r3, [pc, #176]	@ (8008e24 <bme68x_GetGasScore+0x114>)
 8008d74:	ed93 7a00 	vldr	s14, [r3]
 8008d78:	4b2b      	ldr	r3, [pc, #172]	@ (8008e28 <bme68x_GetGasScore+0x118>)
 8008d7a:	edd3 7a00 	vldr	s15, [r3]
 8008d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d82:	ee17 0a90 	vmov	r0, s15
 8008d86:	f7f7 fbd7 	bl	8000538 <__aeabi_f2d>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	f04f 0000 	mov.w	r0, #0
 8008d92:	4926      	ldr	r1, [pc, #152]	@ (8008e2c <bme68x_GetGasScore+0x11c>)
 8008d94:	f7f7 fd52 	bl	800083c <__aeabi_ddiv>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 fc22 	bl	80005e8 <__aeabi_dmul>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4640      	mov	r0, r8
 8008daa:	4649      	mov	r1, r9
 8008dac:	f7f7 fa64 	bl	8000278 <__aeabi_dsub>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4610      	mov	r0, r2
 8008db6:	4619      	mov	r1, r3
			* 100.00;
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008e34 <bme68x_GetGasScore+0x124>)
 8008dbe:	f7f7 fc13 	bl	80005e8 <__aeabi_dmul>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7f7 fe1f 	bl	8000a0c <__aeabi_d2f>
 8008dce:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008dd0:	4a19      	ldr	r2, [pc, #100]	@ (8008e38 <bme68x_GetGasScore+0x128>)
 8008dd2:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8008dd4:	4b18      	ldr	r3, [pc, #96]	@ (8008e38 <bme68x_GetGasScore+0x128>)
 8008dd6:	edd3 7a00 	vldr	s15, [r3]
 8008dda:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008e3c <bme68x_GetGasScore+0x12c>
 8008dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de6:	dd02      	ble.n	8008dee <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8008de8:	4b13      	ldr	r3, [pc, #76]	@ (8008e38 <bme68x_GetGasScore+0x128>)
 8008dea:	4a15      	ldr	r2, [pc, #84]	@ (8008e40 <bme68x_GetGasScore+0x130>)
 8008dec:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 8008dee:	4b12      	ldr	r3, [pc, #72]	@ (8008e38 <bme68x_GetGasScore+0x128>)
 8008df0:	edd3 7a00 	vldr	s15, [r3]
 8008df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	d503      	bpl.n	8008e06 <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008e38 <bme68x_GetGasScore+0x128>)
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]

	return gas_score;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	@ (8008e38 <bme68x_GetGasScore+0x128>)
 8008e08:	edd3 7a00 	vldr	s15, [r3]
 8008e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e10:	edc7 7a01 	vstr	s15, [r7, #4]
 8008e14:	793b      	ldrb	r3, [r7, #4]
 8008e16:	b25b      	sxtb	r3, r3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e22:	bf00      	nop
 8008e24:	20000014 	.word	0x20000014
 8008e28:	20000010 	.word	0x20000010
 8008e2c:	3fe80000 	.word	0x3fe80000
 8008e30:	20000008 	.word	0x20000008
 8008e34:	40590000 	.word	0x40590000
 8008e38:	20000608 	.word	0x20000608
 8008e3c:	42960000 	.word	0x42960000
 8008e40:	42960000 	.word	0x42960000

08008e44 <bme68x_iaq>:

float bme68x_iaq() {
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ec4 <bme68x_iaq+0x80>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fea2 	bl	8008b98 <bme68x_GetHumidityScore>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8008e58:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec4 <bme68x_iaq+0x80>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7ff ff57 	bl	8008d10 <bme68x_GetGasScore>
 8008e62:	4603      	mov	r3, r0
 8008e64:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008e66:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
	float air_quality_score = (100
 8008e70:	ee07 3a90 	vmov	s15, r3
 8008e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e78:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8008e7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ec8 <bme68x_iaq+0x84>)
 8008e7e:	f993 2000 	ldrsb.w	r2, [r3]
 8008e82:	b2d3      	uxtb	r3, r2
 8008e84:	3301      	adds	r3, #1
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	b259      	sxtb	r1, r3
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec8 <bme68x_iaq+0x84>)
 8008e8c:	7019      	strb	r1, [r3, #0]
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ecc <bme68x_iaq+0x88>)
 8008e90:	fb83 1302 	smull	r1, r3, r3, r2
 8008e94:	1059      	asrs	r1, r3, #1
 8008e96:	17d3      	asrs	r3, r2, #31
 8008e98:	1ac9      	subs	r1, r1, r3
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8008ea8:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <bme68x_iaq+0x80>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff fe3b 	bl	8008b28 <bme68x_GetGasReference>

	return air_quality_score;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	ee07 3a90 	vmov	s15, r3

}
 8008eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd90      	pop	{r4, r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200005d8 	.word	0x200005d8
 8008ec8:	2000060c 	.word	0x2000060c
 8008ecc:	66666667 	.word	0x66666667

08008ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008f08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008ed4:	f7fd fb92 	bl	80065fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ed8:	480c      	ldr	r0, [pc, #48]	@ (8008f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8008eda:	490d      	ldr	r1, [pc, #52]	@ (8008f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008edc:	4a0d      	ldr	r2, [pc, #52]	@ (8008f14 <LoopForever+0xe>)
  movs r3, #0
 8008ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ee0:	e002      	b.n	8008ee8 <LoopCopyDataInit>

08008ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ee6:	3304      	adds	r3, #4

08008ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008eec:	d3f9      	bcc.n	8008ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008eee:	4a0a      	ldr	r2, [pc, #40]	@ (8008f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8008f1c <LoopForever+0x16>)
  movs r3, #0
 8008ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ef4:	e001      	b.n	8008efa <LoopFillZerobss>

08008ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ef8:	3204      	adds	r2, #4

08008efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008efc:	d3fb      	bcc.n	8008ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008efe:	f005 f8d7 	bl	800e0b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008f02:	f7fc fa85 	bl	8005410 <main>

08008f06 <LoopForever>:

LoopForever:
    b LoopForever
 8008f06:	e7fe      	b.n	8008f06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008f08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f10:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8008f14:	08010448 	.word	0x08010448
  ldr r2, =_sbss
 8008f18:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8008f1c:	20000760 	.word	0x20000760

08008f20 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008f20:	e7fe      	b.n	8008f20 <CAN1_RX0_IRQHandler>

08008f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f2c:	2003      	movs	r0, #3
 8008f2e:	f001 fcb3 	bl	800a898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f32:	200f      	movs	r0, #15
 8008f34:	f000 f80e 	bl	8008f54 <HAL_InitTick>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	71fb      	strb	r3, [r7, #7]
 8008f42:	e001      	b.n	8008f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008f44:	f7fd fa0e 	bl	8006364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008f48:	79fb      	ldrb	r3, [r7, #7]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008f60:	4b17      	ldr	r3, [pc, #92]	@ (8008fc0 <HAL_InitTick+0x6c>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d023      	beq.n	8008fb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008f68:	4b16      	ldr	r3, [pc, #88]	@ (8008fc4 <HAL_InitTick+0x70>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	4b14      	ldr	r3, [pc, #80]	@ (8008fc0 <HAL_InitTick+0x6c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fcbf 	bl	800a902 <HAL_SYSTICK_Config>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10f      	bne.n	8008faa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b0f      	cmp	r3, #15
 8008f8e:	d809      	bhi.n	8008fa4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f90:	2200      	movs	r2, #0
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	f001 fc89 	bl	800a8ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc8 <HAL_InitTick+0x74>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	e007      	b.n	8008fb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	e004      	b.n	8008fb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	e001      	b.n	8008fb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	2000001c 	.word	0x2000001c
 8008fc4:	20000000 	.word	0x20000000
 8008fc8:	20000018 	.word	0x20000018

08008fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <HAL_IncTick+0x20>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4b06      	ldr	r3, [pc, #24]	@ (8008ff0 <HAL_IncTick+0x24>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4413      	add	r3, r2
 8008fdc:	4a04      	ldr	r2, [pc, #16]	@ (8008ff0 <HAL_IncTick+0x24>)
 8008fde:	6013      	str	r3, [r2, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	2000001c 	.word	0x2000001c
 8008ff0:	20000610 	.word	0x20000610

08008ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8008ff8:	4b03      	ldr	r3, [pc, #12]	@ (8009008 <HAL_GetTick+0x14>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000610 	.word	0x20000610

0800900c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009014:	f7ff ffee 	bl	8008ff4 <HAL_GetTick>
 8009018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	d005      	beq.n	8009032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009026:	4b0a      	ldr	r3, [pc, #40]	@ (8009050 <HAL_Delay+0x44>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4413      	add	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009032:	bf00      	nop
 8009034:	f7ff ffde 	bl	8008ff4 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	429a      	cmp	r2, r3
 8009042:	d8f7      	bhi.n	8009034 <HAL_Delay+0x28>
  {
  }
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	2000001c 	.word	0x2000001c

08009054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	609a      	str	r2, [r3, #8]
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	609a      	str	r2, [r3, #8]
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3360      	adds	r3, #96	@ 0x60
 80090ce:	461a      	mov	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	4b08      	ldr	r3, [pc, #32]	@ (8009100 <LL_ADC_SetOffset+0x44>)
 80090de:	4013      	ands	r3, r2
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	4313      	orrs	r3, r2
 80090ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	03fff000 	.word	0x03fff000

08009104 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3360      	adds	r3, #96	@ 0x60
 8009112:	461a      	mov	r2, r3
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3360      	adds	r3, #96	@ 0x60
 8009140:	461a      	mov	r2, r3
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	431a      	orrs	r2, r3
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800917a:	2301      	movs	r3, #1
 800917c:	e000      	b.n	8009180 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3330      	adds	r3, #48	@ 0x30
 800919c:	461a      	mov	r2, r3
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	0a1b      	lsrs	r3, r3, #8
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	f003 030c 	and.w	r3, r3, #12
 80091a8:	4413      	add	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f003 031f 	and.w	r3, r3, #31
 80091b6:	211f      	movs	r1, #31
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	43db      	mvns	r3, r3
 80091be:	401a      	ands	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	0e9b      	lsrs	r3, r3, #26
 80091c4:	f003 011f 	and.w	r1, r3, #31
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 031f 	and.w	r3, r3, #31
 80091ce:	fa01 f303 	lsl.w	r3, r1, r3
 80091d2:	431a      	orrs	r2, r3
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80091d8:	bf00      	nop
 80091da:	371c      	adds	r7, #28
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e000      	b.n	80091fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800920a:	b480      	push	{r7}
 800920c:	b087      	sub	sp, #28
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3314      	adds	r3, #20
 800921a:	461a      	mov	r2, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	0e5b      	lsrs	r3, r3, #25
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	4413      	add	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	0d1b      	lsrs	r3, r3, #20
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	2107      	movs	r1, #7
 8009238:	fa01 f303 	lsl.w	r3, r1, r3
 800923c:	43db      	mvns	r3, r3
 800923e:	401a      	ands	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	0d1b      	lsrs	r3, r3, #20
 8009244:	f003 031f 	and.w	r3, r3, #31
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	fa01 f303 	lsl.w	r3, r1, r3
 800924e:	431a      	orrs	r2, r3
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009278:	43db      	mvns	r3, r3
 800927a:	401a      	ands	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f003 0318 	and.w	r3, r3, #24
 8009282:	4908      	ldr	r1, [pc, #32]	@ (80092a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009284:	40d9      	lsrs	r1, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	400b      	ands	r3, r1
 800928a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800928e:	431a      	orrs	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009296:	bf00      	nop
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	0007ffff 	.word	0x0007ffff

080092a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80092b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6093      	str	r3, [r2, #8]
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e0:	d101      	bne.n	80092e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009308:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800932c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009330:	d101      	bne.n	8009336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009354:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009358:	f043 0201 	orr.w	r2, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800937c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009380:	f043 0202 	orr.w	r2, r3, #2
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d101      	bne.n	80093ac <LL_ADC_IsEnabled+0x18>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <LL_ADC_IsEnabled+0x1a>
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d101      	bne.n	80093d2 <LL_ADC_IsDisableOngoing+0x18>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <LL_ADC_IsDisableOngoing+0x1a>
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80093f4:	f043 0204 	orr.w	r2, r3, #4
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b04      	cmp	r3, #4
 800941a:	d101      	bne.n	8009420 <LL_ADC_REG_IsConversionOngoing+0x18>
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b08      	cmp	r3, #8
 8009440:	d101      	bne.n	8009446 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e126      	b.n	80096bc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7f7 fd41 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff ff19 	bl	80092cc <LL_ADC_IsDeepPowerDownEnabled>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff feff 	bl	80092a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff ff34 	bl	800931c <LL_ADC_IsInternalRegulatorEnabled>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d115      	bne.n	80094e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff ff18 	bl	80092f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80094c4:	4b7f      	ldr	r3, [pc, #508]	@ (80096c4 <HAL_ADC_Init+0x270>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	099b      	lsrs	r3, r3, #6
 80094ca:	4a7f      	ldr	r2, [pc, #508]	@ (80096c8 <HAL_ADC_Init+0x274>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	099b      	lsrs	r3, r3, #6
 80094d2:	3301      	adds	r3, #1
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80094d8:	e002      	b.n	80094e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b01      	subs	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1f9      	bne.n	80094da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff ff16 	bl	800931c <LL_ADC_IsInternalRegulatorEnabled>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fa:	f043 0210 	orr.w	r2, r3, #16
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009506:	f043 0201 	orr.w	r2, r3, #1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff ff76 	bl	8009408 <LL_ADC_REG_IsConversionOngoing>
 800951c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009522:	f003 0310 	and.w	r3, r3, #16
 8009526:	2b00      	cmp	r3, #0
 8009528:	f040 80bf 	bne.w	80096aa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f040 80bb 	bne.w	80096aa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009538:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800953c:	f043 0202 	orr.w	r2, r3, #2
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff ff23 	bl	8009394 <LL_ADC_IsEnabled>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009554:	485d      	ldr	r0, [pc, #372]	@ (80096cc <HAL_ADC_Init+0x278>)
 8009556:	f7ff ff1d 	bl	8009394 <LL_ADC_IsEnabled>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d105      	bne.n	800956c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4619      	mov	r1, r3
 8009566:	485a      	ldr	r0, [pc, #360]	@ (80096d0 <HAL_ADC_Init+0x27c>)
 8009568:	f7ff fd74 	bl	8009054 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7e5b      	ldrb	r3, [r3, #25]
 8009570:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009576:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800957c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009582:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800958a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800958c:	4313      	orrs	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d106      	bne.n	80095a8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959e:	3b01      	subs	r3, #1
 80095a0:	045b      	lsls	r3, r3, #17
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d009      	beq.n	80095c4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	4b42      	ldr	r3, [pc, #264]	@ (80096d4 <HAL_ADC_Init+0x280>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	69b9      	ldr	r1, [r7, #24]
 80095d4:	430b      	orrs	r3, r1
 80095d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ff26 	bl	800942e <LL_ADC_INJ_IsConversionOngoing>
 80095e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d13d      	bne.n	8009666 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d13a      	bne.n	8009666 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80095f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80095fe:	4313      	orrs	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800960c:	f023 0302 	bic.w	r3, r3, #2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	69b9      	ldr	r1, [r7, #24]
 8009616:	430b      	orrs	r3, r1
 8009618:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009620:	2b01      	cmp	r3, #1
 8009622:	d118      	bne.n	8009656 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800962e:	f023 0304 	bic.w	r3, r3, #4
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800963a:	4311      	orrs	r1, r2
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009640:	4311      	orrs	r1, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009646:	430a      	orrs	r2, r1
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	611a      	str	r2, [r3, #16]
 8009654:	e007      	b.n	8009666 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0201 	bic.w	r2, r2, #1
 8009664:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d10c      	bne.n	8009688 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009674:	f023 010f 	bic.w	r1, r3, #15
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	1e5a      	subs	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	631a      	str	r2, [r3, #48]	@ 0x30
 8009686:	e007      	b.n	8009698 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 020f 	bic.w	r2, r2, #15
 8009696:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800969c:	f023 0303 	bic.w	r3, r3, #3
 80096a0:	f043 0201 	orr.w	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80096a8:	e007      	b.n	80096ba <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ae:	f043 0210 	orr.w	r2, r3, #16
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80096ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000000 	.word	0x20000000
 80096c8:	053e2d63 	.word	0x053e2d63
 80096cc:	50040000 	.word	0x50040000
 80096d0:	50040300 	.word	0x50040300
 80096d4:	fff0c007 	.word	0xfff0c007

080096d8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff fe8f 	bl	8009408 <LL_ADC_REG_IsConversionOngoing>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f040 80a0 	bne.w	8009832 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_ADC_Start_IT+0x28>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e09b      	b.n	8009838 <HAL_ADC_Start_IT+0x160>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fe51 	bl	800a3b0 <ADC_Enable>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f040 8087 	bne.w	8009828 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009722:	f023 0301 	bic.w	r3, r3, #1
 8009726:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800973e:	f023 0206 	bic.w	r2, r3, #6
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	659a      	str	r2, [r3, #88]	@ 0x58
 8009746:	e002      	b.n	800974e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	221c      	movs	r2, #28
 8009754:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f022 021c 	bic.w	r2, r2, #28
 800976c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	2b08      	cmp	r3, #8
 8009774:	d108      	bne.n	8009788 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f042 0208 	orr.w	r2, r2, #8
 8009784:	605a      	str	r2, [r3, #4]
          break;
 8009786:	e008      	b.n	800979a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0204 	orr.w	r2, r2, #4
 8009796:	605a      	str	r2, [r3, #4]
          break;
 8009798:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d107      	bne.n	80097b2 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 0210 	orr.w	r2, r2, #16
 80097b0:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d02d      	beq.n	800981c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80097c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d110      	bne.n	80097fa <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0220 	bic.w	r2, r2, #32
 80097e6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097f6:	605a      	str	r2, [r3, #4]
            break;
 80097f8:	e010      	b.n	800981c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009808:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f042 0220 	orr.w	r2, r2, #32
 8009818:	605a      	str	r2, [r3, #4]
            break;
 800981a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff fddd 	bl	80093e0 <LL_ADC_REG_StartConversion>
 8009826:	e006      	b.n	8009836 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009830:	e001      	b.n	8009836 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009832:	2302      	movs	r3, #2
 8009834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d017      	beq.n	80098b0 <HAL_ADC_IRQHandler+0x56>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d012      	beq.n	80098b0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f003 0310 	and.w	r3, r3, #16
 8009892:	2b00      	cmp	r3, #0
 8009894:	d105      	bne.n	80098a2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800989a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 ff1e 	bl	800a6e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2202      	movs	r2, #2
 80098ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <HAL_ADC_IRQHandler+0x6a>
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d05e      	beq.n	800998c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f003 0308 	and.w	r3, r3, #8
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d059      	beq.n	800998c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098dc:	f003 0310 	and.w	r3, r3, #16
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fc36 	bl	8009166 <LL_ADC_REG_IsTriggerSourceSWStart>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d03e      	beq.n	800997e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d135      	bne.n	800997e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b08      	cmp	r3, #8
 800991e:	d12e      	bne.n	800997e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fd6f 	bl	8009408 <LL_ADC_REG_IsConversionOngoing>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d11a      	bne.n	8009966 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 020c 	bic.w	r2, r2, #12
 800993e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d112      	bne.n	800997e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800995c:	f043 0201 	orr.w	r2, r3, #1
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	655a      	str	r2, [r3, #84]	@ 0x54
 8009964:	e00b      	b.n	800997e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996a:	f043 0210 	orr.w	r2, r3, #16
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009976:	f043 0201 	orr.w	r2, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7fb fde8 	bl	8005554 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	220c      	movs	r2, #12
 800998a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	d004      	beq.n	80099a0 <HAL_ADC_IRQHandler+0x146>
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d109      	bne.n	80099b4 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d072      	beq.n	8009a90 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d06d      	beq.n	8009a90 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b8:	f003 0310 	and.w	r3, r3, #16
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7ff fc07 	bl	80091e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80099d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff fbc2 	bl	8009166 <LL_ADC_REG_IsTriggerSourceSWStart>
 80099e2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d047      	beq.n	8009a82 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <HAL_ADC_IRQHandler+0x1b2>
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d03f      	beq.n	8009a82 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d13a      	bne.n	8009a82 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a16:	2b40      	cmp	r3, #64	@ 0x40
 8009a18:	d133      	bne.n	8009a82 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d12e      	bne.n	8009a82 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fd00 	bl	800942e <LL_ADC_INJ_IsConversionOngoing>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d11a      	bne.n	8009a6a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009a42:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d112      	bne.n	8009a82 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a60:	f043 0201 	orr.w	r2, r3, #1
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	655a      	str	r2, [r3, #84]	@ 0x54
 8009a68:	e00b      	b.n	8009a82 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6e:	f043 0210 	orr.w	r2, r3, #16
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7a:	f043 0201 	orr.w	r2, r3, #1
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fe06 	bl	800a694 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2260      	movs	r2, #96	@ 0x60
 8009a8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d011      	beq.n	8009abe <HAL_ADC_IRQHandler+0x264>
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00c      	beq.n	8009abe <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f886 	bl	8009bc2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2280      	movs	r2, #128	@ 0x80
 8009abc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d012      	beq.n	8009aee <HAL_ADC_IRQHandler+0x294>
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00d      	beq.n	8009aee <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fdec 	bl	800a6bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009aec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d012      	beq.n	8009b1e <HAL_ADC_IRQHandler+0x2c4>
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00d      	beq.n	8009b1e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b06:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fdde 	bl	800a6d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d02a      	beq.n	8009b7e <HAL_ADC_IRQHandler+0x324>
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d025      	beq.n	8009b7e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d102      	bne.n	8009b40 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	61fb      	str	r3, [r7, #28]
 8009b3e:	e008      	b.n	8009b52 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d10e      	bne.n	8009b76 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b68:	f043 0202 	orr.w	r2, r3, #2
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f830 	bl	8009bd6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2210      	movs	r2, #16
 8009b7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d018      	beq.n	8009bba <HAL_ADC_IRQHandler+0x360>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d013      	beq.n	8009bba <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba2:	f043 0208 	orr.w	r2, r3, #8
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bb2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fd77 	bl	800a6a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009bba:	bf00      	nop
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009bca:	bf00      	nop
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b0b6      	sub	sp, #216	@ 0xd8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_ADC_ConfigChannel+0x22>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e3bb      	b.n	800a386 <HAL_ADC_ConfigChannel+0x79a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fbf4 	bl	8009408 <LL_ADC_REG_IsConversionOngoing>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f040 83a0 	bne.w	800a368 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	2b05      	cmp	r3, #5
 8009c36:	d824      	bhi.n	8009c82 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	3b02      	subs	r3, #2
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d81b      	bhi.n	8009c7a <HAL_ADC_ConfigChannel+0x8e>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <HAL_ADC_ConfigChannel+0x5c>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c59 	.word	0x08009c59
 8009c4c:	08009c61 	.word	0x08009c61
 8009c50:	08009c69 	.word	0x08009c69
 8009c54:	08009c71 	.word	0x08009c71
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009c58:	230c      	movs	r3, #12
 8009c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009c5e:	e010      	b.n	8009c82 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009c60:	2312      	movs	r3, #18
 8009c62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009c66:	e00c      	b.n	8009c82 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009c68:	2318      	movs	r3, #24
 8009c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009c6e:	e008      	b.n	8009c82 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009c70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009c78:	e003      	b.n	8009c82 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8009c7a:	2306      	movs	r3, #6
 8009c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009c80:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009c90:	f7ff fa7c 	bl	800918c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff fbb5 	bl	8009408 <LL_ADC_REG_IsConversionOngoing>
 8009c9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fbc1 	bl	800942e <LL_ADC_INJ_IsConversionOngoing>
 8009cac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f040 81a4 	bne.w	800a002 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 819f 	bne.w	800a002 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	6819      	ldr	r1, [r3, #0]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	f7ff fa9a 	bl	800920a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	695a      	ldr	r2, [r3, #20]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	08db      	lsrs	r3, r3, #3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d00a      	beq.n	8009d0e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	6919      	ldr	r1, [r3, #16]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009d08:	f7ff f9d8 	bl	80090bc <LL_ADC_SetOffset>
 8009d0c:	e179      	b.n	800a002 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2100      	movs	r1, #0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff f9f5 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <HAL_ADC_ConfigChannel+0x14e>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff f9ea 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009d30:	4603      	mov	r3, r0
 8009d32:	0e9b      	lsrs	r3, r3, #26
 8009d34:	f003 021f 	and.w	r2, r3, #31
 8009d38:	e01e      	b.n	8009d78 <HAL_ADC_ConfigChannel+0x18c>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2100      	movs	r1, #0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff f9df 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d50:	fa93 f3a3 	rbit	r3, r3
 8009d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009d58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009d60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8009d68:	2320      	movs	r3, #32
 8009d6a:	e004      	b.n	8009d76 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8009d6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d70:	fab3 f383 	clz	r3, r3
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d105      	bne.n	8009d90 <HAL_ADC_ConfigChannel+0x1a4>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	0e9b      	lsrs	r3, r3, #26
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	e018      	b.n	8009dc2 <HAL_ADC_ConfigChannel+0x1d6>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d9c:	fa93 f3a3 	rbit	r3, r3
 8009da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8009dac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009db4:	2320      	movs	r3, #32
 8009db6:	e004      	b.n	8009dc2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009dbc:	fab3 f383 	clz	r3, r3
 8009dc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d106      	bne.n	8009dd4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff f9ae 	bl	8009130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2101      	movs	r1, #1
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff f992 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_ADC_ConfigChannel+0x214>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2101      	movs	r1, #1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff f987 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009df6:	4603      	mov	r3, r0
 8009df8:	0e9b      	lsrs	r3, r3, #26
 8009dfa:	f003 021f 	and.w	r2, r3, #31
 8009dfe:	e01e      	b.n	8009e3e <HAL_ADC_ConfigChannel+0x252>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff f97c 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e16:	fa93 f3a3 	rbit	r3, r3
 8009e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8009e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8009e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8009e2e:	2320      	movs	r3, #32
 8009e30:	e004      	b.n	8009e3c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8009e32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e36:	fab3 f383 	clz	r3, r3
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d105      	bne.n	8009e56 <HAL_ADC_ConfigChannel+0x26a>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	0e9b      	lsrs	r3, r3, #26
 8009e50:	f003 031f 	and.w	r3, r3, #31
 8009e54:	e018      	b.n	8009e88 <HAL_ADC_ConfigChannel+0x29c>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e62:	fa93 f3a3 	rbit	r3, r3
 8009e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8009e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8009e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009e7a:	2320      	movs	r3, #32
 8009e7c:	e004      	b.n	8009e88 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8009e7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e82:	fab3 f383 	clz	r3, r3
 8009e86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d106      	bne.n	8009e9a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2200      	movs	r2, #0
 8009e92:	2101      	movs	r1, #1
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7ff f94b 	bl	8009130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2102      	movs	r1, #2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff f92f 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10a      	bne.n	8009ec6 <HAL_ADC_ConfigChannel+0x2da>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff f924 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	0e9b      	lsrs	r3, r3, #26
 8009ec0:	f003 021f 	and.w	r2, r3, #31
 8009ec4:	e01e      	b.n	8009f04 <HAL_ADC_ConfigChannel+0x318>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2102      	movs	r1, #2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff f919 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009edc:	fa93 f3a3 	rbit	r3, r3
 8009ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8009ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8009eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009ef4:	2320      	movs	r3, #32
 8009ef6:	e004      	b.n	8009f02 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8009ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009efc:	fab3 f383 	clz	r3, r3
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d105      	bne.n	8009f1c <HAL_ADC_ConfigChannel+0x330>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	0e9b      	lsrs	r3, r3, #26
 8009f16:	f003 031f 	and.w	r3, r3, #31
 8009f1a:	e014      	b.n	8009f46 <HAL_ADC_ConfigChannel+0x35a>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f24:	fa93 f3a3 	rbit	r3, r3
 8009f28:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8009f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8009f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8009f38:	2320      	movs	r3, #32
 8009f3a:	e004      	b.n	8009f46 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f40:	fab3 f383 	clz	r3, r3
 8009f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d106      	bne.n	8009f58 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2102      	movs	r1, #2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7ff f8ec 	bl	8009130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2103      	movs	r1, #3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff f8d0 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <HAL_ADC_ConfigChannel+0x398>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2103      	movs	r1, #3
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff f8c5 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	0e9b      	lsrs	r3, r3, #26
 8009f7e:	f003 021f 	and.w	r2, r3, #31
 8009f82:	e017      	b.n	8009fb4 <HAL_ADC_ConfigChannel+0x3c8>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2103      	movs	r1, #3
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff f8ba 	bl	8009104 <LL_ADC_GetOffsetChannel>
 8009f90:	4603      	mov	r3, r0
 8009f92:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f96:	fa93 f3a3 	rbit	r3, r3
 8009f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8009f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f9e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8009fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8009fa6:	2320      	movs	r3, #32
 8009fa8:	e003      	b.n	8009fb2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8009faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fac:	fab3 f383 	clz	r3, r3
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d105      	bne.n	8009fcc <HAL_ADC_ConfigChannel+0x3e0>
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	0e9b      	lsrs	r3, r3, #26
 8009fc6:	f003 031f 	and.w	r3, r3, #31
 8009fca:	e011      	b.n	8009ff0 <HAL_ADC_ConfigChannel+0x404>
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fd4:	fa93 f3a3 	rbit	r3, r3
 8009fd8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8009fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8009fde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	e003      	b.n	8009ff0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8009fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fea:	fab3 f383 	clz	r3, r3
 8009fee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d106      	bne.n	800a002 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2103      	movs	r1, #3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff f897 	bl	8009130 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff f9c4 	bl	8009394 <LL_ADC_IsEnabled>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f040 8140 	bne.w	800a294 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6819      	ldr	r1, [r3, #0]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	461a      	mov	r2, r3
 800a022:	f7ff f91d 	bl	8009260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	4a8f      	ldr	r2, [pc, #572]	@ (800a268 <HAL_ADC_ConfigChannel+0x67c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	f040 8131 	bne.w	800a294 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10b      	bne.n	800a05a <HAL_ADC_ConfigChannel+0x46e>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	0e9b      	lsrs	r3, r3, #26
 800a048:	3301      	adds	r3, #1
 800a04a:	f003 031f 	and.w	r3, r3, #31
 800a04e:	2b09      	cmp	r3, #9
 800a050:	bf94      	ite	ls
 800a052:	2301      	movls	r3, #1
 800a054:	2300      	movhi	r3, #0
 800a056:	b2db      	uxtb	r3, r3
 800a058:	e019      	b.n	800a08e <HAL_ADC_ConfigChannel+0x4a2>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a062:	fa93 f3a3 	rbit	r3, r3
 800a066:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a06a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a06c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a072:	2320      	movs	r3, #32
 800a074:	e003      	b.n	800a07e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a078:	fab3 f383 	clz	r3, r3
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	3301      	adds	r3, #1
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	2b09      	cmp	r3, #9
 800a086:	bf94      	ite	ls
 800a088:	2301      	movls	r3, #1
 800a08a:	2300      	movhi	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d079      	beq.n	800a186 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d107      	bne.n	800a0ae <HAL_ADC_ConfigChannel+0x4c2>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	0e9b      	lsrs	r3, r3, #26
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	069b      	lsls	r3, r3, #26
 800a0a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a0ac:	e015      	b.n	800a0da <HAL_ADC_ConfigChannel+0x4ee>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b6:	fa93 f3a3 	rbit	r3, r3
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a0c6:	2320      	movs	r3, #32
 800a0c8:	e003      	b.n	800a0d2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a0ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0cc:	fab3 f383 	clz	r3, r3
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	069b      	lsls	r3, r3, #26
 800a0d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <HAL_ADC_ConfigChannel+0x50e>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	0e9b      	lsrs	r3, r3, #26
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f8:	e017      	b.n	800a12a <HAL_ADC_ConfigChannel+0x53e>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a102:	fa93 f3a3 	rbit	r3, r3
 800a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a112:	2320      	movs	r3, #32
 800a114:	e003      	b.n	800a11e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a118:	fab3 f383 	clz	r3, r3
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	3301      	adds	r3, #1
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	2101      	movs	r1, #1
 800a126:	fa01 f303 	lsl.w	r3, r1, r3
 800a12a:	ea42 0103 	orr.w	r1, r2, r3
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10a      	bne.n	800a150 <HAL_ADC_ConfigChannel+0x564>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	0e9b      	lsrs	r3, r3, #26
 800a140:	3301      	adds	r3, #1
 800a142:	f003 021f 	and.w	r2, r3, #31
 800a146:	4613      	mov	r3, r2
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	4413      	add	r3, r2
 800a14c:	051b      	lsls	r3, r3, #20
 800a14e:	e018      	b.n	800a182 <HAL_ADC_ConfigChannel+0x596>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a158:	fa93 f3a3 	rbit	r3, r3
 800a15c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a168:	2320      	movs	r3, #32
 800a16a:	e003      	b.n	800a174 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	fab3 f383 	clz	r3, r3
 800a172:	b2db      	uxtb	r3, r3
 800a174:	3301      	adds	r3, #1
 800a176:	f003 021f 	and.w	r2, r3, #31
 800a17a:	4613      	mov	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4413      	add	r3, r2
 800a180:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a182:	430b      	orrs	r3, r1
 800a184:	e081      	b.n	800a28a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d107      	bne.n	800a1a2 <HAL_ADC_ConfigChannel+0x5b6>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	0e9b      	lsrs	r3, r3, #26
 800a198:	3301      	adds	r3, #1
 800a19a:	069b      	lsls	r3, r3, #26
 800a19c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a1a0:	e015      	b.n	800a1ce <HAL_ADC_ConfigChannel+0x5e2>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	fa93 f3a3 	rbit	r3, r3
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	e003      	b.n	800a1c6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c0:	fab3 f383 	clz	r3, r3
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	069b      	lsls	r3, r3, #26
 800a1ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d109      	bne.n	800a1ee <HAL_ADC_ConfigChannel+0x602>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	0e9b      	lsrs	r3, r3, #26
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f003 031f 	and.w	r3, r3, #31
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ec:	e017      	b.n	800a21e <HAL_ADC_ConfigChannel+0x632>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	fa93 f3a3 	rbit	r3, r3
 800a1fa:	61bb      	str	r3, [r7, #24]
  return result;
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a206:	2320      	movs	r3, #32
 800a208:	e003      	b.n	800a212 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	fab3 f383 	clz	r3, r3
 800a210:	b2db      	uxtb	r3, r3
 800a212:	3301      	adds	r3, #1
 800a214:	f003 031f 	and.w	r3, r3, #31
 800a218:	2101      	movs	r1, #1
 800a21a:	fa01 f303 	lsl.w	r3, r1, r3
 800a21e:	ea42 0103 	orr.w	r1, r2, r3
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10d      	bne.n	800a24a <HAL_ADC_ConfigChannel+0x65e>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	0e9b      	lsrs	r3, r3, #26
 800a234:	3301      	adds	r3, #1
 800a236:	f003 021f 	and.w	r2, r3, #31
 800a23a:	4613      	mov	r3, r2
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	4413      	add	r3, r2
 800a240:	3b1e      	subs	r3, #30
 800a242:	051b      	lsls	r3, r3, #20
 800a244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a248:	e01e      	b.n	800a288 <HAL_ADC_ConfigChannel+0x69c>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	fa93 f3a3 	rbit	r3, r3
 800a256:	60fb      	str	r3, [r7, #12]
  return result;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d104      	bne.n	800a26c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a262:	2320      	movs	r3, #32
 800a264:	e006      	b.n	800a274 <HAL_ADC_ConfigChannel+0x688>
 800a266:	bf00      	nop
 800a268:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	fab3 f383 	clz	r3, r3
 800a272:	b2db      	uxtb	r3, r3
 800a274:	3301      	adds	r3, #1
 800a276:	f003 021f 	and.w	r2, r3, #31
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	3b1e      	subs	r3, #30
 800a282:	051b      	lsls	r3, r3, #20
 800a284:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a288:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a28e:	4619      	mov	r1, r3
 800a290:	f7fe ffbb 	bl	800920a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	4b3d      	ldr	r3, [pc, #244]	@ (800a390 <HAL_ADC_ConfigChannel+0x7a4>)
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d06c      	beq.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a2a0:	483c      	ldr	r0, [pc, #240]	@ (800a394 <HAL_ADC_ConfigChannel+0x7a8>)
 800a2a2:	f7fe fefd 	bl	80090a0 <LL_ADC_GetCommonPathInternalCh>
 800a2a6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a3a      	ldr	r2, [pc, #232]	@ (800a398 <HAL_ADC_ConfigChannel+0x7ac>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d127      	bne.n	800a304 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a2b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d121      	bne.n	800a304 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a35      	ldr	r2, [pc, #212]	@ (800a39c <HAL_ADC_ConfigChannel+0x7b0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d157      	bne.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a2ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	482f      	ldr	r0, [pc, #188]	@ (800a394 <HAL_ADC_ConfigChannel+0x7a8>)
 800a2d6:	f7fe fed0 	bl	800907a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a2da:	4b31      	ldr	r3, [pc, #196]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x7b4>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	099b      	lsrs	r3, r3, #6
 800a2e0:	4a30      	ldr	r2, [pc, #192]	@ (800a3a4 <HAL_ADC_ConfigChannel+0x7b8>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	099b      	lsrs	r3, r3, #6
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a2f4:	e002      	b.n	800a2fc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f9      	bne.n	800a2f6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a302:	e03a      	b.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a27      	ldr	r2, [pc, #156]	@ (800a3a8 <HAL_ADC_ConfigChannel+0x7bc>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d113      	bne.n	800a336 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a30e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10d      	bne.n	800a336 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a1f      	ldr	r2, [pc, #124]	@ (800a39c <HAL_ADC_ConfigChannel+0x7b0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d12a      	bne.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a328:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a32c:	4619      	mov	r1, r3
 800a32e:	4819      	ldr	r0, [pc, #100]	@ (800a394 <HAL_ADC_ConfigChannel+0x7a8>)
 800a330:	f7fe fea3 	bl	800907a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a334:	e021      	b.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3ac <HAL_ADC_ConfigChannel+0x7c0>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d11c      	bne.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a344:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d116      	bne.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a12      	ldr	r2, [pc, #72]	@ (800a39c <HAL_ADC_ConfigChannel+0x7b0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d111      	bne.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a356:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a35a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a35e:	4619      	mov	r1, r3
 800a360:	480c      	ldr	r0, [pc, #48]	@ (800a394 <HAL_ADC_ConfigChannel+0x7a8>)
 800a362:	f7fe fe8a 	bl	800907a <LL_ADC_SetCommonPathInternalCh>
 800a366:	e008      	b.n	800a37a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36c:	f043 0220 	orr.w	r2, r3, #32
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a382:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a386:	4618      	mov	r0, r3
 800a388:	37d8      	adds	r7, #216	@ 0xd8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	80080000 	.word	0x80080000
 800a394:	50040300 	.word	0x50040300
 800a398:	c7520000 	.word	0xc7520000
 800a39c:	50040000 	.word	0x50040000
 800a3a0:	20000000 	.word	0x20000000
 800a3a4:	053e2d63 	.word	0x053e2d63
 800a3a8:	cb840000 	.word	0xcb840000
 800a3ac:	80000001 	.word	0x80000001

0800a3b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe ffe7 	bl	8009394 <LL_ADC_IsEnabled>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d169      	bne.n	800a4a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	4b36      	ldr	r3, [pc, #216]	@ (800a4ac <ADC_Enable+0xfc>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00d      	beq.n	800a3f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3de:	f043 0210 	orr.w	r2, r3, #16
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ea:	f043 0201 	orr.w	r2, r3, #1
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e055      	b.n	800a4a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe ffa2 	bl	8009344 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a400:	482b      	ldr	r0, [pc, #172]	@ (800a4b0 <ADC_Enable+0x100>)
 800a402:	f7fe fe4d 	bl	80090a0 <LL_ADC_GetCommonPathInternalCh>
 800a406:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d013      	beq.n	800a438 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a410:	4b28      	ldr	r3, [pc, #160]	@ (800a4b4 <ADC_Enable+0x104>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	099b      	lsrs	r3, r3, #6
 800a416:	4a28      	ldr	r2, [pc, #160]	@ (800a4b8 <ADC_Enable+0x108>)
 800a418:	fba2 2303 	umull	r2, r3, r2, r3
 800a41c:	099b      	lsrs	r3, r3, #6
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	4613      	mov	r3, r2
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a42a:	e002      	b.n	800a432 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	3b01      	subs	r3, #1
 800a430:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f9      	bne.n	800a42c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a438:	f7fe fddc 	bl	8008ff4 <HAL_GetTick>
 800a43c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a43e:	e028      	b.n	800a492 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe ffa5 	bl	8009394 <LL_ADC_IsEnabled>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe ff75 	bl	8009344 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a45a:	f7fe fdcb 	bl	8008ff4 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d914      	bls.n	800a492 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b01      	cmp	r3, #1
 800a474:	d00d      	beq.n	800a492 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a47a:	f043 0210 	orr.w	r2, r3, #16
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a486:	f043 0201 	orr.w	r2, r3, #1
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e007      	b.n	800a4a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d1cf      	bne.n	800a440 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	8000003f 	.word	0x8000003f
 800a4b0:	50040300 	.word	0x50040300
 800a4b4:	20000000 	.word	0x20000000
 800a4b8:	053e2d63 	.word	0x053e2d63

0800a4bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe ff76 	bl	80093ba <LL_ADC_IsDisableOngoing>
 800a4ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe ff5d 	bl	8009394 <LL_ADC_IsEnabled>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d047      	beq.n	800a570 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d144      	bne.n	800a570 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 030d 	and.w	r3, r3, #13
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d10c      	bne.n	800a50e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe ff37 	bl	800936c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2203      	movs	r2, #3
 800a504:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a506:	f7fe fd75 	bl	8008ff4 <HAL_GetTick>
 800a50a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a50c:	e029      	b.n	800a562 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a512:	f043 0210 	orr.w	r2, r3, #16
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51e:	f043 0201 	orr.w	r2, r3, #1
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e023      	b.n	800a572 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a52a:	f7fe fd63 	bl	8008ff4 <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	2b02      	cmp	r3, #2
 800a536:	d914      	bls.n	800a562 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00d      	beq.n	800a562 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54a:	f043 0210 	orr.w	r2, r3, #16
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a556:	f043 0201 	orr.w	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e007      	b.n	800a572 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1dc      	bne.n	800a52a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <LL_ADC_StartCalibration>:
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a58c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a596:	4313      	orrs	r3, r2
 800a598:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	609a      	str	r2, [r3, #8]
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <LL_ADC_IsCalibrationOnGoing>:
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5c0:	d101      	bne.n	800a5c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <HAL_ADCEx_Calibration_Start+0x1c>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e04d      	b.n	800a68c <HAL_ADCEx_Calibration_Start+0xb8>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff ff5f 	bl	800a4bc <ADC_Disable>
 800a5fe:	4603      	mov	r3, r0
 800a600:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d136      	bne.n	800a676 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a60c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a610:	f023 0302 	bic.w	r3, r3, #2
 800a614:	f043 0202 	orr.w	r2, r3, #2
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff ffa9 	bl	800a57a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a628:	e014      	b.n	800a654 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800a636:	d30d      	bcc.n	800a654 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63c:	f023 0312 	bic.w	r3, r3, #18
 800a640:	f043 0210 	orr.w	r2, r3, #16
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e01b      	b.n	800a68c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff ffa7 	bl	800a5ac <LL_ADC_IsCalibrationOnGoing>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e2      	bne.n	800a62a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a668:	f023 0303 	bic.w	r3, r3, #3
 800a66c:	f043 0201 	orr.w	r2, r3, #1
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	655a      	str	r2, [r3, #84]	@ 0x54
 800a674:	e005      	b.n	800a682 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a67a:	f043 0210 	orr.w	r2, r3, #16
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a708:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <__NVIC_SetPriorityGrouping+0x44>)
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a714:	4013      	ands	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a72a:	4a04      	ldr	r2, [pc, #16]	@ (800a73c <__NVIC_SetPriorityGrouping+0x44>)
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	60d3      	str	r3, [r2, #12]
}
 800a730:	bf00      	nop
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	e000ed00 	.word	0xe000ed00

0800a740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a744:	4b04      	ldr	r3, [pc, #16]	@ (800a758 <__NVIC_GetPriorityGrouping+0x18>)
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	0a1b      	lsrs	r3, r3, #8
 800a74a:	f003 0307 	and.w	r3, r3, #7
}
 800a74e:	4618      	mov	r0, r3
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	e000ed00 	.word	0xe000ed00

0800a75c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db0b      	blt.n	800a786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	f003 021f 	and.w	r2, r3, #31
 800a774:	4907      	ldr	r1, [pc, #28]	@ (800a794 <__NVIC_EnableIRQ+0x38>)
 800a776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a77a:	095b      	lsrs	r3, r3, #5
 800a77c:	2001      	movs	r0, #1
 800a77e:	fa00 f202 	lsl.w	r2, r0, r2
 800a782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	e000e100 	.word	0xe000e100

0800a798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	db0a      	blt.n	800a7c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	490c      	ldr	r1, [pc, #48]	@ (800a7e4 <__NVIC_SetPriority+0x4c>)
 800a7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7b6:	0112      	lsls	r2, r2, #4
 800a7b8:	b2d2      	uxtb	r2, r2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a7c0:	e00a      	b.n	800a7d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	4908      	ldr	r1, [pc, #32]	@ (800a7e8 <__NVIC_SetPriority+0x50>)
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	f003 030f 	and.w	r3, r3, #15
 800a7ce:	3b04      	subs	r3, #4
 800a7d0:	0112      	lsls	r2, r2, #4
 800a7d2:	b2d2      	uxtb	r2, r2
 800a7d4:	440b      	add	r3, r1
 800a7d6:	761a      	strb	r2, [r3, #24]
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	e000e100 	.word	0xe000e100
 800a7e8:	e000ed00 	.word	0xe000ed00

0800a7ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b089      	sub	sp, #36	@ 0x24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	f1c3 0307 	rsb	r3, r3, #7
 800a806:	2b04      	cmp	r3, #4
 800a808:	bf28      	it	cs
 800a80a:	2304      	movcs	r3, #4
 800a80c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	3304      	adds	r3, #4
 800a812:	2b06      	cmp	r3, #6
 800a814:	d902      	bls.n	800a81c <NVIC_EncodePriority+0x30>
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	3b03      	subs	r3, #3
 800a81a:	e000      	b.n	800a81e <NVIC_EncodePriority+0x32>
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a820:	f04f 32ff 	mov.w	r2, #4294967295
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	fa02 f303 	lsl.w	r3, r2, r3
 800a82a:	43da      	mvns	r2, r3
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	401a      	ands	r2, r3
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a834:	f04f 31ff 	mov.w	r1, #4294967295
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	fa01 f303 	lsl.w	r3, r1, r3
 800a83e:	43d9      	mvns	r1, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a844:	4313      	orrs	r3, r2
         );
}
 800a846:	4618      	mov	r0, r3
 800a848:	3724      	adds	r7, #36	@ 0x24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3b01      	subs	r3, #1
 800a860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a864:	d301      	bcc.n	800a86a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a866:	2301      	movs	r3, #1
 800a868:	e00f      	b.n	800a88a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a86a:	4a0a      	ldr	r2, [pc, #40]	@ (800a894 <SysTick_Config+0x40>)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3b01      	subs	r3, #1
 800a870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a872:	210f      	movs	r1, #15
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	f7ff ff8e 	bl	800a798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a87c:	4b05      	ldr	r3, [pc, #20]	@ (800a894 <SysTick_Config+0x40>)
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a882:	4b04      	ldr	r3, [pc, #16]	@ (800a894 <SysTick_Config+0x40>)
 800a884:	2207      	movs	r2, #7
 800a886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	e000e010 	.word	0xe000e010

0800a898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff ff29 	bl	800a6f8 <__NVIC_SetPriorityGrouping>
}
 800a8a6:	bf00      	nop
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b086      	sub	sp, #24
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
 800a8ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a8c0:	f7ff ff3e 	bl	800a740 <__NVIC_GetPriorityGrouping>
 800a8c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f7ff ff8e 	bl	800a7ec <NVIC_EncodePriority>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff ff5d 	bl	800a798 <__NVIC_SetPriority>
}
 800a8de:	bf00      	nop
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff ff31 	bl	800a75c <__NVIC_EnableIRQ>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ffa2 	bl	800a854 <SysTick_Config>
 800a910:	4603      	mov	r3, r0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d005      	beq.n	800a93e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2204      	movs	r2, #4
 800a936:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	73fb      	strb	r3, [r7, #15]
 800a93c:	e029      	b.n	800a992 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 020e 	bic.w	r2, r2, #14
 800a94c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 0201 	bic.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a962:	f003 021c 	and.w	r2, r3, #28
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96a:	2101      	movs	r1, #1
 800a96c:	fa01 f202 	lsl.w	r2, r1, r2
 800a970:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
    }
  }
  return status;
 800a992:	7bfb      	ldrb	r3, [r7, #15]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a9aa:	e148      	b.n	800ac3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 813a 	beq.w	800ac38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f003 0303 	and.w	r3, r3, #3
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d005      	beq.n	800a9dc <HAL_GPIO_Init+0x40>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d130      	bne.n	800aa3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	2203      	movs	r2, #3
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	43db      	mvns	r3, r3
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	68da      	ldr	r2, [r3, #12]
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aa12:	2201      	movs	r2, #1
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1a:	43db      	mvns	r3, r3
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	091b      	lsrs	r3, r3, #4
 800aa28:	f003 0201 	and.w	r2, r3, #1
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d017      	beq.n	800aa7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	2203      	movs	r2, #3
 800aa56:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5a:	43db      	mvns	r3, r3
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	4013      	ands	r3, r2
 800aa60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d123      	bne.n	800aace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	08da      	lsrs	r2, r3, #3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3208      	adds	r2, #8
 800aa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	220f      	movs	r2, #15
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	43db      	mvns	r3, r3
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	691a      	ldr	r2, [r3, #16]
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	08da      	lsrs	r2, r3, #3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3208      	adds	r2, #8
 800aac8:	6939      	ldr	r1, [r7, #16]
 800aaca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	2203      	movs	r2, #3
 800aada:	fa02 f303 	lsl.w	r3, r2, r3
 800aade:	43db      	mvns	r3, r3
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4013      	ands	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f003 0203 	and.w	r2, r3, #3
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	005b      	lsls	r3, r3, #1
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 8094 	beq.w	800ac38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab10:	4b52      	ldr	r3, [pc, #328]	@ (800ac5c <HAL_GPIO_Init+0x2c0>)
 800ab12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab14:	4a51      	ldr	r2, [pc, #324]	@ (800ac5c <HAL_GPIO_Init+0x2c0>)
 800ab16:	f043 0301 	orr.w	r3, r3, #1
 800ab1a:	6613      	str	r3, [r2, #96]	@ 0x60
 800ab1c:	4b4f      	ldr	r3, [pc, #316]	@ (800ac5c <HAL_GPIO_Init+0x2c0>)
 800ab1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	60bb      	str	r3, [r7, #8]
 800ab26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ab28:	4a4d      	ldr	r2, [pc, #308]	@ (800ac60 <HAL_GPIO_Init+0x2c4>)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	089b      	lsrs	r3, r3, #2
 800ab2e:	3302      	adds	r3, #2
 800ab30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	220f      	movs	r2, #15
 800ab40:	fa02 f303 	lsl.w	r3, r2, r3
 800ab44:	43db      	mvns	r3, r3
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	4013      	ands	r3, r2
 800ab4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800ab52:	d00d      	beq.n	800ab70 <HAL_GPIO_Init+0x1d4>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a43      	ldr	r2, [pc, #268]	@ (800ac64 <HAL_GPIO_Init+0x2c8>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <HAL_GPIO_Init+0x1d0>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a42      	ldr	r2, [pc, #264]	@ (800ac68 <HAL_GPIO_Init+0x2cc>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d101      	bne.n	800ab68 <HAL_GPIO_Init+0x1cc>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e004      	b.n	800ab72 <HAL_GPIO_Init+0x1d6>
 800ab68:	2307      	movs	r3, #7
 800ab6a:	e002      	b.n	800ab72 <HAL_GPIO_Init+0x1d6>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e000      	b.n	800ab72 <HAL_GPIO_Init+0x1d6>
 800ab70:	2300      	movs	r3, #0
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	f002 0203 	and.w	r2, r2, #3
 800ab78:	0092      	lsls	r2, r2, #2
 800ab7a:	4093      	lsls	r3, r2
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ab82:	4937      	ldr	r1, [pc, #220]	@ (800ac60 <HAL_GPIO_Init+0x2c4>)
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	089b      	lsrs	r3, r3, #2
 800ab88:	3302      	adds	r3, #2
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ab90:	4b36      	ldr	r3, [pc, #216]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	43db      	mvns	r3, r3
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800abb4:	4a2d      	ldr	r2, [pc, #180]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800abba:	4b2c      	ldr	r3, [pc, #176]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	43db      	mvns	r3, r3
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	4013      	ands	r3, r2
 800abc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800abde:	4a23      	ldr	r2, [pc, #140]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800abe4:	4b21      	ldr	r3, [pc, #132]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	43db      	mvns	r3, r3
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	4013      	ands	r3, r2
 800abf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ac08:	4a18      	ldr	r2, [pc, #96]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800ac0e:	4b17      	ldr	r3, [pc, #92]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	43db      	mvns	r3, r3
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ac32:	4a0e      	ldr	r2, [pc, #56]	@ (800ac6c <HAL_GPIO_Init+0x2d0>)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	fa22 f303 	lsr.w	r3, r2, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f47f aeaf 	bne.w	800a9ac <HAL_GPIO_Init+0x10>
  }
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	371c      	adds	r7, #28
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	40021000 	.word	0x40021000
 800ac60:	40010000 	.word	0x40010000
 800ac64:	48000400 	.word	0x48000400
 800ac68:	48000800 	.word	0x48000800
 800ac6c:	40010400 	.word	0x40010400

0800ac70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	807b      	strh	r3, [r7, #2]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac80:	787b      	ldrb	r3, [r7, #1]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ac86:	887a      	ldrh	r2, [r7, #2]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ac8c:	e002      	b.n	800ac94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ac8e:	887a      	ldrh	r2, [r7, #2]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	4603      	mov	r3, r0
 800aca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800acaa:	4b08      	ldr	r3, [pc, #32]	@ (800accc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800acac:	695a      	ldr	r2, [r3, #20]
 800acae:	88fb      	ldrh	r3, [r7, #6]
 800acb0:	4013      	ands	r3, r2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d006      	beq.n	800acc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800acb6:	4a05      	ldr	r2, [pc, #20]	@ (800accc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800acb8:	88fb      	ldrh	r3, [r7, #6]
 800acba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f7 f858 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40010400 	.word	0x40010400

0800acd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e08d      	b.n	800adfe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7f7 f9c6 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2224      	movs	r2, #36	@ 0x24
 800ad00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0201 	bic.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ad20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ad30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d107      	bne.n	800ad4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	e006      	b.n	800ad58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ad56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d108      	bne.n	800ad72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad6e:	605a      	str	r2, [r3, #4]
 800ad70:	e007      	b.n	800ad82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	6812      	ldr	r2, [r2, #0]
 800ad8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68da      	ldr	r2, [r3, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ada4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	691a      	ldr	r2, [r3, #16]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	69d9      	ldr	r1, [r3, #28]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1a      	ldr	r2, [r3, #32]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0201 	orr.w	r2, r2, #1
 800adde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2220      	movs	r2, #32
 800adea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	4608      	mov	r0, r1
 800ae12:	4611      	mov	r1, r2
 800ae14:	461a      	mov	r2, r3
 800ae16:	4603      	mov	r3, r0
 800ae18:	817b      	strh	r3, [r7, #10]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	813b      	strh	r3, [r7, #8]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	f040 80f9 	bne.w	800b022 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <HAL_I2C_Mem_Write+0x34>
 800ae36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d105      	bne.n	800ae48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae42:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e0ed      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d101      	bne.n	800ae56 <HAL_I2C_Mem_Write+0x4e>
 800ae52:	2302      	movs	r3, #2
 800ae54:	e0e6      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ae5e:	f7fe f8c9 	bl	8008ff4 <HAL_GetTick>
 800ae62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2319      	movs	r3, #25
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 fbaf 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e0d1      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2221      	movs	r2, #33	@ 0x21
 800ae84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2240      	movs	r2, #64	@ 0x40
 800ae8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a3a      	ldr	r2, [r7, #32]
 800ae9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aea8:	88f8      	ldrh	r0, [r7, #6]
 800aeaa:	893a      	ldrh	r2, [r7, #8]
 800aeac:	8979      	ldrh	r1, [r7, #10]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 fabf 	bl	800b43c <I2C_RequestMemoryWrite>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e0a9      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2bff      	cmp	r3, #255	@ 0xff
 800aed8:	d90e      	bls.n	800aef8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	22ff      	movs	r2, #255	@ 0xff
 800aede:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	8979      	ldrh	r1, [r7, #10]
 800aee8:	2300      	movs	r3, #0
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 fd33 	bl	800b95c <I2C_TransferConfig>
 800aef6:	e00f      	b.n	800af18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af06:	b2da      	uxtb	r2, r3
 800af08:	8979      	ldrh	r1, [r7, #10]
 800af0a:	2300      	movs	r3, #0
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 fd22 	bl	800b95c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 fbb2 	bl	800b686 <I2C_WaitOnTXISFlagUntilTimeout>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e07b      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af30:	781a      	ldrb	r2, [r3, #0]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3c:	1c5a      	adds	r2, r3, #1
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af46:	b29b      	uxth	r3, r3
 800af48:	3b01      	subs	r3, #1
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af54:	3b01      	subs	r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af60:	b29b      	uxth	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d034      	beq.n	800afd0 <HAL_I2C_Mem_Write+0x1c8>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d130      	bne.n	800afd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af74:	2200      	movs	r2, #0
 800af76:	2180      	movs	r1, #128	@ 0x80
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 fb2b 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e04d      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	2bff      	cmp	r3, #255	@ 0xff
 800af90:	d90e      	bls.n	800afb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	22ff      	movs	r2, #255	@ 0xff
 800af96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	8979      	ldrh	r1, [r7, #10]
 800afa0:	2300      	movs	r3, #0
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fcd7 	bl	800b95c <I2C_TransferConfig>
 800afae:	e00f      	b.n	800afd0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	8979      	ldrh	r1, [r7, #10]
 800afc2:	2300      	movs	r3, #0
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 fcc6 	bl	800b95c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d19e      	bne.n	800af18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 fb98 	bl	800b714 <I2C_WaitOnSTOPFlagUntilTimeout>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e01a      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2220      	movs	r2, #32
 800aff4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6859      	ldr	r1, [r3, #4]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	4b0a      	ldr	r3, [pc, #40]	@ (800b02c <HAL_I2C_Mem_Write+0x224>)
 800b002:	400b      	ands	r3, r1
 800b004:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2220      	movs	r2, #32
 800b00a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	e000      	b.n	800b024 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b022:	2302      	movs	r3, #2
  }
}
 800b024:	4618      	mov	r0, r3
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	fe00e800 	.word	0xfe00e800

0800b030 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af02      	add	r7, sp, #8
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	4608      	mov	r0, r1
 800b03a:	4611      	mov	r1, r2
 800b03c:	461a      	mov	r2, r3
 800b03e:	4603      	mov	r3, r0
 800b040:	817b      	strh	r3, [r7, #10]
 800b042:	460b      	mov	r3, r1
 800b044:	813b      	strh	r3, [r7, #8]
 800b046:	4613      	mov	r3, r2
 800b048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b20      	cmp	r3, #32
 800b054:	f040 80fd 	bne.w	800b252 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <HAL_I2C_Mem_Read+0x34>
 800b05e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b06a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e0f1      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_I2C_Mem_Read+0x4e>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e0ea      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b086:	f7fd ffb5 	bl	8008ff4 <HAL_GetTick>
 800b08a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	2319      	movs	r3, #25
 800b092:	2201      	movs	r2, #1
 800b094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fa9b 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e0d5      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2222      	movs	r2, #34	@ 0x22
 800b0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2240      	movs	r2, #64	@ 0x40
 800b0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a3a      	ldr	r2, [r7, #32]
 800b0c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b0c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0d0:	88f8      	ldrh	r0, [r7, #6]
 800b0d2:	893a      	ldrh	r2, [r7, #8]
 800b0d4:	8979      	ldrh	r1, [r7, #10]
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	4603      	mov	r3, r0
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f9ff 	bl	800b4e4 <I2C_RequestMemoryRead>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d005      	beq.n	800b0f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e0ad      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2bff      	cmp	r3, #255	@ 0xff
 800b100:	d90e      	bls.n	800b120 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	8979      	ldrh	r1, [r7, #10]
 800b110:	4b52      	ldr	r3, [pc, #328]	@ (800b25c <HAL_I2C_Mem_Read+0x22c>)
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fc1f 	bl	800b95c <I2C_TransferConfig>
 800b11e:	e00f      	b.n	800b140 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b124:	b29a      	uxth	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	8979      	ldrh	r1, [r7, #10]
 800b132:	4b4a      	ldr	r3, [pc, #296]	@ (800b25c <HAL_I2C_Mem_Read+0x22c>)
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 fc0e 	bl	800b95c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b146:	2200      	movs	r2, #0
 800b148:	2104      	movs	r1, #4
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f000 fa42 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e07c      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b176:	3b01      	subs	r3, #1
 800b178:	b29a      	uxth	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b182:	b29b      	uxth	r3, r3
 800b184:	3b01      	subs	r3, #1
 800b186:	b29a      	uxth	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b190:	b29b      	uxth	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d034      	beq.n	800b200 <HAL_I2C_Mem_Read+0x1d0>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d130      	bne.n	800b200 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2180      	movs	r1, #128	@ 0x80
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f000 fa13 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e04d      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	2bff      	cmp	r3, #255	@ 0xff
 800b1c0:	d90e      	bls.n	800b1e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	8979      	ldrh	r1, [r7, #10]
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fbbf 	bl	800b95c <I2C_TransferConfig>
 800b1de:	e00f      	b.n	800b200 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	8979      	ldrh	r1, [r7, #10]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f000 fbae 	bl	800b95c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b204:	b29b      	uxth	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d19a      	bne.n	800b140 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 fa80 	bl	800b714 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e01a      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2220      	movs	r2, #32
 800b224:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6859      	ldr	r1, [r3, #4]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	4b0b      	ldr	r3, [pc, #44]	@ (800b260 <HAL_I2C_Mem_Read+0x230>)
 800b232:	400b      	ands	r3, r1
 800b234:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2220      	movs	r2, #32
 800b23a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	e000      	b.n	800b254 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b252:	2302      	movs	r3, #2
  }
}
 800b254:	4618      	mov	r0, r3
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	80002400 	.word	0x80002400
 800b260:	fe00e800 	.word	0xfe00e800

0800b264 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08a      	sub	sp, #40	@ 0x28
 800b268:	af02      	add	r7, sp, #8
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	460b      	mov	r3, r1
 800b272:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b20      	cmp	r3, #32
 800b282:	f040 80d6 	bne.w	800b432 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b294:	d101      	bne.n	800b29a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b296:	2302      	movs	r3, #2
 800b298:	e0cc      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_I2C_IsDeviceReady+0x44>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e0c5      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2224      	movs	r2, #36	@ 0x24
 800b2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d107      	bne.n	800b2d6 <HAL_I2C_IsDeviceReady+0x72>
 800b2c6:	897b      	ldrh	r3, [r7, #10]
 800b2c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b2d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b2d4:	e006      	b.n	800b2e4 <HAL_I2C_IsDeviceReady+0x80>
 800b2d6:	897b      	ldrh	r3, [r7, #10]
 800b2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b2e0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	6812      	ldr	r2, [r2, #0]
 800b2e8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b2ea:	f7fd fe83 	bl	8008ff4 <HAL_GetTick>
 800b2ee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	bf0c      	ite	eq
 800b2fe:	2301      	moveq	r3, #1
 800b300:	2300      	movne	r3, #0
 800b302:	b2db      	uxtb	r3, r3
 800b304:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	f003 0310 	and.w	r3, r3, #16
 800b310:	2b10      	cmp	r3, #16
 800b312:	bf0c      	ite	eq
 800b314:	2301      	moveq	r3, #1
 800b316:	2300      	movne	r3, #0
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b31c:	e034      	b.n	800b388 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b324:	d01a      	beq.n	800b35c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b326:	f7fd fe65 	bl	8008ff4 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d302      	bcc.n	800b33c <HAL_I2C_IsDeviceReady+0xd8>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10f      	bne.n	800b35c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2220      	movs	r2, #32
 800b340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b348:	f043 0220 	orr.w	r2, r3, #32
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e06b      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	f003 0320 	and.w	r3, r3, #32
 800b366:	2b20      	cmp	r3, #32
 800b368:	bf0c      	ite	eq
 800b36a:	2301      	moveq	r3, #1
 800b36c:	2300      	movne	r3, #0
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	f003 0310 	and.w	r3, r3, #16
 800b37c:	2b10      	cmp	r3, #16
 800b37e:	bf0c      	ite	eq
 800b380:	2301      	moveq	r3, #1
 800b382:	2300      	movne	r3, #0
 800b384:	b2db      	uxtb	r3, r3
 800b386:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b388:	7ffb      	ldrb	r3, [r7, #31]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d102      	bne.n	800b394 <HAL_I2C_IsDeviceReady+0x130>
 800b38e:	7fbb      	ldrb	r3, [r7, #30]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0c4      	beq.n	800b31e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	f003 0310 	and.w	r3, r3, #16
 800b39e:	2b10      	cmp	r3, #16
 800b3a0:	d01a      	beq.n	800b3d8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2120      	movs	r1, #32
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f000 f911 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e03b      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e02d      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2120      	movs	r1, #32
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f8f6 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e020      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2210      	movs	r2, #16
 800b3f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2220      	movs	r2, #32
 800b400:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3301      	adds	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	f63f af56 	bhi.w	800b2be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2220      	movs	r2, #32
 800b416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b41e:	f043 0220 	orr.w	r2, r3, #32
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e000      	b.n	800b434 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800b432:	2302      	movs	r3, #2
  }
}
 800b434:	4618      	mov	r0, r3
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af02      	add	r7, sp, #8
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	4608      	mov	r0, r1
 800b446:	4611      	mov	r1, r2
 800b448:	461a      	mov	r2, r3
 800b44a:	4603      	mov	r3, r0
 800b44c:	817b      	strh	r3, [r7, #10]
 800b44e:	460b      	mov	r3, r1
 800b450:	813b      	strh	r3, [r7, #8]
 800b452:	4613      	mov	r3, r2
 800b454:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b456:	88fb      	ldrh	r3, [r7, #6]
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	8979      	ldrh	r1, [r7, #10]
 800b45c:	4b20      	ldr	r3, [pc, #128]	@ (800b4e0 <I2C_RequestMemoryWrite+0xa4>)
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 fa79 	bl	800b95c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	69b9      	ldr	r1, [r7, #24]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 f909 	bl	800b686 <I2C_WaitOnTXISFlagUntilTimeout>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e02c      	b.n	800b4d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b47e:	88fb      	ldrh	r3, [r7, #6]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d105      	bne.n	800b490 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b484:	893b      	ldrh	r3, [r7, #8]
 800b486:	b2da      	uxtb	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b48e:	e015      	b.n	800b4bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b490:	893b      	ldrh	r3, [r7, #8]
 800b492:	0a1b      	lsrs	r3, r3, #8
 800b494:	b29b      	uxth	r3, r3
 800b496:	b2da      	uxtb	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	69b9      	ldr	r1, [r7, #24]
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 f8ef 	bl	800b686 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e012      	b.n	800b4d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4b2:	893b      	ldrh	r3, [r7, #8]
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2180      	movs	r1, #128	@ 0x80
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 f884 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	80002000 	.word	0x80002000

0800b4e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	817b      	strh	r3, [r7, #10]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	813b      	strh	r3, [r7, #8]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b4fe:	88fb      	ldrh	r3, [r7, #6]
 800b500:	b2da      	uxtb	r2, r3
 800b502:	8979      	ldrh	r1, [r7, #10]
 800b504:	4b20      	ldr	r3, [pc, #128]	@ (800b588 <I2C_RequestMemoryRead+0xa4>)
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	2300      	movs	r3, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fa26 	bl	800b95c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	69b9      	ldr	r1, [r7, #24]
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 f8b6 	bl	800b686 <I2C_WaitOnTXISFlagUntilTimeout>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e02c      	b.n	800b57e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b524:	88fb      	ldrh	r3, [r7, #6]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d105      	bne.n	800b536 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b52a:	893b      	ldrh	r3, [r7, #8]
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	629a      	str	r2, [r3, #40]	@ 0x28
 800b534:	e015      	b.n	800b562 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b536:	893b      	ldrh	r3, [r7, #8]
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	69b9      	ldr	r1, [r7, #24]
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f89c 	bl	800b686 <I2C_WaitOnTXISFlagUntilTimeout>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e012      	b.n	800b57e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b558:	893b      	ldrh	r3, [r7, #8]
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2200      	movs	r2, #0
 800b56a:	2140      	movs	r1, #64	@ 0x40
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 f831 	bl	800b5d4 <I2C_WaitOnFlagUntilTimeout>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e000      	b.n	800b57e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	80002000 	.word	0x80002000

0800b58c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d103      	bne.n	800b5aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d007      	beq.n	800b5c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f042 0201 	orr.w	r2, r2, #1
 800b5c6:	619a      	str	r2, [r3, #24]
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5e4:	e03b      	b.n	800b65e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 f8d6 	bl	800b79c <I2C_IsErrorOccurred>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e041      	b.n	800b67e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b600:	d02d      	beq.n	800b65e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b602:	f7fd fcf7 	bl	8008ff4 <HAL_GetTick>
 800b606:	4602      	mov	r2, r0
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d302      	bcc.n	800b618 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d122      	bne.n	800b65e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	699a      	ldr	r2, [r3, #24]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	4013      	ands	r3, r2
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	429a      	cmp	r2, r3
 800b626:	bf0c      	ite	eq
 800b628:	2301      	moveq	r3, #1
 800b62a:	2300      	movne	r3, #0
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	461a      	mov	r2, r3
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	429a      	cmp	r2, r3
 800b634:	d113      	bne.n	800b65e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b63a:	f043 0220 	orr.w	r2, r3, #32
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2220      	movs	r2, #32
 800b646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e00f      	b.n	800b67e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	699a      	ldr	r2, [r3, #24]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4013      	ands	r3, r2
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	bf0c      	ite	eq
 800b66e:	2301      	moveq	r3, #1
 800b670:	2300      	movne	r3, #0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d0b4      	beq.n	800b5e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b692:	e033      	b.n	800b6fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	68b9      	ldr	r1, [r7, #8]
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 f87f 	bl	800b79c <I2C_IsErrorOccurred>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e031      	b.n	800b70c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d025      	beq.n	800b6fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6b0:	f7fd fca0 	bl	8008ff4 <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d302      	bcc.n	800b6c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d11a      	bne.n	800b6fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	f003 0302 	and.w	r3, r3, #2
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d013      	beq.n	800b6fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6d8:	f043 0220 	orr.w	r2, r3, #32
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e007      	b.n	800b70c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	f003 0302 	and.w	r3, r3, #2
 800b706:	2b02      	cmp	r3, #2
 800b708:	d1c4      	bne.n	800b694 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b720:	e02f      	b.n	800b782 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	68b9      	ldr	r1, [r7, #8]
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f838 	bl	800b79c <I2C_IsErrorOccurred>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e02d      	b.n	800b792 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b736:	f7fd fc5d 	bl	8008ff4 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	429a      	cmp	r2, r3
 800b744:	d302      	bcc.n	800b74c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d11a      	bne.n	800b782 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b20      	cmp	r3, #32
 800b758:	d013      	beq.n	800b782 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b75e:	f043 0220 	orr.w	r2, r3, #32
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2220      	movs	r2, #32
 800b76a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e007      	b.n	800b792 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	f003 0320 	and.w	r3, r3, #32
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	d1c8      	bne.n	800b722 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	@ 0x28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	f003 0310 	and.w	r3, r3, #16
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d068      	beq.n	800b89a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2210      	movs	r2, #16
 800b7ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b7d0:	e049      	b.n	800b866 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d8:	d045      	beq.n	800b866 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b7da:	f7fd fc0b 	bl	8008ff4 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d302      	bcc.n	800b7f0 <I2C_IsErrorOccurred+0x54>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d13a      	bne.n	800b866 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b802:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b80e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b812:	d121      	bne.n	800b858 <I2C_IsErrorOccurred+0xbc>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b81a:	d01d      	beq.n	800b858 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b81c:	7cfb      	ldrb	r3, [r7, #19]
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d01a      	beq.n	800b858 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b830:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b832:	f7fd fbdf 	bl	8008ff4 <HAL_GetTick>
 800b836:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b838:	e00e      	b.n	800b858 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b83a:	f7fd fbdb 	bl	8008ff4 <HAL_GetTick>
 800b83e:	4602      	mov	r2, r0
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	2b19      	cmp	r3, #25
 800b846:	d907      	bls.n	800b858 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	f043 0320 	orr.w	r3, r3, #32
 800b84e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b856:	e006      	b.n	800b866 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b20      	cmp	r3, #32
 800b864:	d1e9      	bne.n	800b83a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	f003 0320 	and.w	r3, r3, #32
 800b870:	2b20      	cmp	r3, #32
 800b872:	d003      	beq.n	800b87c <I2C_IsErrorOccurred+0xe0>
 800b874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0aa      	beq.n	800b7d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b87c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b880:	2b00      	cmp	r3, #0
 800b882:	d103      	bne.n	800b88c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2220      	movs	r2, #32
 800b88a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	f043 0304 	orr.w	r3, r3, #4
 800b892:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00b      	beq.n	800b8c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b8bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	f043 0308 	orr.w	r3, r3, #8
 800b8d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b8de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	f043 0302 	orr.w	r3, r3, #2
 800b8f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01c      	beq.n	800b94a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff fe3b 	bl	800b58c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6859      	ldr	r1, [r3, #4]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	4b0d      	ldr	r3, [pc, #52]	@ (800b958 <I2C_IsErrorOccurred+0x1bc>)
 800b922:	400b      	ands	r3, r1
 800b924:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	431a      	orrs	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2220      	movs	r2, #32
 800b936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3728      	adds	r7, #40	@ 0x28
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	fe00e800 	.word	0xfe00e800

0800b95c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	607b      	str	r3, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	817b      	strh	r3, [r7, #10]
 800b96a:	4613      	mov	r3, r2
 800b96c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b96e:	897b      	ldrh	r3, [r7, #10]
 800b970:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b974:	7a7b      	ldrb	r3, [r7, #9]
 800b976:	041b      	lsls	r3, r3, #16
 800b978:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b97c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	4313      	orrs	r3, r2
 800b986:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b98a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	0d5b      	lsrs	r3, r3, #21
 800b996:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b99a:	4b08      	ldr	r3, [pc, #32]	@ (800b9bc <I2C_TransferConfig+0x60>)
 800b99c:	430b      	orrs	r3, r1
 800b99e:	43db      	mvns	r3, r3
 800b9a0:	ea02 0103 	and.w	r1, r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b9ae:	bf00      	nop
 800b9b0:	371c      	adds	r7, #28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	03ff63ff 	.word	0x03ff63ff

0800b9c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d138      	bne.n	800ba48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d101      	bne.n	800b9e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	e032      	b.n	800ba4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2224      	movs	r2, #36	@ 0x24
 800b9f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 0201 	bic.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ba12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	6819      	ldr	r1, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f042 0201 	orr.w	r2, r2, #1
 800ba32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e000      	b.n	800ba4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba48:	2302      	movs	r3, #2
  }
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b085      	sub	sp, #20
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	d139      	bne.n	800bae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba76:	2302      	movs	r3, #2
 800ba78:	e033      	b.n	800bae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2224      	movs	r2, #36	@ 0x24
 800ba86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f022 0201 	bic.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800baa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2220      	movs	r2, #32
 800bad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	e000      	b.n	800bae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bae0:	2302      	movs	r3, #2
  }
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
	...

0800baf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800baf0:	b480      	push	{r7}
 800baf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800baf4:	4b04      	ldr	r3, [pc, #16]	@ (800bb08 <HAL_PWREx_GetVoltageRange+0x18>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	40007000 	.word	0x40007000

0800bb0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb1a:	d130      	bne.n	800bb7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb1c:	4b23      	ldr	r3, [pc, #140]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bb24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb28:	d038      	beq.n	800bb9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bb2a:	4b20      	ldr	r3, [pc, #128]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bb32:	4a1e      	ldr	r2, [pc, #120]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bb38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2232      	movs	r2, #50	@ 0x32
 800bb40:	fb02 f303 	mul.w	r3, r2, r3
 800bb44:	4a1b      	ldr	r2, [pc, #108]	@ (800bbb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bb46:	fba2 2303 	umull	r2, r3, r2, r3
 800bb4a:	0c9b      	lsrs	r3, r3, #18
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bb50:	e002      	b.n	800bb58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bb58:	4b14      	ldr	r3, [pc, #80]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb64:	d102      	bne.n	800bb6c <HAL_PWREx_ControlVoltageScaling+0x60>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1f2      	bne.n	800bb52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb78:	d110      	bne.n	800bb9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e00f      	b.n	800bb9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bb7e:	4b0b      	ldr	r3, [pc, #44]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bb86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb8a:	d007      	beq.n	800bb9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bb8c:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bb94:	4a05      	ldr	r2, [pc, #20]	@ (800bbac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bb96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bb9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	40007000 	.word	0x40007000
 800bbb0:	20000000 	.word	0x20000000
 800bbb4:	431bde83 	.word	0x431bde83

0800bbb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	f000 bc02 	b.w	800c3d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbcc:	4b96      	ldr	r3, [pc, #600]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f003 030c 	and.w	r3, r3, #12
 800bbd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bbd6:	4b94      	ldr	r3, [pc, #592]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0310 	and.w	r3, r3, #16
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 80e4 	beq.w	800bdb6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d007      	beq.n	800bc04 <HAL_RCC_OscConfig+0x4c>
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	2b0c      	cmp	r3, #12
 800bbf8:	f040 808b 	bne.w	800bd12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	f040 8087 	bne.w	800bd12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bc04:	4b88      	ldr	r3, [pc, #544]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <HAL_RCC_OscConfig+0x64>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e3d9      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a1a      	ldr	r2, [r3, #32]
 800bc20:	4b81      	ldr	r3, [pc, #516]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 0308 	and.w	r3, r3, #8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d004      	beq.n	800bc36 <HAL_RCC_OscConfig+0x7e>
 800bc2c:	4b7e      	ldr	r3, [pc, #504]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc34:	e005      	b.n	800bc42 <HAL_RCC_OscConfig+0x8a>
 800bc36:	4b7c      	ldr	r3, [pc, #496]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc3c:	091b      	lsrs	r3, r3, #4
 800bc3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d223      	bcs.n	800bc8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fd54 	bl	800c6f8 <RCC_SetFlashLatencyFromMSIRange>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e3ba      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc5a:	4b73      	ldr	r3, [pc, #460]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a72      	ldr	r2, [pc, #456]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc60:	f043 0308 	orr.w	r3, r3, #8
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	4b70      	ldr	r3, [pc, #448]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	496d      	ldr	r1, [pc, #436]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc78:	4b6b      	ldr	r3, [pc, #428]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	4968      	ldr	r1, [pc, #416]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	604b      	str	r3, [r1, #4]
 800bc8c:	e025      	b.n	800bcda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc8e:	4b66      	ldr	r3, [pc, #408]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a65      	ldr	r2, [pc, #404]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc94:	f043 0308 	orr.w	r3, r3, #8
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	4b63      	ldr	r3, [pc, #396]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	4960      	ldr	r1, [pc, #384]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bcac:	4b5e      	ldr	r3, [pc, #376]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	021b      	lsls	r3, r3, #8
 800bcba:	495b      	ldr	r1, [pc, #364]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d109      	bne.n	800bcda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fd14 	bl	800c6f8 <RCC_SetFlashLatencyFromMSIRange>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e37a      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bcda:	f000 fc81 	bl	800c5e0 <HAL_RCC_GetSysClockFreq>
 800bcde:	4602      	mov	r2, r0
 800bce0:	4b51      	ldr	r3, [pc, #324]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	091b      	lsrs	r3, r3, #4
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	4950      	ldr	r1, [pc, #320]	@ (800be2c <HAL_RCC_OscConfig+0x274>)
 800bcec:	5ccb      	ldrb	r3, [r1, r3]
 800bcee:	f003 031f 	and.w	r3, r3, #31
 800bcf2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf6:	4a4e      	ldr	r2, [pc, #312]	@ (800be30 <HAL_RCC_OscConfig+0x278>)
 800bcf8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bcfa:	4b4e      	ldr	r3, [pc, #312]	@ (800be34 <HAL_RCC_OscConfig+0x27c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd f928 	bl	8008f54 <HAL_InitTick>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d052      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	e35e      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d032      	beq.n	800bd80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bd1a:	4b43      	ldr	r3, [pc, #268]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a42      	ldr	r2, [pc, #264]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd20:	f043 0301 	orr.w	r3, r3, #1
 800bd24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bd26:	f7fd f965 	bl	8008ff4 <HAL_GetTick>
 800bd2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd2c:	e008      	b.n	800bd40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd2e:	f7fd f961 	bl	8008ff4 <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d901      	bls.n	800bd40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e347      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd40:	4b39      	ldr	r3, [pc, #228]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0f0      	beq.n	800bd2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bd4c:	4b36      	ldr	r3, [pc, #216]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a35      	ldr	r2, [pc, #212]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd52:	f043 0308 	orr.w	r3, r3, #8
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	4b33      	ldr	r3, [pc, #204]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	4930      	ldr	r1, [pc, #192]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd66:	4313      	orrs	r3, r2
 800bd68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bd6a:	4b2f      	ldr	r3, [pc, #188]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	492b      	ldr	r1, [pc, #172]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	604b      	str	r3, [r1, #4]
 800bd7e:	e01a      	b.n	800bdb6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bd80:	4b29      	ldr	r3, [pc, #164]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a28      	ldr	r2, [pc, #160]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bd86:	f023 0301 	bic.w	r3, r3, #1
 800bd8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bd8c:	f7fd f932 	bl	8008ff4 <HAL_GetTick>
 800bd90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bd92:	e008      	b.n	800bda6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd94:	f7fd f92e 	bl	8008ff4 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d901      	bls.n	800bda6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e314      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bda6:	4b20      	ldr	r3, [pc, #128]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1f0      	bne.n	800bd94 <HAL_RCC_OscConfig+0x1dc>
 800bdb2:	e000      	b.n	800bdb6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bdb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d073      	beq.n	800beaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b08      	cmp	r3, #8
 800bdc6:	d005      	beq.n	800bdd4 <HAL_RCC_OscConfig+0x21c>
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	2b0c      	cmp	r3, #12
 800bdcc:	d10e      	bne.n	800bdec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d10b      	bne.n	800bdec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdd4:	4b14      	ldr	r3, [pc, #80]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d063      	beq.n	800bea8 <HAL_RCC_OscConfig+0x2f0>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d15f      	bne.n	800bea8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e2f1      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdf4:	d106      	bne.n	800be04 <HAL_RCC_OscConfig+0x24c>
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a0b      	ldr	r2, [pc, #44]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800bdfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	e025      	b.n	800be50 <HAL_RCC_OscConfig+0x298>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be0c:	d114      	bne.n	800be38 <HAL_RCC_OscConfig+0x280>
 800be0e:	4b06      	ldr	r3, [pc, #24]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a05      	ldr	r2, [pc, #20]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800be14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	4b03      	ldr	r3, [pc, #12]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a02      	ldr	r2, [pc, #8]	@ (800be28 <HAL_RCC_OscConfig+0x270>)
 800be20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	e013      	b.n	800be50 <HAL_RCC_OscConfig+0x298>
 800be28:	40021000 	.word	0x40021000
 800be2c:	08010388 	.word	0x08010388
 800be30:	20000000 	.word	0x20000000
 800be34:	20000018 	.word	0x20000018
 800be38:	4ba0      	ldr	r3, [pc, #640]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a9f      	ldr	r2, [pc, #636]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800be3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	4b9d      	ldr	r3, [pc, #628]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a9c      	ldr	r2, [pc, #624]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800be4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d013      	beq.n	800be80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be58:	f7fd f8cc 	bl	8008ff4 <HAL_GetTick>
 800be5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be5e:	e008      	b.n	800be72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be60:	f7fd f8c8 	bl	8008ff4 <HAL_GetTick>
 800be64:	4602      	mov	r2, r0
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	2b64      	cmp	r3, #100	@ 0x64
 800be6c:	d901      	bls.n	800be72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e2ae      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be72:	4b92      	ldr	r3, [pc, #584]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0f0      	beq.n	800be60 <HAL_RCC_OscConfig+0x2a8>
 800be7e:	e014      	b.n	800beaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be80:	f7fd f8b8 	bl	8008ff4 <HAL_GetTick>
 800be84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be86:	e008      	b.n	800be9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be88:	f7fd f8b4 	bl	8008ff4 <HAL_GetTick>
 800be8c:	4602      	mov	r2, r0
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	2b64      	cmp	r3, #100	@ 0x64
 800be94:	d901      	bls.n	800be9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e29a      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be9a:	4b88      	ldr	r3, [pc, #544]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1f0      	bne.n	800be88 <HAL_RCC_OscConfig+0x2d0>
 800bea6:	e000      	b.n	800beaa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 0302 	and.w	r3, r3, #2
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d060      	beq.n	800bf78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2b04      	cmp	r3, #4
 800beba:	d005      	beq.n	800bec8 <HAL_RCC_OscConfig+0x310>
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	2b0c      	cmp	r3, #12
 800bec0:	d119      	bne.n	800bef6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d116      	bne.n	800bef6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bec8:	4b7c      	ldr	r3, [pc, #496]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d005      	beq.n	800bee0 <HAL_RCC_OscConfig+0x328>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d101      	bne.n	800bee0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	e277      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bee0:	4b76      	ldr	r3, [pc, #472]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	061b      	lsls	r3, r3, #24
 800beee:	4973      	ldr	r1, [pc, #460]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bef4:	e040      	b.n	800bf78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d023      	beq.n	800bf46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800befe:	4b6f      	ldr	r3, [pc, #444]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a6e      	ldr	r2, [pc, #440]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf0a:	f7fd f873 	bl	8008ff4 <HAL_GetTick>
 800bf0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf10:	e008      	b.n	800bf24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf12:	f7fd f86f 	bl	8008ff4 <HAL_GetTick>
 800bf16:	4602      	mov	r2, r0
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d901      	bls.n	800bf24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bf20:	2303      	movs	r3, #3
 800bf22:	e255      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf24:	4b65      	ldr	r3, [pc, #404]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0f0      	beq.n	800bf12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf30:	4b62      	ldr	r3, [pc, #392]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	061b      	lsls	r3, r3, #24
 800bf3e:	495f      	ldr	r1, [pc, #380]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf40:	4313      	orrs	r3, r2
 800bf42:	604b      	str	r3, [r1, #4]
 800bf44:	e018      	b.n	800bf78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf46:	4b5d      	ldr	r3, [pc, #372]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a5c      	ldr	r2, [pc, #368]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf52:	f7fd f84f 	bl	8008ff4 <HAL_GetTick>
 800bf56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf58:	e008      	b.n	800bf6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf5a:	f7fd f84b 	bl	8008ff4 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d901      	bls.n	800bf6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e231      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf6c:	4b53      	ldr	r3, [pc, #332]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1f0      	bne.n	800bf5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0308 	and.w	r3, r3, #8
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d03c      	beq.n	800bffe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01c      	beq.n	800bfc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf8c:	4b4b      	ldr	r3, [pc, #300]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf92:	4a4a      	ldr	r2, [pc, #296]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bf94:	f043 0301 	orr.w	r3, r3, #1
 800bf98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf9c:	f7fd f82a 	bl	8008ff4 <HAL_GetTick>
 800bfa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bfa2:	e008      	b.n	800bfb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfa4:	f7fd f826 	bl	8008ff4 <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e20c      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bfb6:	4b41      	ldr	r3, [pc, #260]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bfb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfbc:	f003 0302 	and.w	r3, r3, #2
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d0ef      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x3ec>
 800bfc4:	e01b      	b.n	800bffe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfc6:	4b3d      	ldr	r3, [pc, #244]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bfc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfcc:	4a3b      	ldr	r2, [pc, #236]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bfce:	f023 0301 	bic.w	r3, r3, #1
 800bfd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfd6:	f7fd f80d 	bl	8008ff4 <HAL_GetTick>
 800bfda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bfdc:	e008      	b.n	800bff0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfde:	f7fd f809 	bl	8008ff4 <HAL_GetTick>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d901      	bls.n	800bff0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e1ef      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bff0:	4b32      	ldr	r3, [pc, #200]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800bff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bff6:	f003 0302 	and.w	r3, r3, #2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1ef      	bne.n	800bfde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0304 	and.w	r3, r3, #4
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 80a6 	beq.w	800c158 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c00c:	2300      	movs	r3, #0
 800c00e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c010:	4b2a      	ldr	r3, [pc, #168]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10d      	bne.n	800c038 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c01c:	4b27      	ldr	r3, [pc, #156]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c01e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c020:	4a26      	ldr	r2, [pc, #152]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c026:	6593      	str	r3, [r2, #88]	@ 0x58
 800c028:	4b24      	ldr	r3, [pc, #144]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c02a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c02c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c030:	60bb      	str	r3, [r7, #8]
 800c032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c034:	2301      	movs	r3, #1
 800c036:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c038:	4b21      	ldr	r3, [pc, #132]	@ (800c0c0 <HAL_RCC_OscConfig+0x508>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c040:	2b00      	cmp	r3, #0
 800c042:	d118      	bne.n	800c076 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c044:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c0 <HAL_RCC_OscConfig+0x508>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a1d      	ldr	r2, [pc, #116]	@ (800c0c0 <HAL_RCC_OscConfig+0x508>)
 800c04a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c04e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c050:	f7fc ffd0 	bl	8008ff4 <HAL_GetTick>
 800c054:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c056:	e008      	b.n	800c06a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c058:	f7fc ffcc 	bl	8008ff4 <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	2b02      	cmp	r3, #2
 800c064:	d901      	bls.n	800c06a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e1b2      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c06a:	4b15      	ldr	r3, [pc, #84]	@ (800c0c0 <HAL_RCC_OscConfig+0x508>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0f0      	beq.n	800c058 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d108      	bne.n	800c090 <HAL_RCC_OscConfig+0x4d8>
 800c07e:	4b0f      	ldr	r3, [pc, #60]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c084:	4a0d      	ldr	r2, [pc, #52]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c086:	f043 0301 	orr.w	r3, r3, #1
 800c08a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c08e:	e029      	b.n	800c0e4 <HAL_RCC_OscConfig+0x52c>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	2b05      	cmp	r3, #5
 800c096:	d115      	bne.n	800c0c4 <HAL_RCC_OscConfig+0x50c>
 800c098:	4b08      	ldr	r3, [pc, #32]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c09e:	4a07      	ldr	r2, [pc, #28]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c0a0:	f043 0304 	orr.w	r3, r3, #4
 800c0a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c0a8:	4b04      	ldr	r3, [pc, #16]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ae:	4a03      	ldr	r2, [pc, #12]	@ (800c0bc <HAL_RCC_OscConfig+0x504>)
 800c0b0:	f043 0301 	orr.w	r3, r3, #1
 800c0b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c0b8:	e014      	b.n	800c0e4 <HAL_RCC_OscConfig+0x52c>
 800c0ba:	bf00      	nop
 800c0bc:	40021000 	.word	0x40021000
 800c0c0:	40007000 	.word	0x40007000
 800c0c4:	4b9a      	ldr	r3, [pc, #616]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ca:	4a99      	ldr	r2, [pc, #612]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c0cc:	f023 0301 	bic.w	r3, r3, #1
 800c0d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c0d4:	4b96      	ldr	r3, [pc, #600]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0da:	4a95      	ldr	r2, [pc, #596]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c0dc:	f023 0304 	bic.w	r3, r3, #4
 800c0e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d016      	beq.n	800c11a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0ec:	f7fc ff82 	bl	8008ff4 <HAL_GetTick>
 800c0f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0f2:	e00a      	b.n	800c10a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0f4:	f7fc ff7e 	bl	8008ff4 <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c102:	4293      	cmp	r3, r2
 800c104:	d901      	bls.n	800c10a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e162      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c10a:	4b89      	ldr	r3, [pc, #548]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c110:	f003 0302 	and.w	r3, r3, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0ed      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x53c>
 800c118:	e015      	b.n	800c146 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c11a:	f7fc ff6b 	bl	8008ff4 <HAL_GetTick>
 800c11e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c120:	e00a      	b.n	800c138 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c122:	f7fc ff67 	bl	8008ff4 <HAL_GetTick>
 800c126:	4602      	mov	r2, r0
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c130:	4293      	cmp	r3, r2
 800c132:	d901      	bls.n	800c138 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c134:	2303      	movs	r3, #3
 800c136:	e14b      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c138:	4b7d      	ldr	r3, [pc, #500]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c13e:	f003 0302 	and.w	r3, r3, #2
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1ed      	bne.n	800c122 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c146:	7ffb      	ldrb	r3, [r7, #31]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d105      	bne.n	800c158 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c14c:	4b78      	ldr	r3, [pc, #480]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c14e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c150:	4a77      	ldr	r2, [pc, #476]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c156:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0320 	and.w	r3, r3, #32
 800c160:	2b00      	cmp	r3, #0
 800c162:	d03c      	beq.n	800c1de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01c      	beq.n	800c1a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c16c:	4b70      	ldr	r3, [pc, #448]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c16e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c172:	4a6f      	ldr	r2, [pc, #444]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c174:	f043 0301 	orr.w	r3, r3, #1
 800c178:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c17c:	f7fc ff3a 	bl	8008ff4 <HAL_GetTick>
 800c180:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c182:	e008      	b.n	800c196 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c184:	f7fc ff36 	bl	8008ff4 <HAL_GetTick>
 800c188:	4602      	mov	r2, r0
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d901      	bls.n	800c196 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c192:	2303      	movs	r3, #3
 800c194:	e11c      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c196:	4b66      	ldr	r3, [pc, #408]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c198:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c19c:	f003 0302 	and.w	r3, r3, #2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d0ef      	beq.n	800c184 <HAL_RCC_OscConfig+0x5cc>
 800c1a4:	e01b      	b.n	800c1de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c1a6:	4b62      	ldr	r3, [pc, #392]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c1a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1ac:	4a60      	ldr	r2, [pc, #384]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c1ae:	f023 0301 	bic.w	r3, r3, #1
 800c1b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1b6:	f7fc ff1d 	bl	8008ff4 <HAL_GetTick>
 800c1ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c1bc:	e008      	b.n	800c1d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1be:	f7fc ff19 	bl	8008ff4 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d901      	bls.n	800c1d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e0ff      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c1d0:	4b57      	ldr	r3, [pc, #348]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c1d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1d6:	f003 0302 	and.w	r3, r3, #2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1ef      	bne.n	800c1be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 80f3 	beq.w	800c3ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	f040 80c9 	bne.w	800c384 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c1f2:	4b4f      	ldr	r3, [pc, #316]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	f003 0203 	and.w	r2, r3, #3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c202:	429a      	cmp	r2, r3
 800c204:	d12c      	bne.n	800c260 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c210:	3b01      	subs	r3, #1
 800c212:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c214:	429a      	cmp	r2, r3
 800c216:	d123      	bne.n	800c260 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c222:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c224:	429a      	cmp	r2, r3
 800c226:	d11b      	bne.n	800c260 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c232:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c234:	429a      	cmp	r2, r3
 800c236:	d113      	bne.n	800c260 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c242:	085b      	lsrs	r3, r3, #1
 800c244:	3b01      	subs	r3, #1
 800c246:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c248:	429a      	cmp	r2, r3
 800c24a:	d109      	bne.n	800c260 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	3b01      	subs	r3, #1
 800c25a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d06b      	beq.n	800c338 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b0c      	cmp	r3, #12
 800c264:	d062      	beq.n	800c32c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c266:	4b32      	ldr	r3, [pc, #200]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e0ac      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c276:	4b2e      	ldr	r3, [pc, #184]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a2d      	ldr	r2, [pc, #180]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c27c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c280:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c282:	f7fc feb7 	bl	8008ff4 <HAL_GetTick>
 800c286:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c288:	e008      	b.n	800c29c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c28a:	f7fc feb3 	bl	8008ff4 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	2b02      	cmp	r3, #2
 800c296:	d901      	bls.n	800c29c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e099      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c29c:	4b24      	ldr	r3, [pc, #144]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1f0      	bne.n	800c28a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c2a8:	4b21      	ldr	r3, [pc, #132]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c2aa:	68da      	ldr	r2, [r3, #12]
 800c2ac:	4b21      	ldr	r3, [pc, #132]	@ (800c334 <HAL_RCC_OscConfig+0x77c>)
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c2b8:	3a01      	subs	r2, #1
 800c2ba:	0112      	lsls	r2, r2, #4
 800c2bc:	4311      	orrs	r1, r2
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c2c2:	0212      	lsls	r2, r2, #8
 800c2c4:	4311      	orrs	r1, r2
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c2ca:	0852      	lsrs	r2, r2, #1
 800c2cc:	3a01      	subs	r2, #1
 800c2ce:	0552      	lsls	r2, r2, #21
 800c2d0:	4311      	orrs	r1, r2
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c2d6:	0852      	lsrs	r2, r2, #1
 800c2d8:	3a01      	subs	r2, #1
 800c2da:	0652      	lsls	r2, r2, #25
 800c2dc:	4311      	orrs	r1, r2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c2e2:	06d2      	lsls	r2, r2, #27
 800c2e4:	430a      	orrs	r2, r1
 800c2e6:	4912      	ldr	r1, [pc, #72]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c2ec:	4b10      	ldr	r3, [pc, #64]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a0f      	ldr	r2, [pc, #60]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c2f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c2f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c2f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c2fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c304:	f7fc fe76 	bl	8008ff4 <HAL_GetTick>
 800c308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c30a:	e008      	b.n	800c31e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c30c:	f7fc fe72 	bl	8008ff4 <HAL_GetTick>
 800c310:	4602      	mov	r2, r0
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	2b02      	cmp	r3, #2
 800c318:	d901      	bls.n	800c31e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	e058      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c31e:	4b04      	ldr	r3, [pc, #16]	@ (800c330 <HAL_RCC_OscConfig+0x778>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0f0      	beq.n	800c30c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c32a:	e050      	b.n	800c3ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e04f      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
 800c330:	40021000 	.word	0x40021000
 800c334:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c338:	4b27      	ldr	r3, [pc, #156]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d144      	bne.n	800c3ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c344:	4b24      	ldr	r3, [pc, #144]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a23      	ldr	r2, [pc, #140]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c34a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c34e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c350:	4b21      	ldr	r3, [pc, #132]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	4a20      	ldr	r2, [pc, #128]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c35a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c35c:	f7fc fe4a 	bl	8008ff4 <HAL_GetTick>
 800c360:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c362:	e008      	b.n	800c376 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c364:	f7fc fe46 	bl	8008ff4 <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d901      	bls.n	800c376 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	e02c      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c376:	4b18      	ldr	r3, [pc, #96]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0f0      	beq.n	800c364 <HAL_RCC_OscConfig+0x7ac>
 800c382:	e024      	b.n	800c3ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	2b0c      	cmp	r3, #12
 800c388:	d01f      	beq.n	800c3ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c38a:	4b13      	ldr	r3, [pc, #76]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a12      	ldr	r2, [pc, #72]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c390:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c396:	f7fc fe2d 	bl	8008ff4 <HAL_GetTick>
 800c39a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c39c:	e008      	b.n	800c3b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c39e:	f7fc fe29 	bl	8008ff4 <HAL_GetTick>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d901      	bls.n	800c3b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e00f      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3b0:	4b09      	ldr	r3, [pc, #36]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f0      	bne.n	800c39e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c3bc:	4b06      	ldr	r3, [pc, #24]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	4905      	ldr	r1, [pc, #20]	@ (800c3d8 <HAL_RCC_OscConfig+0x820>)
 800c3c2:	4b06      	ldr	r3, [pc, #24]	@ (800c3dc <HAL_RCC_OscConfig+0x824>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	60cb      	str	r3, [r1, #12]
 800c3c8:	e001      	b.n	800c3ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e000      	b.n	800c3d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3720      	adds	r7, #32
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	40021000 	.word	0x40021000
 800c3dc:	feeefffc 	.word	0xfeeefffc

0800c3e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e0e7      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c3f4:	4b75      	ldr	r3, [pc, #468]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0307 	and.w	r3, r3, #7
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d910      	bls.n	800c424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c402:	4b72      	ldr	r3, [pc, #456]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f023 0207 	bic.w	r2, r3, #7
 800c40a:	4970      	ldr	r1, [pc, #448]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	4313      	orrs	r3, r2
 800c410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c412:	4b6e      	ldr	r3, [pc, #440]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d001      	beq.n	800c424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e0cf      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0302 	and.w	r3, r3, #2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d010      	beq.n	800c452 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689a      	ldr	r2, [r3, #8]
 800c434:	4b66      	ldr	r3, [pc, #408]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d908      	bls.n	800c452 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c440:	4b63      	ldr	r3, [pc, #396]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	4960      	ldr	r1, [pc, #384]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d04c      	beq.n	800c4f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b03      	cmp	r3, #3
 800c464:	d107      	bne.n	800c476 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c466:	4b5a      	ldr	r3, [pc, #360]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d121      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e0a6      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d107      	bne.n	800c48e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c47e:	4b54      	ldr	r3, [pc, #336]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d115      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e09a      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d107      	bne.n	800c4a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c496:	4b4e      	ldr	r3, [pc, #312]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 0302 	and.w	r3, r3, #2
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d109      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e08e      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4a6:	4b4a      	ldr	r3, [pc, #296]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e086      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c4b6:	4b46      	ldr	r3, [pc, #280]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	f023 0203 	bic.w	r2, r3, #3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4943      	ldr	r1, [pc, #268]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4c8:	f7fc fd94 	bl	8008ff4 <HAL_GetTick>
 800c4cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4ce:	e00a      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4d0:	f7fc fd90 	bl	8008ff4 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d901      	bls.n	800c4e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e06e      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4e6:	4b3a      	ldr	r3, [pc, #232]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	f003 020c 	and.w	r2, r3, #12
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d1eb      	bne.n	800c4d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d010      	beq.n	800c526 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	4b31      	ldr	r3, [pc, #196]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c510:	429a      	cmp	r2, r3
 800c512:	d208      	bcs.n	800c526 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c514:	4b2e      	ldr	r3, [pc, #184]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	492b      	ldr	r1, [pc, #172]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c522:	4313      	orrs	r3, r2
 800c524:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c526:	4b29      	ldr	r3, [pc, #164]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0307 	and.w	r3, r3, #7
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d210      	bcs.n	800c556 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c534:	4b25      	ldr	r3, [pc, #148]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f023 0207 	bic.w	r2, r3, #7
 800c53c:	4923      	ldr	r1, [pc, #140]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	4313      	orrs	r3, r2
 800c542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c544:	4b21      	ldr	r3, [pc, #132]	@ (800c5cc <HAL_RCC_ClockConfig+0x1ec>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0307 	and.w	r3, r3, #7
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d001      	beq.n	800c556 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e036      	b.n	800c5c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d008      	beq.n	800c574 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c562:	4b1b      	ldr	r3, [pc, #108]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	4918      	ldr	r1, [pc, #96]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c570:	4313      	orrs	r3, r2
 800c572:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0308 	and.w	r3, r3, #8
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d009      	beq.n	800c594 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c580:	4b13      	ldr	r3, [pc, #76]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	4910      	ldr	r1, [pc, #64]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c590:	4313      	orrs	r3, r2
 800c592:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c594:	f000 f824 	bl	800c5e0 <HAL_RCC_GetSysClockFreq>
 800c598:	4602      	mov	r2, r0
 800c59a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <HAL_RCC_ClockConfig+0x1f0>)
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	091b      	lsrs	r3, r3, #4
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	490b      	ldr	r1, [pc, #44]	@ (800c5d4 <HAL_RCC_ClockConfig+0x1f4>)
 800c5a6:	5ccb      	ldrb	r3, [r1, r3]
 800c5a8:	f003 031f 	and.w	r3, r3, #31
 800c5ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b0:	4a09      	ldr	r2, [pc, #36]	@ (800c5d8 <HAL_RCC_ClockConfig+0x1f8>)
 800c5b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c5b4:	4b09      	ldr	r3, [pc, #36]	@ (800c5dc <HAL_RCC_ClockConfig+0x1fc>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fc fccb 	bl	8008f54 <HAL_InitTick>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	72fb      	strb	r3, [r7, #11]

  return status;
 800c5c2:	7afb      	ldrb	r3, [r7, #11]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	40022000 	.word	0x40022000
 800c5d0:	40021000 	.word	0x40021000
 800c5d4:	08010388 	.word	0x08010388
 800c5d8:	20000000 	.word	0x20000000
 800c5dc:	20000018 	.word	0x20000018

0800c5e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b089      	sub	sp, #36	@ 0x24
 800c5e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	61fb      	str	r3, [r7, #28]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c5ee:	4b3e      	ldr	r3, [pc, #248]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	f003 030c 	and.w	r3, r3, #12
 800c5f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c5f8:	4b3b      	ldr	r3, [pc, #236]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	f003 0303 	and.w	r3, r3, #3
 800c600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d005      	beq.n	800c614 <HAL_RCC_GetSysClockFreq+0x34>
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b0c      	cmp	r3, #12
 800c60c:	d121      	bne.n	800c652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d11e      	bne.n	800c652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c614:	4b34      	ldr	r3, [pc, #208]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0308 	and.w	r3, r3, #8
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d107      	bne.n	800c630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c620:	4b31      	ldr	r3, [pc, #196]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c626:	0a1b      	lsrs	r3, r3, #8
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	61fb      	str	r3, [r7, #28]
 800c62e:	e005      	b.n	800c63c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c630:	4b2d      	ldr	r3, [pc, #180]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	091b      	lsrs	r3, r3, #4
 800c636:	f003 030f 	and.w	r3, r3, #15
 800c63a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c63c:	4a2b      	ldr	r2, [pc, #172]	@ (800c6ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10d      	bne.n	800c668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c650:	e00a      	b.n	800c668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	2b04      	cmp	r3, #4
 800c656:	d102      	bne.n	800c65e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c658:	4b25      	ldr	r3, [pc, #148]	@ (800c6f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800c65a:	61bb      	str	r3, [r7, #24]
 800c65c:	e004      	b.n	800c668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2b08      	cmp	r3, #8
 800c662:	d101      	bne.n	800c668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c664:	4b23      	ldr	r3, [pc, #140]	@ (800c6f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800c666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2b0c      	cmp	r3, #12
 800c66c:	d134      	bne.n	800c6d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c66e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	f003 0303 	and.w	r3, r3, #3
 800c676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d003      	beq.n	800c686 <HAL_RCC_GetSysClockFreq+0xa6>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2b03      	cmp	r3, #3
 800c682:	d003      	beq.n	800c68c <HAL_RCC_GetSysClockFreq+0xac>
 800c684:	e005      	b.n	800c692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c686:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800c688:	617b      	str	r3, [r7, #20]
      break;
 800c68a:	e005      	b.n	800c698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c68c:	4b19      	ldr	r3, [pc, #100]	@ (800c6f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800c68e:	617b      	str	r3, [r7, #20]
      break;
 800c690:	e002      	b.n	800c698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	617b      	str	r3, [r7, #20]
      break;
 800c696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c698:	4b13      	ldr	r3, [pc, #76]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	091b      	lsrs	r3, r3, #4
 800c69e:	f003 0307 	and.w	r3, r3, #7
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c6a6:	4b10      	ldr	r3, [pc, #64]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	0a1b      	lsrs	r3, r3, #8
 800c6ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	fb03 f202 	mul.w	r2, r3, r2
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c6be:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	0e5b      	lsrs	r3, r3, #25
 800c6c4:	f003 0303 	and.w	r3, r3, #3
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3724      	adds	r7, #36	@ 0x24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	40021000 	.word	0x40021000
 800c6ec:	08010398 	.word	0x08010398
 800c6f0:	00f42400 	.word	0x00f42400
 800c6f4:	007a1200 	.word	0x007a1200

0800c6f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c704:	4b2a      	ldr	r3, [pc, #168]	@ (800c7b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d003      	beq.n	800c718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c710:	f7ff f9ee 	bl	800baf0 <HAL_PWREx_GetVoltageRange>
 800c714:	6178      	str	r0, [r7, #20]
 800c716:	e014      	b.n	800c742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c718:	4b25      	ldr	r3, [pc, #148]	@ (800c7b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c71a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71c:	4a24      	ldr	r2, [pc, #144]	@ (800c7b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c71e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c722:	6593      	str	r3, [r2, #88]	@ 0x58
 800c724:	4b22      	ldr	r3, [pc, #136]	@ (800c7b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c730:	f7ff f9de 	bl	800baf0 <HAL_PWREx_GetVoltageRange>
 800c734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c736:	4b1e      	ldr	r3, [pc, #120]	@ (800c7b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c73a:	4a1d      	ldr	r2, [pc, #116]	@ (800c7b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c73c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c740:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c748:	d10b      	bne.n	800c762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b80      	cmp	r3, #128	@ 0x80
 800c74e:	d919      	bls.n	800c784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2ba0      	cmp	r3, #160	@ 0xa0
 800c754:	d902      	bls.n	800c75c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c756:	2302      	movs	r3, #2
 800c758:	613b      	str	r3, [r7, #16]
 800c75a:	e013      	b.n	800c784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c75c:	2301      	movs	r3, #1
 800c75e:	613b      	str	r3, [r7, #16]
 800c760:	e010      	b.n	800c784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2b80      	cmp	r3, #128	@ 0x80
 800c766:	d902      	bls.n	800c76e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c768:	2303      	movs	r3, #3
 800c76a:	613b      	str	r3, [r7, #16]
 800c76c:	e00a      	b.n	800c784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b80      	cmp	r3, #128	@ 0x80
 800c772:	d102      	bne.n	800c77a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c774:	2302      	movs	r3, #2
 800c776:	613b      	str	r3, [r7, #16]
 800c778:	e004      	b.n	800c784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b70      	cmp	r3, #112	@ 0x70
 800c77e:	d101      	bne.n	800c784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c780:	2301      	movs	r3, #1
 800c782:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c784:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f023 0207 	bic.w	r2, r3, #7
 800c78c:	4909      	ldr	r1, [pc, #36]	@ (800c7b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	4313      	orrs	r3, r2
 800c792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c794:	4b07      	ldr	r3, [pc, #28]	@ (800c7b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d001      	beq.n	800c7a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	40021000 	.word	0x40021000
 800c7b4:	40022000 	.word	0x40022000

0800c7b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d031      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c7dc:	d01a      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c7de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c7e2:	d814      	bhi.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d009      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c7e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7ec:	d10f      	bne.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c7ee:	4b5d      	ldr	r3, [pc, #372]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	4a5c      	ldr	r2, [pc, #368]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c7fa:	e00c      	b.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3304      	adds	r3, #4
 800c800:	2100      	movs	r1, #0
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f9ce 	bl	800cba4 <RCCEx_PLLSAI1_Config>
 800c808:	4603      	mov	r3, r0
 800c80a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c80c:	e003      	b.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	74fb      	strb	r3, [r7, #19]
      break;
 800c812:	e000      	b.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c814:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c816:	7cfb      	ldrb	r3, [r7, #19]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10b      	bne.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c81c:	4b51      	ldr	r3, [pc, #324]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c822:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c82a:	494e      	ldr	r1, [pc, #312]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800c832:	e001      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c834:	7cfb      	ldrb	r3, [r7, #19]
 800c836:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 809e 	beq.w	800c982 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c846:	2300      	movs	r3, #0
 800c848:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c84a:	4b46      	ldr	r3, [pc, #280]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c84c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c84e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d101      	bne.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c856:	2301      	movs	r3, #1
 800c858:	e000      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c85a:	2300      	movs	r3, #0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00d      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c860:	4b40      	ldr	r3, [pc, #256]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c864:	4a3f      	ldr	r2, [pc, #252]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c86a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c86c:	4b3d      	ldr	r3, [pc, #244]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c86e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c874:	60bb      	str	r3, [r7, #8]
 800c876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c878:	2301      	movs	r3, #1
 800c87a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c87c:	4b3a      	ldr	r3, [pc, #232]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a39      	ldr	r2, [pc, #228]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c888:	f7fc fbb4 	bl	8008ff4 <HAL_GetTick>
 800c88c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c88e:	e009      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c890:	f7fc fbb0 	bl	8008ff4 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d902      	bls.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	74fb      	strb	r3, [r7, #19]
        break;
 800c8a2:	e005      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c8a4:	4b30      	ldr	r3, [pc, #192]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d0ef      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c8b0:	7cfb      	ldrb	r3, [r7, #19]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d15a      	bne.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c8b6:	4b2b      	ldr	r3, [pc, #172]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d01e      	beq.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d019      	beq.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c8d2:	4b24      	ldr	r3, [pc, #144]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c8de:	4b21      	ldr	r3, [pc, #132]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8e4:	4a1f      	ldr	r2, [pc, #124]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c8f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c8fe:	4a19      	ldr	r2, [pc, #100]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f003 0301 	and.w	r3, r3, #1
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d016      	beq.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c910:	f7fc fb70 	bl	8008ff4 <HAL_GetTick>
 800c914:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c916:	e00b      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c918:	f7fc fb6c 	bl	8008ff4 <HAL_GetTick>
 800c91c:	4602      	mov	r2, r0
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c926:	4293      	cmp	r3, r2
 800c928:	d902      	bls.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	74fb      	strb	r3, [r7, #19]
            break;
 800c92e:	e006      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c930:	4b0c      	ldr	r3, [pc, #48]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c936:	f003 0302 	and.w	r3, r3, #2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0ec      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c93e:	7cfb      	ldrb	r3, [r7, #19]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10b      	bne.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c944:	4b07      	ldr	r3, [pc, #28]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c94a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c952:	4904      	ldr	r1, [pc, #16]	@ (800c964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c954:	4313      	orrs	r3, r2
 800c956:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c95a:	e009      	b.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c95c:	7cfb      	ldrb	r3, [r7, #19]
 800c95e:	74bb      	strb	r3, [r7, #18]
 800c960:	e006      	b.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c962:	bf00      	nop
 800c964:	40021000 	.word	0x40021000
 800c968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c96c:	7cfb      	ldrb	r3, [r7, #19]
 800c96e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c970:	7c7b      	ldrb	r3, [r7, #17]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d105      	bne.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c976:	4b8a      	ldr	r3, [pc, #552]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c97a:	4a89      	ldr	r2, [pc, #548]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c97c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c980:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c98e:	4b84      	ldr	r3, [pc, #528]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c994:	f023 0203 	bic.w	r2, r3, #3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	4980      	ldr	r1, [pc, #512]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00a      	beq.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c9b0:	4b7b      	ldr	r3, [pc, #492]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9b6:	f023 020c 	bic.w	r2, r3, #12
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9be:	4978      	ldr	r1, [pc, #480]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0320 	and.w	r3, r3, #32
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00a      	beq.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c9d2:	4b73      	ldr	r3, [pc, #460]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e0:	496f      	ldr	r1, [pc, #444]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00a      	beq.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c9f4:	4b6a      	ldr	r3, [pc, #424]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9fa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca02:	4967      	ldr	r1, [pc, #412]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca04:	4313      	orrs	r3, r2
 800ca06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ca16:	4b62      	ldr	r3, [pc, #392]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca1c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca24:	495e      	ldr	r1, [pc, #376]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca26:	4313      	orrs	r3, r2
 800ca28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00a      	beq.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ca38:	4b59      	ldr	r3, [pc, #356]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca46:	4956      	ldr	r1, [pc, #344]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00a      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ca5a:	4b51      	ldr	r3, [pc, #324]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca68:	494d      	ldr	r1, [pc, #308]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d028      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca7c:	4b48      	ldr	r3, [pc, #288]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca8a:	4945      	ldr	r1, [pc, #276]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca9a:	d106      	bne.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ca9c:	4b40      	ldr	r3, [pc, #256]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4a3f      	ldr	r2, [pc, #252]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800caa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800caa6:	60d3      	str	r3, [r2, #12]
 800caa8:	e011      	b.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cab2:	d10c      	bne.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3304      	adds	r3, #4
 800cab8:	2101      	movs	r1, #1
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 f872 	bl	800cba4 <RCCEx_PLLSAI1_Config>
 800cac0:	4603      	mov	r3, r0
 800cac2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cac4:	7cfb      	ldrb	r3, [r7, #19]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800caca:	7cfb      	ldrb	r3, [r7, #19]
 800cacc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d028      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cada:	4b31      	ldr	r3, [pc, #196]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae8:	492d      	ldr	r1, [pc, #180]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800caea:	4313      	orrs	r3, r2
 800caec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800caf8:	d106      	bne.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cafa:	4b29      	ldr	r3, [pc, #164]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	4a28      	ldr	r2, [pc, #160]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb04:	60d3      	str	r3, [r2, #12]
 800cb06:	e011      	b.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb10:	d10c      	bne.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	3304      	adds	r3, #4
 800cb16:	2101      	movs	r1, #1
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 f843 	bl	800cba4 <RCCEx_PLLSAI1_Config>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cb22:	7cfb      	ldrb	r3, [r7, #19]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d001      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800cb28:	7cfb      	ldrb	r3, [r7, #19]
 800cb2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d01c      	beq.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cb38:	4b19      	ldr	r3, [pc, #100]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb46:	4916      	ldr	r1, [pc, #88]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb56:	d10c      	bne.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	2102      	movs	r1, #2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 f820 	bl	800cba4 <RCCEx_PLLSAI1_Config>
 800cb64:	4603      	mov	r3, r0
 800cb66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cb68:	7cfb      	ldrb	r3, [r7, #19]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800cb6e:	7cfb      	ldrb	r3, [r7, #19]
 800cb70:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb7e:	4b08      	ldr	r3, [pc, #32]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb8c:	4904      	ldr	r1, [pc, #16]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cb94:	7cbb      	ldrb	r3, [r7, #18]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	40021000 	.word	0x40021000

0800cba4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cbb2:	4b74      	ldr	r3, [pc, #464]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	f003 0303 	and.w	r3, r3, #3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d018      	beq.n	800cbf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cbbe:	4b71      	ldr	r3, [pc, #452]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	f003 0203 	and.w	r2, r3, #3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d10d      	bne.n	800cbea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
       ||
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d009      	beq.n	800cbea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cbd6:	4b6b      	ldr	r3, [pc, #428]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	091b      	lsrs	r3, r3, #4
 800cbdc:	f003 0307 	and.w	r3, r3, #7
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
       ||
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d047      	beq.n	800cc7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	73fb      	strb	r3, [r7, #15]
 800cbee:	e044      	b.n	800cc7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d018      	beq.n	800cc2a <RCCEx_PLLSAI1_Config+0x86>
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d825      	bhi.n	800cc48 <RCCEx_PLLSAI1_Config+0xa4>
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d002      	beq.n	800cc06 <RCCEx_PLLSAI1_Config+0x62>
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d009      	beq.n	800cc18 <RCCEx_PLLSAI1_Config+0x74>
 800cc04:	e020      	b.n	800cc48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cc06:	4b5f      	ldr	r3, [pc, #380]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 0302 	and.w	r3, r3, #2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d11d      	bne.n	800cc4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc16:	e01a      	b.n	800cc4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cc18:	4b5a      	ldr	r3, [pc, #360]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d116      	bne.n	800cc52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc28:	e013      	b.n	800cc52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cc2a:	4b56      	ldr	r3, [pc, #344]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10f      	bne.n	800cc56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cc36:	4b53      	ldr	r3, [pc, #332]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d109      	bne.n	800cc56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc46:	e006      	b.n	800cc56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc4c:	e004      	b.n	800cc58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc4e:	bf00      	nop
 800cc50:	e002      	b.n	800cc58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc52:	bf00      	nop
 800cc54:	e000      	b.n	800cc58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cc56:	bf00      	nop
    }

    if(status == HAL_OK)
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10d      	bne.n	800cc7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cc5e:	4b49      	ldr	r3, [pc, #292]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6819      	ldr	r1, [r3, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	011b      	lsls	r3, r3, #4
 800cc72:	430b      	orrs	r3, r1
 800cc74:	4943      	ldr	r1, [pc, #268]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc76:	4313      	orrs	r3, r2
 800cc78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d17c      	bne.n	800cd7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc80:	4b40      	ldr	r3, [pc, #256]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a3f      	ldr	r2, [pc, #252]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc8c:	f7fc f9b2 	bl	8008ff4 <HAL_GetTick>
 800cc90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc92:	e009      	b.n	800cca8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cc94:	f7fc f9ae 	bl	8008ff4 <HAL_GetTick>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	d902      	bls.n	800cca8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cca2:	2303      	movs	r3, #3
 800cca4:	73fb      	strb	r3, [r7, #15]
        break;
 800cca6:	e005      	b.n	800ccb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cca8:	4b36      	ldr	r3, [pc, #216]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1ef      	bne.n	800cc94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d15f      	bne.n	800cd7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d110      	bne.n	800cce2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ccc0:	4b30      	ldr	r3, [pc, #192]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800ccc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	6892      	ldr	r2, [r2, #8]
 800ccd0:	0211      	lsls	r1, r2, #8
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	68d2      	ldr	r2, [r2, #12]
 800ccd6:	06d2      	lsls	r2, r2, #27
 800ccd8:	430a      	orrs	r2, r1
 800ccda:	492a      	ldr	r1, [pc, #168]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	610b      	str	r3, [r1, #16]
 800cce0:	e027      	b.n	800cd32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d112      	bne.n	800cd0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cce8:	4b26      	ldr	r3, [pc, #152]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800ccf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	6892      	ldr	r2, [r2, #8]
 800ccf8:	0211      	lsls	r1, r2, #8
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	6912      	ldr	r2, [r2, #16]
 800ccfe:	0852      	lsrs	r2, r2, #1
 800cd00:	3a01      	subs	r2, #1
 800cd02:	0552      	lsls	r2, r2, #21
 800cd04:	430a      	orrs	r2, r1
 800cd06:	491f      	ldr	r1, [pc, #124]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	610b      	str	r3, [r1, #16]
 800cd0c:	e011      	b.n	800cd32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cd0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800cd16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	6892      	ldr	r2, [r2, #8]
 800cd1e:	0211      	lsls	r1, r2, #8
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	6952      	ldr	r2, [r2, #20]
 800cd24:	0852      	lsrs	r2, r2, #1
 800cd26:	3a01      	subs	r2, #1
 800cd28:	0652      	lsls	r2, r2, #25
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	4915      	ldr	r1, [pc, #84]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cd32:	4b14      	ldr	r3, [pc, #80]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a13      	ldr	r2, [pc, #76]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd3e:	f7fc f959 	bl	8008ff4 <HAL_GetTick>
 800cd42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd44:	e009      	b.n	800cd5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd46:	f7fc f955 	bl	8008ff4 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d902      	bls.n	800cd5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cd54:	2303      	movs	r3, #3
 800cd56:	73fb      	strb	r3, [r7, #15]
          break;
 800cd58:	e005      	b.n	800cd66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cd5a:	4b0a      	ldr	r3, [pc, #40]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d0ef      	beq.n	800cd46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cd6c:	4b05      	ldr	r3, [pc, #20]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd6e:	691a      	ldr	r2, [r3, #16]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	4903      	ldr	r1, [pc, #12]	@ (800cd84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd76:	4313      	orrs	r3, r2
 800cd78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	40021000 	.word	0x40021000

0800cd88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e095      	b.n	800cec6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d108      	bne.n	800cdb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cdaa:	d009      	beq.n	800cdc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	61da      	str	r2, [r3, #28]
 800cdb2:	e005      	b.n	800cdc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d106      	bne.n	800cde0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7f9 fa76 	bl	80062cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce00:	d902      	bls.n	800ce08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ce02:	2300      	movs	r3, #0
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e002      	b.n	800ce0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ce08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ce16:	d007      	beq.n	800ce28 <HAL_SPI_Init+0xa0>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce20:	d002      	beq.n	800ce28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ce38:	431a      	orrs	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	431a      	orrs	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	699b      	ldr	r3, [r3, #24]
 800ce52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce60:	431a      	orrs	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce6a:	ea42 0103 	orr.w	r1, r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	0c1b      	lsrs	r3, r3, #16
 800ce84:	f003 0204 	and.w	r2, r3, #4
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8c:	f003 0310 	and.w	r3, r3, #16
 800ce90:	431a      	orrs	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce96:	f003 0308 	and.w	r3, r3, #8
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cea4:	ea42 0103 	orr.w	r1, r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b08a      	sub	sp, #40	@ 0x28
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	60f8      	str	r0, [r7, #12]
 800ced6:	60b9      	str	r1, [r7, #8]
 800ced8:	607a      	str	r2, [r7, #4]
 800ceda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cedc:	2301      	movs	r3, #1
 800cede:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cee0:	f7fc f888 	bl	8008ff4 <HAL_GetTick>
 800cee4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ceec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800cef4:	887b      	ldrh	r3, [r7, #2]
 800cef6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800cef8:	887b      	ldrh	r3, [r7, #2]
 800cefa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cefc:	7ffb      	ldrb	r3, [r7, #31]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d00c      	beq.n	800cf1c <HAL_SPI_TransmitReceive+0x4e>
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf08:	d106      	bne.n	800cf18 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d102      	bne.n	800cf18 <HAL_SPI_TransmitReceive+0x4a>
 800cf12:	7ffb      	ldrb	r3, [r7, #31]
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d001      	beq.n	800cf1c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e1f3      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d005      	beq.n	800cf2e <HAL_SPI_TransmitReceive+0x60>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <HAL_SPI_TransmitReceive+0x60>
 800cf28:	887b      	ldrh	r3, [r7, #2]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e1e8      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d101      	bne.n	800cf40 <HAL_SPI_TransmitReceive+0x72>
 800cf3c:	2302      	movs	r3, #2
 800cf3e:	e1e1      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	d003      	beq.n	800cf5c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2205      	movs	r2, #5
 800cf58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	887a      	ldrh	r2, [r7, #2]
 800cf6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	887a      	ldrh	r2, [r7, #2]
 800cf74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	887a      	ldrh	r2, [r7, #2]
 800cf82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	887a      	ldrh	r2, [r7, #2]
 800cf88:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cf9e:	d802      	bhi.n	800cfa6 <HAL_SPI_TransmitReceive+0xd8>
 800cfa0:	8abb      	ldrh	r3, [r7, #20]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d908      	bls.n	800cfb8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cfb4:	605a      	str	r2, [r3, #4]
 800cfb6:	e007      	b.n	800cfc8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cfc6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfd2:	2b40      	cmp	r3, #64	@ 0x40
 800cfd4:	d007      	beq.n	800cfe6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cfee:	f240 8083 	bls.w	800d0f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <HAL_SPI_TransmitReceive+0x132>
 800cffa:	8afb      	ldrh	r3, [r7, #22]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d16f      	bne.n	800d0e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d004:	881a      	ldrh	r2, [r3, #0]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d010:	1c9a      	adds	r2, r3, #2
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	3b01      	subs	r3, #1
 800d01e:	b29a      	uxth	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d024:	e05c      	b.n	800d0e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	f003 0302 	and.w	r3, r3, #2
 800d030:	2b02      	cmp	r3, #2
 800d032:	d11b      	bne.n	800d06c <HAL_SPI_TransmitReceive+0x19e>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d038:	b29b      	uxth	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d016      	beq.n	800d06c <HAL_SPI_TransmitReceive+0x19e>
 800d03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d040:	2b01      	cmp	r3, #1
 800d042:	d113      	bne.n	800d06c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d048:	881a      	ldrh	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d054:	1c9a      	adds	r2, r3, #2
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d05e:	b29b      	uxth	r3, r3
 800d060:	3b01      	subs	r3, #1
 800d062:	b29a      	uxth	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b01      	cmp	r3, #1
 800d078:	d11c      	bne.n	800d0b4 <HAL_SPI_TransmitReceive+0x1e6>
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d080:	b29b      	uxth	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d016      	beq.n	800d0b4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	68da      	ldr	r2, [r3, #12]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d090:	b292      	uxth	r2, r2
 800d092:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d098:	1c9a      	adds	r2, r3, #2
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d0b4:	f7fb ff9e 	bl	8008ff4 <HAL_GetTick>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d80d      	bhi.n	800d0e0 <HAL_SPI_TransmitReceive+0x212>
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ca:	d009      	beq.n	800d0e0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e111      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d19d      	bne.n	800d026 <HAL_SPI_TransmitReceive+0x158>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d197      	bne.n	800d026 <HAL_SPI_TransmitReceive+0x158>
 800d0f6:	e0e5      	b.n	800d2c4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d003      	beq.n	800d108 <HAL_SPI_TransmitReceive+0x23a>
 800d100:	8afb      	ldrh	r3, [r7, #22]
 800d102:	2b01      	cmp	r3, #1
 800d104:	f040 80d1 	bne.w	800d2aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d912      	bls.n	800d138 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d116:	881a      	ldrh	r2, [r3, #0]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d122:	1c9a      	adds	r2, r3, #2
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	3b02      	subs	r3, #2
 800d130:	b29a      	uxth	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d136:	e0b8      	b.n	800d2aa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	330c      	adds	r3, #12
 800d142:	7812      	ldrb	r2, [r2, #0]
 800d144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14a:	1c5a      	adds	r2, r3, #1
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d154:	b29b      	uxth	r3, r3
 800d156:	3b01      	subs	r3, #1
 800d158:	b29a      	uxth	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d15e:	e0a4      	b.n	800d2aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f003 0302 	and.w	r3, r3, #2
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d134      	bne.n	800d1d8 <HAL_SPI_TransmitReceive+0x30a>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d172:	b29b      	uxth	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d02f      	beq.n	800d1d8 <HAL_SPI_TransmitReceive+0x30a>
 800d178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d12c      	bne.n	800d1d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d182:	b29b      	uxth	r3, r3
 800d184:	2b01      	cmp	r3, #1
 800d186:	d912      	bls.n	800d1ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d18c:	881a      	ldrh	r2, [r3, #0]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d198:	1c9a      	adds	r2, r3, #2
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	3b02      	subs	r3, #2
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d1ac:	e012      	b.n	800d1d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	330c      	adds	r3, #12
 800d1b8:	7812      	ldrb	r2, [r2, #0]
 800d1ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1c0:	1c5a      	adds	r2, r3, #1
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d148      	bne.n	800d278 <HAL_SPI_TransmitReceive+0x3aa>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d042      	beq.n	800d278 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d923      	bls.n	800d246 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68da      	ldr	r2, [r3, #12]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d208:	b292      	uxth	r2, r2
 800d20a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d210:	1c9a      	adds	r2, r3, #2
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	3b02      	subs	r3, #2
 800d220:	b29a      	uxth	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d22e:	b29b      	uxth	r3, r3
 800d230:	2b01      	cmp	r3, #1
 800d232:	d81f      	bhi.n	800d274 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d242:	605a      	str	r2, [r3, #4]
 800d244:	e016      	b.n	800d274 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f103 020c 	add.w	r2, r3, #12
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d252:	7812      	ldrb	r2, [r2, #0]
 800d254:	b2d2      	uxtb	r2, r2
 800d256:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3b01      	subs	r3, #1
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d274:	2301      	movs	r3, #1
 800d276:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d278:	f7fb febc 	bl	8008ff4 <HAL_GetTick>
 800d27c:	4602      	mov	r2, r0
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d284:	429a      	cmp	r2, r3
 800d286:	d803      	bhi.n	800d290 <HAL_SPI_TransmitReceive+0x3c2>
 800d288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d102      	bne.n	800d296 <HAL_SPI_TransmitReceive+0x3c8>
 800d290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d292:	2b00      	cmp	r3, #0
 800d294:	d109      	bne.n	800d2aa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e02c      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f47f af55 	bne.w	800d160 <HAL_SPI_TransmitReceive+0x292>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f47f af4e 	bne.w	800d160 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2c4:	6a3a      	ldr	r2, [r7, #32]
 800d2c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d2c8:	68f8      	ldr	r0, [r7, #12]
 800d2ca:	f000 fa51 	bl	800d770 <SPI_EndRxTxTransaction>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d008      	beq.n	800d2e6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2220      	movs	r2, #32
 800d2d8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e00e      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d302:	2300      	movs	r3, #0
  }
}
 800d304:	4618      	mov	r0, r3
 800d306:	3728      	adds	r7, #40	@ 0x28
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10e      	bne.n	800d34c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d334:	2b00      	cmp	r3, #0
 800d336:	d009      	beq.n	800d34c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d004      	beq.n	800d34c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	4798      	blx	r3
    return;
 800d34a:	e0ce      	b.n	800d4ea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	f003 0302 	and.w	r3, r3, #2
 800d352:	2b00      	cmp	r3, #0
 800d354:	d009      	beq.n	800d36a <HAL_SPI_IRQHandler+0x5e>
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d004      	beq.n	800d36a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	4798      	blx	r3
    return;
 800d368:	e0bf      	b.n	800d4ea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	f003 0320 	and.w	r3, r3, #32
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <HAL_SPI_IRQHandler+0x7e>
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d105      	bne.n	800d38a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 80b0 	beq.w	800d4ea <HAL_SPI_IRQHandler+0x1de>
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	f003 0320 	and.w	r3, r3, #32
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 80aa 	beq.w	800d4ea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d023      	beq.n	800d3e8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b03      	cmp	r3, #3
 800d3aa:	d011      	beq.n	800d3d0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3b0:	f043 0204 	orr.w	r2, r3, #4
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	617b      	str	r3, [r7, #20]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	617b      	str	r3, [r7, #20]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	617b      	str	r3, [r7, #20]
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	e00b      	b.n	800d3e8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	613b      	str	r3, [r7, #16]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	613b      	str	r3, [r7, #16]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	613b      	str	r3, [r7, #16]
 800d3e4:	693b      	ldr	r3, [r7, #16]
        return;
 800d3e6:	e080      	b.n	800d4ea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	f003 0320 	and.w	r3, r3, #32
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d014      	beq.n	800d41c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3f6:	f043 0201 	orr.w	r2, r3, #1
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00c      	beq.n	800d440 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d42a:	f043 0208 	orr.w	r2, r3, #8
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d432:	2300      	movs	r3, #0
 800d434:	60bb      	str	r3, [r7, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	60bb      	str	r3, [r7, #8]
 800d43e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d444:	2b00      	cmp	r3, #0
 800d446:	d04f      	beq.n	800d4e8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	685a      	ldr	r2, [r3, #4]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d456:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	f003 0302 	and.w	r3, r3, #2
 800d466:	2b00      	cmp	r3, #0
 800d468:	d104      	bne.n	800d474 <HAL_SPI_IRQHandler+0x168>
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	d034      	beq.n	800d4de <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f022 0203 	bic.w	r2, r2, #3
 800d482:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d011      	beq.n	800d4b0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d490:	4a17      	ldr	r2, [pc, #92]	@ (800d4f0 <HAL_SPI_IRQHandler+0x1e4>)
 800d492:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fd fa3e 	bl	800a91a <HAL_DMA_Abort_IT>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d016      	beq.n	800d4e6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4bc:	4a0c      	ldr	r2, [pc, #48]	@ (800d4f0 <HAL_SPI_IRQHandler+0x1e4>)
 800d4be:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fd fa28 	bl	800a91a <HAL_DMA_Abort_IT>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00a      	beq.n	800d4e6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800d4dc:	e003      	b.n	800d4e6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f808 	bl	800d4f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d4e4:	e000      	b.n	800d4e8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d4e6:	bf00      	nop
    return;
 800d4e8:	bf00      	nop
  }
}
 800d4ea:	3720      	adds	r7, #32
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	0800d509 	.word	0x0800d509

0800d4f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d514:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2200      	movs	r2, #0
 800d51a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff ffe5 	bl	800d4f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
	...

0800d534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	4613      	mov	r3, r2
 800d542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d544:	f7fb fd56 	bl	8008ff4 <HAL_GetTick>
 800d548:	4602      	mov	r2, r0
 800d54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	4413      	add	r3, r2
 800d552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d554:	f7fb fd4e 	bl	8008ff4 <HAL_GetTick>
 800d558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d55a:	4b39      	ldr	r3, [pc, #228]	@ (800d640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	015b      	lsls	r3, r3, #5
 800d560:	0d1b      	lsrs	r3, r3, #20
 800d562:	69fa      	ldr	r2, [r7, #28]
 800d564:	fb02 f303 	mul.w	r3, r2, r3
 800d568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d56a:	e054      	b.n	800d616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d572:	d050      	beq.n	800d616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d574:	f7fb fd3e 	bl	8008ff4 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	429a      	cmp	r2, r3
 800d582:	d902      	bls.n	800d58a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d13d      	bne.n	800d606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	685a      	ldr	r2, [r3, #4]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d5a2:	d111      	bne.n	800d5c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5ac:	d004      	beq.n	800d5b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5b6:	d107      	bne.n	800d5c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d5c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5d0:	d10f      	bne.n	800d5f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d5f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d602:	2303      	movs	r3, #3
 800d604:	e017      	b.n	800d636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d101      	bne.n	800d610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	3b01      	subs	r3, #1
 800d614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	689a      	ldr	r2, [r3, #8]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	4013      	ands	r3, r2
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	429a      	cmp	r2, r3
 800d624:	bf0c      	ite	eq
 800d626:	2301      	moveq	r3, #1
 800d628:	2300      	movne	r3, #0
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	461a      	mov	r2, r3
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	429a      	cmp	r2, r3
 800d632:	d19b      	bne.n	800d56c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3720      	adds	r7, #32
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20000000 	.word	0x20000000

0800d644 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08a      	sub	sp, #40	@ 0x28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d656:	f7fb fccd 	bl	8008ff4 <HAL_GetTick>
 800d65a:	4602      	mov	r2, r0
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	4413      	add	r3, r2
 800d664:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d666:	f7fb fcc5 	bl	8008ff4 <HAL_GetTick>
 800d66a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	330c      	adds	r3, #12
 800d672:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d674:	4b3d      	ldr	r3, [pc, #244]	@ (800d76c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	00da      	lsls	r2, r3, #3
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	0d1b      	lsrs	r3, r3, #20
 800d684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d686:	fb02 f303 	mul.w	r3, r2, r3
 800d68a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d68c:	e060      	b.n	800d750 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d694:	d107      	bne.n	800d6a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ac:	d050      	beq.n	800d750 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d6ae:	f7fb fca1 	bl	8008ff4 <HAL_GetTick>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d902      	bls.n	800d6c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d13d      	bne.n	800d740 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	685a      	ldr	r2, [r3, #4]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d6d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6dc:	d111      	bne.n	800d702 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6e6:	d004      	beq.n	800d6f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6f0:	d107      	bne.n	800d702 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d700:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d70a:	d10f      	bne.n	800d72c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d72a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e010      	b.n	800d762 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d746:	2300      	movs	r3, #0
 800d748:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	689a      	ldr	r2, [r3, #8]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	4013      	ands	r3, r2
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d196      	bne.n	800d68e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3728      	adds	r7, #40	@ 0x28
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20000000 	.word	0x20000000

0800d770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af02      	add	r7, sp, #8
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2200      	movs	r2, #0
 800d784:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff ff5b 	bl	800d644 <SPI_WaitFifoStateUntilTimeout>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d007      	beq.n	800d7a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d798:	f043 0220 	orr.w	r2, r3, #32
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e027      	b.n	800d7f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2180      	movs	r1, #128	@ 0x80
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7ff fec0 	bl	800d534 <SPI_WaitFlagStateUntilTimeout>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d007      	beq.n	800d7ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7be:	f043 0220 	orr.w	r2, r3, #32
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	e014      	b.n	800d7f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff ff34 	bl	800d644 <SPI_WaitFifoStateUntilTimeout>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d007      	beq.n	800d7f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7e6:	f043 0220 	orr.w	r2, r3, #32
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e000      	b.n	800d7f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d101      	bne.n	800d80e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e049      	b.n	800d8a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7f8 ff6c 	bl	8006700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2202      	movs	r2, #2
 800d82c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3304      	adds	r3, #4
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	f000 f9ba 	bl	800dbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d001      	beq.n	800d8c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e03b      	b.n	800d93c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f042 0201 	orr.w	r2, r2, #1
 800d8da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a19      	ldr	r2, [pc, #100]	@ (800d948 <HAL_TIM_Base_Start_IT+0x9c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d009      	beq.n	800d8fa <HAL_TIM_Base_Start_IT+0x4e>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8ee:	d004      	beq.n	800d8fa <HAL_TIM_Base_Start_IT+0x4e>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a15      	ldr	r2, [pc, #84]	@ (800d94c <HAL_TIM_Base_Start_IT+0xa0>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d115      	bne.n	800d926 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689a      	ldr	r2, [r3, #8]
 800d900:	4b13      	ldr	r3, [pc, #76]	@ (800d950 <HAL_TIM_Base_Start_IT+0xa4>)
 800d902:	4013      	ands	r3, r2
 800d904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b06      	cmp	r3, #6
 800d90a:	d015      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x8c>
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d912:	d011      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0201 	orr.w	r2, r2, #1
 800d922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d924:	e008      	b.n	800d938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f042 0201 	orr.w	r2, r2, #1
 800d934:	601a      	str	r2, [r3, #0]
 800d936:	e000      	b.n	800d93a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	40012c00 	.word	0x40012c00
 800d94c:	40014000 	.word	0x40014000
 800d950:	00010007 	.word	0x00010007

0800d954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	f003 0302 	and.w	r3, r3, #2
 800d972:	2b00      	cmp	r3, #0
 800d974:	d020      	beq.n	800d9b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f003 0302 	and.w	r3, r3, #2
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d01b      	beq.n	800d9b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f06f 0202 	mvn.w	r2, #2
 800d988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2201      	movs	r2, #1
 800d98e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	f003 0303 	and.w	r3, r3, #3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f8e9 	bl	800db76 <HAL_TIM_IC_CaptureCallback>
 800d9a4:	e005      	b.n	800d9b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f8db 	bl	800db62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f8ec 	bl	800db8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	f003 0304 	and.w	r3, r3, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d020      	beq.n	800da04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d01b      	beq.n	800da04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f06f 0204 	mvn.w	r2, #4
 800d9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2202      	movs	r2, #2
 800d9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f8c3 	bl	800db76 <HAL_TIM_IC_CaptureCallback>
 800d9f0:	e005      	b.n	800d9fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f8b5 	bl	800db62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f8c6 	bl	800db8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	f003 0308 	and.w	r3, r3, #8
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d020      	beq.n	800da50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f003 0308 	and.w	r3, r3, #8
 800da14:	2b00      	cmp	r3, #0
 800da16:	d01b      	beq.n	800da50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f06f 0208 	mvn.w	r2, #8
 800da20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2204      	movs	r2, #4
 800da26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	69db      	ldr	r3, [r3, #28]
 800da2e:	f003 0303 	and.w	r3, r3, #3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f89d 	bl	800db76 <HAL_TIM_IC_CaptureCallback>
 800da3c:	e005      	b.n	800da4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f88f 	bl	800db62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f8a0 	bl	800db8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	f003 0310 	and.w	r3, r3, #16
 800da56:	2b00      	cmp	r3, #0
 800da58:	d020      	beq.n	800da9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f003 0310 	and.w	r3, r3, #16
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01b      	beq.n	800da9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f06f 0210 	mvn.w	r2, #16
 800da6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2208      	movs	r2, #8
 800da72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	69db      	ldr	r3, [r3, #28]
 800da7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d003      	beq.n	800da8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f877 	bl	800db76 <HAL_TIM_IC_CaptureCallback>
 800da88:	e005      	b.n	800da96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f869 	bl	800db62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f87a 	bl	800db8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00c      	beq.n	800dac0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f003 0301 	and.w	r3, r3, #1
 800daac:	2b00      	cmp	r3, #0
 800daae:	d007      	beq.n	800dac0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f06f 0201 	mvn.w	r2, #1
 800dab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7f4 fa38 	bl	8001f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d104      	bne.n	800dad4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00c      	beq.n	800daee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d007      	beq.n	800daee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f943 	bl	800dd74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00c      	beq.n	800db12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d007      	beq.n	800db12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800db0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f93b 	bl	800dd88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00c      	beq.n	800db36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db22:	2b00      	cmp	r3, #0
 800db24:	d007      	beq.n	800db36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800db2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f834 	bl	800db9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f003 0320 	and.w	r3, r3, #32
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00c      	beq.n	800db5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b00      	cmp	r3, #0
 800db48:	d007      	beq.n	800db5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f06f 0220 	mvn.w	r2, #32
 800db52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f903 	bl	800dd60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db5a:	bf00      	nop
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db6a:	bf00      	nop
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b083      	sub	sp, #12
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db92:	bf00      	nop
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dba6:	bf00      	nop
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
	...

0800dbb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a30      	ldr	r2, [pc, #192]	@ (800dc88 <TIM_Base_SetConfig+0xd4>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d003      	beq.n	800dbd4 <TIM_Base_SetConfig+0x20>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbd2:	d108      	bne.n	800dbe6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a27      	ldr	r2, [pc, #156]	@ (800dc88 <TIM_Base_SetConfig+0xd4>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d00b      	beq.n	800dc06 <TIM_Base_SetConfig+0x52>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbf4:	d007      	beq.n	800dc06 <TIM_Base_SetConfig+0x52>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a24      	ldr	r2, [pc, #144]	@ (800dc8c <TIM_Base_SetConfig+0xd8>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d003      	beq.n	800dc06 <TIM_Base_SetConfig+0x52>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a23      	ldr	r2, [pc, #140]	@ (800dc90 <TIM_Base_SetConfig+0xdc>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d108      	bne.n	800dc18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	689a      	ldr	r2, [r3, #8]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a12      	ldr	r2, [pc, #72]	@ (800dc88 <TIM_Base_SetConfig+0xd4>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d007      	beq.n	800dc54 <TIM_Base_SetConfig+0xa0>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a11      	ldr	r2, [pc, #68]	@ (800dc8c <TIM_Base_SetConfig+0xd8>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d003      	beq.n	800dc54 <TIM_Base_SetConfig+0xa0>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a10      	ldr	r2, [pc, #64]	@ (800dc90 <TIM_Base_SetConfig+0xdc>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d103      	bne.n	800dc5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	691a      	ldr	r2, [r3, #16]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d105      	bne.n	800dc7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	f023 0201 	bic.w	r2, r3, #1
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	611a      	str	r2, [r3, #16]
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	3714      	adds	r7, #20
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	40012c00 	.word	0x40012c00
 800dc8c:	40014000 	.word	0x40014000
 800dc90:	40014400 	.word	0x40014400

0800dc94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d101      	bne.n	800dcac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dca8:	2302      	movs	r3, #2
 800dcaa:	e04f      	b.n	800dd4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a21      	ldr	r2, [pc, #132]	@ (800dd58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d108      	bne.n	800dce8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dcdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a14      	ldr	r2, [pc, #80]	@ (800dd58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d009      	beq.n	800dd20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd14:	d004      	beq.n	800dd20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a10      	ldr	r2, [pc, #64]	@ (800dd5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d10c      	bne.n	800dd3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	40012c00 	.word	0x40012c00
 800dd5c:	40014000 	.word	0x40014000

0800dd60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <__assert_func>:
 800dd9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd9e:	4614      	mov	r4, r2
 800dda0:	461a      	mov	r2, r3
 800dda2:	4b09      	ldr	r3, [pc, #36]	@ (800ddc8 <__assert_func+0x2c>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4605      	mov	r5, r0
 800dda8:	68d8      	ldr	r0, [r3, #12]
 800ddaa:	b954      	cbnz	r4, 800ddc2 <__assert_func+0x26>
 800ddac:	4b07      	ldr	r3, [pc, #28]	@ (800ddcc <__assert_func+0x30>)
 800ddae:	461c      	mov	r4, r3
 800ddb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddb4:	9100      	str	r1, [sp, #0]
 800ddb6:	462b      	mov	r3, r5
 800ddb8:	4905      	ldr	r1, [pc, #20]	@ (800ddd0 <__assert_func+0x34>)
 800ddba:	f000 f8b1 	bl	800df20 <fiprintf>
 800ddbe:	f000 f9ac 	bl	800e11a <abort>
 800ddc2:	4b04      	ldr	r3, [pc, #16]	@ (800ddd4 <__assert_func+0x38>)
 800ddc4:	e7f4      	b.n	800ddb0 <__assert_func+0x14>
 800ddc6:	bf00      	nop
 800ddc8:	2000002c 	.word	0x2000002c
 800ddcc:	08010403 	.word	0x08010403
 800ddd0:	080103d5 	.word	0x080103d5
 800ddd4:	080103c8 	.word	0x080103c8

0800ddd8 <std>:
 800ddd8:	2300      	movs	r3, #0
 800ddda:	b510      	push	{r4, lr}
 800dddc:	4604      	mov	r4, r0
 800ddde:	e9c0 3300 	strd	r3, r3, [r0]
 800dde2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dde6:	6083      	str	r3, [r0, #8]
 800dde8:	8181      	strh	r1, [r0, #12]
 800ddea:	6643      	str	r3, [r0, #100]	@ 0x64
 800ddec:	81c2      	strh	r2, [r0, #14]
 800ddee:	6183      	str	r3, [r0, #24]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	2208      	movs	r2, #8
 800ddf4:	305c      	adds	r0, #92	@ 0x5c
 800ddf6:	f000 f906 	bl	800e006 <memset>
 800ddfa:	4b0d      	ldr	r3, [pc, #52]	@ (800de30 <std+0x58>)
 800ddfc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ddfe:	4b0d      	ldr	r3, [pc, #52]	@ (800de34 <std+0x5c>)
 800de00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de02:	4b0d      	ldr	r3, [pc, #52]	@ (800de38 <std+0x60>)
 800de04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de06:	4b0d      	ldr	r3, [pc, #52]	@ (800de3c <std+0x64>)
 800de08:	6323      	str	r3, [r4, #48]	@ 0x30
 800de0a:	4b0d      	ldr	r3, [pc, #52]	@ (800de40 <std+0x68>)
 800de0c:	6224      	str	r4, [r4, #32]
 800de0e:	429c      	cmp	r4, r3
 800de10:	d006      	beq.n	800de20 <std+0x48>
 800de12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de16:	4294      	cmp	r4, r2
 800de18:	d002      	beq.n	800de20 <std+0x48>
 800de1a:	33d0      	adds	r3, #208	@ 0xd0
 800de1c:	429c      	cmp	r4, r3
 800de1e:	d105      	bne.n	800de2c <std+0x54>
 800de20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de28:	f000 b966 	b.w	800e0f8 <__retarget_lock_init_recursive>
 800de2c:	bd10      	pop	{r4, pc}
 800de2e:	bf00      	nop
 800de30:	0800df81 	.word	0x0800df81
 800de34:	0800dfa3 	.word	0x0800dfa3
 800de38:	0800dfdb 	.word	0x0800dfdb
 800de3c:	0800dfff 	.word	0x0800dfff
 800de40:	20000614 	.word	0x20000614

0800de44 <stdio_exit_handler>:
 800de44:	4a02      	ldr	r2, [pc, #8]	@ (800de50 <stdio_exit_handler+0xc>)
 800de46:	4903      	ldr	r1, [pc, #12]	@ (800de54 <stdio_exit_handler+0x10>)
 800de48:	4803      	ldr	r0, [pc, #12]	@ (800de58 <stdio_exit_handler+0x14>)
 800de4a:	f000 b87b 	b.w	800df44 <_fwalk_sglue>
 800de4e:	bf00      	nop
 800de50:	20000020 	.word	0x20000020
 800de54:	0800e9c1 	.word	0x0800e9c1
 800de58:	20000030 	.word	0x20000030

0800de5c <cleanup_stdio>:
 800de5c:	6841      	ldr	r1, [r0, #4]
 800de5e:	4b0c      	ldr	r3, [pc, #48]	@ (800de90 <cleanup_stdio+0x34>)
 800de60:	4299      	cmp	r1, r3
 800de62:	b510      	push	{r4, lr}
 800de64:	4604      	mov	r4, r0
 800de66:	d001      	beq.n	800de6c <cleanup_stdio+0x10>
 800de68:	f000 fdaa 	bl	800e9c0 <_fflush_r>
 800de6c:	68a1      	ldr	r1, [r4, #8]
 800de6e:	4b09      	ldr	r3, [pc, #36]	@ (800de94 <cleanup_stdio+0x38>)
 800de70:	4299      	cmp	r1, r3
 800de72:	d002      	beq.n	800de7a <cleanup_stdio+0x1e>
 800de74:	4620      	mov	r0, r4
 800de76:	f000 fda3 	bl	800e9c0 <_fflush_r>
 800de7a:	68e1      	ldr	r1, [r4, #12]
 800de7c:	4b06      	ldr	r3, [pc, #24]	@ (800de98 <cleanup_stdio+0x3c>)
 800de7e:	4299      	cmp	r1, r3
 800de80:	d004      	beq.n	800de8c <cleanup_stdio+0x30>
 800de82:	4620      	mov	r0, r4
 800de84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de88:	f000 bd9a 	b.w	800e9c0 <_fflush_r>
 800de8c:	bd10      	pop	{r4, pc}
 800de8e:	bf00      	nop
 800de90:	20000614 	.word	0x20000614
 800de94:	2000067c 	.word	0x2000067c
 800de98:	200006e4 	.word	0x200006e4

0800de9c <global_stdio_init.part.0>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4b0b      	ldr	r3, [pc, #44]	@ (800decc <global_stdio_init.part.0+0x30>)
 800dea0:	4c0b      	ldr	r4, [pc, #44]	@ (800ded0 <global_stdio_init.part.0+0x34>)
 800dea2:	4a0c      	ldr	r2, [pc, #48]	@ (800ded4 <global_stdio_init.part.0+0x38>)
 800dea4:	601a      	str	r2, [r3, #0]
 800dea6:	4620      	mov	r0, r4
 800dea8:	2200      	movs	r2, #0
 800deaa:	2104      	movs	r1, #4
 800deac:	f7ff ff94 	bl	800ddd8 <std>
 800deb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800deb4:	2201      	movs	r2, #1
 800deb6:	2109      	movs	r1, #9
 800deb8:	f7ff ff8e 	bl	800ddd8 <std>
 800debc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dec0:	2202      	movs	r2, #2
 800dec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dec6:	2112      	movs	r1, #18
 800dec8:	f7ff bf86 	b.w	800ddd8 <std>
 800decc:	2000074c 	.word	0x2000074c
 800ded0:	20000614 	.word	0x20000614
 800ded4:	0800de45 	.word	0x0800de45

0800ded8 <__sfp_lock_acquire>:
 800ded8:	4801      	ldr	r0, [pc, #4]	@ (800dee0 <__sfp_lock_acquire+0x8>)
 800deda:	f000 b90e 	b.w	800e0fa <__retarget_lock_acquire_recursive>
 800dede:	bf00      	nop
 800dee0:	20000755 	.word	0x20000755

0800dee4 <__sfp_lock_release>:
 800dee4:	4801      	ldr	r0, [pc, #4]	@ (800deec <__sfp_lock_release+0x8>)
 800dee6:	f000 b909 	b.w	800e0fc <__retarget_lock_release_recursive>
 800deea:	bf00      	nop
 800deec:	20000755 	.word	0x20000755

0800def0 <__sinit>:
 800def0:	b510      	push	{r4, lr}
 800def2:	4604      	mov	r4, r0
 800def4:	f7ff fff0 	bl	800ded8 <__sfp_lock_acquire>
 800def8:	6a23      	ldr	r3, [r4, #32]
 800defa:	b11b      	cbz	r3, 800df04 <__sinit+0x14>
 800defc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df00:	f7ff bff0 	b.w	800dee4 <__sfp_lock_release>
 800df04:	4b04      	ldr	r3, [pc, #16]	@ (800df18 <__sinit+0x28>)
 800df06:	6223      	str	r3, [r4, #32]
 800df08:	4b04      	ldr	r3, [pc, #16]	@ (800df1c <__sinit+0x2c>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1f5      	bne.n	800defc <__sinit+0xc>
 800df10:	f7ff ffc4 	bl	800de9c <global_stdio_init.part.0>
 800df14:	e7f2      	b.n	800defc <__sinit+0xc>
 800df16:	bf00      	nop
 800df18:	0800de5d 	.word	0x0800de5d
 800df1c:	2000074c 	.word	0x2000074c

0800df20 <fiprintf>:
 800df20:	b40e      	push	{r1, r2, r3}
 800df22:	b503      	push	{r0, r1, lr}
 800df24:	4601      	mov	r1, r0
 800df26:	ab03      	add	r3, sp, #12
 800df28:	4805      	ldr	r0, [pc, #20]	@ (800df40 <fiprintf+0x20>)
 800df2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df2e:	6800      	ldr	r0, [r0, #0]
 800df30:	9301      	str	r3, [sp, #4]
 800df32:	f000 fa1b 	bl	800e36c <_vfiprintf_r>
 800df36:	b002      	add	sp, #8
 800df38:	f85d eb04 	ldr.w	lr, [sp], #4
 800df3c:	b003      	add	sp, #12
 800df3e:	4770      	bx	lr
 800df40:	2000002c 	.word	0x2000002c

0800df44 <_fwalk_sglue>:
 800df44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df48:	4607      	mov	r7, r0
 800df4a:	4688      	mov	r8, r1
 800df4c:	4614      	mov	r4, r2
 800df4e:	2600      	movs	r6, #0
 800df50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df54:	f1b9 0901 	subs.w	r9, r9, #1
 800df58:	d505      	bpl.n	800df66 <_fwalk_sglue+0x22>
 800df5a:	6824      	ldr	r4, [r4, #0]
 800df5c:	2c00      	cmp	r4, #0
 800df5e:	d1f7      	bne.n	800df50 <_fwalk_sglue+0xc>
 800df60:	4630      	mov	r0, r6
 800df62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df66:	89ab      	ldrh	r3, [r5, #12]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d907      	bls.n	800df7c <_fwalk_sglue+0x38>
 800df6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df70:	3301      	adds	r3, #1
 800df72:	d003      	beq.n	800df7c <_fwalk_sglue+0x38>
 800df74:	4629      	mov	r1, r5
 800df76:	4638      	mov	r0, r7
 800df78:	47c0      	blx	r8
 800df7a:	4306      	orrs	r6, r0
 800df7c:	3568      	adds	r5, #104	@ 0x68
 800df7e:	e7e9      	b.n	800df54 <_fwalk_sglue+0x10>

0800df80 <__sread>:
 800df80:	b510      	push	{r4, lr}
 800df82:	460c      	mov	r4, r1
 800df84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df88:	f000 f868 	bl	800e05c <_read_r>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	bfab      	itete	ge
 800df90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df92:	89a3      	ldrhlt	r3, [r4, #12]
 800df94:	181b      	addge	r3, r3, r0
 800df96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df9a:	bfac      	ite	ge
 800df9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df9e:	81a3      	strhlt	r3, [r4, #12]
 800dfa0:	bd10      	pop	{r4, pc}

0800dfa2 <__swrite>:
 800dfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa6:	461f      	mov	r7, r3
 800dfa8:	898b      	ldrh	r3, [r1, #12]
 800dfaa:	05db      	lsls	r3, r3, #23
 800dfac:	4605      	mov	r5, r0
 800dfae:	460c      	mov	r4, r1
 800dfb0:	4616      	mov	r6, r2
 800dfb2:	d505      	bpl.n	800dfc0 <__swrite+0x1e>
 800dfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb8:	2302      	movs	r3, #2
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f000 f83c 	bl	800e038 <_lseek_r>
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dfca:	81a3      	strh	r3, [r4, #12]
 800dfcc:	4632      	mov	r2, r6
 800dfce:	463b      	mov	r3, r7
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd6:	f000 b853 	b.w	800e080 <_write_r>

0800dfda <__sseek>:
 800dfda:	b510      	push	{r4, lr}
 800dfdc:	460c      	mov	r4, r1
 800dfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe2:	f000 f829 	bl	800e038 <_lseek_r>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	89a3      	ldrh	r3, [r4, #12]
 800dfea:	bf15      	itete	ne
 800dfec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dfee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dff6:	81a3      	strheq	r3, [r4, #12]
 800dff8:	bf18      	it	ne
 800dffa:	81a3      	strhne	r3, [r4, #12]
 800dffc:	bd10      	pop	{r4, pc}

0800dffe <__sclose>:
 800dffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e002:	f000 b809 	b.w	800e018 <_close_r>

0800e006 <memset>:
 800e006:	4402      	add	r2, r0
 800e008:	4603      	mov	r3, r0
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d100      	bne.n	800e010 <memset+0xa>
 800e00e:	4770      	bx	lr
 800e010:	f803 1b01 	strb.w	r1, [r3], #1
 800e014:	e7f9      	b.n	800e00a <memset+0x4>
	...

0800e018 <_close_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d06      	ldr	r5, [pc, #24]	@ (800e034 <_close_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	4608      	mov	r0, r1
 800e022:	602b      	str	r3, [r5, #0]
 800e024:	f7f8 fa80 	bl	8006528 <_close>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_close_r+0x1a>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_close_r+0x1a>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	20000750 	.word	0x20000750

0800e038 <_lseek_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d07      	ldr	r5, [pc, #28]	@ (800e058 <_lseek_r+0x20>)
 800e03c:	4604      	mov	r4, r0
 800e03e:	4608      	mov	r0, r1
 800e040:	4611      	mov	r1, r2
 800e042:	2200      	movs	r2, #0
 800e044:	602a      	str	r2, [r5, #0]
 800e046:	461a      	mov	r2, r3
 800e048:	f7f8 fa95 	bl	8006576 <_lseek>
 800e04c:	1c43      	adds	r3, r0, #1
 800e04e:	d102      	bne.n	800e056 <_lseek_r+0x1e>
 800e050:	682b      	ldr	r3, [r5, #0]
 800e052:	b103      	cbz	r3, 800e056 <_lseek_r+0x1e>
 800e054:	6023      	str	r3, [r4, #0]
 800e056:	bd38      	pop	{r3, r4, r5, pc}
 800e058:	20000750 	.word	0x20000750

0800e05c <_read_r>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	4d07      	ldr	r5, [pc, #28]	@ (800e07c <_read_r+0x20>)
 800e060:	4604      	mov	r4, r0
 800e062:	4608      	mov	r0, r1
 800e064:	4611      	mov	r1, r2
 800e066:	2200      	movs	r2, #0
 800e068:	602a      	str	r2, [r5, #0]
 800e06a:	461a      	mov	r2, r3
 800e06c:	f7f8 fa23 	bl	80064b6 <_read>
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	d102      	bne.n	800e07a <_read_r+0x1e>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b103      	cbz	r3, 800e07a <_read_r+0x1e>
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 800e07c:	20000750 	.word	0x20000750

0800e080 <_write_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d07      	ldr	r5, [pc, #28]	@ (800e0a0 <_write_r+0x20>)
 800e084:	4604      	mov	r4, r0
 800e086:	4608      	mov	r0, r1
 800e088:	4611      	mov	r1, r2
 800e08a:	2200      	movs	r2, #0
 800e08c:	602a      	str	r2, [r5, #0]
 800e08e:	461a      	mov	r2, r3
 800e090:	f7f8 fa2e 	bl	80064f0 <_write>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	d102      	bne.n	800e09e <_write_r+0x1e>
 800e098:	682b      	ldr	r3, [r5, #0]
 800e09a:	b103      	cbz	r3, 800e09e <_write_r+0x1e>
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	bd38      	pop	{r3, r4, r5, pc}
 800e0a0:	20000750 	.word	0x20000750

0800e0a4 <__errno>:
 800e0a4:	4b01      	ldr	r3, [pc, #4]	@ (800e0ac <__errno+0x8>)
 800e0a6:	6818      	ldr	r0, [r3, #0]
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	2000002c 	.word	0x2000002c

0800e0b0 <__libc_init_array>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	4d0d      	ldr	r5, [pc, #52]	@ (800e0e8 <__libc_init_array+0x38>)
 800e0b4:	4c0d      	ldr	r4, [pc, #52]	@ (800e0ec <__libc_init_array+0x3c>)
 800e0b6:	1b64      	subs	r4, r4, r5
 800e0b8:	10a4      	asrs	r4, r4, #2
 800e0ba:	2600      	movs	r6, #0
 800e0bc:	42a6      	cmp	r6, r4
 800e0be:	d109      	bne.n	800e0d4 <__libc_init_array+0x24>
 800e0c0:	4d0b      	ldr	r5, [pc, #44]	@ (800e0f0 <__libc_init_array+0x40>)
 800e0c2:	4c0c      	ldr	r4, [pc, #48]	@ (800e0f4 <__libc_init_array+0x44>)
 800e0c4:	f000 fe10 	bl	800ece8 <_init>
 800e0c8:	1b64      	subs	r4, r4, r5
 800e0ca:	10a4      	asrs	r4, r4, #2
 800e0cc:	2600      	movs	r6, #0
 800e0ce:	42a6      	cmp	r6, r4
 800e0d0:	d105      	bne.n	800e0de <__libc_init_array+0x2e>
 800e0d2:	bd70      	pop	{r4, r5, r6, pc}
 800e0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0d8:	4798      	blx	r3
 800e0da:	3601      	adds	r6, #1
 800e0dc:	e7ee      	b.n	800e0bc <__libc_init_array+0xc>
 800e0de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e2:	4798      	blx	r3
 800e0e4:	3601      	adds	r6, #1
 800e0e6:	e7f2      	b.n	800e0ce <__libc_init_array+0x1e>
 800e0e8:	08010440 	.word	0x08010440
 800e0ec:	08010440 	.word	0x08010440
 800e0f0:	08010440 	.word	0x08010440
 800e0f4:	08010444 	.word	0x08010444

0800e0f8 <__retarget_lock_init_recursive>:
 800e0f8:	4770      	bx	lr

0800e0fa <__retarget_lock_acquire_recursive>:
 800e0fa:	4770      	bx	lr

0800e0fc <__retarget_lock_release_recursive>:
 800e0fc:	4770      	bx	lr

0800e0fe <memcpy>:
 800e0fe:	440a      	add	r2, r1
 800e100:	4291      	cmp	r1, r2
 800e102:	f100 33ff 	add.w	r3, r0, #4294967295
 800e106:	d100      	bne.n	800e10a <memcpy+0xc>
 800e108:	4770      	bx	lr
 800e10a:	b510      	push	{r4, lr}
 800e10c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e110:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e114:	4291      	cmp	r1, r2
 800e116:	d1f9      	bne.n	800e10c <memcpy+0xe>
 800e118:	bd10      	pop	{r4, pc}

0800e11a <abort>:
 800e11a:	b508      	push	{r3, lr}
 800e11c:	2006      	movs	r0, #6
 800e11e:	f000 fd33 	bl	800eb88 <raise>
 800e122:	2001      	movs	r0, #1
 800e124:	f7f8 f9bc 	bl	80064a0 <_exit>

0800e128 <_free_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4605      	mov	r5, r0
 800e12c:	2900      	cmp	r1, #0
 800e12e:	d041      	beq.n	800e1b4 <_free_r+0x8c>
 800e130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e134:	1f0c      	subs	r4, r1, #4
 800e136:	2b00      	cmp	r3, #0
 800e138:	bfb8      	it	lt
 800e13a:	18e4      	addlt	r4, r4, r3
 800e13c:	f000 f8e0 	bl	800e300 <__malloc_lock>
 800e140:	4a1d      	ldr	r2, [pc, #116]	@ (800e1b8 <_free_r+0x90>)
 800e142:	6813      	ldr	r3, [r2, #0]
 800e144:	b933      	cbnz	r3, 800e154 <_free_r+0x2c>
 800e146:	6063      	str	r3, [r4, #4]
 800e148:	6014      	str	r4, [r2, #0]
 800e14a:	4628      	mov	r0, r5
 800e14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e150:	f000 b8dc 	b.w	800e30c <__malloc_unlock>
 800e154:	42a3      	cmp	r3, r4
 800e156:	d908      	bls.n	800e16a <_free_r+0x42>
 800e158:	6820      	ldr	r0, [r4, #0]
 800e15a:	1821      	adds	r1, r4, r0
 800e15c:	428b      	cmp	r3, r1
 800e15e:	bf01      	itttt	eq
 800e160:	6819      	ldreq	r1, [r3, #0]
 800e162:	685b      	ldreq	r3, [r3, #4]
 800e164:	1809      	addeq	r1, r1, r0
 800e166:	6021      	streq	r1, [r4, #0]
 800e168:	e7ed      	b.n	800e146 <_free_r+0x1e>
 800e16a:	461a      	mov	r2, r3
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	b10b      	cbz	r3, 800e174 <_free_r+0x4c>
 800e170:	42a3      	cmp	r3, r4
 800e172:	d9fa      	bls.n	800e16a <_free_r+0x42>
 800e174:	6811      	ldr	r1, [r2, #0]
 800e176:	1850      	adds	r0, r2, r1
 800e178:	42a0      	cmp	r0, r4
 800e17a:	d10b      	bne.n	800e194 <_free_r+0x6c>
 800e17c:	6820      	ldr	r0, [r4, #0]
 800e17e:	4401      	add	r1, r0
 800e180:	1850      	adds	r0, r2, r1
 800e182:	4283      	cmp	r3, r0
 800e184:	6011      	str	r1, [r2, #0]
 800e186:	d1e0      	bne.n	800e14a <_free_r+0x22>
 800e188:	6818      	ldr	r0, [r3, #0]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	6053      	str	r3, [r2, #4]
 800e18e:	4408      	add	r0, r1
 800e190:	6010      	str	r0, [r2, #0]
 800e192:	e7da      	b.n	800e14a <_free_r+0x22>
 800e194:	d902      	bls.n	800e19c <_free_r+0x74>
 800e196:	230c      	movs	r3, #12
 800e198:	602b      	str	r3, [r5, #0]
 800e19a:	e7d6      	b.n	800e14a <_free_r+0x22>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	1821      	adds	r1, r4, r0
 800e1a0:	428b      	cmp	r3, r1
 800e1a2:	bf04      	itt	eq
 800e1a4:	6819      	ldreq	r1, [r3, #0]
 800e1a6:	685b      	ldreq	r3, [r3, #4]
 800e1a8:	6063      	str	r3, [r4, #4]
 800e1aa:	bf04      	itt	eq
 800e1ac:	1809      	addeq	r1, r1, r0
 800e1ae:	6021      	streq	r1, [r4, #0]
 800e1b0:	6054      	str	r4, [r2, #4]
 800e1b2:	e7ca      	b.n	800e14a <_free_r+0x22>
 800e1b4:	bd38      	pop	{r3, r4, r5, pc}
 800e1b6:	bf00      	nop
 800e1b8:	2000075c 	.word	0x2000075c

0800e1bc <sbrk_aligned>:
 800e1bc:	b570      	push	{r4, r5, r6, lr}
 800e1be:	4e0f      	ldr	r6, [pc, #60]	@ (800e1fc <sbrk_aligned+0x40>)
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	6831      	ldr	r1, [r6, #0]
 800e1c4:	4605      	mov	r5, r0
 800e1c6:	b911      	cbnz	r1, 800e1ce <sbrk_aligned+0x12>
 800e1c8:	f000 fcfa 	bl	800ebc0 <_sbrk_r>
 800e1cc:	6030      	str	r0, [r6, #0]
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f000 fcf5 	bl	800ebc0 <_sbrk_r>
 800e1d6:	1c43      	adds	r3, r0, #1
 800e1d8:	d103      	bne.n	800e1e2 <sbrk_aligned+0x26>
 800e1da:	f04f 34ff 	mov.w	r4, #4294967295
 800e1de:	4620      	mov	r0, r4
 800e1e0:	bd70      	pop	{r4, r5, r6, pc}
 800e1e2:	1cc4      	adds	r4, r0, #3
 800e1e4:	f024 0403 	bic.w	r4, r4, #3
 800e1e8:	42a0      	cmp	r0, r4
 800e1ea:	d0f8      	beq.n	800e1de <sbrk_aligned+0x22>
 800e1ec:	1a21      	subs	r1, r4, r0
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f000 fce6 	bl	800ebc0 <_sbrk_r>
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	d1f2      	bne.n	800e1de <sbrk_aligned+0x22>
 800e1f8:	e7ef      	b.n	800e1da <sbrk_aligned+0x1e>
 800e1fa:	bf00      	nop
 800e1fc:	20000758 	.word	0x20000758

0800e200 <_malloc_r>:
 800e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e204:	1ccd      	adds	r5, r1, #3
 800e206:	f025 0503 	bic.w	r5, r5, #3
 800e20a:	3508      	adds	r5, #8
 800e20c:	2d0c      	cmp	r5, #12
 800e20e:	bf38      	it	cc
 800e210:	250c      	movcc	r5, #12
 800e212:	2d00      	cmp	r5, #0
 800e214:	4606      	mov	r6, r0
 800e216:	db01      	blt.n	800e21c <_malloc_r+0x1c>
 800e218:	42a9      	cmp	r1, r5
 800e21a:	d904      	bls.n	800e226 <_malloc_r+0x26>
 800e21c:	230c      	movs	r3, #12
 800e21e:	6033      	str	r3, [r6, #0]
 800e220:	2000      	movs	r0, #0
 800e222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2fc <_malloc_r+0xfc>
 800e22a:	f000 f869 	bl	800e300 <__malloc_lock>
 800e22e:	f8d8 3000 	ldr.w	r3, [r8]
 800e232:	461c      	mov	r4, r3
 800e234:	bb44      	cbnz	r4, 800e288 <_malloc_r+0x88>
 800e236:	4629      	mov	r1, r5
 800e238:	4630      	mov	r0, r6
 800e23a:	f7ff ffbf 	bl	800e1bc <sbrk_aligned>
 800e23e:	1c43      	adds	r3, r0, #1
 800e240:	4604      	mov	r4, r0
 800e242:	d158      	bne.n	800e2f6 <_malloc_r+0xf6>
 800e244:	f8d8 4000 	ldr.w	r4, [r8]
 800e248:	4627      	mov	r7, r4
 800e24a:	2f00      	cmp	r7, #0
 800e24c:	d143      	bne.n	800e2d6 <_malloc_r+0xd6>
 800e24e:	2c00      	cmp	r4, #0
 800e250:	d04b      	beq.n	800e2ea <_malloc_r+0xea>
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	4639      	mov	r1, r7
 800e256:	4630      	mov	r0, r6
 800e258:	eb04 0903 	add.w	r9, r4, r3
 800e25c:	f000 fcb0 	bl	800ebc0 <_sbrk_r>
 800e260:	4581      	cmp	r9, r0
 800e262:	d142      	bne.n	800e2ea <_malloc_r+0xea>
 800e264:	6821      	ldr	r1, [r4, #0]
 800e266:	1a6d      	subs	r5, r5, r1
 800e268:	4629      	mov	r1, r5
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7ff ffa6 	bl	800e1bc <sbrk_aligned>
 800e270:	3001      	adds	r0, #1
 800e272:	d03a      	beq.n	800e2ea <_malloc_r+0xea>
 800e274:	6823      	ldr	r3, [r4, #0]
 800e276:	442b      	add	r3, r5
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	f8d8 3000 	ldr.w	r3, [r8]
 800e27e:	685a      	ldr	r2, [r3, #4]
 800e280:	bb62      	cbnz	r2, 800e2dc <_malloc_r+0xdc>
 800e282:	f8c8 7000 	str.w	r7, [r8]
 800e286:	e00f      	b.n	800e2a8 <_malloc_r+0xa8>
 800e288:	6822      	ldr	r2, [r4, #0]
 800e28a:	1b52      	subs	r2, r2, r5
 800e28c:	d420      	bmi.n	800e2d0 <_malloc_r+0xd0>
 800e28e:	2a0b      	cmp	r2, #11
 800e290:	d917      	bls.n	800e2c2 <_malloc_r+0xc2>
 800e292:	1961      	adds	r1, r4, r5
 800e294:	42a3      	cmp	r3, r4
 800e296:	6025      	str	r5, [r4, #0]
 800e298:	bf18      	it	ne
 800e29a:	6059      	strne	r1, [r3, #4]
 800e29c:	6863      	ldr	r3, [r4, #4]
 800e29e:	bf08      	it	eq
 800e2a0:	f8c8 1000 	streq.w	r1, [r8]
 800e2a4:	5162      	str	r2, [r4, r5]
 800e2a6:	604b      	str	r3, [r1, #4]
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f000 f82f 	bl	800e30c <__malloc_unlock>
 800e2ae:	f104 000b 	add.w	r0, r4, #11
 800e2b2:	1d23      	adds	r3, r4, #4
 800e2b4:	f020 0007 	bic.w	r0, r0, #7
 800e2b8:	1ac2      	subs	r2, r0, r3
 800e2ba:	bf1c      	itt	ne
 800e2bc:	1a1b      	subne	r3, r3, r0
 800e2be:	50a3      	strne	r3, [r4, r2]
 800e2c0:	e7af      	b.n	800e222 <_malloc_r+0x22>
 800e2c2:	6862      	ldr	r2, [r4, #4]
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	bf0c      	ite	eq
 800e2c8:	f8c8 2000 	streq.w	r2, [r8]
 800e2cc:	605a      	strne	r2, [r3, #4]
 800e2ce:	e7eb      	b.n	800e2a8 <_malloc_r+0xa8>
 800e2d0:	4623      	mov	r3, r4
 800e2d2:	6864      	ldr	r4, [r4, #4]
 800e2d4:	e7ae      	b.n	800e234 <_malloc_r+0x34>
 800e2d6:	463c      	mov	r4, r7
 800e2d8:	687f      	ldr	r7, [r7, #4]
 800e2da:	e7b6      	b.n	800e24a <_malloc_r+0x4a>
 800e2dc:	461a      	mov	r2, r3
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	42a3      	cmp	r3, r4
 800e2e2:	d1fb      	bne.n	800e2dc <_malloc_r+0xdc>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	6053      	str	r3, [r2, #4]
 800e2e8:	e7de      	b.n	800e2a8 <_malloc_r+0xa8>
 800e2ea:	230c      	movs	r3, #12
 800e2ec:	6033      	str	r3, [r6, #0]
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	f000 f80c 	bl	800e30c <__malloc_unlock>
 800e2f4:	e794      	b.n	800e220 <_malloc_r+0x20>
 800e2f6:	6005      	str	r5, [r0, #0]
 800e2f8:	e7d6      	b.n	800e2a8 <_malloc_r+0xa8>
 800e2fa:	bf00      	nop
 800e2fc:	2000075c 	.word	0x2000075c

0800e300 <__malloc_lock>:
 800e300:	4801      	ldr	r0, [pc, #4]	@ (800e308 <__malloc_lock+0x8>)
 800e302:	f7ff befa 	b.w	800e0fa <__retarget_lock_acquire_recursive>
 800e306:	bf00      	nop
 800e308:	20000754 	.word	0x20000754

0800e30c <__malloc_unlock>:
 800e30c:	4801      	ldr	r0, [pc, #4]	@ (800e314 <__malloc_unlock+0x8>)
 800e30e:	f7ff bef5 	b.w	800e0fc <__retarget_lock_release_recursive>
 800e312:	bf00      	nop
 800e314:	20000754 	.word	0x20000754

0800e318 <__sfputc_r>:
 800e318:	6893      	ldr	r3, [r2, #8]
 800e31a:	3b01      	subs	r3, #1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	b410      	push	{r4}
 800e320:	6093      	str	r3, [r2, #8]
 800e322:	da08      	bge.n	800e336 <__sfputc_r+0x1e>
 800e324:	6994      	ldr	r4, [r2, #24]
 800e326:	42a3      	cmp	r3, r4
 800e328:	db01      	blt.n	800e32e <__sfputc_r+0x16>
 800e32a:	290a      	cmp	r1, #10
 800e32c:	d103      	bne.n	800e336 <__sfputc_r+0x1e>
 800e32e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e332:	f000 bb6d 	b.w	800ea10 <__swbuf_r>
 800e336:	6813      	ldr	r3, [r2, #0]
 800e338:	1c58      	adds	r0, r3, #1
 800e33a:	6010      	str	r0, [r2, #0]
 800e33c:	7019      	strb	r1, [r3, #0]
 800e33e:	4608      	mov	r0, r1
 800e340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <__sfputs_r>:
 800e346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e348:	4606      	mov	r6, r0
 800e34a:	460f      	mov	r7, r1
 800e34c:	4614      	mov	r4, r2
 800e34e:	18d5      	adds	r5, r2, r3
 800e350:	42ac      	cmp	r4, r5
 800e352:	d101      	bne.n	800e358 <__sfputs_r+0x12>
 800e354:	2000      	movs	r0, #0
 800e356:	e007      	b.n	800e368 <__sfputs_r+0x22>
 800e358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e35c:	463a      	mov	r2, r7
 800e35e:	4630      	mov	r0, r6
 800e360:	f7ff ffda 	bl	800e318 <__sfputc_r>
 800e364:	1c43      	adds	r3, r0, #1
 800e366:	d1f3      	bne.n	800e350 <__sfputs_r+0xa>
 800e368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e36c <_vfiprintf_r>:
 800e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e370:	460d      	mov	r5, r1
 800e372:	b09d      	sub	sp, #116	@ 0x74
 800e374:	4614      	mov	r4, r2
 800e376:	4698      	mov	r8, r3
 800e378:	4606      	mov	r6, r0
 800e37a:	b118      	cbz	r0, 800e384 <_vfiprintf_r+0x18>
 800e37c:	6a03      	ldr	r3, [r0, #32]
 800e37e:	b90b      	cbnz	r3, 800e384 <_vfiprintf_r+0x18>
 800e380:	f7ff fdb6 	bl	800def0 <__sinit>
 800e384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e386:	07d9      	lsls	r1, r3, #31
 800e388:	d405      	bmi.n	800e396 <_vfiprintf_r+0x2a>
 800e38a:	89ab      	ldrh	r3, [r5, #12]
 800e38c:	059a      	lsls	r2, r3, #22
 800e38e:	d402      	bmi.n	800e396 <_vfiprintf_r+0x2a>
 800e390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e392:	f7ff feb2 	bl	800e0fa <__retarget_lock_acquire_recursive>
 800e396:	89ab      	ldrh	r3, [r5, #12]
 800e398:	071b      	lsls	r3, r3, #28
 800e39a:	d501      	bpl.n	800e3a0 <_vfiprintf_r+0x34>
 800e39c:	692b      	ldr	r3, [r5, #16]
 800e39e:	b99b      	cbnz	r3, 800e3c8 <_vfiprintf_r+0x5c>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f000 fb72 	bl	800ea8c <__swsetup_r>
 800e3a8:	b170      	cbz	r0, 800e3c8 <_vfiprintf_r+0x5c>
 800e3aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3ac:	07dc      	lsls	r4, r3, #31
 800e3ae:	d504      	bpl.n	800e3ba <_vfiprintf_r+0x4e>
 800e3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b4:	b01d      	add	sp, #116	@ 0x74
 800e3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ba:	89ab      	ldrh	r3, [r5, #12]
 800e3bc:	0598      	lsls	r0, r3, #22
 800e3be:	d4f7      	bmi.n	800e3b0 <_vfiprintf_r+0x44>
 800e3c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3c2:	f7ff fe9b 	bl	800e0fc <__retarget_lock_release_recursive>
 800e3c6:	e7f3      	b.n	800e3b0 <_vfiprintf_r+0x44>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3cc:	2320      	movs	r3, #32
 800e3ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3d6:	2330      	movs	r3, #48	@ 0x30
 800e3d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e588 <_vfiprintf_r+0x21c>
 800e3dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3e0:	f04f 0901 	mov.w	r9, #1
 800e3e4:	4623      	mov	r3, r4
 800e3e6:	469a      	mov	sl, r3
 800e3e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ec:	b10a      	cbz	r2, 800e3f2 <_vfiprintf_r+0x86>
 800e3ee:	2a25      	cmp	r2, #37	@ 0x25
 800e3f0:	d1f9      	bne.n	800e3e6 <_vfiprintf_r+0x7a>
 800e3f2:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f6:	d00b      	beq.n	800e410 <_vfiprintf_r+0xa4>
 800e3f8:	465b      	mov	r3, fp
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4630      	mov	r0, r6
 800e400:	f7ff ffa1 	bl	800e346 <__sfputs_r>
 800e404:	3001      	adds	r0, #1
 800e406:	f000 80a7 	beq.w	800e558 <_vfiprintf_r+0x1ec>
 800e40a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e40c:	445a      	add	r2, fp
 800e40e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e410:	f89a 3000 	ldrb.w	r3, [sl]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 809f 	beq.w	800e558 <_vfiprintf_r+0x1ec>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f04f 32ff 	mov.w	r2, #4294967295
 800e420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e424:	f10a 0a01 	add.w	sl, sl, #1
 800e428:	9304      	str	r3, [sp, #16]
 800e42a:	9307      	str	r3, [sp, #28]
 800e42c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e430:	931a      	str	r3, [sp, #104]	@ 0x68
 800e432:	4654      	mov	r4, sl
 800e434:	2205      	movs	r2, #5
 800e436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43a:	4853      	ldr	r0, [pc, #332]	@ (800e588 <_vfiprintf_r+0x21c>)
 800e43c:	f7f1 fec8 	bl	80001d0 <memchr>
 800e440:	9a04      	ldr	r2, [sp, #16]
 800e442:	b9d8      	cbnz	r0, 800e47c <_vfiprintf_r+0x110>
 800e444:	06d1      	lsls	r1, r2, #27
 800e446:	bf44      	itt	mi
 800e448:	2320      	movmi	r3, #32
 800e44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e44e:	0713      	lsls	r3, r2, #28
 800e450:	bf44      	itt	mi
 800e452:	232b      	movmi	r3, #43	@ 0x2b
 800e454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e458:	f89a 3000 	ldrb.w	r3, [sl]
 800e45c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e45e:	d015      	beq.n	800e48c <_vfiprintf_r+0x120>
 800e460:	9a07      	ldr	r2, [sp, #28]
 800e462:	4654      	mov	r4, sl
 800e464:	2000      	movs	r0, #0
 800e466:	f04f 0c0a 	mov.w	ip, #10
 800e46a:	4621      	mov	r1, r4
 800e46c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e470:	3b30      	subs	r3, #48	@ 0x30
 800e472:	2b09      	cmp	r3, #9
 800e474:	d94b      	bls.n	800e50e <_vfiprintf_r+0x1a2>
 800e476:	b1b0      	cbz	r0, 800e4a6 <_vfiprintf_r+0x13a>
 800e478:	9207      	str	r2, [sp, #28]
 800e47a:	e014      	b.n	800e4a6 <_vfiprintf_r+0x13a>
 800e47c:	eba0 0308 	sub.w	r3, r0, r8
 800e480:	fa09 f303 	lsl.w	r3, r9, r3
 800e484:	4313      	orrs	r3, r2
 800e486:	9304      	str	r3, [sp, #16]
 800e488:	46a2      	mov	sl, r4
 800e48a:	e7d2      	b.n	800e432 <_vfiprintf_r+0xc6>
 800e48c:	9b03      	ldr	r3, [sp, #12]
 800e48e:	1d19      	adds	r1, r3, #4
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	9103      	str	r1, [sp, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	bfbb      	ittet	lt
 800e498:	425b      	neglt	r3, r3
 800e49a:	f042 0202 	orrlt.w	r2, r2, #2
 800e49e:	9307      	strge	r3, [sp, #28]
 800e4a0:	9307      	strlt	r3, [sp, #28]
 800e4a2:	bfb8      	it	lt
 800e4a4:	9204      	strlt	r2, [sp, #16]
 800e4a6:	7823      	ldrb	r3, [r4, #0]
 800e4a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4aa:	d10a      	bne.n	800e4c2 <_vfiprintf_r+0x156>
 800e4ac:	7863      	ldrb	r3, [r4, #1]
 800e4ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4b0:	d132      	bne.n	800e518 <_vfiprintf_r+0x1ac>
 800e4b2:	9b03      	ldr	r3, [sp, #12]
 800e4b4:	1d1a      	adds	r2, r3, #4
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	9203      	str	r2, [sp, #12]
 800e4ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4be:	3402      	adds	r4, #2
 800e4c0:	9305      	str	r3, [sp, #20]
 800e4c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e598 <_vfiprintf_r+0x22c>
 800e4c6:	7821      	ldrb	r1, [r4, #0]
 800e4c8:	2203      	movs	r2, #3
 800e4ca:	4650      	mov	r0, sl
 800e4cc:	f7f1 fe80 	bl	80001d0 <memchr>
 800e4d0:	b138      	cbz	r0, 800e4e2 <_vfiprintf_r+0x176>
 800e4d2:	9b04      	ldr	r3, [sp, #16]
 800e4d4:	eba0 000a 	sub.w	r0, r0, sl
 800e4d8:	2240      	movs	r2, #64	@ 0x40
 800e4da:	4082      	lsls	r2, r0
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	3401      	adds	r4, #1
 800e4e0:	9304      	str	r3, [sp, #16]
 800e4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e6:	4829      	ldr	r0, [pc, #164]	@ (800e58c <_vfiprintf_r+0x220>)
 800e4e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ec:	2206      	movs	r2, #6
 800e4ee:	f7f1 fe6f 	bl	80001d0 <memchr>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d03f      	beq.n	800e576 <_vfiprintf_r+0x20a>
 800e4f6:	4b26      	ldr	r3, [pc, #152]	@ (800e590 <_vfiprintf_r+0x224>)
 800e4f8:	bb1b      	cbnz	r3, 800e542 <_vfiprintf_r+0x1d6>
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	3307      	adds	r3, #7
 800e4fe:	f023 0307 	bic.w	r3, r3, #7
 800e502:	3308      	adds	r3, #8
 800e504:	9303      	str	r3, [sp, #12]
 800e506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e508:	443b      	add	r3, r7
 800e50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e50c:	e76a      	b.n	800e3e4 <_vfiprintf_r+0x78>
 800e50e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e512:	460c      	mov	r4, r1
 800e514:	2001      	movs	r0, #1
 800e516:	e7a8      	b.n	800e46a <_vfiprintf_r+0xfe>
 800e518:	2300      	movs	r3, #0
 800e51a:	3401      	adds	r4, #1
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	4619      	mov	r1, r3
 800e520:	f04f 0c0a 	mov.w	ip, #10
 800e524:	4620      	mov	r0, r4
 800e526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e52a:	3a30      	subs	r2, #48	@ 0x30
 800e52c:	2a09      	cmp	r2, #9
 800e52e:	d903      	bls.n	800e538 <_vfiprintf_r+0x1cc>
 800e530:	2b00      	cmp	r3, #0
 800e532:	d0c6      	beq.n	800e4c2 <_vfiprintf_r+0x156>
 800e534:	9105      	str	r1, [sp, #20]
 800e536:	e7c4      	b.n	800e4c2 <_vfiprintf_r+0x156>
 800e538:	fb0c 2101 	mla	r1, ip, r1, r2
 800e53c:	4604      	mov	r4, r0
 800e53e:	2301      	movs	r3, #1
 800e540:	e7f0      	b.n	800e524 <_vfiprintf_r+0x1b8>
 800e542:	ab03      	add	r3, sp, #12
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	462a      	mov	r2, r5
 800e548:	4b12      	ldr	r3, [pc, #72]	@ (800e594 <_vfiprintf_r+0x228>)
 800e54a:	a904      	add	r1, sp, #16
 800e54c:	4630      	mov	r0, r6
 800e54e:	f3af 8000 	nop.w
 800e552:	4607      	mov	r7, r0
 800e554:	1c78      	adds	r0, r7, #1
 800e556:	d1d6      	bne.n	800e506 <_vfiprintf_r+0x19a>
 800e558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e55a:	07d9      	lsls	r1, r3, #31
 800e55c:	d405      	bmi.n	800e56a <_vfiprintf_r+0x1fe>
 800e55e:	89ab      	ldrh	r3, [r5, #12]
 800e560:	059a      	lsls	r2, r3, #22
 800e562:	d402      	bmi.n	800e56a <_vfiprintf_r+0x1fe>
 800e564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e566:	f7ff fdc9 	bl	800e0fc <__retarget_lock_release_recursive>
 800e56a:	89ab      	ldrh	r3, [r5, #12]
 800e56c:	065b      	lsls	r3, r3, #25
 800e56e:	f53f af1f 	bmi.w	800e3b0 <_vfiprintf_r+0x44>
 800e572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e574:	e71e      	b.n	800e3b4 <_vfiprintf_r+0x48>
 800e576:	ab03      	add	r3, sp, #12
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	462a      	mov	r2, r5
 800e57c:	4b05      	ldr	r3, [pc, #20]	@ (800e594 <_vfiprintf_r+0x228>)
 800e57e:	a904      	add	r1, sp, #16
 800e580:	4630      	mov	r0, r6
 800e582:	f000 f879 	bl	800e678 <_printf_i>
 800e586:	e7e4      	b.n	800e552 <_vfiprintf_r+0x1e6>
 800e588:	08010404 	.word	0x08010404
 800e58c:	0801040e 	.word	0x0801040e
 800e590:	00000000 	.word	0x00000000
 800e594:	0800e347 	.word	0x0800e347
 800e598:	0801040a 	.word	0x0801040a

0800e59c <_printf_common>:
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	4616      	mov	r6, r2
 800e5a2:	4698      	mov	r8, r3
 800e5a4:	688a      	ldr	r2, [r1, #8]
 800e5a6:	690b      	ldr	r3, [r1, #16]
 800e5a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	bfb8      	it	lt
 800e5b0:	4613      	movlt	r3, r2
 800e5b2:	6033      	str	r3, [r6, #0]
 800e5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	b10a      	cbz	r2, 800e5c2 <_printf_common+0x26>
 800e5be:	3301      	adds	r3, #1
 800e5c0:	6033      	str	r3, [r6, #0]
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	0699      	lsls	r1, r3, #26
 800e5c6:	bf42      	ittt	mi
 800e5c8:	6833      	ldrmi	r3, [r6, #0]
 800e5ca:	3302      	addmi	r3, #2
 800e5cc:	6033      	strmi	r3, [r6, #0]
 800e5ce:	6825      	ldr	r5, [r4, #0]
 800e5d0:	f015 0506 	ands.w	r5, r5, #6
 800e5d4:	d106      	bne.n	800e5e4 <_printf_common+0x48>
 800e5d6:	f104 0a19 	add.w	sl, r4, #25
 800e5da:	68e3      	ldr	r3, [r4, #12]
 800e5dc:	6832      	ldr	r2, [r6, #0]
 800e5de:	1a9b      	subs	r3, r3, r2
 800e5e0:	42ab      	cmp	r3, r5
 800e5e2:	dc26      	bgt.n	800e632 <_printf_common+0x96>
 800e5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5e8:	6822      	ldr	r2, [r4, #0]
 800e5ea:	3b00      	subs	r3, #0
 800e5ec:	bf18      	it	ne
 800e5ee:	2301      	movne	r3, #1
 800e5f0:	0692      	lsls	r2, r2, #26
 800e5f2:	d42b      	bmi.n	800e64c <_printf_common+0xb0>
 800e5f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5f8:	4641      	mov	r1, r8
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	47c8      	blx	r9
 800e5fe:	3001      	adds	r0, #1
 800e600:	d01e      	beq.n	800e640 <_printf_common+0xa4>
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	6922      	ldr	r2, [r4, #16]
 800e606:	f003 0306 	and.w	r3, r3, #6
 800e60a:	2b04      	cmp	r3, #4
 800e60c:	bf02      	ittt	eq
 800e60e:	68e5      	ldreq	r5, [r4, #12]
 800e610:	6833      	ldreq	r3, [r6, #0]
 800e612:	1aed      	subeq	r5, r5, r3
 800e614:	68a3      	ldr	r3, [r4, #8]
 800e616:	bf0c      	ite	eq
 800e618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e61c:	2500      	movne	r5, #0
 800e61e:	4293      	cmp	r3, r2
 800e620:	bfc4      	itt	gt
 800e622:	1a9b      	subgt	r3, r3, r2
 800e624:	18ed      	addgt	r5, r5, r3
 800e626:	2600      	movs	r6, #0
 800e628:	341a      	adds	r4, #26
 800e62a:	42b5      	cmp	r5, r6
 800e62c:	d11a      	bne.n	800e664 <_printf_common+0xc8>
 800e62e:	2000      	movs	r0, #0
 800e630:	e008      	b.n	800e644 <_printf_common+0xa8>
 800e632:	2301      	movs	r3, #1
 800e634:	4652      	mov	r2, sl
 800e636:	4641      	mov	r1, r8
 800e638:	4638      	mov	r0, r7
 800e63a:	47c8      	blx	r9
 800e63c:	3001      	adds	r0, #1
 800e63e:	d103      	bne.n	800e648 <_printf_common+0xac>
 800e640:	f04f 30ff 	mov.w	r0, #4294967295
 800e644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e648:	3501      	adds	r5, #1
 800e64a:	e7c6      	b.n	800e5da <_printf_common+0x3e>
 800e64c:	18e1      	adds	r1, r4, r3
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	2030      	movs	r0, #48	@ 0x30
 800e652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e656:	4422      	add	r2, r4
 800e658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e65c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e660:	3302      	adds	r3, #2
 800e662:	e7c7      	b.n	800e5f4 <_printf_common+0x58>
 800e664:	2301      	movs	r3, #1
 800e666:	4622      	mov	r2, r4
 800e668:	4641      	mov	r1, r8
 800e66a:	4638      	mov	r0, r7
 800e66c:	47c8      	blx	r9
 800e66e:	3001      	adds	r0, #1
 800e670:	d0e6      	beq.n	800e640 <_printf_common+0xa4>
 800e672:	3601      	adds	r6, #1
 800e674:	e7d9      	b.n	800e62a <_printf_common+0x8e>
	...

0800e678 <_printf_i>:
 800e678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e67c:	7e0f      	ldrb	r7, [r1, #24]
 800e67e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e680:	2f78      	cmp	r7, #120	@ 0x78
 800e682:	4691      	mov	r9, r2
 800e684:	4680      	mov	r8, r0
 800e686:	460c      	mov	r4, r1
 800e688:	469a      	mov	sl, r3
 800e68a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e68e:	d807      	bhi.n	800e6a0 <_printf_i+0x28>
 800e690:	2f62      	cmp	r7, #98	@ 0x62
 800e692:	d80a      	bhi.n	800e6aa <_printf_i+0x32>
 800e694:	2f00      	cmp	r7, #0
 800e696:	f000 80d2 	beq.w	800e83e <_printf_i+0x1c6>
 800e69a:	2f58      	cmp	r7, #88	@ 0x58
 800e69c:	f000 80b9 	beq.w	800e812 <_printf_i+0x19a>
 800e6a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6a8:	e03a      	b.n	800e720 <_printf_i+0xa8>
 800e6aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6ae:	2b15      	cmp	r3, #21
 800e6b0:	d8f6      	bhi.n	800e6a0 <_printf_i+0x28>
 800e6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800e6b8 <_printf_i+0x40>)
 800e6b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6b8:	0800e711 	.word	0x0800e711
 800e6bc:	0800e725 	.word	0x0800e725
 800e6c0:	0800e6a1 	.word	0x0800e6a1
 800e6c4:	0800e6a1 	.word	0x0800e6a1
 800e6c8:	0800e6a1 	.word	0x0800e6a1
 800e6cc:	0800e6a1 	.word	0x0800e6a1
 800e6d0:	0800e725 	.word	0x0800e725
 800e6d4:	0800e6a1 	.word	0x0800e6a1
 800e6d8:	0800e6a1 	.word	0x0800e6a1
 800e6dc:	0800e6a1 	.word	0x0800e6a1
 800e6e0:	0800e6a1 	.word	0x0800e6a1
 800e6e4:	0800e825 	.word	0x0800e825
 800e6e8:	0800e74f 	.word	0x0800e74f
 800e6ec:	0800e7df 	.word	0x0800e7df
 800e6f0:	0800e6a1 	.word	0x0800e6a1
 800e6f4:	0800e6a1 	.word	0x0800e6a1
 800e6f8:	0800e847 	.word	0x0800e847
 800e6fc:	0800e6a1 	.word	0x0800e6a1
 800e700:	0800e74f 	.word	0x0800e74f
 800e704:	0800e6a1 	.word	0x0800e6a1
 800e708:	0800e6a1 	.word	0x0800e6a1
 800e70c:	0800e7e7 	.word	0x0800e7e7
 800e710:	6833      	ldr	r3, [r6, #0]
 800e712:	1d1a      	adds	r2, r3, #4
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6032      	str	r2, [r6, #0]
 800e718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e71c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e720:	2301      	movs	r3, #1
 800e722:	e09d      	b.n	800e860 <_printf_i+0x1e8>
 800e724:	6833      	ldr	r3, [r6, #0]
 800e726:	6820      	ldr	r0, [r4, #0]
 800e728:	1d19      	adds	r1, r3, #4
 800e72a:	6031      	str	r1, [r6, #0]
 800e72c:	0606      	lsls	r6, r0, #24
 800e72e:	d501      	bpl.n	800e734 <_printf_i+0xbc>
 800e730:	681d      	ldr	r5, [r3, #0]
 800e732:	e003      	b.n	800e73c <_printf_i+0xc4>
 800e734:	0645      	lsls	r5, r0, #25
 800e736:	d5fb      	bpl.n	800e730 <_printf_i+0xb8>
 800e738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e73c:	2d00      	cmp	r5, #0
 800e73e:	da03      	bge.n	800e748 <_printf_i+0xd0>
 800e740:	232d      	movs	r3, #45	@ 0x2d
 800e742:	426d      	negs	r5, r5
 800e744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e748:	4859      	ldr	r0, [pc, #356]	@ (800e8b0 <_printf_i+0x238>)
 800e74a:	230a      	movs	r3, #10
 800e74c:	e011      	b.n	800e772 <_printf_i+0xfa>
 800e74e:	6821      	ldr	r1, [r4, #0]
 800e750:	6833      	ldr	r3, [r6, #0]
 800e752:	0608      	lsls	r0, r1, #24
 800e754:	f853 5b04 	ldr.w	r5, [r3], #4
 800e758:	d402      	bmi.n	800e760 <_printf_i+0xe8>
 800e75a:	0649      	lsls	r1, r1, #25
 800e75c:	bf48      	it	mi
 800e75e:	b2ad      	uxthmi	r5, r5
 800e760:	2f6f      	cmp	r7, #111	@ 0x6f
 800e762:	4853      	ldr	r0, [pc, #332]	@ (800e8b0 <_printf_i+0x238>)
 800e764:	6033      	str	r3, [r6, #0]
 800e766:	bf14      	ite	ne
 800e768:	230a      	movne	r3, #10
 800e76a:	2308      	moveq	r3, #8
 800e76c:	2100      	movs	r1, #0
 800e76e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e772:	6866      	ldr	r6, [r4, #4]
 800e774:	60a6      	str	r6, [r4, #8]
 800e776:	2e00      	cmp	r6, #0
 800e778:	bfa2      	ittt	ge
 800e77a:	6821      	ldrge	r1, [r4, #0]
 800e77c:	f021 0104 	bicge.w	r1, r1, #4
 800e780:	6021      	strge	r1, [r4, #0]
 800e782:	b90d      	cbnz	r5, 800e788 <_printf_i+0x110>
 800e784:	2e00      	cmp	r6, #0
 800e786:	d04b      	beq.n	800e820 <_printf_i+0x1a8>
 800e788:	4616      	mov	r6, r2
 800e78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e78e:	fb03 5711 	mls	r7, r3, r1, r5
 800e792:	5dc7      	ldrb	r7, [r0, r7]
 800e794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e798:	462f      	mov	r7, r5
 800e79a:	42bb      	cmp	r3, r7
 800e79c:	460d      	mov	r5, r1
 800e79e:	d9f4      	bls.n	800e78a <_printf_i+0x112>
 800e7a0:	2b08      	cmp	r3, #8
 800e7a2:	d10b      	bne.n	800e7bc <_printf_i+0x144>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	07df      	lsls	r7, r3, #31
 800e7a8:	d508      	bpl.n	800e7bc <_printf_i+0x144>
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	6861      	ldr	r1, [r4, #4]
 800e7ae:	4299      	cmp	r1, r3
 800e7b0:	bfde      	ittt	le
 800e7b2:	2330      	movle	r3, #48	@ 0x30
 800e7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7bc:	1b92      	subs	r2, r2, r6
 800e7be:	6122      	str	r2, [r4, #16]
 800e7c0:	f8cd a000 	str.w	sl, [sp]
 800e7c4:	464b      	mov	r3, r9
 800e7c6:	aa03      	add	r2, sp, #12
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	4640      	mov	r0, r8
 800e7cc:	f7ff fee6 	bl	800e59c <_printf_common>
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	d14a      	bne.n	800e86a <_printf_i+0x1f2>
 800e7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d8:	b004      	add	sp, #16
 800e7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7de:	6823      	ldr	r3, [r4, #0]
 800e7e0:	f043 0320 	orr.w	r3, r3, #32
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	4833      	ldr	r0, [pc, #204]	@ (800e8b4 <_printf_i+0x23c>)
 800e7e8:	2778      	movs	r7, #120	@ 0x78
 800e7ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7ee:	6823      	ldr	r3, [r4, #0]
 800e7f0:	6831      	ldr	r1, [r6, #0]
 800e7f2:	061f      	lsls	r7, r3, #24
 800e7f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7f8:	d402      	bmi.n	800e800 <_printf_i+0x188>
 800e7fa:	065f      	lsls	r7, r3, #25
 800e7fc:	bf48      	it	mi
 800e7fe:	b2ad      	uxthmi	r5, r5
 800e800:	6031      	str	r1, [r6, #0]
 800e802:	07d9      	lsls	r1, r3, #31
 800e804:	bf44      	itt	mi
 800e806:	f043 0320 	orrmi.w	r3, r3, #32
 800e80a:	6023      	strmi	r3, [r4, #0]
 800e80c:	b11d      	cbz	r5, 800e816 <_printf_i+0x19e>
 800e80e:	2310      	movs	r3, #16
 800e810:	e7ac      	b.n	800e76c <_printf_i+0xf4>
 800e812:	4827      	ldr	r0, [pc, #156]	@ (800e8b0 <_printf_i+0x238>)
 800e814:	e7e9      	b.n	800e7ea <_printf_i+0x172>
 800e816:	6823      	ldr	r3, [r4, #0]
 800e818:	f023 0320 	bic.w	r3, r3, #32
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	e7f6      	b.n	800e80e <_printf_i+0x196>
 800e820:	4616      	mov	r6, r2
 800e822:	e7bd      	b.n	800e7a0 <_printf_i+0x128>
 800e824:	6833      	ldr	r3, [r6, #0]
 800e826:	6825      	ldr	r5, [r4, #0]
 800e828:	6961      	ldr	r1, [r4, #20]
 800e82a:	1d18      	adds	r0, r3, #4
 800e82c:	6030      	str	r0, [r6, #0]
 800e82e:	062e      	lsls	r6, r5, #24
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	d501      	bpl.n	800e838 <_printf_i+0x1c0>
 800e834:	6019      	str	r1, [r3, #0]
 800e836:	e002      	b.n	800e83e <_printf_i+0x1c6>
 800e838:	0668      	lsls	r0, r5, #25
 800e83a:	d5fb      	bpl.n	800e834 <_printf_i+0x1bc>
 800e83c:	8019      	strh	r1, [r3, #0]
 800e83e:	2300      	movs	r3, #0
 800e840:	6123      	str	r3, [r4, #16]
 800e842:	4616      	mov	r6, r2
 800e844:	e7bc      	b.n	800e7c0 <_printf_i+0x148>
 800e846:	6833      	ldr	r3, [r6, #0]
 800e848:	1d1a      	adds	r2, r3, #4
 800e84a:	6032      	str	r2, [r6, #0]
 800e84c:	681e      	ldr	r6, [r3, #0]
 800e84e:	6862      	ldr	r2, [r4, #4]
 800e850:	2100      	movs	r1, #0
 800e852:	4630      	mov	r0, r6
 800e854:	f7f1 fcbc 	bl	80001d0 <memchr>
 800e858:	b108      	cbz	r0, 800e85e <_printf_i+0x1e6>
 800e85a:	1b80      	subs	r0, r0, r6
 800e85c:	6060      	str	r0, [r4, #4]
 800e85e:	6863      	ldr	r3, [r4, #4]
 800e860:	6123      	str	r3, [r4, #16]
 800e862:	2300      	movs	r3, #0
 800e864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e868:	e7aa      	b.n	800e7c0 <_printf_i+0x148>
 800e86a:	6923      	ldr	r3, [r4, #16]
 800e86c:	4632      	mov	r2, r6
 800e86e:	4649      	mov	r1, r9
 800e870:	4640      	mov	r0, r8
 800e872:	47d0      	blx	sl
 800e874:	3001      	adds	r0, #1
 800e876:	d0ad      	beq.n	800e7d4 <_printf_i+0x15c>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	079b      	lsls	r3, r3, #30
 800e87c:	d413      	bmi.n	800e8a6 <_printf_i+0x22e>
 800e87e:	68e0      	ldr	r0, [r4, #12]
 800e880:	9b03      	ldr	r3, [sp, #12]
 800e882:	4298      	cmp	r0, r3
 800e884:	bfb8      	it	lt
 800e886:	4618      	movlt	r0, r3
 800e888:	e7a6      	b.n	800e7d8 <_printf_i+0x160>
 800e88a:	2301      	movs	r3, #1
 800e88c:	4632      	mov	r2, r6
 800e88e:	4649      	mov	r1, r9
 800e890:	4640      	mov	r0, r8
 800e892:	47d0      	blx	sl
 800e894:	3001      	adds	r0, #1
 800e896:	d09d      	beq.n	800e7d4 <_printf_i+0x15c>
 800e898:	3501      	adds	r5, #1
 800e89a:	68e3      	ldr	r3, [r4, #12]
 800e89c:	9903      	ldr	r1, [sp, #12]
 800e89e:	1a5b      	subs	r3, r3, r1
 800e8a0:	42ab      	cmp	r3, r5
 800e8a2:	dcf2      	bgt.n	800e88a <_printf_i+0x212>
 800e8a4:	e7eb      	b.n	800e87e <_printf_i+0x206>
 800e8a6:	2500      	movs	r5, #0
 800e8a8:	f104 0619 	add.w	r6, r4, #25
 800e8ac:	e7f5      	b.n	800e89a <_printf_i+0x222>
 800e8ae:	bf00      	nop
 800e8b0:	08010415 	.word	0x08010415
 800e8b4:	08010426 	.word	0x08010426

0800e8b8 <__sflush_r>:
 800e8b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c0:	0716      	lsls	r6, r2, #28
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	d454      	bmi.n	800e972 <__sflush_r+0xba>
 800e8c8:	684b      	ldr	r3, [r1, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	dc02      	bgt.n	800e8d4 <__sflush_r+0x1c>
 800e8ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	dd48      	ble.n	800e966 <__sflush_r+0xae>
 800e8d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e8d6:	2e00      	cmp	r6, #0
 800e8d8:	d045      	beq.n	800e966 <__sflush_r+0xae>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e8e0:	682f      	ldr	r7, [r5, #0]
 800e8e2:	6a21      	ldr	r1, [r4, #32]
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	d030      	beq.n	800e94a <__sflush_r+0x92>
 800e8e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	0759      	lsls	r1, r3, #29
 800e8ee:	d505      	bpl.n	800e8fc <__sflush_r+0x44>
 800e8f0:	6863      	ldr	r3, [r4, #4]
 800e8f2:	1ad2      	subs	r2, r2, r3
 800e8f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e8f6:	b10b      	cbz	r3, 800e8fc <__sflush_r+0x44>
 800e8f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e8fa:	1ad2      	subs	r2, r2, r3
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e900:	6a21      	ldr	r1, [r4, #32]
 800e902:	4628      	mov	r0, r5
 800e904:	47b0      	blx	r6
 800e906:	1c43      	adds	r3, r0, #1
 800e908:	89a3      	ldrh	r3, [r4, #12]
 800e90a:	d106      	bne.n	800e91a <__sflush_r+0x62>
 800e90c:	6829      	ldr	r1, [r5, #0]
 800e90e:	291d      	cmp	r1, #29
 800e910:	d82b      	bhi.n	800e96a <__sflush_r+0xb2>
 800e912:	4a2a      	ldr	r2, [pc, #168]	@ (800e9bc <__sflush_r+0x104>)
 800e914:	410a      	asrs	r2, r1
 800e916:	07d6      	lsls	r6, r2, #31
 800e918:	d427      	bmi.n	800e96a <__sflush_r+0xb2>
 800e91a:	2200      	movs	r2, #0
 800e91c:	6062      	str	r2, [r4, #4]
 800e91e:	04d9      	lsls	r1, r3, #19
 800e920:	6922      	ldr	r2, [r4, #16]
 800e922:	6022      	str	r2, [r4, #0]
 800e924:	d504      	bpl.n	800e930 <__sflush_r+0x78>
 800e926:	1c42      	adds	r2, r0, #1
 800e928:	d101      	bne.n	800e92e <__sflush_r+0x76>
 800e92a:	682b      	ldr	r3, [r5, #0]
 800e92c:	b903      	cbnz	r3, 800e930 <__sflush_r+0x78>
 800e92e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e932:	602f      	str	r7, [r5, #0]
 800e934:	b1b9      	cbz	r1, 800e966 <__sflush_r+0xae>
 800e936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e93a:	4299      	cmp	r1, r3
 800e93c:	d002      	beq.n	800e944 <__sflush_r+0x8c>
 800e93e:	4628      	mov	r0, r5
 800e940:	f7ff fbf2 	bl	800e128 <_free_r>
 800e944:	2300      	movs	r3, #0
 800e946:	6363      	str	r3, [r4, #52]	@ 0x34
 800e948:	e00d      	b.n	800e966 <__sflush_r+0xae>
 800e94a:	2301      	movs	r3, #1
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b0      	blx	r6
 800e950:	4602      	mov	r2, r0
 800e952:	1c50      	adds	r0, r2, #1
 800e954:	d1c9      	bne.n	800e8ea <__sflush_r+0x32>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d0c6      	beq.n	800e8ea <__sflush_r+0x32>
 800e95c:	2b1d      	cmp	r3, #29
 800e95e:	d001      	beq.n	800e964 <__sflush_r+0xac>
 800e960:	2b16      	cmp	r3, #22
 800e962:	d11e      	bne.n	800e9a2 <__sflush_r+0xea>
 800e964:	602f      	str	r7, [r5, #0]
 800e966:	2000      	movs	r0, #0
 800e968:	e022      	b.n	800e9b0 <__sflush_r+0xf8>
 800e96a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e96e:	b21b      	sxth	r3, r3
 800e970:	e01b      	b.n	800e9aa <__sflush_r+0xf2>
 800e972:	690f      	ldr	r7, [r1, #16]
 800e974:	2f00      	cmp	r7, #0
 800e976:	d0f6      	beq.n	800e966 <__sflush_r+0xae>
 800e978:	0793      	lsls	r3, r2, #30
 800e97a:	680e      	ldr	r6, [r1, #0]
 800e97c:	bf08      	it	eq
 800e97e:	694b      	ldreq	r3, [r1, #20]
 800e980:	600f      	str	r7, [r1, #0]
 800e982:	bf18      	it	ne
 800e984:	2300      	movne	r3, #0
 800e986:	eba6 0807 	sub.w	r8, r6, r7
 800e98a:	608b      	str	r3, [r1, #8]
 800e98c:	f1b8 0f00 	cmp.w	r8, #0
 800e990:	dde9      	ble.n	800e966 <__sflush_r+0xae>
 800e992:	6a21      	ldr	r1, [r4, #32]
 800e994:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e996:	4643      	mov	r3, r8
 800e998:	463a      	mov	r2, r7
 800e99a:	4628      	mov	r0, r5
 800e99c:	47b0      	blx	r6
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	dc08      	bgt.n	800e9b4 <__sflush_r+0xfc>
 800e9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9aa:	81a3      	strh	r3, [r4, #12]
 800e9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b4:	4407      	add	r7, r0
 800e9b6:	eba8 0800 	sub.w	r8, r8, r0
 800e9ba:	e7e7      	b.n	800e98c <__sflush_r+0xd4>
 800e9bc:	dfbffffe 	.word	0xdfbffffe

0800e9c0 <_fflush_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	690b      	ldr	r3, [r1, #16]
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	b913      	cbnz	r3, 800e9d0 <_fflush_r+0x10>
 800e9ca:	2500      	movs	r5, #0
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	bd38      	pop	{r3, r4, r5, pc}
 800e9d0:	b118      	cbz	r0, 800e9da <_fflush_r+0x1a>
 800e9d2:	6a03      	ldr	r3, [r0, #32]
 800e9d4:	b90b      	cbnz	r3, 800e9da <_fflush_r+0x1a>
 800e9d6:	f7ff fa8b 	bl	800def0 <__sinit>
 800e9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0f3      	beq.n	800e9ca <_fflush_r+0xa>
 800e9e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e9e4:	07d0      	lsls	r0, r2, #31
 800e9e6:	d404      	bmi.n	800e9f2 <_fflush_r+0x32>
 800e9e8:	0599      	lsls	r1, r3, #22
 800e9ea:	d402      	bmi.n	800e9f2 <_fflush_r+0x32>
 800e9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e9ee:	f7ff fb84 	bl	800e0fa <__retarget_lock_acquire_recursive>
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	4621      	mov	r1, r4
 800e9f6:	f7ff ff5f 	bl	800e8b8 <__sflush_r>
 800e9fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e9fc:	07da      	lsls	r2, r3, #31
 800e9fe:	4605      	mov	r5, r0
 800ea00:	d4e4      	bmi.n	800e9cc <_fflush_r+0xc>
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	059b      	lsls	r3, r3, #22
 800ea06:	d4e1      	bmi.n	800e9cc <_fflush_r+0xc>
 800ea08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea0a:	f7ff fb77 	bl	800e0fc <__retarget_lock_release_recursive>
 800ea0e:	e7dd      	b.n	800e9cc <_fflush_r+0xc>

0800ea10 <__swbuf_r>:
 800ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea12:	460e      	mov	r6, r1
 800ea14:	4614      	mov	r4, r2
 800ea16:	4605      	mov	r5, r0
 800ea18:	b118      	cbz	r0, 800ea22 <__swbuf_r+0x12>
 800ea1a:	6a03      	ldr	r3, [r0, #32]
 800ea1c:	b90b      	cbnz	r3, 800ea22 <__swbuf_r+0x12>
 800ea1e:	f7ff fa67 	bl	800def0 <__sinit>
 800ea22:	69a3      	ldr	r3, [r4, #24]
 800ea24:	60a3      	str	r3, [r4, #8]
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	071a      	lsls	r2, r3, #28
 800ea2a:	d501      	bpl.n	800ea30 <__swbuf_r+0x20>
 800ea2c:	6923      	ldr	r3, [r4, #16]
 800ea2e:	b943      	cbnz	r3, 800ea42 <__swbuf_r+0x32>
 800ea30:	4621      	mov	r1, r4
 800ea32:	4628      	mov	r0, r5
 800ea34:	f000 f82a 	bl	800ea8c <__swsetup_r>
 800ea38:	b118      	cbz	r0, 800ea42 <__swbuf_r+0x32>
 800ea3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ea3e:	4638      	mov	r0, r7
 800ea40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea42:	6823      	ldr	r3, [r4, #0]
 800ea44:	6922      	ldr	r2, [r4, #16]
 800ea46:	1a98      	subs	r0, r3, r2
 800ea48:	6963      	ldr	r3, [r4, #20]
 800ea4a:	b2f6      	uxtb	r6, r6
 800ea4c:	4283      	cmp	r3, r0
 800ea4e:	4637      	mov	r7, r6
 800ea50:	dc05      	bgt.n	800ea5e <__swbuf_r+0x4e>
 800ea52:	4621      	mov	r1, r4
 800ea54:	4628      	mov	r0, r5
 800ea56:	f7ff ffb3 	bl	800e9c0 <_fflush_r>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d1ed      	bne.n	800ea3a <__swbuf_r+0x2a>
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	60a3      	str	r3, [r4, #8]
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	6022      	str	r2, [r4, #0]
 800ea6a:	701e      	strb	r6, [r3, #0]
 800ea6c:	6962      	ldr	r2, [r4, #20]
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d004      	beq.n	800ea7e <__swbuf_r+0x6e>
 800ea74:	89a3      	ldrh	r3, [r4, #12]
 800ea76:	07db      	lsls	r3, r3, #31
 800ea78:	d5e1      	bpl.n	800ea3e <__swbuf_r+0x2e>
 800ea7a:	2e0a      	cmp	r6, #10
 800ea7c:	d1df      	bne.n	800ea3e <__swbuf_r+0x2e>
 800ea7e:	4621      	mov	r1, r4
 800ea80:	4628      	mov	r0, r5
 800ea82:	f7ff ff9d 	bl	800e9c0 <_fflush_r>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d0d9      	beq.n	800ea3e <__swbuf_r+0x2e>
 800ea8a:	e7d6      	b.n	800ea3a <__swbuf_r+0x2a>

0800ea8c <__swsetup_r>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	4b29      	ldr	r3, [pc, #164]	@ (800eb34 <__swsetup_r+0xa8>)
 800ea90:	4605      	mov	r5, r0
 800ea92:	6818      	ldr	r0, [r3, #0]
 800ea94:	460c      	mov	r4, r1
 800ea96:	b118      	cbz	r0, 800eaa0 <__swsetup_r+0x14>
 800ea98:	6a03      	ldr	r3, [r0, #32]
 800ea9a:	b90b      	cbnz	r3, 800eaa0 <__swsetup_r+0x14>
 800ea9c:	f7ff fa28 	bl	800def0 <__sinit>
 800eaa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaa4:	0719      	lsls	r1, r3, #28
 800eaa6:	d422      	bmi.n	800eaee <__swsetup_r+0x62>
 800eaa8:	06da      	lsls	r2, r3, #27
 800eaaa:	d407      	bmi.n	800eabc <__swsetup_r+0x30>
 800eaac:	2209      	movs	r2, #9
 800eaae:	602a      	str	r2, [r5, #0]
 800eab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eab4:	81a3      	strh	r3, [r4, #12]
 800eab6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaba:	e033      	b.n	800eb24 <__swsetup_r+0x98>
 800eabc:	0758      	lsls	r0, r3, #29
 800eabe:	d512      	bpl.n	800eae6 <__swsetup_r+0x5a>
 800eac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eac2:	b141      	cbz	r1, 800ead6 <__swsetup_r+0x4a>
 800eac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eac8:	4299      	cmp	r1, r3
 800eaca:	d002      	beq.n	800ead2 <__swsetup_r+0x46>
 800eacc:	4628      	mov	r0, r5
 800eace:	f7ff fb2b 	bl	800e128 <_free_r>
 800ead2:	2300      	movs	r3, #0
 800ead4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eadc:	81a3      	strh	r3, [r4, #12]
 800eade:	2300      	movs	r3, #0
 800eae0:	6063      	str	r3, [r4, #4]
 800eae2:	6923      	ldr	r3, [r4, #16]
 800eae4:	6023      	str	r3, [r4, #0]
 800eae6:	89a3      	ldrh	r3, [r4, #12]
 800eae8:	f043 0308 	orr.w	r3, r3, #8
 800eaec:	81a3      	strh	r3, [r4, #12]
 800eaee:	6923      	ldr	r3, [r4, #16]
 800eaf0:	b94b      	cbnz	r3, 800eb06 <__swsetup_r+0x7a>
 800eaf2:	89a3      	ldrh	r3, [r4, #12]
 800eaf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eaf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eafc:	d003      	beq.n	800eb06 <__swsetup_r+0x7a>
 800eafe:	4621      	mov	r1, r4
 800eb00:	4628      	mov	r0, r5
 800eb02:	f000 f893 	bl	800ec2c <__smakebuf_r>
 800eb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb0a:	f013 0201 	ands.w	r2, r3, #1
 800eb0e:	d00a      	beq.n	800eb26 <__swsetup_r+0x9a>
 800eb10:	2200      	movs	r2, #0
 800eb12:	60a2      	str	r2, [r4, #8]
 800eb14:	6962      	ldr	r2, [r4, #20]
 800eb16:	4252      	negs	r2, r2
 800eb18:	61a2      	str	r2, [r4, #24]
 800eb1a:	6922      	ldr	r2, [r4, #16]
 800eb1c:	b942      	cbnz	r2, 800eb30 <__swsetup_r+0xa4>
 800eb1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb22:	d1c5      	bne.n	800eab0 <__swsetup_r+0x24>
 800eb24:	bd38      	pop	{r3, r4, r5, pc}
 800eb26:	0799      	lsls	r1, r3, #30
 800eb28:	bf58      	it	pl
 800eb2a:	6962      	ldrpl	r2, [r4, #20]
 800eb2c:	60a2      	str	r2, [r4, #8]
 800eb2e:	e7f4      	b.n	800eb1a <__swsetup_r+0x8e>
 800eb30:	2000      	movs	r0, #0
 800eb32:	e7f7      	b.n	800eb24 <__swsetup_r+0x98>
 800eb34:	2000002c 	.word	0x2000002c

0800eb38 <_raise_r>:
 800eb38:	291f      	cmp	r1, #31
 800eb3a:	b538      	push	{r3, r4, r5, lr}
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	460c      	mov	r4, r1
 800eb40:	d904      	bls.n	800eb4c <_raise_r+0x14>
 800eb42:	2316      	movs	r3, #22
 800eb44:	6003      	str	r3, [r0, #0]
 800eb46:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb4e:	b112      	cbz	r2, 800eb56 <_raise_r+0x1e>
 800eb50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb54:	b94b      	cbnz	r3, 800eb6a <_raise_r+0x32>
 800eb56:	4628      	mov	r0, r5
 800eb58:	f000 f830 	bl	800ebbc <_getpid_r>
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	4601      	mov	r1, r0
 800eb60:	4628      	mov	r0, r5
 800eb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb66:	f000 b817 	b.w	800eb98 <_kill_r>
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d00a      	beq.n	800eb84 <_raise_r+0x4c>
 800eb6e:	1c59      	adds	r1, r3, #1
 800eb70:	d103      	bne.n	800eb7a <_raise_r+0x42>
 800eb72:	2316      	movs	r3, #22
 800eb74:	6003      	str	r3, [r0, #0]
 800eb76:	2001      	movs	r0, #1
 800eb78:	e7e7      	b.n	800eb4a <_raise_r+0x12>
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb80:	4620      	mov	r0, r4
 800eb82:	4798      	blx	r3
 800eb84:	2000      	movs	r0, #0
 800eb86:	e7e0      	b.n	800eb4a <_raise_r+0x12>

0800eb88 <raise>:
 800eb88:	4b02      	ldr	r3, [pc, #8]	@ (800eb94 <raise+0xc>)
 800eb8a:	4601      	mov	r1, r0
 800eb8c:	6818      	ldr	r0, [r3, #0]
 800eb8e:	f7ff bfd3 	b.w	800eb38 <_raise_r>
 800eb92:	bf00      	nop
 800eb94:	2000002c 	.word	0x2000002c

0800eb98 <_kill_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4d07      	ldr	r5, [pc, #28]	@ (800ebb8 <_kill_r+0x20>)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4604      	mov	r4, r0
 800eba0:	4608      	mov	r0, r1
 800eba2:	4611      	mov	r1, r2
 800eba4:	602b      	str	r3, [r5, #0]
 800eba6:	f7f7 fc6b 	bl	8006480 <_kill>
 800ebaa:	1c43      	adds	r3, r0, #1
 800ebac:	d102      	bne.n	800ebb4 <_kill_r+0x1c>
 800ebae:	682b      	ldr	r3, [r5, #0]
 800ebb0:	b103      	cbz	r3, 800ebb4 <_kill_r+0x1c>
 800ebb2:	6023      	str	r3, [r4, #0]
 800ebb4:	bd38      	pop	{r3, r4, r5, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000750 	.word	0x20000750

0800ebbc <_getpid_r>:
 800ebbc:	f7f7 bc58 	b.w	8006470 <_getpid>

0800ebc0 <_sbrk_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d06      	ldr	r5, [pc, #24]	@ (800ebdc <_sbrk_r+0x1c>)
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	4608      	mov	r0, r1
 800ebca:	602b      	str	r3, [r5, #0]
 800ebcc:	f7f7 fce0 	bl	8006590 <_sbrk>
 800ebd0:	1c43      	adds	r3, r0, #1
 800ebd2:	d102      	bne.n	800ebda <_sbrk_r+0x1a>
 800ebd4:	682b      	ldr	r3, [r5, #0]
 800ebd6:	b103      	cbz	r3, 800ebda <_sbrk_r+0x1a>
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	bd38      	pop	{r3, r4, r5, pc}
 800ebdc:	20000750 	.word	0x20000750

0800ebe0 <__swhatbuf_r>:
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe8:	2900      	cmp	r1, #0
 800ebea:	b096      	sub	sp, #88	@ 0x58
 800ebec:	4615      	mov	r5, r2
 800ebee:	461e      	mov	r6, r3
 800ebf0:	da0d      	bge.n	800ec0e <__swhatbuf_r+0x2e>
 800ebf2:	89a3      	ldrh	r3, [r4, #12]
 800ebf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebf8:	f04f 0100 	mov.w	r1, #0
 800ebfc:	bf14      	ite	ne
 800ebfe:	2340      	movne	r3, #64	@ 0x40
 800ec00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec04:	2000      	movs	r0, #0
 800ec06:	6031      	str	r1, [r6, #0]
 800ec08:	602b      	str	r3, [r5, #0]
 800ec0a:	b016      	add	sp, #88	@ 0x58
 800ec0c:	bd70      	pop	{r4, r5, r6, pc}
 800ec0e:	466a      	mov	r2, sp
 800ec10:	f000 f848 	bl	800eca4 <_fstat_r>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	dbec      	blt.n	800ebf2 <__swhatbuf_r+0x12>
 800ec18:	9901      	ldr	r1, [sp, #4]
 800ec1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec22:	4259      	negs	r1, r3
 800ec24:	4159      	adcs	r1, r3
 800ec26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec2a:	e7eb      	b.n	800ec04 <__swhatbuf_r+0x24>

0800ec2c <__smakebuf_r>:
 800ec2c:	898b      	ldrh	r3, [r1, #12]
 800ec2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec30:	079d      	lsls	r5, r3, #30
 800ec32:	4606      	mov	r6, r0
 800ec34:	460c      	mov	r4, r1
 800ec36:	d507      	bpl.n	800ec48 <__smakebuf_r+0x1c>
 800ec38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	6123      	str	r3, [r4, #16]
 800ec40:	2301      	movs	r3, #1
 800ec42:	6163      	str	r3, [r4, #20]
 800ec44:	b003      	add	sp, #12
 800ec46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec48:	ab01      	add	r3, sp, #4
 800ec4a:	466a      	mov	r2, sp
 800ec4c:	f7ff ffc8 	bl	800ebe0 <__swhatbuf_r>
 800ec50:	9f00      	ldr	r7, [sp, #0]
 800ec52:	4605      	mov	r5, r0
 800ec54:	4639      	mov	r1, r7
 800ec56:	4630      	mov	r0, r6
 800ec58:	f7ff fad2 	bl	800e200 <_malloc_r>
 800ec5c:	b948      	cbnz	r0, 800ec72 <__smakebuf_r+0x46>
 800ec5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec62:	059a      	lsls	r2, r3, #22
 800ec64:	d4ee      	bmi.n	800ec44 <__smakebuf_r+0x18>
 800ec66:	f023 0303 	bic.w	r3, r3, #3
 800ec6a:	f043 0302 	orr.w	r3, r3, #2
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	e7e2      	b.n	800ec38 <__smakebuf_r+0xc>
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	6020      	str	r0, [r4, #0]
 800ec76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec7a:	81a3      	strh	r3, [r4, #12]
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec82:	b15b      	cbz	r3, 800ec9c <__smakebuf_r+0x70>
 800ec84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec88:	4630      	mov	r0, r6
 800ec8a:	f000 f81d 	bl	800ecc8 <_isatty_r>
 800ec8e:	b128      	cbz	r0, 800ec9c <__smakebuf_r+0x70>
 800ec90:	89a3      	ldrh	r3, [r4, #12]
 800ec92:	f023 0303 	bic.w	r3, r3, #3
 800ec96:	f043 0301 	orr.w	r3, r3, #1
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	89a3      	ldrh	r3, [r4, #12]
 800ec9e:	431d      	orrs	r5, r3
 800eca0:	81a5      	strh	r5, [r4, #12]
 800eca2:	e7cf      	b.n	800ec44 <__smakebuf_r+0x18>

0800eca4 <_fstat_r>:
 800eca4:	b538      	push	{r3, r4, r5, lr}
 800eca6:	4d07      	ldr	r5, [pc, #28]	@ (800ecc4 <_fstat_r+0x20>)
 800eca8:	2300      	movs	r3, #0
 800ecaa:	4604      	mov	r4, r0
 800ecac:	4608      	mov	r0, r1
 800ecae:	4611      	mov	r1, r2
 800ecb0:	602b      	str	r3, [r5, #0]
 800ecb2:	f7f7 fc45 	bl	8006540 <_fstat>
 800ecb6:	1c43      	adds	r3, r0, #1
 800ecb8:	d102      	bne.n	800ecc0 <_fstat_r+0x1c>
 800ecba:	682b      	ldr	r3, [r5, #0]
 800ecbc:	b103      	cbz	r3, 800ecc0 <_fstat_r+0x1c>
 800ecbe:	6023      	str	r3, [r4, #0]
 800ecc0:	bd38      	pop	{r3, r4, r5, pc}
 800ecc2:	bf00      	nop
 800ecc4:	20000750 	.word	0x20000750

0800ecc8 <_isatty_r>:
 800ecc8:	b538      	push	{r3, r4, r5, lr}
 800ecca:	4d06      	ldr	r5, [pc, #24]	@ (800ece4 <_isatty_r+0x1c>)
 800eccc:	2300      	movs	r3, #0
 800ecce:	4604      	mov	r4, r0
 800ecd0:	4608      	mov	r0, r1
 800ecd2:	602b      	str	r3, [r5, #0]
 800ecd4:	f7f7 fc44 	bl	8006560 <_isatty>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_isatty_r+0x1a>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_isatty_r+0x1a>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	20000750 	.word	0x20000750

0800ece8 <_init>:
 800ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecea:	bf00      	nop
 800ecec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecee:	bc08      	pop	{r3}
 800ecf0:	469e      	mov	lr, r3
 800ecf2:	4770      	bx	lr

0800ecf4 <_fini>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	bf00      	nop
 800ecf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecfa:	bc08      	pop	{r3}
 800ecfc:	469e      	mov	lr, r3
 800ecfe:	4770      	bx	lr
