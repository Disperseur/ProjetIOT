
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d910  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  0800daa0  0800daa0  0000eaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed68  0800ed68  00010020  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed68  0800ed68  0000fd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed70  0800ed70  00010020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed70  0800ed70  0000fd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ed74  0800ed74  0000fd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800ed78  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000020  0800ed98  00010020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800ed98  0001058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebf5  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004573  00000000  00000000  0002ec45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  000331b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163b  00000000  00000000  00034e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f89  00000000  00000000  00036483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002298f  00000000  00000000  0005b40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfac1  00000000  00000000  0007dd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d85c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac8  00000000  00000000  0015d8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00165368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da88 	.word	0x0800da88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	0800da88 	.word	0x0800da88

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_ldivmod>:
 8000a0c:	b97b      	cbnz	r3, 8000a2e <__aeabi_ldivmod+0x22>
 8000a0e:	b972      	cbnz	r2, 8000a2e <__aeabi_ldivmod+0x22>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bfbe      	ittt	lt
 8000a14:	2000      	movlt	r0, #0
 8000a16:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a1a:	e006      	blt.n	8000a2a <__aeabi_ldivmod+0x1e>
 8000a1c:	bf08      	it	eq
 8000a1e:	2800      	cmpeq	r0, #0
 8000a20:	bf1c      	itt	ne
 8000a22:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a26:	f04f 30ff 	movne.w	r0, #4294967295
 8000a2a:	f000 b9b5 	b.w	8000d98 <__aeabi_idiv0>
 8000a2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a36:	2900      	cmp	r1, #0
 8000a38:	db09      	blt.n	8000a4e <__aeabi_ldivmod+0x42>
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db1a      	blt.n	8000a74 <__aeabi_ldivmod+0x68>
 8000a3e:	f000 f84d 	bl	8000adc <__udivmoddi4>
 8000a42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4a:	b004      	add	sp, #16
 8000a4c:	4770      	bx	lr
 8000a4e:	4240      	negs	r0, r0
 8000a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db1b      	blt.n	8000a90 <__aeabi_ldivmod+0x84>
 8000a58:	f000 f840 	bl	8000adc <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4240      	negs	r0, r0
 8000a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a72:	4770      	bx	lr
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	f000 f82f 	bl	8000adc <__udivmoddi4>
 8000a7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a86:	b004      	add	sp, #16
 8000a88:	4240      	negs	r0, r0
 8000a8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a8e:	4770      	bx	lr
 8000a90:	4252      	negs	r2, r2
 8000a92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a96:	f000 f821 	bl	8000adc <__udivmoddi4>
 8000a9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa2:	b004      	add	sp, #16
 8000aa4:	4252      	negs	r2, r2
 8000aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000db4:	4a29      	ldr	r2, [pc, #164]	@ (8000e5c <MX_ADC1_Init+0xc0>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dca:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e14:	f008 f95a 	bl	80090cc <HAL_ADC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e1e:	f004 fab1 	bl	8005384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_ADC1_Init+0xc4>)
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e26:	2306      	movs	r3, #6
 8000e28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e2e:	237f      	movs	r3, #127	@ 0x7f
 8000e30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e32:	2304      	movs	r3, #4
 8000e34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e40:	f008 fd10 	bl	8009864 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f004 fa9b 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000003c 	.word	0x2000003c
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	3ef08000 	.word	0x3ef08000

08000e64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09e      	sub	sp, #120	@ 0x78
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2254      	movs	r2, #84	@ 0x54
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00c fdc5 	bl	800da14 <memset>
  if(adcHandle->Instance==ADC1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a29      	ldr	r2, [pc, #164]	@ (8000f34 <HAL_ADC_MspInit+0xd0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d14a      	bne.n	8000f2a <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000eac:	2307      	movs	r3, #7
 8000eae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b fab4 	bl	800c430 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000ece:	f004 fa59 	bl	8005384 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f06:	230b      	movs	r3, #11
 8000f08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f12:	4619      	mov	r1, r3
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <HAL_ADC_MspInit+0xd8>)
 8000f16:	f009 fb7d 	bl	800a614 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2012      	movs	r0, #18
 8000f20:	f009 fb01 	bl	800a526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000f24:	2012      	movs	r0, #18
 8000f26:	f009 fb1a 	bl	800a55e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3778      	adds	r7, #120	@ 0x78
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	50040000 	.word	0x50040000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e021      	b.n	8000f90 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000f4c:	4a37      	ldr	r2, [pc, #220]	@ (800102c <aesroundkeys+0xec>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	061a      	lsls	r2, r3, #24
 8000f56:	4935      	ldr	r1, [pc, #212]	@ (800102c <aesroundkeys+0xec>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000f64:	431a      	orrs	r2, r3
 8000f66:	4931      	ldr	r1, [pc, #196]	@ (800102c <aesroundkeys+0xec>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000f74:	431a      	orrs	r2, r3
 8000f76:	492d      	ldr	r1, [pc, #180]	@ (800102c <aesroundkeys+0xec>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f7e:	0e1b      	lsrs	r3, r3, #24
 8000f80:	431a      	orrs	r2, r3
 8000f82:	492a      	ldr	r1, [pc, #168]	@ (800102c <aesroundkeys+0xec>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	ddda      	ble.n	8000f4c <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <aesroundkeys+0xec>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 8000f9c:	e03c      	b.n	8001018 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d127      	bne.n	8000ff8 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <aesroundkeys+0xf0>)
 8000fb2:	5c9b      	ldrb	r3, [r3, r2]
 8000fb4:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <aesroundkeys+0xf0>)
 8000fc0:	5c5b      	ldrb	r3, [r3, r1]
 8000fc2:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000fc4:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <aesroundkeys+0xf0>)
 8000fce:	5c5b      	ldrb	r3, [r3, r1]
 8000fd0:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8000fd2:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	0e12      	lsrs	r2, r2, #24
 8000fd8:	4915      	ldr	r1, [pc, #84]	@ (8001030 <aesroundkeys+0xf0>)
 8000fda:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000fdc:	4053      	eors	r3, r2
 8000fde:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da00      	bge.n	8000fea <aesroundkeys+0xaa>
 8000fe8:	3303      	adds	r3, #3
 8000fea:	109b      	asrs	r3, r3, #2
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <aesroundkeys+0xf4>)
 8000ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000ff4:	4053      	eors	r3, r2
 8000ff6:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <aesroundkeys+0xec>)
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4053      	eors	r3, r2
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4908      	ldr	r1, [pc, #32]	@ (800102c <aesroundkeys+0xec>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b2b      	cmp	r3, #43	@ 0x2b
 800101c:	ddbf      	ble.n	8000f9e <aesroundkeys+0x5e>
    }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	200000b0 	.word	0x200000b0
 8001030:	0800db64 	.word	0x0800db64
 8001034:	0800db3c 	.word	0x0800db3c

08001038 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8001048:	f7ff ff7a 	bl	8000f40 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8001056:	4b5a      	ldr	r3, [pc, #360]	@ (80011c0 <os_aes+0x188>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	4b58      	ldr	r3, [pc, #352]	@ (80011c0 <os_aes+0x188>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a57      	ldr	r2, [pc, #348]	@ (80011c0 <os_aes+0x188>)
 8001062:	6093      	str	r3, [r2, #8]
 8001064:	4b56      	ldr	r3, [pc, #344]	@ (80011c0 <os_aes+0x188>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a55      	ldr	r2, [pc, #340]	@ (80011c0 <os_aes+0x188>)
 800106a:	6053      	str	r3, [r2, #4]
 800106c:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <os_aes+0x188>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a53      	ldr	r2, [pc, #332]	@ (80011c0 <os_aes+0x188>)
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	f000 bc97 	b.w	80019a6 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8001078:	4b51      	ldr	r3, [pc, #324]	@ (80011c0 <os_aes+0x188>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	061a      	lsls	r2, r3, #24
 800107e:	4b50      	ldr	r3, [pc, #320]	@ (80011c0 <os_aes+0x188>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001088:	431a      	orrs	r2, r3
 800108a:	4b4d      	ldr	r3, [pc, #308]	@ (80011c0 <os_aes+0x188>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001094:	431a      	orrs	r2, r3
 8001096:	4b4a      	ldr	r3, [pc, #296]	@ (80011c0 <os_aes+0x188>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0e1b      	lsrs	r3, r3, #24
 800109c:	4313      	orrs	r3, r2
 800109e:	4a48      	ldr	r2, [pc, #288]	@ (80011c0 <os_aes+0x188>)
 80010a0:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80010a2:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <os_aes+0x188>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	061a      	lsls	r2, r3, #24
 80010a8:	4b45      	ldr	r3, [pc, #276]	@ (80011c0 <os_aes+0x188>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80010b2:	431a      	orrs	r2, r3
 80010b4:	4b42      	ldr	r3, [pc, #264]	@ (80011c0 <os_aes+0x188>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80010be:	431a      	orrs	r2, r3
 80010c0:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <os_aes+0x188>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	0e1b      	lsrs	r3, r3, #24
 80010c6:	4313      	orrs	r3, r2
 80010c8:	4a3d      	ldr	r2, [pc, #244]	@ (80011c0 <os_aes+0x188>)
 80010ca:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 80010cc:	4b3c      	ldr	r3, [pc, #240]	@ (80011c0 <os_aes+0x188>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	061a      	lsls	r2, r3, #24
 80010d2:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <os_aes+0x188>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80010dc:	431a      	orrs	r2, r3
 80010de:	4b38      	ldr	r3, [pc, #224]	@ (80011c0 <os_aes+0x188>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80010e8:	431a      	orrs	r2, r3
 80010ea:	4b35      	ldr	r3, [pc, #212]	@ (80011c0 <os_aes+0x188>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	0e1b      	lsrs	r3, r3, #24
 80010f0:	4313      	orrs	r3, r2
 80010f2:	4a33      	ldr	r2, [pc, #204]	@ (80011c0 <os_aes+0x188>)
 80010f4:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 80010f6:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <os_aes+0x188>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	061a      	lsls	r2, r3, #24
 80010fc:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <os_aes+0x188>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001106:	431a      	orrs	r2, r3
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <os_aes+0x188>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001112:	431a      	orrs	r2, r3
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <os_aes+0x188>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0e1b      	lsrs	r3, r3, #24
 800111a:	4313      	orrs	r3, r2
 800111c:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <os_aes+0x188>)
 800111e:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 8001120:	f000 bc41 	b.w	80019a6 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <os_aes+0x10a>
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d011      	beq.n	800115c <os_aes+0x124>
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <os_aes+0x124>
                a0 = AESAUX[0];
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <os_aes+0x188>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <os_aes+0x188>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <os_aes+0x188>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <os_aes+0x188>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	e062      	b.n	8001222 <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <os_aes+0x15c>
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	2b10      	cmp	r3, #16
 800116a:	d813      	bhi.n	8001194 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d101      	bne.n	8001186 <os_aes+0x14e>
 8001182:	2210      	movs	r2, #16
 8001184:	e000      	b.n	8001188 <os_aes+0x150>
 8001186:	2220      	movs	r2, #32
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4313      	orrs	r3, r2
 800118e:	b25b      	sxtb	r3, r3
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e046      	b.n	8001222 <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 8001194:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e026      	b.n	80011ea <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	021a      	lsls	r2, r3, #8
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	69f9      	ldr	r1, [r7, #28]
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d204      	bcs.n	80011b2 <os_aes+0x17a>
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	e009      	b.n	80011c6 <os_aes+0x18e>
 80011b2:	88bb      	ldrh	r3, [r7, #4]
 80011b4:	69f9      	ldr	r1, [r7, #28]
 80011b6:	4299      	cmp	r1, r3
 80011b8:	d104      	bne.n	80011c4 <os_aes+0x18c>
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	e003      	b.n	80011c6 <os_aes+0x18e>
 80011be:	bf00      	nop
 80011c0:	200000a0 	.word	0x200000a0
 80011c4:	2300      	movs	r3, #0
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d107      	bne.n	80011e4 <os_aes+0x1ac>
                        a0 = a1;
 80011d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d9d5      	bls.n	800119c <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d013      	beq.n	8001222 <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 80011fa:	4ba0      	ldr	r3, [pc, #640]	@ (800147c <os_aes+0x444>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001200:	4053      	eors	r3, r2
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 8001204:	4b9d      	ldr	r3, [pc, #628]	@ (800147c <os_aes+0x444>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120a:	4053      	eors	r3, r2
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 800120e:	4b9b      	ldr	r3, [pc, #620]	@ (800147c <os_aes+0x444>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	4053      	eors	r3, r2
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 8001218:	4b98      	ldr	r3, [pc, #608]	@ (800147c <os_aes+0x444>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	6a3a      	ldr	r2, [r7, #32]
 800121e:	4053      	eors	r3, r2
 8001220:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 8001222:	4b97      	ldr	r3, [pc, #604]	@ (8001480 <os_aes+0x448>)
 8001224:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3380      	adds	r3, #128	@ 0x80
 800122a:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001232:	4053      	eors	r3, r2
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3304      	adds	r3, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123e:	4053      	eors	r3, r2
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3308      	adds	r3, #8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124a:	4053      	eors	r3, r2
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	330c      	adds	r3, #12
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a3a      	ldr	r2, [r7, #32]
 8001256:	4053      	eors	r3, r2
 8001258:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8001272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <os_aes+0x44c>)
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4053      	eors	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	4b7e      	ldr	r3, [pc, #504]	@ (8001488 <os_aes+0x450>)
 800128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4053      	eors	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129a:	0c1b      	lsrs	r3, r3, #16
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4b7a      	ldr	r3, [pc, #488]	@ (800148c <os_aes+0x454>)
 80012a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4053      	eors	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ae:	0e1b      	lsrs	r3, r3, #24
 80012b0:	4a77      	ldr	r2, [pc, #476]	@ (8001490 <os_aes+0x458>)
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4053      	eors	r3, r2
 80012ba:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 80012bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <os_aes+0x44c>)
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4053      	eors	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001488 <os_aes+0x450>)
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	4053      	eors	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b68      	ldr	r3, [pc, #416]	@ (800148c <os_aes+0x454>)
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	4053      	eors	r3, r2
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	0e1b      	lsrs	r3, r3, #24
 80012fa:	4a65      	ldr	r2, [pc, #404]	@ (8001490 <os_aes+0x458>)
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4053      	eors	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4b5d      	ldr	r3, [pc, #372]	@ (8001484 <os_aes+0x44c>)
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	4053      	eors	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4b59      	ldr	r3, [pc, #356]	@ (8001488 <os_aes+0x450>)
 8001322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	4053      	eors	r3, r2
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	4b55      	ldr	r3, [pc, #340]	@ (800148c <os_aes+0x454>)
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4053      	eors	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	0e1b      	lsrs	r3, r3, #24
 8001344:	4a52      	ldr	r2, [pc, #328]	@ (8001490 <os_aes+0x458>)
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4053      	eors	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <os_aes+0x44c>)
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	4053      	eors	r3, r2
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <os_aes+0x450>)
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4053      	eors	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	0c1b      	lsrs	r3, r3, #16
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4b43      	ldr	r3, [pc, #268]	@ (800148c <os_aes+0x454>)
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4053      	eors	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	0e1b      	lsrs	r3, r3, #24
 800138e:	4a40      	ldr	r2, [pc, #256]	@ (8001490 <os_aes+0x458>)
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4053      	eors	r3, r2
 8001398:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <os_aes+0x44c>)
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c0:	4053      	eors	r3, r2
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001488 <os_aes+0x450>)
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d4:	4053      	eors	r3, r2
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	0c1b      	lsrs	r3, r3, #16
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <os_aes+0x454>)
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	6a3a      	ldr	r2, [r7, #32]
 80013e8:	4053      	eors	r3, r2
 80013ea:	623b      	str	r3, [r7, #32]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	0e1b      	lsrs	r3, r3, #24
 80013f0:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <os_aes+0x458>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013f8:	4053      	eors	r3, r2
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <os_aes+0x44c>)
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140a:	4053      	eors	r3, r2
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <os_aes+0x450>)
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	6a3a      	ldr	r2, [r7, #32]
 800141e:	4053      	eors	r3, r2
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <os_aes+0x454>)
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001432:	4053      	eors	r3, r2
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	0e1b      	lsrs	r3, r3, #24
 800143a:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <os_aes+0x458>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001442:	4053      	eors	r3, r2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <os_aes+0x44c>)
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	6a3a      	ldr	r2, [r7, #32]
 8001454:	4053      	eors	r3, r2
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <os_aes+0x450>)
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001468:	4053      	eors	r3, r2
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <os_aes+0x454>)
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	e00b      	b.n	8001494 <os_aes+0x45c>
 800147c:	200000a0 	.word	0x200000a0
 8001480:	200000b0 	.word	0x200000b0
 8001484:	0800e864 	.word	0x0800e864
 8001488:	0800e464 	.word	0x0800e464
 800148c:	0800e064 	.word	0x0800e064
 8001490:	0800dc64 	.word	0x0800dc64
 8001494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001496:	4053      	eors	r3, r2
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	0e1b      	lsrs	r3, r3, #24
 800149e:	4aa1      	ldr	r2, [pc, #644]	@ (8001724 <os_aes+0x6ec>)
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a6:	4053      	eors	r3, r2
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001728 <os_aes+0x6f0>)
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b8:	4053      	eors	r3, r2
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b99      	ldr	r3, [pc, #612]	@ (800172c <os_aes+0x6f4>)
 80014c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014cc:	4053      	eors	r3, r2
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b95      	ldr	r3, [pc, #596]	@ (8001730 <os_aes+0x6f8>)
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e0:	4053      	eors	r3, r2
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0e1b      	lsrs	r3, r3, #24
 80014e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001724 <os_aes+0x6ec>)
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	4053      	eors	r3, r2
 80014f2:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3320      	adds	r3, #32
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	429a      	cmp	r2, r3
 8001500:	f4ff aeab 	bcc.w	800125a <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4b81      	ldr	r3, [pc, #516]	@ (8001728 <os_aes+0x6f0>)
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4053      	eors	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4b7d      	ldr	r3, [pc, #500]	@ (800172c <os_aes+0x6f4>)
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4053      	eors	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	4b79      	ldr	r3, [pc, #484]	@ (8001730 <os_aes+0x6f8>)
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	4053      	eors	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001558:	0e1b      	lsrs	r3, r3, #24
 800155a:	4a72      	ldr	r2, [pc, #456]	@ (8001724 <os_aes+0x6ec>)
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4053      	eors	r3, r2
 8001564:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <os_aes+0x6f0>)
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4053      	eors	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <os_aes+0x6f4>)
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4053      	eors	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <os_aes+0x6f8>)
 8001596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4053      	eors	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a2:	0e1b      	lsrs	r3, r3, #24
 80015a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001724 <os_aes+0x6ec>)
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4053      	eors	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001728 <os_aes+0x6f0>)
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4053      	eors	r3, r2
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b58      	ldr	r3, [pc, #352]	@ (800172c <os_aes+0x6f4>)
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	4053      	eors	r3, r2
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	0c1b      	lsrs	r3, r3, #16
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b54      	ldr	r3, [pc, #336]	@ (8001730 <os_aes+0x6f8>)
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4053      	eors	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	0e1b      	lsrs	r3, r3, #24
 80015ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001724 <os_aes+0x6ec>)
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4053      	eors	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <os_aes+0x6f0>)
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4053      	eors	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b45      	ldr	r3, [pc, #276]	@ (800172c <os_aes+0x6f4>)
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4053      	eors	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	0c1b      	lsrs	r3, r3, #16
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <os_aes+0x6f8>)
 800162a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4053      	eors	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	0e1b      	lsrs	r3, r3, #24
 8001638:	4a3a      	ldr	r2, [pc, #232]	@ (8001724 <os_aes+0x6ec>)
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4053      	eors	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	0e1b      	lsrs	r3, r3, #24
 800164e:	4a39      	ldr	r2, [pc, #228]	@ (8001734 <os_aes+0x6fc>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001656:	4053      	eors	r3, r2
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <os_aes+0x6fc>)
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800166a:	4053      	eors	r3, r2
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <os_aes+0x6fc>)
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800167e:	4053      	eors	r3, r2
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <os_aes+0x6fc>)
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	461a      	mov	r2, r3
 800168e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001690:	4053      	eors	r3, r2
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	0e1b      	lsrs	r3, r3, #24
 800169e:	4a25      	ldr	r2, [pc, #148]	@ (8001734 <os_aes+0x6fc>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016a6:	4053      	eors	r3, r2
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <os_aes+0x6fc>)
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016ba:	4053      	eors	r3, r2
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <os_aes+0x6fc>)
 80016c8:	5c9b      	ldrb	r3, [r3, r2]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016ce:	4053      	eors	r3, r2
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <os_aes+0x6fc>)
 80016da:	5c9b      	ldrb	r3, [r3, r2]
 80016dc:	461a      	mov	r2, r3
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e0:	4053      	eors	r3, r2
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <os_aes+0x6fc>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f6:	4053      	eors	r3, r2
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <os_aes+0x6fc>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800170a:	4053      	eors	r3, r2
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <os_aes+0x6fc>)
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171e:	4053      	eors	r3, r2
 8001720:	e00a      	b.n	8001738 <os_aes+0x700>
 8001722:	bf00      	nop
 8001724:	0800dc64 	.word	0x0800dc64
 8001728:	0800e864 	.word	0x0800e864
 800172c:	0800e464 	.word	0x0800e464
 8001730:	0800e064 	.word	0x0800e064
 8001734:	0800db64 	.word	0x0800db64
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <os_aes+0x888>)
 8001742:	5c9b      	ldrb	r3, [r3, r2]
 8001744:	461a      	mov	r2, r3
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	4053      	eors	r3, r2
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	0e1b      	lsrs	r3, r3, #24
 8001756:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <os_aes+0x888>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	4053      	eors	r3, r2
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b55      	ldr	r3, [pc, #340]	@ (80018c0 <os_aes+0x888>)
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	4053      	eors	r3, r2
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	4b50      	ldr	r3, [pc, #320]	@ (80018c0 <os_aes+0x888>)
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	6a3a      	ldr	r2, [r7, #32]
 8001786:	4053      	eors	r3, r2
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <os_aes+0x888>)
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	461a      	mov	r2, r3
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	4053      	eors	r3, r2
 800179a:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d056      	beq.n	8001854 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	111b      	asrs	r3, r3, #4
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d041      	beq.n	800183a <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 80017b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b8:	0fdb      	lsrs	r3, r3, #31
 80017ba:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 80017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017be:	005a      	lsls	r2, r3, #1
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	0fdb      	lsrs	r3, r3, #31
 80017c4:	4313      	orrs	r3, r2
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 80017c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ca:	005a      	lsls	r2, r3, #1
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	0fdb      	lsrs	r3, r3, #31
 80017d0:	4313      	orrs	r3, r2
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	005a      	lsls	r2, r3, #1
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	0fdb      	lsrs	r3, r3, #31
 80017dc:	4313      	orrs	r3, r2
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <os_aes+0x7bc>
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 80017f2:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1da      	bne.n	80017b6 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 8001800:	4b30      	ldr	r3, [pc, #192]	@ (80018c4 <os_aes+0x88c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001806:	4053      	eors	r3, r2
 8001808:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <os_aes+0x88c>)
 800180a:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <os_aes+0x88c>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001812:	4053      	eors	r3, r2
 8001814:	4a2b      	ldr	r2, [pc, #172]	@ (80018c4 <os_aes+0x88c>)
 8001816:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <os_aes+0x88c>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	4053      	eors	r3, r2
 8001820:	4a28      	ldr	r2, [pc, #160]	@ (80018c4 <os_aes+0x88c>)
 8001822:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <os_aes+0x88c>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	4053      	eors	r3, r2
 800182c:	4a25      	ldr	r2, [pc, #148]	@ (80018c4 <os_aes+0x88c>)
 800182e:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001836:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8001838:	e4ad      	b.n	8001196 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 800183a:	4a22      	ldr	r2, [pc, #136]	@ (80018c4 <os_aes+0x88c>)
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8001840:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <os_aes+0x88c>)
 8001842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001844:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <os_aes+0x88c>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <os_aes+0x88c>)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	60d3      	str	r3, [r2, #12]
 8001852:	e094      	b.n	800197e <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d034      	beq.n	80018c8 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	2b10      	cmp	r3, #16
 8001862:	bf28      	it	cs
 8001864:	2310      	movcs	r3, #16
 8001866:	b29b      	uxth	r3, r3
 8001868:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	e01d      	b.n	80018ac <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4413      	add	r3, r2
 8001876:	7819      	ldrb	r1, [r3, #0]
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	0e1b      	lsrs	r3, r3, #24
 800187c:	b2da      	uxtb	r2, r3
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4403      	add	r3, r0
 8001884:	404a      	eors	r2, r1
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d105      	bne.n	80018a6 <os_aes+0x86e>
                            a0 = a1;
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3dd      	bcc.n	8001870 <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <os_aes+0x88c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <os_aes+0x88c>)
 80018bc:	60d3      	str	r3, [r2, #12]
 80018be:	e05e      	b.n	800197e <os_aes+0x946>
 80018c0:	0800db64 	.word	0x0800db64
 80018c4:	200000a0 	.word	0x200000a0
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	0e1b      	lsrs	r3, r3, #24
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	0c1a      	lsrs	r2, r3, #16
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	0a1a      	lsrs	r2, r3, #8
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3302      	adds	r3, #2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3303      	adds	r3, #3
 80018ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 80018f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f6:	0e1a      	lsrs	r2, r3, #24
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3304      	adds	r3, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001902:	0c1a      	lsrs	r2, r3, #16
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3305      	adds	r3, #5
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190e:	0a1a      	lsrs	r2, r3, #8
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3306      	adds	r3, #6
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	3307      	adds	r3, #7
 800191c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	0e1a      	lsrs	r2, r3, #24
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3308      	adds	r3, #8
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	0c1a      	lsrs	r2, r3, #16
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3309      	adds	r3, #9
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	0a1a      	lsrs	r2, r3, #8
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	330a      	adds	r3, #10
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	330b      	adds	r3, #11
 800194a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	0e1a      	lsrs	r2, r3, #24
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	330c      	adds	r3, #12
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	0c1a      	lsrs	r2, r3, #16
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	330d      	adds	r3, #13
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	0a1a      	lsrs	r2, r3, #8
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	330e      	adds	r3, #14
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	330f      	adds	r3, #15
 8001978:	6a3a      	ldr	r2, [r7, #32]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <os_aes+0x95a>
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <os_aes+0x966>
                buf += 16;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	3310      	adds	r3, #16
 8001996:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	3b10      	subs	r3, #16
 800199c:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f73f abba 	bgt.w	8001124 <os_aes+0xec>
        }
        return AESAUX[0];
 80019b0:	4b02      	ldr	r3, [pc, #8]	@ (80019bc <os_aes+0x984>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3730      	adds	r7, #48	@ 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000a0 	.word	0x200000a0

080019c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	4a32      	ldr	r2, [pc, #200]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fa:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a26      	ldr	r2, [pc, #152]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <MX_GPIO_Init+0xe4>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f648 0180 	movw	r1, #34944	@ 0x8880
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f008 ff5e 	bl	800a8e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2102      	movs	r1, #2
 8001a30:	481d      	ldr	r0, [pc, #116]	@ (8001aa8 <MX_GPIO_Init+0xe8>)
 8001a32:	f008 ff59 	bl	800a8e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 8001a36:	f648 0380 	movw	r3, #34944	@ 0x8880
 8001a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a52:	f008 fddf 	bl	800a614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a56:	2302      	movs	r3, #2
 8001a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <MX_GPIO_Init+0xe8>)
 8001a6e:	f008 fdd1 	bl	800a614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001a72:	23c0      	movs	r3, #192	@ 0xc0
 8001a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <MX_GPIO_Init+0xe8>)
 8001a88:	f008 fdc4 	bl	800a614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2017      	movs	r0, #23
 8001a92:	f008 fd48 	bl	800a526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a96:	2017      	movs	r0, #23
 8001a98:	f008 fd61 	bl	800a55e <HAL_NVIC_EnableIRQ>

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000400 	.word	0x48000400

08001aac <hal_io_init>:


// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f008 feff 	bl	800a8e8 <HAL_GPIO_WritePin>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b08c      	sub	sp, #48	@ 0x30
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <hal_pin_rst+0x16>
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d116      	bne.n	8001b36 <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001b08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b0c:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f008 fd78 	bl	800a614 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	461a      	mov	r2, r3
 8001b28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f008 feda 	bl	800a8e8 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001b34:	e00e      	b.n	8001b54 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001b36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b3a:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4e:	f008 fd61 	bl	800a614 <HAL_GPIO_Init>
    }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3730      	adds	r7, #48	@ 0x30
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2b40      	cmp	r3, #64	@ 0x40
 8001b6a:	d102      	bne.n	8001b72 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f004 f971 	bl	8005e54 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b80      	cmp	r3, #128	@ 0x80
 8001b76:	d102      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f004 f96b 	bl	8005e54 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	f107 010c 	add.w	r1, r7, #12
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <hal_spi+0x38>)
 8001bbc:	f00a ffc3 	bl	800cb46 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001bc0:	7a3b      	ldrb	r3, [r7, #8]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200003b0 	.word	0x200003b0

08001bd0 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <hal_ticks>:

u4_t hal_ticks () {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001be6:	f000 f8b9 	bl	8001d5c <hal_disableIRQs>
    u4_t t = HAL.ticks;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <hal_ticks+0x58>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <hal_ticks+0x5c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <hal_ticks+0x5c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d10d      	bne.n	8001c22 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <hal_ticks+0x5c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d106      	bne.n	8001c22 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <hal_ticks+0x5c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	807b      	strh	r3, [r7, #2]
    		t++;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001c22:	f000 f8ab 	bl	8001d7c <hal_enableIRQs>
    return (t<<16)|cnt;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	4313      	orrs	r3, r2
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000160 	.word	0x20000160
 8001c3c:	20000460 	.word	0x20000460

08001c40 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001c48:	f7ff ffca 	bl	8001be0 <hal_ticks>
 8001c4c:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dc01      	bgt.n	8001c60 <deltaticks+0x20>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e008      	b.n	8001c72 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	141b      	asrs	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <deltaticks+0x2e>
 8001c68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c6c:	e001      	b.n	8001c72 <deltaticks+0x32>
    return (u2_t)d;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	b29b      	uxth	r3, r3
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001c82:	bf00      	nop
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffdb 	bl	8001c40 <deltaticks>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f9      	bne.n	8001c84 <hal_waitUntil+0xa>
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <hal_checkTimer+0x78>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <hal_checkTimer+0x78>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0202 	bic.w	r2, r2, #2
 8001cb2:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ffc3 	bl	8001c40 <deltaticks>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	81fb      	strh	r3, [r7, #14]
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d809      	bhi.n	8001cd8 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <hal_checkTimer+0x78>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <hal_checkTimer+0x78>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0202 	bic.w	r2, r2, #2
 8001cd2:	60da      	str	r2, [r3, #12]
        return 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e018      	b.n	8001d0a <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <hal_checkTimer+0x78>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001cde:	89fa      	ldrh	r2, [r7, #14]
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <hal_checkTimer+0x78>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	440a      	add	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <hal_checkTimer+0x78>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <hal_checkTimer+0x78>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0202 	orr.w	r2, r2, #2
 8001cf6:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <hal_checkTimer+0x78>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <hal_checkTimer+0x78>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	621a      	str	r2, [r3, #32]
        return 0;
 8001d08:	2300      	movs	r3, #0
    }
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000460 	.word	0x20000460

08001d18 <HAL_TIM_PeriodElapsedCallback>:

//Callback deja renseigne dans le main.c
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d104      	bne.n	8001d36 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d34:	6053      	str	r3, [r2, #4]
    }

	if(htim == &htim6) HAL_ADC_Start_IT(&hadc1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d102      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001d3e:	4806      	ldr	r0, [pc, #24]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d40:	f007 fb06 	bl	8009350 <HAL_ADC_Start_IT>

}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000460 	.word	0x20000460
 8001d50:	20000160 	.word	0x20000160
 8001d54:	20000414 	.word	0x20000414
 8001d58:	2000003c 	.word	0x2000003c

08001d5c <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <hal_disableIRQs+0x1c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a03      	ldr	r2, [pc, #12]	@ (8001d78 <hal_disableIRQs+0x1c>)
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000160 	.word	0x20000160

08001d7c <hal_enableIRQs>:

void hal_enableIRQs () {
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <hal_enableIRQs+0x24>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <hal_enableIRQs+0x24>)
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <hal_enableIRQs+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d92:	b662      	cpsie	i
}
 8001d94:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	20000160 	.word	0x20000160

08001da4 <hal_sleep>:

void hal_sleep () {
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001da8:	bf30      	wfi
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001db8:	2208      	movs	r2, #8
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4807      	ldr	r0, [pc, #28]	@ (8001ddc <hal_init+0x28>)
 8001dbe:	f00b fe29 	bl	800da14 <memset>
    hal_disableIRQs();
 8001dc2:	f7ff ffcb 	bl	8001d5c <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 8001dc6:	f7ff fe71 	bl	8001aac <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 8001dca:	f7ff fedc 	bl	8001b86 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 8001dce:	f7ff feff 	bl	8001bd0 <hal_time_init>
    hal_enableIRQs();
 8001dd2:	f7ff ffd3 	bl	8001d7c <hal_enableIRQs>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000160 	.word	0x20000160

08001de0 <hal_failed>:

void hal_failed () {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001de4:	f7ff ffba 	bl	8001d5c <hal_disableIRQs>
    hal_sleep();
 8001de8:	f7ff ffdc 	bl	8001da4 <hal_sleep>
    while(1);
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <hal_failed+0xc>

08001df0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <MX_I2C1_Init+0x78>)
 8001df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <MX_I2C1_Init+0x7c>)
 8001dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e2a:	480e      	ldr	r0, [pc, #56]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e2c:	f008 fd8c 	bl	800a948 <HAL_I2C_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e36:	f003 faa5 	bl	8005384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e3e:	f009 fbfb 	bl	800b638 <HAL_I2CEx_ConfigAnalogFilter>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e48:	f003 fa9c 	bl	8005384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_I2C1_Init+0x74>)
 8001e50:	f009 fc3d 	bl	800b6ce <HAL_I2CEx_ConfigDigitalFilter>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e5a:	f003 fa93 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000168 	.word	0x20000168
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	10d19ce4 	.word	0x10d19ce4

08001e70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b09e      	sub	sp, #120	@ 0x78
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	2254      	movs	r2, #84	@ 0x54
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00b fdbf 	bl	800da14 <memset>
  if(i2cHandle->Instance==I2C1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_I2C_MspInit+0xa8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d137      	bne.n	8001f10 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ea0:	2340      	movs	r3, #64	@ 0x40
 8001ea2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00a fabf 	bl	800c430 <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001eb8:	f003 fa64 	bl	8005384 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_I2C_MspInit+0xac>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec0:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <HAL_I2C_MspInit+0xac>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_I2C_MspInit+0xac>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ed8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	2312      	movs	r3, #18
 8001edc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f008 fb8e 	bl	800a614 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_I2C_MspInit+0xac>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_I2C_MspInit+0xac>)
 8001efe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_I2C_MspInit+0xac>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f10:	bf00      	nop
 8001f12:	3778      	adds	r7, #120	@ 0x78
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	40021000 	.word	0x40021000

08001f20 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460a      	mov	r2, r1
 8001f92:	80fb      	strh	r3, [r7, #6]
 8001f94:	4613      	mov	r3, r2
 8001f96:	717b      	strb	r3, [r7, #5]
 8001f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	797b      	ldrb	r3, [r7, #5]
 8001fa4:	015b      	lsls	r3, r3, #5
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	09db      	lsrs	r3, r3, #7
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	6039      	str	r1, [r7, #0]
 8001fe4:	80fb      	strh	r3, [r7, #6]
 8001fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	01db      	lsls	r3, r3, #7
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	6039      	str	r1, [r7, #0]
 8002030:	80fb      	strh	r3, [r7, #6]
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	b21a      	sxth	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21b      	sxth	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	3301      	adds	r3, #1
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <updr2rps+0x20>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	0800ec64 	.word	0x0800ec64

08002078 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ffe5 	bl	8002054 <updr2rps>
 800208a:	4603      	mov	r3, r0
 800208c:	2101      	movs	r1, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ffa3 	bl	8001fda <setNocrc>
 8002094:	4603      	mov	r3, r0
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4a07      	ldr	r2, [pc, #28]	@ (80020cc <decDR+0x2c>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	2bff      	cmp	r3, #255	@ 0xff
 80020b2:	d003      	beq.n	80020bc <decDR+0x1c>
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e000      	b.n	80020be <decDR+0x1e>
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	0800ec64 	.word	0x0800ec64

080020d0 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	3301      	adds	r3, #1
 80020de:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <validDR+0x28>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	2bff      	cmp	r3, #255	@ 0xff
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	0800ec64 	.word	0x0800ec64

080020fc <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]
 800210c:	e005      	b.n	800211a <lowerDR+0x1e>
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffc5 	bl	80020a0 <decDR>
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	79bb      	ldrb	r3, [r7, #6]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	71ba      	strb	r2, [r7, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f4      	bne.n	800210e <lowerDR+0x12>
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b21a      	sxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3301      	adds	r3, #1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21b      	sxth	r3, r3
 800214a:	b29b      	uxth	r3, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3301      	adds	r3, #1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4313      	orrs	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3302      	adds	r3, #2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3303      	adds	r3, #3
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	4313      	orrs	r3, r2
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3303      	adds	r3, #3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3302      	adds	r3, #2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	4313      	orrs	r3, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3301      	adds	r3, #1
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	4313      	orrs	r3, r2
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	0a1a      	lsrs	r2, r3, #8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3301      	adds	r3, #1
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	0c1a      	lsrs	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3302      	adds	r3, #2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	0e1a      	lsrs	r2, r3, #24
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3303      	adds	r3, #3
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3303      	adds	r3, #3
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	0a1a      	lsrs	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3302      	adds	r3, #2
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0c1a      	lsrs	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3301      	adds	r3, #1
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	0e1b      	lsrs	r3, r3, #24
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	701a      	strb	r2, [r3, #0]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8002282:	23ff      	movs	r3, #255	@ 0xff
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 800228e:	b480      	push	{r7}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 800229c:	f241 0321 	movw	r3, #4129	@ 0x1021
 80022a0:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e026      	b.n	80022f6 <os_crc16+0x68>
        remainder ^= data[i] << 8;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022b8:	4053      	eors	r3, r2
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80022be:	2308      	movs	r3, #8
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e012      	b.n	80022ea <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 80022c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da08      	bge.n	80022de <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 80022cc:	8afb      	ldrh	r3, [r7, #22]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022d6:	4053      	eors	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	82fb      	strh	r3, [r7, #22]
 80022dc:	e002      	b.n	80022e4 <os_crc16+0x56>
            else 
                remainder <<= 1;
 80022de:	8afb      	ldrh	r3, [r7, #22]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e9      	bne.n	80022c4 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	3301      	adds	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3d4      	bcc.n	80022a8 <os_crc16+0x1a>
        }
    }
    return remainder;
 80022fe:	8afb      	ldrh	r3, [r7, #22]
}
 8002300:	4618      	mov	r0, r3
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 800231a:	2210      	movs	r2, #16
 800231c:	2100      	movs	r1, #0
 800231e:	4810      	ldr	r0, [pc, #64]	@ (8002360 <micB0+0x54>)
 8002320:	f00b fb78 	bl	800da14 <memset>
    AESaux[0]  = 0x49;
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <micB0+0x54>)
 8002326:	2249      	movs	r2, #73	@ 0x49
 8002328:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <micB0+0x58>)
 8002338:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <micB0+0x5c>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <micB0+0x60>)
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff57 	bl	80021fa <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <micB0+0x64>)
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff52 	bl	80021fa <os_wlsbf4>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200000a0 	.word	0x200000a0
 8002364:	200000a5 	.word	0x200000a5
 8002368:	200000af 	.word	0x200000af
 800236c:	200000a6 	.word	0x200000a6
 8002370:	200000aa 	.word	0x200000aa

08002374 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68b8      	ldr	r0, [r7, #8]
 800238a:	f7ff ffbf 	bl	800230c <micB0>
    os_copyMem(AESkey,key,16);
 800238e:	2210      	movs	r2, #16
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	480d      	ldr	r0, [pc, #52]	@ (80023c8 <aes_verifyMic+0x54>)
 8002394:	f00b fb6a 	bl	800da6c <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6a39      	ldr	r1, [r7, #32]
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7fe fe49 	bl	8001038 <os_aes>
 80023a6:	4604      	mov	r4, r0
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	6a3a      	ldr	r2, [r7, #32]
 80023ac:	4413      	add	r3, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff feef 	bl	8002192 <os_rmsbf4>
 80023b4:	4603      	mov	r3, r0
 80023b6:	429c      	cmp	r4, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	200000b0 	.word	0x200000b0

080023cc <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68b8      	ldr	r0, [r7, #8]
 80023e2:	f7ff ff93 	bl	800230c <micB0>
    os_copyMem(AESkey,key,16);
 80023e6:	2210      	movs	r2, #16
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	480b      	ldr	r0, [pc, #44]	@ (8002418 <aes_appendMic+0x4c>)
 80023ec:	f00b fb3e 	bl	800da6c <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	6a3a      	ldr	r2, [r7, #32]
 80023f4:	18d4      	adds	r4, r2, r3
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	2002      	movs	r0, #2
 8002400:	f7fe fe1a 	bl	8001038 <os_aes>
 8002404:	4603      	mov	r3, r0
 8002406:	4619      	mov	r1, r3
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff ff17 	bl	800223c <os_wmsbf4>
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	bf00      	nop
 8002418:	200000b0 	.word	0x200000b0

0800241c <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8002426:	480b      	ldr	r0, [pc, #44]	@ (8002454 <aes_appendMic0+0x38>)
 8002428:	f002 fe38 	bl	800509c <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	18d4      	adds	r4, r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	200a      	movs	r0, #10
 800243c:	f7fe fdfc 	bl	8001038 <os_aes>
 8002440:	4603      	mov	r3, r0
 8002442:	4619      	mov	r1, r3
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff fef9 	bl	800223c <os_wmsbf4>
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	200000b0 	.word	0x200000b0

08002458 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8002462:	480d      	ldr	r0, [pc, #52]	@ (8002498 <aes_verifyMic0+0x40>)
 8002464:	f002 fe1a 	bl	800509c <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	200a      	movs	r0, #10
 8002472:	f7fe fde1 	bl	8001038 <os_aes>
 8002476:	4604      	mov	r4, r0
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fe87 	bl	8002192 <os_rmsbf4>
 8002484:	4603      	mov	r3, r0
 8002486:	429c      	cmp	r4, r3
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	200000b0 	.word	0x200000b0

0800249c <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80024a6:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <aes_encrypt+0x28>)
 80024a8:	f002 fdf8 	bl	800509c <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe fdbf 	bl	8001038 <os_aes>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200000b0 	.word	0x200000b0

080024c8 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dd29      	ble.n	8002530 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 80024dc:	2210      	movs	r2, #16
 80024de:	2100      	movs	r1, #0
 80024e0:	4815      	ldr	r0, [pc, #84]	@ (8002538 <aes_cipher+0x70>)
 80024e2:	f00b fa97 	bl	800da14 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <aes_cipher+0x74>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <aes_cipher+0x70>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <aes_cipher+0x78>)
 8002500:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <aes_cipher+0x7c>)
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fe77 	bl	80021fa <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800250c:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <aes_cipher+0x80>)
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fe72 	bl	80021fa <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8002516:	2210      	movs	r2, #16
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	480c      	ldr	r0, [pc, #48]	@ (800254c <aes_cipher+0x84>)
 800251c:	f00b faa6 	bl	800da6c <memcpy>
    os_aes(AES_CTR, payload, len);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	2004      	movs	r0, #4
 800252a:	f7fe fd85 	bl	8001038 <os_aes>
 800252e:	e000      	b.n	8002532 <aes_cipher+0x6a>
        return;
 8002530:	bf00      	nop
}
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200000a0 	.word	0x200000a0
 800253c:	200000af 	.word	0x200000af
 8002540:	200000a5 	.word	0x200000a5
 8002544:	200000a6 	.word	0x200000a6
 8002548:	200000aa 	.word	0x200000aa
 800254c:	200000b0 	.word	0x200000b0

08002550 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4603      	mov	r3, r0
 800255e:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8002560:	2210      	movs	r2, #16
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f00b fa55 	bl	800da14 <memset>
    nwkkey[0] = 0x01;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3301      	adds	r3, #1
 8002574:	2206      	movs	r2, #6
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f00b fa77 	bl	800da6c <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3307      	adds	r3, #7
 8002582:	89fa      	ldrh	r2, [r7, #14]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fe20 	bl	80021cc <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 800258c:	2210      	movs	r2, #16
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	f00b fa6b 	bl	800da6c <memcpy>
    artkey[0] = 0x02;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 800259c:	4809      	ldr	r0, [pc, #36]	@ (80025c4 <aes_sessKeys+0x74>)
 800259e:	f002 fd7d 	bl	800509c <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 80025a2:	2210      	movs	r2, #16
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fd46 	bl	8001038 <os_aes>
    os_getDevKey(AESkey);
 80025ac:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <aes_sessKeys+0x74>)
 80025ae:	f002 fd75 	bl	800509c <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 80025b2:	2210      	movs	r2, #16
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fd3e 	bl	8001038 <os_aes>
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200000b0 	.word	0x200000b0

080025c8 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fca3 	bl	8001f20 <getSf>
 80025da:	4603      	mov	r3, r0
 80025dc:	461c      	mov	r4, r3
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fcad 	bl	8001f40 <getBw>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4a06      	ldr	r2, [pc, #24]	@ (8002604 <getSensitivity+0x3c>)
 80025ec:	4623      	mov	r3, r4
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4423      	add	r3, r4
 80025f2:	4413      	add	r3, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3b8d      	subs	r3, #141	@ 0x8d
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	0800ec80 	.word	0x0800ec80

08002608 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	460a      	mov	r2, r1
 8002612:	80fb      	strh	r3, [r7, #6]
 8002614:	4613      	mov	r3, r2
 8002616:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fc90 	bl	8001f40 <getBw>
 8002620:	4603      	mov	r3, r0
 8002622:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fc7a 	bl	8001f20 <getSf>
 800262c:	4603      	mov	r3, r0
 800262e:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8002630:	7abb      	ldrb	r3, [r7, #10]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8002636:	797b      	ldrb	r3, [r7, #5]
 8002638:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 800263a:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	4a3c      	ldr	r2, [pc, #240]	@ (8002734 <calcAirTime+0x12c>)
 8002644:	fb82 1203 	smull	r1, r2, r2, r3
 8002648:	1312      	asrs	r2, r2, #12
 800264a:	17db      	asrs	r3, r3, #31
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	e06d      	b.n	800272c <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	3306      	adds	r3, #6
 8002654:	b2db      	uxtb	r3, r3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 800265a:	7abb      	ldrb	r3, [r7, #10]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d901      	bls.n	8002664 <calcAirTime+0x5c>
 8002660:	2308      	movs	r3, #8
 8002662:	e000      	b.n	8002666 <calcAirTime+0x5e>
 8002664:	2300      	movs	r3, #0
 8002666:	7dfa      	ldrb	r2, [r7, #23]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 800266c:	797b      	ldrb	r3, [r7, #5]
 800266e:	00da      	lsls	r2, r3, #3
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f103 041c 	add.w	r4, r3, #28
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fc9d 	bl	8001fba <getNocrc>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <calcAirTime+0x82>
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <calcAirTime+0x84>
 800268a:	2310      	movs	r3, #16
 800268c:	441c      	add	r4, r3
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fcb9 	bl	8002008 <getIh>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <calcAirTime+0x98>
 800269c:	2314      	movs	r3, #20
 800269e:	e000      	b.n	80026a2 <calcAirTime+0x9a>
 80026a0:	2300      	movs	r3, #0
 80026a2:	1ae3      	subs	r3, r4, r3
 80026a4:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	dd15      	ble.n	80026d8 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 80026ac:	7a7a      	ldrb	r2, [r7, #9]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	1e5a      	subs	r2, r3, #1
 80026b4:	7a7b      	ldrb	r3, [r7, #9]
 80026b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80026ba:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc50 	bl	8001f64 <getCr>
 80026c4:	4603      	mov	r3, r0
 80026c6:	1d5a      	adds	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	613b      	str	r3, [r7, #16]
        tmp += 8;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	3308      	adds	r3, #8
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e001      	b.n	80026dc <calcAirTime+0xd4>
    } else {
        tmp = 8;
 80026d8:	2308      	movs	r3, #8
 80026da:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	3331      	adds	r3, #49	@ 0x31
 80026e2:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 80026e4:	7aba      	ldrb	r2, [r7, #10]
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 80026f0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80026f4:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d907      	bls.n	800270c <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	3b04      	subs	r3, #4
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	fa42 f303 	asr.w	r3, r2, r3
 8002706:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8002708:	2304      	movs	r3, #4
 800270a:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002718:	fb03 f202 	mul.w	r2, r3, r2
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	0fd9      	lsrs	r1, r3, #31
 8002720:	440b      	add	r3, r1
 8002722:	105b      	asrs	r3, r3, #1
 8002724:	441a      	add	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	14f8b589 	.word	0x14f8b589

08002738 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	4613      	mov	r3, r2
 8002746:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 800274e:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <calcRxWindow+0xa0>)
 8002750:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002754:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <calcRxWindow+0xa0>)
 8002758:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e011      	b.n	8002784 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <calcRxWindow+0xa0>)
 8002762:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002766:	461a      	mov	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	11db      	asrs	r3, r3, #7
 8002770:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8002772:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <calcRxWindow+0xa0>)
 8002774:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	11db      	asrs	r3, r3, #7
 8002782:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8002784:	2305      	movs	r3, #5
 8002786:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8002788:	4b13      	ldr	r3, [pc, #76]	@ (80027d8 <calcRxWindow+0xa0>)
 800278a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800278e:	461a      	mov	r2, r3
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <calcRxWindow+0xa0>)
 8002792:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	4a0e      	ldr	r2, [pc, #56]	@ (80027dc <calcRxWindow+0xa4>)
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3305      	adds	r3, #5
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <calcRxWindow+0xa0>)
 80027b6:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3b08      	subs	r3, #8
 80027bc:	79ba      	ldrb	r2, [r7, #6]
 80027be:	4907      	ldr	r1, [pc, #28]	@ (80027dc <calcRxWindow+0xa4>)
 80027c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027c4:	fb03 f202 	mul.w	r2, r3, r2
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4413      	add	r3, r2
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	200001bc 	.word	0x200001bc
 80027dc:	0800eca4 	.word	0x0800eca4

080027e0 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4606      	mov	r6, r0
 80027ea:	4608      	mov	r0, r1
 80027ec:	4631      	mov	r1, r6
 80027ee:	73f9      	strb	r1, [r7, #15]
 80027f0:	4601      	mov	r1, r0
 80027f2:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 80027f4:	7bb9      	ldrb	r1, [r7, #14]
 80027f6:	2900      	cmp	r1, #0
 80027f8:	d014      	beq.n	8002824 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 80027fa:	493b      	ldr	r1, [pc, #236]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 80027fc:	2000      	movs	r0, #0
 80027fe:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8002802:	4939      	ldr	r1, [pc, #228]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 8002804:	2000      	movs	r0, #0
 8002806:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 800280a:	4937      	ldr	r1, [pc, #220]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 800280c:	2000      	movs	r0, #0
 800280e:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002812:	4935      	ldr	r1, [pc, #212]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 8002814:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8002818:	f041 010c 	orr.w	r1, r1, #12
 800281c:	b2c8      	uxtb	r0, r1
 800281e:	4932      	ldr	r1, [pc, #200]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 8002820:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8002824:	2142      	movs	r1, #66	@ 0x42
 8002826:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8002828:	7bf9      	ldrb	r1, [r7, #15]
 800282a:	2000      	movs	r0, #0
 800282c:	460c      	mov	r4, r1
 800282e:	4605      	mov	r5, r0
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f04f 0a00 	mov.w	sl, #0
 8002838:	f04f 0b00 	mov.w	fp, #0
 800283c:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002840:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002844:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002848:	4650      	mov	r0, sl
 800284a:	4659      	mov	r1, fp
 800284c:	1b02      	subs	r2, r0, r4
 800284e:	eb61 0305 	sbc.w	r3, r1, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002860:	0090      	lsls	r0, r2, #2
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	eb12 0804 	adds.w	r8, r2, r4
 800286a:	eb43 0905 	adc.w	r9, r3, r5
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800287a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800287e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002882:	4690      	mov	r8, r2
 8002884:	4699      	mov	r9, r3
 8002886:	4642      	mov	r2, r8
 8002888:	464b      	mov	r3, r9
 800288a:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800288e:	1851      	adds	r1, r2, r1
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	f143 0300 	adc.w	r3, r3, #0
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a4:	f7fe f8b2 	bl	8000a0c <__aeabi_ldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3305      	adds	r3, #5
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 80028ba:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 80028c0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80028c4:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 80028c8:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 80028ca:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 80028ce:	3b08      	subs	r3, #8
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	4a03      	ldr	r2, [pc, #12]	@ (80028e8 <calcBcnRxWindowFromMillis+0x108>)
 80028da:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e8:	200001bc 	.word	0x200001bc

080028ec <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 80028f4:	2210      	movs	r2, #16
 80028f6:	2100      	movs	r1, #0
 80028f8:	482e      	ldr	r0, [pc, #184]	@ (80029b4 <rxschedInit+0xc8>)
 80028fa:	f00b f88b 	bl	800da14 <memset>
    os_clearMem(LMIC.frame+8,8);
 80028fe:	4b2e      	ldr	r3, [pc, #184]	@ (80029b8 <rxschedInit+0xcc>)
 8002900:	2208      	movs	r2, #8
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f00b f885 	bl	800da14 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 800290a:	4b2c      	ldr	r3, [pc, #176]	@ (80029bc <rxschedInit+0xd0>)
 800290c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002910:	4619      	mov	r1, r3
 8002912:	482b      	ldr	r0, [pc, #172]	@ (80029c0 <rxschedInit+0xd4>)
 8002914:	f7ff fc71 	bl	80021fa <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8002918:	4a2a      	ldr	r2, [pc, #168]	@ (80029c4 <rxschedInit+0xd8>)
 800291a:	4b28      	ldr	r3, [pc, #160]	@ (80029bc <rxschedInit+0xd0>)
 800291c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7ff fc69 	bl	80021fa <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8002928:	2210      	movs	r2, #16
 800292a:	4925      	ldr	r1, [pc, #148]	@ (80029c0 <rxschedInit+0xd4>)
 800292c:	2000      	movs	r0, #0
 800292e:	f7fe fb83 	bl	8001038 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8002938:	4821      	ldr	r0, [pc, #132]	@ (80029c0 <rxschedInit+0xd4>)
 800293a:	f7ff fbf8 	bl	800212e <os_rlsbf2>
 800293e:	4603      	mov	r3, r0
 8002940:	4619      	mov	r1, r3
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	f1c3 0307 	rsb	r3, r3, #7
 8002948:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800294c:	fa42 f303 	asr.w	r3, r2, r3
 8002950:	400b      	ands	r3, r1
 8002952:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <rxschedInit+0xd0>)
 8002956:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 800295a:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8002966:	440b      	add	r3, r1
 8002968:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800296c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002970:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685c      	ldr	r4, [r3, #4]
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2201      	movs	r2, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3302      	adds	r3, #2
 800298c:	b2da      	uxtb	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f7ff fecf 	bl	8002738 <calcRxWindow>
 800299a:	4603      	mov	r3, r0
 800299c:	1ae2      	subs	r2, r4, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <rxschedInit+0xd0>)
 80029a4:	7c1a      	ldrb	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	70da      	strb	r2, [r3, #3]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200000b0 	.word	0x200000b0
 80029b8:	2000030c 	.word	0x2000030c
 80029bc:	200001bc 	.word	0x200001bc
 80029c0:	20000304 	.word	0x20000304
 80029c4:	20000308 	.word	0x20000308

080029c8 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db01      	blt.n	80029e2 <rxschedNext+0x1a>
        return 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03a      	b.n	8002a58 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	789b      	ldrb	r3, [r3, #2]
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da01      	bge.n	80029f4 <rxschedNext+0x2c>
        return 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e031      	b.n	8002a58 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	461a      	mov	r2, r3
 80029fa:	2301      	movs	r3, #1
 80029fc:	4093      	lsls	r3, r2
 80029fe:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	4413      	add	r3, r2
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	709a      	strb	r2, [r3, #2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	789b      	ldrb	r3, [r3, #2]
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da01      	bge.n	8002a1c <rxschedNext+0x54>
        return 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e01d      	b.n	8002a58 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	049b      	lsls	r3, r3, #18
 8002a2a:	11db      	asrs	r3, r3, #7
 8002a2c:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	4413      	add	r3, r2
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	3302      	adds	r3, #2
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7ff fe79 	bl	8002738 <calcRxWindow>
 8002a46:	4603      	mov	r3, r0
 8002a48:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <rxschedNext+0x98>)
 8002a50:	7c1a      	ldrb	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	70da      	strb	r2, [r3, #3]
    goto again;
 8002a56:	e7bc      	b.n	80029d2 <rxschedNext+0xa>
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	200001bc 	.word	0x200001bc

08002a64 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8002a6e:	f003 f9cb 	bl	8005e08 <radio_rand1>
 8002a72:	4603      	mov	r3, r0
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	b21c      	sxth	r4, r3
 8002a78:	f003 f9c6 	bl	8005e08 <radio_rand1>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	4323      	orrs	r3, r4
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002a90:	dd0b      	ble.n	8002aaa <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	4a11      	ldr	r2, [pc, #68]	@ (8002adc <rndDelay+0x78>)
 8002a96:	fba2 1203 	umull	r1, r2, r2, r3
 8002a9a:	0ad2      	lsrs	r2, r2, #11
 8002a9c:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002aa0:	fb01 f202 	mul.w	r2, r1, r2
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	79fa      	ldrb	r2, [r7, #7]
 8002ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8002aba:	fb01 f202 	mul.w	r2, r1, r2
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
    return delay;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	10624dd3 	.word	0x10624dd3

08002ae0 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ffb8 	bl	8002a64 <rndDelay>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002afc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <txDelay+0x58>)
 8002afe:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <txDelay+0x34>
 8002b06:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <txDelay+0x58>)
 8002b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	dd0c      	ble.n	8002b2e <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002b14:	4a08      	ldr	r2, [pc, #32]	@ (8002b38 <txDelay+0x58>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <txDelay+0x58>)
 8002b1e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <txDelay+0x58>)
 8002b2a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200001bc 	.word	0x200001bc

08002b3c <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	460a      	mov	r2, r1
 8002b46:	71fb      	strb	r3, [r7, #7]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <setDrJoin+0x24>)
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	200001bc 	.word	0x200001bc

08002b64 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	71bb      	strb	r3, [r7, #6]
 8002b72:	4613      	mov	r3, r2
 8002b74:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002b76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b7a:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002b7e:	d003      	beq.n	8002b88 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002b80:	4a0e      	ldr	r2, [pc, #56]	@ (8002bbc <setDrTxpow+0x58>)
 8002b82:	797b      	ldrb	r3, [r7, #5]
 8002b84:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <setDrTxpow+0x58>)
 8002b8a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002b8e:	79ba      	ldrb	r2, [r7, #6]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d00c      	beq.n	8002bae <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002b94:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <setDrTxpow+0x58>)
 8002b96:	79bb      	ldrb	r3, [r7, #6]
 8002b98:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <setDrTxpow+0x58>)
 8002b9e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002ba2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <setDrTxpow+0x58>)
 8002baa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	200001bc 	.word	0x200001bc

08002bc0 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	2100      	movs	r1, #0
 8002bce:	483a      	ldr	r0, [pc, #232]	@ (8002cb8 <initDefaultChannels+0xf8>)
 8002bd0:	f00a ff20 	bl	800da14 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4838      	ldr	r0, [pc, #224]	@ (8002cbc <initDefaultChannels+0xfc>)
 8002bda:	f00a ff1b 	bl	800da14 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002bde:	2220      	movs	r2, #32
 8002be0:	2100      	movs	r1, #0
 8002be2:	4837      	ldr	r0, [pc, #220]	@ (8002cc0 <initDefaultChannels+0x100>)
 8002be4:	f00a ff16 	bl	800da14 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002be8:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002bea:	223f      	movs	r2, #63	@ 0x3f
 8002bec:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <initDefaultChannels+0x3a>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <initDefaultChannels+0x3c>
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73bb      	strb	r3, [r7, #14]
 8002c02:	e014      	b.n	8002c2e <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	7bbb      	ldrb	r3, [r7, #14]
 8002c08:	492f      	ldr	r1, [pc, #188]	@ (8002cc8 <initDefaultChannels+0x108>)
 8002c0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002c0e:	492d      	ldr	r1, [pc, #180]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c10:	3310      	adds	r3, #16
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002c16:	7bbb      	ldrb	r3, [r7, #14]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c1a:	3340      	adds	r3, #64	@ 0x40
 8002c1c:	213f      	movs	r1, #63	@ 0x3f
 8002c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002c22:	7bbb      	ldrb	r3, [r7, #14]
 8002c24:	3301      	adds	r3, #1
 8002c26:	73bb      	strb	r3, [r7, #14]
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	7bbb      	ldrb	r3, [r7, #14]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d9e7      	bls.n	8002c04 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002c34:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c3a:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002c3c:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c3e:	220e      	movs	r2, #14
 8002c40:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002c44:	f003 f8e0 	bl	8005e08 <radio_rand1>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c52:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 8002c56:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c58:	2264      	movs	r2, #100	@ 0x64
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c5e:	220e      	movs	r2, #14
 8002c60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002c64:	f003 f8d0 	bl	8005e08 <radio_rand1>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c72:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 8002c76:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c78:	220a      	movs	r2, #10
 8002c7a:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c7e:	221b      	movs	r2, #27
 8002c80:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002c84:	f003 f8c0 	bl	8005e08 <radio_rand1>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c92:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 8002c96:	f002 fb8d 	bl	80053b4 <os_getTime>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002c9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002ca4:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002cac:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <initDefaultChannels+0x104>)
 8002cae:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200001fc 	.word	0x200001fc
 8002cbc:	2000023c 	.word	0x2000023c
 8002cc0:	200001dc 	.word	0x200001dc
 8002cc4:	200001bc 	.word	0x200001bc
 8002cc8:	0800ecc4 	.word	0x0800ecc4

08002ccc <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6039      	str	r1, [r7, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	80bb      	strh	r3, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	d901      	bls.n	8002cee <LMIC_setupChannel+0x22>
        return 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e054      	b.n	8002d98 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 8002cee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d121      	bne.n	8002d3c <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8002da4 <LMIC_setupChannel+0xd8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d908      	bls.n	8002d12 <LMIC_setupChannel+0x46>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4a29      	ldr	r2, [pc, #164]	@ (8002da8 <LMIC_setupChannel+0xdc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d804      	bhi.n	8002d12 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	e021      	b.n	8002d56 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4a25      	ldr	r2, [pc, #148]	@ (8002dac <LMIC_setupChannel+0xe0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d903      	bls.n	8002d22 <LMIC_setupChannel+0x56>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	4a24      	ldr	r2, [pc, #144]	@ (8002db0 <LMIC_setupChannel+0xe4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d907      	bls.n	8002d32 <LMIC_setupChannel+0x66>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	4a23      	ldr	r2, [pc, #140]	@ (8002db4 <LMIC_setupChannel+0xe8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d315      	bcc.n	8002d56 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <LMIC_setupChannel+0xec>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d811      	bhi.n	8002d56 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	e00c      	b.n	8002d56 <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8002d3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	dd01      	ble.n	8002d48 <LMIC_setupChannel+0x7c>
 8002d44:	2300      	movs	r3, #0
 8002d46:	e027      	b.n	8002d98 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	4918      	ldr	r1, [pc, #96]	@ (8002dbc <LMIC_setupChannel+0xf0>)
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <LMIC_setupChannel+0xa0>
 8002d68:	88ba      	ldrh	r2, [r7, #4]
 8002d6a:	e000      	b.n	8002d6e <LMIC_setupChannel+0xa2>
 8002d6c:	223f      	movs	r2, #63	@ 0x3f
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4912      	ldr	r1, [pc, #72]	@ (8002dbc <LMIC_setupChannel+0xf0>)
 8002d72:	3340      	adds	r3, #64	@ 0x40
 8002d74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 8002d78:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <LMIC_setupChannel+0xf0>)
 8002d7a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <LMIC_setupChannel+0xf0>)
 8002d92:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 8002d96:	2301      	movs	r3, #1
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	33d1fdbf 	.word	0x33d1fdbf
 8002da8:	33d5ce50 	.word	0x33d5ce50
 8002dac:	33bca0ff 	.word	0x33bca0ff
 8002db0:	33c5c8c0 	.word	0x33c5c8c0
 8002db4:	33d691a0 	.word	0x33d691a0
 8002db8:	33db2580 	.word	0x33db2580
 8002dbc:	200001bc 	.word	0x200001bc

08002dc0 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f9c3 	bl	8002158 <os_rlsbf4>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	2264      	movs	r2, #100	@ 0x64
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a06      	ldr	r2, [pc, #24]	@ (8002dfc <convFreq+0x3c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d303      	bcc.n	8002dee <convFreq+0x2e>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <convFreq+0x40>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <convFreq+0x32>
        freq = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
    return freq;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	337055c0 	.word	0x337055c0
 8002e00:	33db2580 	.word	0x33db2580

08002e04 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	71fb      	strb	r3, [r7, #7]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <mapChannels+0x2c>
 8002e1a:	88bb      	ldrh	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <mapChannels+0x2c>
 8002e20:	88ba      	ldrh	r2, [r7, #4]
 8002e22:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <mapChannels+0x90>)
 8002e24:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <mapChannels+0x30>
        return 0;  // illegal input
 8002e30:	2300      	movs	r3, #0
 8002e32:	e028      	b.n	8002e86 <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e01d      	b.n	8002e76 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 8002e3a:	88ba      	ldrh	r2, [r7, #4]
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	fa42 f303 	asr.w	r3, r2, r3
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <mapChannels+0x6c>
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <mapChannels+0x90>)
 8002e4e:	3310      	adds	r3, #16
 8002e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3301      	adds	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d9de      	bls.n	8002e3a <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 8002e7c:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <mapChannels+0x90>)
 8002e7e:	88bb      	ldrh	r3, [r7, #4]
 8002e80:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	200001bc 	.word	0x200001bc

08002e98 <updateTx>:


static void updateTx (ostime_t txbeg) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002ea0:	4b21      	ldr	r3, [pc, #132]	@ (8002f28 <updateTx+0x90>)
 8002ea2:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002ea6:	4a20      	ldr	r2, [pc, #128]	@ (8002f28 <updateTx+0x90>)
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <updateTx+0x90>)
 8002eb2:	89db      	ldrh	r3, [r3, #14]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <updateTx+0x90>)
 8002eb6:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fba3 	bl	8002608 <calcAirTime>
 8002ec2:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	3304      	adds	r3, #4
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4a16      	ldr	r2, [pc, #88]	@ (8002f28 <updateTx+0x90>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0303 	bic.w	r3, r3, #3
 8002eda:	4a13      	ldr	r2, [pc, #76]	@ (8002f28 <updateTx+0x90>)
 8002edc:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002ee4:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <updateTx+0x90>)
 8002ee6:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fb03 f202 	mul.w	r2, r3, r2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <updateTx+0x90>)
 8002efe:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <updateTx+0x90>)
 8002f08:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	fa03 f202 	lsl.w	r2, r3, r2
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	4a03      	ldr	r2, [pc, #12]	@ (8002f28 <updateTx+0x90>)
 8002f1a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200001bc 	.word	0x200001bc

08002f2c <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 8002f34:	230f      	movs	r3, #15
 8002f36:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4b48      	ldr	r3, [pc, #288]	@ (800305c <nextTx+0x130>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002f44:	2300      	movs	r3, #0
 8002f46:	73bb      	strb	r3, [r7, #14]
 8002f48:	e01d      	b.n	8002f86 <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 8002f4a:	7dfa      	ldrb	r2, [r7, #23]
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	fa42 f303 	asr.w	r3, r2, r3
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <nextTx+0x54>
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	4a40      	ldr	r2, [pc, #256]	@ (8003060 <nextTx+0x134>)
 8002f5e:	3304      	adds	r3, #4
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd08      	ble.n	8002f80 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 8002f6e:	7bbb      	ldrb	r3, [r7, #14]
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	4a3a      	ldr	r2, [pc, #232]	@ (8003060 <nextTx+0x134>)
 8002f76:	3304      	adds	r3, #4
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	3301      	adds	r3, #1
 8002f84:	73bb      	strb	r3, [r7, #14]
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d9de      	bls.n	8002f4a <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	4a34      	ldr	r2, [pc, #208]	@ (8003060 <nextTx+0x134>)
 8002f90:	3304      	adds	r3, #4
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	78db      	ldrb	r3, [r3, #3]
 8002f98:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	733b      	strb	r3, [r7, #12]
 8002f9e:	e042      	b.n	8003026 <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002fa0:	7b7b      	ldrb	r3, [r7, #13]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	737b      	strb	r3, [r7, #13]
 8002fa6:	7b7b      	ldrb	r3, [r7, #13]
 8002fa8:	2b0f      	cmp	r3, #15
 8002faa:	d902      	bls.n	8002fb2 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 8002fac:	7b7b      	ldrb	r3, [r7, #13]
 8002fae:	3b10      	subs	r3, #16
 8002fb0:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <nextTx+0x134>)
 8002fb4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	7b7b      	ldrb	r3, [r7, #13]
 8002fbc:	fa42 f303 	asr.w	r3, r2, r3
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02b      	beq.n	8003020 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002fc8:	7b7b      	ldrb	r3, [r7, #13]
 8002fca:	4a25      	ldr	r2, [pc, #148]	@ (8003060 <nextTx+0x134>)
 8002fcc:	3340      	adds	r3, #64	@ 0x40
 8002fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <nextTx+0x134>)
 8002fd6:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	fa42 f303 	asr.w	r3, r2, r3
 8002fe2:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01a      	beq.n	8003020 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	7b7b      	ldrb	r3, [r7, #13]
 8002fee:	491c      	ldr	r1, [pc, #112]	@ (8003060 <nextTx+0x134>)
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d110      	bne.n	8003020 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	4917      	ldr	r1, [pc, #92]	@ (8003060 <nextTx+0x134>)
 8003002:	1d13      	adds	r3, r2, #4
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	7b79      	ldrb	r1, [r7, #13]
 800300a:	70d9      	strb	r1, [r3, #3]
 800300c:	4914      	ldr	r1, [pc, #80]	@ (8003060 <nextTx+0x134>)
 800300e:	1d13      	adds	r3, r2, #4
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	78da      	ldrb	r2, [r3, #3]
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <nextTx+0x134>)
 8003018:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	e016      	b.n	800304e <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8003020:	7b3b      	ldrb	r3, [r7, #12]
 8003022:	3301      	adds	r3, #1
 8003024:	733b      	strb	r3, [r7, #12]
 8003026:	7b3b      	ldrb	r3, [r7, #12]
 8003028:	2b0f      	cmp	r3, #15
 800302a:	d9b9      	bls.n	8002fa0 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2201      	movs	r2, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	b25b      	sxtb	r3, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	b25a      	sxtb	r2, r3
 800303a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800303e:	4013      	ands	r3, r2
 8003040:	b25b      	sxtb	r3, r3
 8003042:	75fb      	strb	r3, [r7, #23]
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f af76 	bne.w	8002f38 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 800304c:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 800304e:	4618      	mov	r0, r3
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	44aa2000 	.word	0x44aa2000
 8003060:	200001bc 	.word	0x200001bc

08003064 <setBcnRxParams>:


static void setBcnRxParams (void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <setBcnRxParams+0x48>)
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8003070:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <setBcnRxParams+0x48>)
 8003072:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8003076:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <setBcnRxParams+0x48>)
 8003078:	3310      	adds	r3, #16
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <setBcnRxParams+0x48>)
 8003084:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 8003086:	2003      	movs	r0, #3
 8003088:	f7fe fff6 	bl	8002078 <dndr2rps>
 800308c:	4603      	mov	r3, r0
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe ffa2 	bl	8001fda <setNocrc>
 8003096:	4603      	mov	r3, r0
 8003098:	2111      	movs	r1, #17
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe ffc3 	bl	8002026 <setIh>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b01      	ldr	r3, [pc, #4]	@ (80030ac <setBcnRxParams+0x48>)
 80030a6:	81da      	strh	r2, [r3, #14]
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200001bc 	.word	0x200001bc

080030b0 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 80030b0:	b598      	push	{r3, r4, r7, lr}
 80030b2:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 80030b4:	f002 fea8 	bl	8005e08 <radio_rand1>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <initJoinLoop+0x64>)
 80030be:	fba3 1302 	umull	r1, r3, r3, r2
 80030c2:	0899      	lsrs	r1, r3, #2
 80030c4:	460b      	mov	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	440b      	add	r3, r1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <initJoinLoop+0x68>)
 80030d2:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <initJoinLoop+0x68>)
 80030d8:	220e      	movs	r2, #14
 80030da:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 80030de:	2105      	movs	r1, #5
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff fd2b 	bl	8002b3c <setDrJoin>
    initDefaultChannels(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7ff fd6a 	bl	8002bc0 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 80030ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <initJoinLoop+0x68>)
 80030ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80030f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <initJoinLoop+0x4e>
 80030fa:	f7fe fe71 	bl	8001de0 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <initJoinLoop+0x68>)
 8003100:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003102:	2008      	movs	r0, #8
 8003104:	f7ff fcae 	bl	8002a64 <rndDelay>
 8003108:	4603      	mov	r3, r0
 800310a:	4423      	add	r3, r4
 800310c:	4a02      	ldr	r2, [pc, #8]	@ (8003118 <initJoinLoop+0x68>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	bd98      	pop	{r3, r4, r7, pc}
 8003114:	aaaaaaab 	.word	0xaaaaaaab
 8003118:	200001bc 	.word	0x200001bc

0800311c <nextJoinState>:


static ostime_t nextJoinState (void) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 8003126:	4b30      	ldr	r3, [pc, #192]	@ (80031e8 <nextJoinState+0xcc>)
 8003128:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800312c:	3301      	adds	r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <nextJoinState+0xcc>)
 8003132:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8003136:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <nextJoinState+0xcc>)
 8003138:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800313c:	2b06      	cmp	r3, #6
 800313e:	d103      	bne.n	8003148 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 8003140:	4b29      	ldr	r3, [pc, #164]	@ (80031e8 <nextJoinState+0xcc>)
 8003142:	2200      	movs	r2, #0
 8003144:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <nextJoinState+0xcc>)
 800314a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800314e:	3301      	adds	r3, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <nextJoinState+0xcc>)
 8003154:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8003158:	4b23      	ldr	r3, [pc, #140]	@ (80031e8 <nextJoinState+0xcc>)
 800315a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d112      	bne.n	800318c <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 8003166:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <nextJoinState+0xcc>)
 8003168:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8003170:	2301      	movs	r3, #1
 8003172:	71fb      	strb	r3, [r7, #7]
 8003174:	e00a      	b.n	800318c <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 8003176:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <nextJoinState+0xcc>)
 8003178:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe ff8f 	bl	80020a0 <decDR>
 8003182:	4603      	mov	r3, r0
 8003184:	4619      	mov	r1, r3
 8003186:	2001      	movs	r0, #1
 8003188:	f7ff fcd8 	bl	8002b3c <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 800318c:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <nextJoinState+0xcc>)
 800318e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <nextJoinState+0xcc>)
 800319a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 800319e:	f002 f909 	bl	80053b4 <os_getTime>
 80031a2:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 80031a4:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <nextJoinState+0xcc>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da02      	bge.n	80031b6 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 80031b0:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <nextJoinState+0xcc>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 80031b6:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <nextJoinState+0xcc>)
 80031b8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80031bc:	461a      	mov	r2, r3
 80031be:	23ff      	movs	r3, #255	@ 0xff
 80031c0:	4113      	asrs	r3, r2
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fc4d 	bl	8002a64 <rndDelay>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 80031d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a03      	ldr	r2, [pc, #12]	@ (80031e8 <nextJoinState+0xcc>)
 80031da:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 80031dc:	79fb      	ldrb	r3, [r7, #7]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200001bc 	.word	0x200001bc

080031ec <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    engineUpdate();
 80031f4:	f001 fcb6 	bl	8004b64 <engineUpdate>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <reportEvent>:


static void reportEvent (ev_t ev) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	4618      	mov	r0, r3
 800320e:	f001 ffc3 	bl	8005198 <onEvent>
    engineUpdate();
 8003212:	f001 fca7 	bl	8004b64 <engineUpdate>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <runReset>:


static void runReset (xref2osjob_t osjob) {
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 8003226:	f001 fe67 	bl	8004ef8 <LMIC_reset>
    LMIC_startJoining();
 800322a:	f001 fa0f 	bl	800464c <LMIC_startJoining>
    reportEvent(EV_RESET);
 800322e:	200c      	movs	r0, #12
 8003230:	f7ff ffe6 	bl	8003200 <reportEvent>
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <stateJustJoined>:

static void stateJustJoined (void) {
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8003240:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <stateJustJoined+0xc4>)
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8003248:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <stateJustJoined+0xc4>)
 800324a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800324e:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <stateJustJoined+0xc4>)
 8003250:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 8003254:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <stateJustJoined+0xc4>)
 8003256:	2200      	movs	r2, #0
 8003258:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 800325c:	4b28      	ldr	r3, [pc, #160]	@ (8003300 <stateJustJoined+0xc4>)
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8003264:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <stateJustJoined+0xc4>)
 8003266:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 800326a:	4b25      	ldr	r3, [pc, #148]	@ (8003300 <stateJustJoined+0xc4>)
 800326c:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8003270:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <stateJustJoined+0xc4>)
 8003272:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8003276:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <stateJustJoined+0xc4>)
 8003278:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 800327c:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <stateJustJoined+0xc4>)
 800327e:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8003282:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <stateJustJoined+0xc4>)
 8003284:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <stateJustJoined+0xc4>)
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <stateJustJoined+0xc4>)
 8003292:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8003296:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <stateJustJoined+0xc4>)
 8003298:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 800329c:	4b18      	ldr	r3, [pc, #96]	@ (8003300 <stateJustJoined+0xc4>)
 800329e:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <stateJustJoined+0xc4>)
 80032a4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <stateJustJoined+0xc4>)
 80032aa:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80032ae:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <stateJustJoined+0xc4>)
 80032b0:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <stateJustJoined+0xc4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 80032bc:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <stateJustJoined+0xc4>)
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 80032c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <stateJustJoined+0xc4>)
 80032c6:	22f4      	movs	r2, #244	@ 0xf4
 80032c8:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <stateJustJoined+0xc4>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <stateJustJoined+0xc4>)
 80032d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003304 <stateJustJoined+0xc8>)
 80032d8:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <stateJustJoined+0xc4>)
 80032de:	2205      	movs	r2, #5
 80032e0:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <stateJustJoined+0xc4>)
 80032e6:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <stateJustJoined+0xc8>)
 80032e8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 80032ec:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <stateJustJoined+0xc4>)
 80032ee:	2203      	movs	r2, #3
 80032f0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	200001bc 	.word	0x200001bc
 8003304:	33d3e608 	.word	0x33d3e608

08003308 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 800330e:	4b46      	ldr	r3, [pc, #280]	@ (8003428 <decodeBeacon+0x120>)
 8003310:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003314:	2b11      	cmp	r3, #17
 8003316:	d001      	beq.n	800331c <decodeBeacon+0x14>
 8003318:	f7fe fd62 	bl	8001de0 <hal_failed>
    xref2u1_t d = LMIC.frame;
 800331c:	4b43      	ldr	r3, [pc, #268]	@ (800342c <decodeBeacon+0x124>)
 800331e:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3307      	adds	r3, #7
 8003324:	781c      	ldrb	r4, [r3, #0]
 8003326:	2107      	movs	r1, #7
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe ffb0 	bl	800228e <os_crc16>
 800332e:	4603      	mov	r3, r0
 8003330:	b2db      	uxtb	r3, r3
    if(
 8003332:	429c      	cmp	r4, r3
 8003334:	d001      	beq.n	800333a <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 8003336:	2300      	movs	r3, #0
 8003338:	e071      	b.n	800341e <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fe ff0c 	bl	8002158 <os_rlsbf4>
 8003340:	4603      	mov	r3, r0
 8003342:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003346:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8003348:	4b37      	ldr	r3, [pc, #220]	@ (8003428 <decodeBeacon+0x120>)
 800334a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d002      	beq.n	800335a <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	e061      	b.n	800341e <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 800335a:	4b33      	ldr	r3, [pc, #204]	@ (8003428 <decodeBeacon+0x120>)
 800335c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003360:	f023 0303 	bic.w	r3, r3, #3
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b30      	ldr	r3, [pc, #192]	@ (8003428 <decodeBeacon+0x120>)
 8003368:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 800336c:	4b2e      	ldr	r3, [pc, #184]	@ (8003428 <decodeBeacon+0x120>)
 800336e:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8003372:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <decodeBeacon+0x120>)
 8003374:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8003378:	4b2b      	ldr	r3, [pc, #172]	@ (8003428 <decodeBeacon+0x120>)
 800337a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800337e:	4b2a      	ldr	r3, [pc, #168]	@ (8003428 <decodeBeacon+0x120>)
 8003380:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8003384:	4b28      	ldr	r3, [pc, #160]	@ (8003428 <decodeBeacon+0x120>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 800338c:	3b0c      	subs	r3, #12
 800338e:	4a26      	ldr	r2, [pc, #152]	@ (8003428 <decodeBeacon+0x120>)
 8003390:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3303      	adds	r3, #3
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fedd 	bl	8002158 <os_rlsbf4>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a21      	ldr	r2, [pc, #132]	@ (8003428 <decodeBeacon+0x120>)
 80033a2:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 80033a6:	4b20      	ldr	r3, [pc, #128]	@ (8003428 <decodeBeacon+0x120>)
 80033a8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <decodeBeacon+0x120>)
 80033b4:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	330f      	adds	r3, #15
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe feb6 	bl	800212e <os_rlsbf2>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461c      	mov	r4, r3
 80033c6:	210f      	movs	r1, #15
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fe ff60 	bl	800228e <os_crc16>
 80033ce:	4603      	mov	r3, r0
 80033d0:	429c      	cmp	r4, r3
 80033d2:	d001      	beq.n	80033d8 <decodeBeacon+0xd0>
        return 1;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e022      	b.n	800341e <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3308      	adds	r3, #8
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe febb 	bl	8002158 <os_rlsbf4>
 80033e2:	4603      	mov	r3, r0
 80033e4:	121b      	asrs	r3, r3, #8
 80033e6:	4a10      	ldr	r2, [pc, #64]	@ (8003428 <decodeBeacon+0x120>)
 80033e8:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	330b      	adds	r3, #11
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe feb1 	bl	8002158 <os_rlsbf4>
 80033f6:	4603      	mov	r3, r0
 80033f8:	121b      	asrs	r3, r3, #8
 80033fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003428 <decodeBeacon+0x120>)
 80033fc:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7a1a      	ldrb	r2, [r3, #8]
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <decodeBeacon+0x120>)
 8003406:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 800340a:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <decodeBeacon+0x120>)
 800340c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <decodeBeacon+0x120>)
 8003418:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 800341c:	2302      	movs	r3, #2
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	bf00      	nop
 8003428:	200001bc 	.word	0x200001bc
 800342c:	20000304 	.word	0x20000304

08003430 <decodeFrame>:


static bit_t decodeFrame (void) {
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b09b      	sub	sp, #108	@ 0x6c
 8003434:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8003436:	4b98      	ldr	r3, [pc, #608]	@ (8003698 <decodeFrame+0x268>)
 8003438:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 800343a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 8003442:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003446:	f023 031f 	bic.w	r3, r3, #31
 800344a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 800344e:	4b93      	ldr	r3, [pc, #588]	@ (800369c <decodeFrame+0x26c>)
 8003450:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003454:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 8003456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003458:	2b0b      	cmp	r3, #11
 800345a:	dd0d      	ble.n	8003478 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 800345c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003460:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8003468:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800346c:	2b60      	cmp	r3, #96	@ 0x60
 800346e:	d014      	beq.n	800349a <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8003470:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003474:	2ba0      	cmp	r3, #160	@ 0xa0
 8003476:	d010      	beq.n	800349a <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8003478:	bf00      	nop
 800347a:	e008      	b.n	800348e <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 800347c:	bf00      	nop
 800347e:	e006      	b.n	800348e <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8003480:	bf00      	nop
 8003482:	e004      	b.n	800348e <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8003484:	bf00      	nop
 8003486:	e002      	b.n	800348e <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8003488:	bf00      	nop
 800348a:	e000      	b.n	800348e <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 800348c:	bf00      	nop
        LMIC.dataLen = 0;
 800348e:	4b83      	ldr	r3, [pc, #524]	@ (800369c <decodeFrame+0x26c>)
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 8003496:	2300      	movs	r3, #0
 8003498:	e2f6      	b.n	8003a88 <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 800349a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800349c:	3305      	adds	r3, #5
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 80034a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a4:	3301      	adds	r3, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fe56 	bl	8002158 <os_rlsbf4>
 80034ac:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b0:	3306      	adds	r3, #6
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fe3b 	bl	800212e <os_rlsbf2>
 80034b8:	4603      	mov	r3, r0
 80034ba:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 80034c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c6:	115b      	asrs	r3, r3, #5
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	3308      	adds	r3, #8
 80034d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	3b04      	subs	r3, #4
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 80034da:	4b70      	ldr	r3, [pc, #448]	@ (800369c <decodeFrame+0x26c>)
 80034dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80034e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d1ca      	bne.n	800347c <decodeFrame+0x4c>
    if( poff > pend ) {
 80034e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	429a      	cmp	r2, r3
 80034ec:	dcc8      	bgt.n	8003480 <decodeFrame+0x50>
    int port = -1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 80034f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	dd07      	ble.n	8003510 <decodeFrame+0xe0>
        port = d[poff++];
 8003500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003506:	461a      	mov	r2, r3
 8003508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8003510:	4b62      	ldr	r3, [pc, #392]	@ (800369c <decodeFrame+0x26c>)
 8003512:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003516:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003518:	b291      	uxth	r1, r2
 800351a:	4a60      	ldr	r2, [pc, #384]	@ (800369c <decodeFrame+0x26c>)
 800351c:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8003520:	b292      	uxth	r2, r2
 8003522:	1a8a      	subs	r2, r1, r2
 8003524:	b292      	uxth	r2, r2
 8003526:	4413      	add	r3, r2
 8003528:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 800352a:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <decodeFrame+0x26c>)
 800352c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2301      	movs	r3, #1
 800353a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800353c:	4858      	ldr	r0, [pc, #352]	@ (80036a0 <decodeFrame+0x270>)
 800353e:	f7fe ff19 	bl	8002374 <aes_verifyMic>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d09d      	beq.n	8003484 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8003548:	4b54      	ldr	r3, [pc, #336]	@ (800369c <decodeFrame+0x26c>)
 800354a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800354e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003550:	429a      	cmp	r2, r3
 8003552:	d219      	bcs.n	8003588 <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8003554:	4b51      	ldr	r3, [pc, #324]	@ (800369c <decodeFrame+0x26c>)
 8003556:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800355a:	461a      	mov	r2, r3
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	429a      	cmp	r2, r3
 8003560:	db92      	blt.n	8003488 <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8003562:	4b4e      	ldr	r3, [pc, #312]	@ (800369c <decodeFrame+0x26c>)
 8003564:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003568:	3b01      	subs	r3, #1
 800356a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800356c:	429a      	cmp	r2, r3
 800356e:	d18d      	bne.n	800348c <decodeFrame+0x5c>
 8003570:	4b4a      	ldr	r3, [pc, #296]	@ (800369c <decodeFrame+0x26c>)
 8003572:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8003576:	2b00      	cmp	r3, #0
 8003578:	d088      	beq.n	800348c <decodeFrame+0x5c>
 800357a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800357e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003580:	d184      	bne.n	800348c <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	657b      	str	r3, [r7, #84]	@ 0x54
 8003586:	e00e      	b.n	80035a6 <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	3301      	adds	r3, #1
 800358c:	4a43      	ldr	r2, [pc, #268]	@ (800369c <decodeFrame+0x26c>)
 800358e:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8003592:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003596:	2ba0      	cmp	r3, #160	@ 0xa0
 8003598:	d101      	bne.n	800359e <decodeFrame+0x16e>
 800359a:	2220      	movs	r2, #32
 800359c:	e000      	b.n	80035a0 <decodeFrame+0x170>
 800359e:	2200      	movs	r2, #0
 80035a0:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <decodeFrame+0x26c>)
 80035a2:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 80035a6:	4b3d      	ldr	r3, [pc, #244]	@ (800369c <decodeFrame+0x26c>)
 80035a8:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <decodeFrame+0x18a>
 80035b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 80035ba:	4b38      	ldr	r3, [pc, #224]	@ (800369c <decodeFrame+0x26c>)
 80035bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035c0:	f043 0310 	orr.w	r3, r3, #16
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b35      	ldr	r3, [pc, #212]	@ (800369c <decodeFrame+0x26c>)
 80035c8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 80035cc:	4b33      	ldr	r3, [pc, #204]	@ (800369c <decodeFrame+0x26c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 80035d4:	4b31      	ldr	r3, [pc, #196]	@ (800369c <decodeFrame+0x26c>)
 80035d6:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80035da:	4b30      	ldr	r3, [pc, #192]	@ (800369c <decodeFrame+0x26c>)
 80035dc:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 80035e0:	4b2e      	ldr	r3, [pc, #184]	@ (800369c <decodeFrame+0x26c>)
 80035e2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80035e6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80035ea:	d003      	beq.n	80035f4 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 80035ec:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <decodeFrame+0x26c>)
 80035ee:	22f4      	movs	r2, #244	@ 0xf4
 80035f0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 80035f4:	4b29      	ldr	r3, [pc, #164]	@ (800369c <decodeFrame+0x26c>)
 80035f6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80035fa:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 80035fe:	4b27      	ldr	r3, [pc, #156]	@ (800369c <decodeFrame+0x26c>)
 8003600:	89db      	ldrh	r3, [r3, #14]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe ffe0 	bl	80025c8 <getSensitivity>
 8003608:	4603      	mov	r3, r0
 800360a:	1ae3      	subs	r3, r4, r3
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	db05      	blt.n	8003620 <decodeFrame+0x1f0>
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	2bfe      	cmp	r3, #254	@ 0xfe
 8003618:	bfa8      	it	ge
 800361a:	23fe      	movge	r3, #254	@ 0xfe
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e000      	b.n	8003622 <decodeFrame+0x1f2>
 8003620:	2300      	movs	r3, #0
 8003622:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <decodeFrame+0x26c>)
 8003624:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8003628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362a:	3308      	adds	r3, #8
 800362c:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 8003632:	e1b5      	b.n	80039a0 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 8003634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	4413      	add	r3, r2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3b02      	subs	r3, #2
 800363e:	2b10      	cmp	r3, #16
 8003640:	f200 81ba 	bhi.w	80039b8 <decodeFrame+0x588>
 8003644:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <decodeFrame+0x21c>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003691 	.word	0x08003691
 8003650:	080036a5 	.word	0x080036a5
 8003654:	08003803 	.word	0x08003803
 8003658:	0800377f 	.word	0x0800377f
 800365c:	0800376f 	.word	0x0800376f
 8003660:	08003851 	.word	0x08003851
 8003664:	080039b9 	.word	0x080039b9
 8003668:	080039b9 	.word	0x080039b9
 800366c:	080039b9 	.word	0x080039b9
 8003670:	080039b9 	.word	0x080039b9
 8003674:	080039b9 	.word	0x080039b9
 8003678:	080039b9 	.word	0x080039b9
 800367c:	080039b9 	.word	0x080039b9
 8003680:	080039b9 	.word	0x080039b9
 8003684:	080039b9 	.word	0x080039b9
 8003688:	080038dd 	.word	0x080038dd
 800368c:	0800391f 	.word	0x0800391f
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8003690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003692:	3303      	adds	r3, #3
 8003694:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003696:	e183      	b.n	80039a0 <decodeFrame+0x570>
 8003698:	20000304 	.word	0x20000304
 800369c:	200001bc 	.word	0x200001bc
 80036a0:	200002b0 	.word	0x200002b0
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 80036a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a6:	3301      	adds	r3, #1
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 80036b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b2:	3302      	adds	r3, #2
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	4413      	add	r3, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fd38 	bl	800212e <os_rlsbf2>
 80036be:	4603      	mov	r3, r0
 80036c0:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 80036c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c4:	3304      	adds	r3, #4
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	4413      	add	r3, r2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	f023 030f 	bic.w	r3, r3, #15
 80036d0:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 80036d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d4:	3304      	adds	r3, #4
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	4413      	add	r3, r2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 80036e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e4:	3305      	adds	r3, #5
 80036e6:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 80036e8:	4bb0      	ldr	r3, [pc, #704]	@ (80039ac <decodeFrame+0x57c>)
 80036ea:	2287      	movs	r2, #135	@ 0x87
 80036ec:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 80036f0:	893a      	ldrh	r2, [r7, #8]
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fb84 	bl	8002e04 <mapChannels>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d108      	bne.n	8003714 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8003702:	4baa      	ldr	r3, [pc, #680]	@ (80039ac <decodeFrame+0x57c>)
 8003704:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4ba7      	ldr	r3, [pc, #668]	@ (80039ac <decodeFrame+0x57c>)
 8003710:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8003714:	7abb      	ldrb	r3, [r7, #10]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 800371a:	797b      	ldrb	r3, [r7, #5]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe fcd7 	bl	80020d0 <validDR>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8003728:	4ba0      	ldr	r3, [pc, #640]	@ (80039ac <decodeFrame+0x57c>)
 800372a:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 800372e:	f023 0302 	bic.w	r3, r3, #2
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b9d      	ldr	r3, [pc, #628]	@ (80039ac <decodeFrame+0x57c>)
 8003736:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 800373a:	4b9c      	ldr	r3, [pc, #624]	@ (80039ac <decodeFrame+0x57c>)
 800373c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003744:	2b07      	cmp	r3, #7
 8003746:	d10d      	bne.n	8003764 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8003748:	4a98      	ldr	r2, [pc, #608]	@ (80039ac <decodeFrame+0x57c>)
 800374a:	79bb      	ldrb	r3, [r7, #6]
 800374c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8003750:	7abb      	ldrb	r3, [r7, #10]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	4a96      	ldr	r2, [pc, #600]	@ (80039b0 <decodeFrame+0x580>)
 8003758:	56d2      	ldrsb	r2, [r2, r3]
 800375a:	797b      	ldrb	r3, [r7, #5]
 800375c:	4619      	mov	r1, r3
 800375e:	2004      	movs	r0, #4
 8003760:	f7ff fa00 	bl	8002b64 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8003764:	4b91      	ldr	r3, [pc, #580]	@ (80039ac <decodeFrame+0x57c>)
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 800376c:	e118      	b.n	80039a0 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 800376e:	4b8f      	ldr	r3, [pc, #572]	@ (80039ac <decodeFrame+0x57c>)
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 8003776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003778:	3301      	adds	r3, #1
 800377a:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800377c:	e110      	b.n	80039a0 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 800377e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003780:	3301      	adds	r3, #1
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	4413      	add	r3, r2
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 800378e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003790:	3302      	adds	r3, #2
 8003792:	6a3a      	ldr	r2, [r7, #32]
 8003794:	4413      	add	r3, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fb12 	bl	8002dc0 <convFreq>
 800379c:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 800379e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a0:	3305      	adds	r3, #5
 80037a2:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 80037a4:	4b81      	ldr	r3, [pc, #516]	@ (80039ac <decodeFrame+0x57c>)
 80037a6:	2280      	movs	r2, #128	@ 0x80
 80037a8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 80037ac:	7cbb      	ldrb	r3, [r7, #18]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fc8e 	bl	80020d0 <validDR>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 80037ba:	4b7c      	ldr	r3, [pc, #496]	@ (80039ac <decodeFrame+0x57c>)
 80037bc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4b79      	ldr	r3, [pc, #484]	@ (80039ac <decodeFrame+0x57c>)
 80037c8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 80037d2:	4b76      	ldr	r3, [pc, #472]	@ (80039ac <decodeFrame+0x57c>)
 80037d4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4b73      	ldr	r3, [pc, #460]	@ (80039ac <decodeFrame+0x57c>)
 80037e0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 80037e4:	4b71      	ldr	r3, [pc, #452]	@ (80039ac <decodeFrame+0x57c>)
 80037e6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80037ea:	2b83      	cmp	r3, #131	@ 0x83
 80037ec:	f040 80d7 	bne.w	800399e <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 80037f0:	4a6e      	ldr	r2, [pc, #440]	@ (80039ac <decodeFrame+0x57c>)
 80037f2:	7cbb      	ldrb	r3, [r7, #18]
 80037f4:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 80037f8:	4a6c      	ldr	r2, [pc, #432]	@ (80039ac <decodeFrame+0x57c>)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8003800:	e0cd      	b.n	800399e <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8003802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003804:	3301      	adds	r3, #1
 8003806:	6a3a      	ldr	r2, [r7, #32]
 8003808:	4413      	add	r3, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 800380e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003810:	3302      	adds	r3, #2
 8003812:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	2bff      	cmp	r3, #255	@ 0xff
 8003818:	d108      	bne.n	800382c <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 800381a:	4b64      	ldr	r3, [pc, #400]	@ (80039ac <decodeFrame+0x57c>)
 800381c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b61      	ldr	r3, [pc, #388]	@ (80039ac <decodeFrame+0x57c>)
 8003828:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 800382c:	7afb      	ldrb	r3, [r7, #11]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	b2da      	uxtb	r2, r3
 8003834:	4b5d      	ldr	r3, [pc, #372]	@ (80039ac <decodeFrame+0x57c>)
 8003836:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 800383a:	f001 fdbb 	bl	80053b4 <os_getTime>
 800383e:	4603      	mov	r3, r0
 8003840:	4a5a      	ldr	r2, [pc, #360]	@ (80039ac <decodeFrame+0x57c>)
 8003842:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003846:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <decodeFrame+0x57c>)
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 800384e:	e0a7      	b.n	80039a0 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8003850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003852:	3301      	adds	r3, #1
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	4413      	add	r3, r2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 800385c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800385e:	3302      	adds	r3, #2
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	4413      	add	r3, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff faab 	bl	8002dc0 <convFreq>
 800386a:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 800386c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800386e:	3305      	adds	r3, #5
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	4413      	add	r3, r2
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8003878:	4b4c      	ldr	r3, [pc, #304]	@ (80039ac <decodeFrame+0x57c>)
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d026      	beq.n	80038d4 <decodeFrame+0x4a4>
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	b21a      	sxth	r2, r3
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f1c3 030f 	rsb	r3, r3, #15
 80038a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038a4:	fa41 f303 	asr.w	r3, r1, r3
 80038a8:	b21b      	sxth	r3, r3
 80038aa:	4013      	ands	r3, r2
 80038ac:	b21b      	sxth	r3, r3
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	7ef8      	ldrb	r0, [r7, #27]
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	f7ff fa08 	bl	8002ccc <LMIC_setupChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 80038c2:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <decodeFrame+0x57c>)
 80038c4:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80038c8:	f043 0303 	orr.w	r3, r3, #3
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b37      	ldr	r3, [pc, #220]	@ (80039ac <decodeFrame+0x57c>)
 80038d0:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 80038d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038d6:	3306      	adds	r3, #6
 80038d8:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 80038da:	e061      	b.n	80039a0 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 80038dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038de:	3301      	adds	r3, #1
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	4413      	add	r3, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fa6b 	bl	8002dc0 <convFreq>
 80038ea:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 80038ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ee:	3304      	adds	r3, #4
 80038f0:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 80038fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 800390a:	4a28      	ldr	r2, [pc, #160]	@ (80039ac <decodeFrame+0x57c>)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8003912:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <decodeFrame+0x57c>)
 8003914:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003918:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 800391c:	e040      	b.n	80039a0 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 800391e:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <decodeFrame+0x57c>)
 8003920:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d134      	bne.n	8003996 <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 800392c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800392e:	3303      	adds	r3, #3
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	4413      	add	r3, r2
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <decodeFrame+0x57c>)
 8003938:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <decodeFrame+0x57c>)
 800393e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	b29a      	uxth	r2, r3
 8003948:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <decodeFrame+0x57c>)
 800394a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 800394e:	4b17      	ldr	r3, [pc, #92]	@ (80039ac <decodeFrame+0x57c>)
 8003950:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <decodeFrame+0x52c>
 8003958:	f7fe fa42 	bl	8001de0 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <decodeFrame+0x57c>)
 800395e:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003962:	3301      	adds	r3, #1
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	4413      	add	r3, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fbe0 	bl	800212e <os_rlsbf2>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 800397c:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <decodeFrame+0x584>)
 800397e:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003980:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <decodeFrame+0x57c>)
 8003982:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <decodeFrame+0x57c>)
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 800398e:	2101      	movs	r1, #1
 8003990:	201e      	movs	r0, #30
 8003992:	f7fe ff25 	bl	80027e0 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8003996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003998:	3304      	adds	r3, #4
 800399a:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800399c:	e000      	b.n	80039a0 <decodeFrame+0x570>
            continue;
 800399e:	bf00      	nop
    while( oidx < olen ) {
 80039a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a4:	429a      	cmp	r2, r3
 80039a6:	f6ff ae45 	blt.w	8003634 <decodeFrame+0x204>
 80039aa:	e006      	b.n	80039ba <decodeFrame+0x58a>
 80039ac:	200001bc 	.word	0x200001bc
 80039b0:	0800ec70 	.word	0x0800ec70
 80039b4:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 80039b8:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 80039ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d11d      	bne.n	80039fc <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 80039c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	db1a      	blt.n	80039fc <decodeFrame+0x5cc>
 80039c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dd15      	ble.n	80039fc <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 80039d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	dc01      	bgt.n	80039da <decodeFrame+0x5aa>
 80039d6:	482e      	ldr	r0, [pc, #184]	@ (8003a90 <decodeFrame+0x660>)
 80039d8:	e000      	b.n	80039dc <decodeFrame+0x5ac>
 80039da:	482e      	ldr	r0, [pc, #184]	@ (8003a94 <decodeFrame+0x664>)
 80039dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <decodeFrame+0x668>)
 80039de:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 80039e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039e6:	4413      	add	r3, r2
 80039e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80039ec:	1a8a      	subs	r2, r1, r2
 80039ee:	9201      	str	r2, [sp, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2301      	movs	r3, #1
 80039f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039f6:	4621      	mov	r1, r4
 80039f8:	f7fe fd66 	bl	80024c8 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <decodeFrame+0x668>)
 8003a02:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003a0a:	4b23      	ldr	r3, [pc, #140]	@ (8003a98 <decodeFrame+0x668>)
 8003a0c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	d002      	beq.n	8003a1e <decodeFrame+0x5ee>
 8003a18:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003a1c:	e000      	b.n	8003a20 <decodeFrame+0x5f0>
 8003a1e:	2240      	movs	r2, #64	@ 0x40
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b1c      	ldr	r3, [pc, #112]	@ (8003a98 <decodeFrame+0x668>)
 8003a28:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 8003a2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da12      	bge.n	8003a58 <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003a32:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <decodeFrame+0x668>)
 8003a34:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <decodeFrame+0x668>)
 8003a40:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b13      	ldr	r3, [pc, #76]	@ (8003a98 <decodeFrame+0x668>)
 8003a4a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <decodeFrame+0x668>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003a56:	e016      	b.n	8003a86 <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <decodeFrame+0x668>)
 8003a5a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003a5e:	f043 0310 	orr.w	r3, r3, #16
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <decodeFrame+0x668>)
 8003a66:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <decodeFrame+0x668>)
 8003a70:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <decodeFrame+0x668>)
 8003a82:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3764      	adds	r7, #100	@ 0x64
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	200002b0 	.word	0x200002b0
 8003a94:	200002c0 	.word	0x200002c0
 8003a98:	200001bc 	.word	0x200001bc

08003a9c <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <setupRx2+0x3c>)
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <setupRx2+0x3c>)
 8003aaa:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fae2 	bl	8002078 <dndr2rps>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <setupRx2+0x3c>)
 8003aba:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <setupRx2+0x3c>)
 8003abe:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <setupRx2+0x3c>)
 8003ac4:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003ac6:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <setupRx2+0x3c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 8003ace:	2002      	movs	r0, #2
 8003ad0:	f002 fa96 	bl	8006000 <os_radio>
}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200001bc 	.word	0x200001bc

08003adc <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <schedRx2+0x44>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	18d1      	adds	r1, r2, r3
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <schedRx2+0x44>)
 8003af0:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <schedRx2+0x48>)
 8003af8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	440b      	add	r3, r1
 8003b04:	4a06      	ldr	r2, [pc, #24]	@ (8003b20 <schedRx2+0x44>)
 8003b06:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <schedRx2+0x44>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	3b40      	subs	r3, #64	@ 0x40
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4805      	ldr	r0, [pc, #20]	@ (8003b28 <schedRx2+0x4c>)
 8003b14:	f001 fcb8 	bl	8005488 <os_setTimedCallback>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	200001bc 	.word	0x200001bc
 8003b24:	0800eca4 	.word	0x0800eca4
 8003b28:	200001d0 	.word	0x200001d0

08003b2c <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <setupRx1+0x40>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <setupRx1+0x40>)
 8003b3e:	89db      	ldrh	r3, [r3, #14]
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fa49 	bl	8001fda <setNocrc>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <setupRx1+0x40>)
 8003b4e:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <setupRx1+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 8003b58:	4a04      	ldr	r2, [pc, #16]	@ (8003b6c <setupRx1+0x40>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003b5e:	2002      	movs	r0, #2
 8003b60:	f002 fa4e 	bl	8006000 <os_radio>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	200001bc 	.word	0x200001bc

08003b70 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 8003b7a:	4b22      	ldr	r3, [pc, #136]	@ (8003c04 <txDone+0x94>)
 8003b7c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b80:	461a      	mov	r2, r3
 8003b82:	f240 6302 	movw	r3, #1538	@ 0x602
 8003b86:	4013      	ands	r3, r2
 8003b88:	f240 4202 	movw	r2, #1026	@ 0x402
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10b      	bne.n	8003ba8 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003b90:	481d      	ldr	r0, [pc, #116]	@ (8003c08 <txDone+0x98>)
 8003b92:	f7fe feab 	bl	80028ec <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003b96:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <txDone+0x94>)
 8003b98:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <txDone+0x94>)
 8003ba4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003ba8:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <txDone+0x94>)
 8003baa:	7c1b      	ldrb	r3, [r3, #16]
 8003bac:	2b07      	cmp	r3, #7
 8003bae:	d10a      	bne.n	8003bc6 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003bb0:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <txDone+0x94>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3b05      	subs	r3, #5
 8003bba:	4a12      	ldr	r2, [pc, #72]	@ (8003c04 <txDone+0x94>)
 8003bbc:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003bbe:	4b11      	ldr	r3, [pc, #68]	@ (8003c04 <txDone+0x94>)
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	741a      	strb	r2, [r3, #16]
 8003bc4:	e012      	b.n	8003bec <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <txDone+0x94>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	18d1      	adds	r1, r2, r3
 8003bce:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <txDone+0x94>)
 8003bd0:	7c5b      	ldrb	r3, [r3, #17]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <txDone+0x9c>)
 8003bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <txDone+0x94>)
 8003be4:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003be6:	4b07      	ldr	r3, [pc, #28]	@ (8003c04 <txDone+0x94>)
 8003be8:	2205      	movs	r2, #5
 8003bea:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <txDone+0x94>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	3b40      	subs	r3, #64	@ 0x40
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4806      	ldr	r0, [pc, #24]	@ (8003c10 <txDone+0xa0>)
 8003bf8:	f001 fc46 	bl	8005488 <os_setTimedCallback>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200001bc 	.word	0x200001bc
 8003c08:	200002f0 	.word	0x200002f0
 8003c0c:	0800eca4 	.word	0x0800eca4
 8003c10:	200001d0 	.word	0x200001d0

08003c14 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 8003c1c:	2008      	movs	r0, #8
 8003c1e:	f7ff faef 	bl	8003200 <reportEvent>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <processJoinAccept>:


static bit_t processJoinAccept (void) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003c32:	4b99      	ldr	r3, [pc, #612]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c34:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <processJoinAccept+0x1e>
 8003c3c:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c3e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <processJoinAccept+0x1e>
 8003c46:	f7fe f8cb 	bl	8001de0 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003c4a:	4b93      	ldr	r3, [pc, #588]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c4c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <processJoinAccept+0x30>
 8003c58:	f7fe f8c2 	bl	8001de0 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c5e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d14c      	bne.n	8003d00 <processJoinAccept+0xd4>
      nojoinframe:
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 8003c6a:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c6e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d123      	bne.n	8003cc2 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8003c7a:	4b87      	ldr	r3, [pc, #540]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c7c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <processJoinAccept+0x60>
 8003c88:	f7fe f8aa 	bl	8001de0 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003c8c:	4b82      	ldr	r3, [pc, #520]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c8e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <processJoinAccept+0x26c>)
 8003c9a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 8003c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e98 <processJoinAccept+0x26c>)
 8003ca0:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	d807      	bhi.n	8003cb8 <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003ca8:	4b7b      	ldr	r3, [pc, #492]	@ (8003e98 <processJoinAccept+0x26c>)
 8003caa:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003cae:	3301      	adds	r3, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b79      	ldr	r3, [pc, #484]	@ (8003e98 <processJoinAccept+0x26c>)
 8003cb4:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003cb8:	2009      	movs	r0, #9
 8003cba:	f7ff faa1 	bl	8003200 <reportEvent>
            return 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0e6      	b.n	8003e90 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003cc2:	4b75      	ldr	r3, [pc, #468]	@ (8003e98 <processJoinAccept+0x26c>)
 8003cc4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	4b72      	ldr	r3, [pc, #456]	@ (8003e98 <processJoinAccept+0x26c>)
 8003cd0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8003cd4:	f7ff fa22 	bl	800311c <nextJoinState>
 8003cd8:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003cda:	f001 fb6b 	bl	80053b4 <os_getTime>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <processJoinAccept+0xc6>
 8003cee:	4b6b      	ldr	r3, [pc, #428]	@ (8003e9c <processJoinAccept+0x270>)
 8003cf0:	e000      	b.n	8003cf4 <processJoinAccept+0xc8>
 8003cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea0 <processJoinAccept+0x274>)
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	486b      	ldr	r0, [pc, #428]	@ (8003ea4 <processJoinAccept+0x278>)
 8003cf8:	f001 fbc6 	bl	8005488 <os_setTimedCallback>
        return 1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0c7      	b.n	8003e90 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 8003d00:	4b65      	ldr	r3, [pc, #404]	@ (8003e98 <processJoinAccept+0x26c>)
 8003d02:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8003d06:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 8003d08:	4b63      	ldr	r3, [pc, #396]	@ (8003e98 <processJoinAccept+0x26c>)
 8003d0a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003d0e:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	3b04      	subs	r3, #4
 8003d14:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003d18:	4a5f      	ldr	r2, [pc, #380]	@ (8003e98 <processJoinAccept+0x26c>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fa1b 	bl	8002158 <os_rlsbf4>
 8003d22:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b11      	cmp	r3, #17
 8003d28:	d002      	beq.n	8003d30 <processJoinAccept+0x104>
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b21      	cmp	r3, #33	@ 0x21
 8003d2e:	d104      	bne.n	8003d3a <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 8003d30:	7d7b      	ldrb	r3, [r7, #21]
 8003d32:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d00b      	beq.n	8003d52 <processJoinAccept+0x126>
      badframe:
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 8003d3e:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003d40:	4b55      	ldr	r3, [pc, #340]	@ (8003e98 <processJoinAccept+0x26c>)
 8003d42:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d08d      	beq.n	8003c6a <processJoinAccept+0x3e>
            return 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e09e      	b.n	8003e90 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8003d52:	4a55      	ldr	r2, [pc, #340]	@ (8003ea8 <processJoinAccept+0x27c>)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7fe fb9e 	bl	800249c <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	3b04      	subs	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4851      	ldr	r0, [pc, #324]	@ (8003eac <processJoinAccept+0x280>)
 8003d68:	f7fe fb76 	bl	8002458 <aes_verifyMic0>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0e5      	beq.n	8003d3e <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003d72:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb0 <processJoinAccept+0x284>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe f9ef 	bl	8002158 <os_rlsbf4>
 8003d7a:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 8003d7c:	4a46      	ldr	r2, [pc, #280]	@ (8003e98 <processJoinAccept+0x26c>)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003d84:	484b      	ldr	r0, [pc, #300]	@ (8003eb4 <processJoinAccept+0x288>)
 8003d86:	f7fe f9e7 	bl	8002158 <os_rlsbf4>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d90:	4a41      	ldr	r2, [pc, #260]	@ (8003e98 <processJoinAccept+0x26c>)
 8003d92:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7fe ff12 	bl	8002bc0 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b11      	cmp	r3, #17
 8003da0:	d920      	bls.n	8003de4 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003da2:	230d      	movs	r3, #13
 8003da4:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003da6:	2303      	movs	r3, #3
 8003da8:	75bb      	strb	r3, [r7, #22]
 8003daa:	e018      	b.n	8003dde <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003db2:	4a39      	ldr	r2, [pc, #228]	@ (8003e98 <processJoinAccept+0x26c>)
 8003db4:	4413      	add	r3, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f802 	bl	8002dc0 <convFreq>
 8003dbc:	60b8      	str	r0, [r7, #8]
            if( freq )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003dc4:	7db8      	ldrb	r0, [r7, #22]
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	2200      	movs	r2, #0
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	f7fe ff7d 	bl	8002ccc <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003dd2:	7dbb      	ldrb	r3, [r7, #22]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	75bb      	strb	r3, [r7, #22]
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	3303      	adds	r3, #3
 8003ddc:	75fb      	strb	r3, [r7, #23]
 8003dde:	7dbb      	ldrb	r3, [r7, #22]
 8003de0:	2b07      	cmp	r3, #7
 8003de2:	d9e3      	bls.n	8003dac <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003de4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e98 <processJoinAccept+0x26c>)
 8003de6:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b298      	uxth	r0, r3
 8003dee:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <processJoinAccept+0x28c>)
 8003df0:	4a32      	ldr	r2, [pc, #200]	@ (8003ebc <processJoinAccept+0x290>)
 8003df2:	492d      	ldr	r1, [pc, #180]	@ (8003ea8 <processJoinAccept+0x27c>)
 8003df4:	f7fe fbac 	bl	8002550 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <processJoinAccept+0x26c>)
 8003dfa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003dfe:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <processJoinAccept+0x1de>
 8003e06:	f7fd ffeb 	bl	8001de0 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8003e0a:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e0c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00e      	beq.n	8003e36 <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8003e18:	4b1f      	ldr	r3, [pc, #124]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e1a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e20:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe f968 	bl	80020fc <lowerDR>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e32:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 8003e36:	4b18      	ldr	r3, [pc, #96]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e38:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e3c:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8003e40:	f023 0302 	bic.w	r3, r3, #2
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e48:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 8003e4c:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 8003e54:	f7ff f9f2 	bl	800323c <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8003e58:	4b0f      	ldr	r3, [pc, #60]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e5a:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e66:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e6c:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8003e70:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e72:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 8003e76:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e78:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <processJoinAccept+0x25c>
 8003e80:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <processJoinAccept+0x26c>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 8003e88:	2006      	movs	r0, #6
 8003e8a:	f7ff f9b9 	bl	8003200 <reportEvent>
    return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	200001bc 	.word	0x200001bc
 8003e9c:	08003c15 	.word	0x08003c15
 8003ea0:	080031ed 	.word	0x080031ed
 8003ea4:	200001d0 	.word	0x200001d0
 8003ea8:	20000305 	.word	0x20000305
 8003eac:	20000304 	.word	0x20000304
 8003eb0:	2000030b 	.word	0x2000030b
 8003eb4:	20000308 	.word	0x20000308
 8003eb8:	200002c0 	.word	0x200002c0
 8003ebc:	200002b0 	.word	0x200002b0

08003ec0 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003ec8:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <processRx2Jacc+0x28>)
 8003eca:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003ed2:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <processRx2Jacc+0x28>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 8003eda:	f7ff fea7 	bl	8003c2c <processJoinAccept>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200001bc 	.word	0x200001bc

08003eec <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <setupRx2Jacc+0x1c>)
 8003ef6:	4a05      	ldr	r2, [pc, #20]	@ (8003f0c <setupRx2Jacc+0x20>)
 8003ef8:	61da      	str	r2, [r3, #28]
    setupRx2();
 8003efa:	f7ff fdcf 	bl	8003a9c <setupRx2>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200001bc 	.word	0x200001bc
 8003f0c:	08003ec1 	.word	0x08003ec1

08003f10 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 8003f18:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <processRx1Jacc+0x2c>)
 8003f1a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <processRx1Jacc+0x1c>
 8003f22:	f7ff fe83 	bl	8003c2c <processJoinAccept>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8003f2c:	4904      	ldr	r1, [pc, #16]	@ (8003f40 <processRx1Jacc+0x30>)
 8003f2e:	4805      	ldr	r0, [pc, #20]	@ (8003f44 <processRx1Jacc+0x34>)
 8003f30:	f7ff fdd4 	bl	8003adc <schedRx2>
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200001bc 	.word	0x200001bc
 8003f40:	08003eed 	.word	0x08003eed
 8003f44:	0002ee00 	.word	0x0002ee00

08003f48 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8003f50:	4803      	ldr	r0, [pc, #12]	@ (8003f60 <setupRx1Jacc+0x18>)
 8003f52:	f7ff fdeb 	bl	8003b2c <setupRx1>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	08003f11 	.word	0x08003f11

08003f64 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8003f6c:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <jreqDone+0x18>)
 8003f6e:	4804      	ldr	r0, [pc, #16]	@ (8003f80 <jreqDone+0x1c>)
 8003f70:	f7ff fdfe 	bl	8003b70 <txDone>
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	08003f49 	.word	0x08003f49
 8003f80:	00027100 	.word	0x00027100

08003f84 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    processDnData();
 8003f8c:	f000 fbc6 	bl	800471c <processDnData>
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe0 <processRx2DnData+0x48>)
 8003fa2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d115      	bne.n	8003fd6 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <processRx2DnData+0x48>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003fb2:	f001 f9ff 	bl	80053b4 <os_getTime>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8003fbc:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f7fe fd4f 	bl	8002a64 <rndDelay>
 8003fc6:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003fc8:	4423      	add	r3, r4
 8003fca:	4a06      	ldr	r2, [pc, #24]	@ (8003fe4 <processRx2DnData+0x4c>)
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4806      	ldr	r0, [pc, #24]	@ (8003fe8 <processRx2DnData+0x50>)
 8003fd0:	f001 fa5a 	bl	8005488 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003fd4:	e001      	b.n	8003fda <processRx2DnData+0x42>
    }
    processDnData();
 8003fd6:	f000 fba1 	bl	800471c <processDnData>
}
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	200001bc 	.word	0x200001bc
 8003fe4:	08003f85 	.word	0x08003f85
 8003fe8:	200001d0 	.word	0x200001d0

08003fec <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <setupRx2DnData+0x1c>)
 8003ff6:	4a05      	ldr	r2, [pc, #20]	@ (800400c <setupRx2DnData+0x20>)
 8003ff8:	61da      	str	r2, [r3, #28]
    setupRx2();
 8003ffa:	f7ff fd4f 	bl	8003a9c <setupRx2>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200001bc 	.word	0x200001bc
 800400c:	08003f99 	.word	0x08003f99

08004010 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 8004018:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <processRx1DnData+0x40>)
 800401a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <processRx1DnData+0x1c>
 8004022:	f000 fb7b 	bl	800471c <processDnData>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10c      	bne.n	8004046 <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 800402c:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <processRx1DnData+0x40>)
 800402e:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004032:	3301      	adds	r3, #1
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	4905      	ldr	r1, [pc, #20]	@ (8004054 <processRx1DnData+0x44>)
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fd4b 	bl	8003adc <schedRx2>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200001bc 	.word	0x200001bc
 8004054:	08003fed 	.word	0x08003fed

08004058 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8004060:	4803      	ldr	r0, [pc, #12]	@ (8004070 <setupRx1DnData+0x18>)
 8004062:	f7ff fd63 	bl	8003b2c <setupRx1>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	08004011 	.word	0x08004011

08004074 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <updataDone+0x28>)
 800407e:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004082:	461a      	mov	r2, r3
 8004084:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	4904      	ldr	r1, [pc, #16]	@ (80040a0 <updataDone+0x2c>)
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fd6e 	bl	8003b70 <txDone>
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200001bc 	.word	0x200001bc
 80040a0:	08004059 	.word	0x08004059

080040a4 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 80040aa:	4ba3      	ldr	r3, [pc, #652]	@ (8004338 <buildDataFrame+0x294>)
 80040ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80040b0:	f003 0318 	and.w	r3, r3, #24
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <buildDataFrame+0x2a>
 80040c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004338 <buildDataFrame+0x294>)
 80040c8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80040cc:	e000      	b.n	80040d0 <buildDataFrame+0x2c>
 80040ce:	2300      	movs	r3, #0
 80040d0:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 80040d2:	2308      	movs	r3, #8
 80040d4:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 80040d6:	4b98      	ldr	r3, [pc, #608]	@ (8004338 <buildDataFrame+0x294>)
 80040d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80040dc:	461a      	mov	r2, r3
 80040de:	f240 4302 	movw	r3, #1026	@ 0x402
 80040e2:	4013      	ands	r3, r2
 80040e4:	f240 4202 	movw	r2, #1026	@ 0x402
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d11c      	bne.n	8004126 <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 80040ec:	4a92      	ldr	r2, [pc, #584]	@ (8004338 <buildDataFrame+0x294>)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80040f6:	2210      	movs	r2, #16
 80040f8:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80040fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004338 <buildDataFrame+0x294>)
 80040fc:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8004100:	b25a      	sxtb	r2, r3
 8004102:	4b8d      	ldr	r3, [pc, #564]	@ (8004338 <buildDataFrame+0x294>)
 8004104:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	b25b      	sxtb	r3, r3
 800410c:	4313      	orrs	r3, r2
 800410e:	b25a      	sxtb	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3301      	adds	r3, #1
 8004114:	b2d1      	uxtb	r1, r2
 8004116:	4a88      	ldr	r2, [pc, #544]	@ (8004338 <buildDataFrame+0x294>)
 8004118:	4413      	add	r3, r2
 800411a:	460a      	mov	r2, r1
 800411c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3302      	adds	r3, #2
 8004124:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 8004126:	4b84      	ldr	r3, [pc, #528]	@ (8004338 <buildDataFrame+0x294>)
 8004128:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8004130:	4a81      	ldr	r2, [pc, #516]	@ (8004338 <buildDataFrame+0x294>)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800413a:	2204      	movs	r2, #4
 800413c:	701a      	strb	r2, [r3, #0]
        end += 1;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3301      	adds	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8004144:	4b7c      	ldr	r3, [pc, #496]	@ (8004338 <buildDataFrame+0x294>)
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 800414c:	4b7a      	ldr	r3, [pc, #488]	@ (8004338 <buildDataFrame+0x294>)
 800414e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01a      	beq.n	800418c <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8004156:	4a78      	ldr	r2, [pc, #480]	@ (8004338 <buildDataFrame+0x294>)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4413      	add	r3, r2
 800415c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004160:	2205      	movs	r2, #5
 8004162:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8004164:	4b74      	ldr	r3, [pc, #464]	@ (8004338 <buildDataFrame+0x294>)
 8004166:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	f002 0203 	and.w	r2, r2, #3
 8004172:	b2d1      	uxtb	r1, r2
 8004174:	4a70      	ldr	r2, [pc, #448]	@ (8004338 <buildDataFrame+0x294>)
 8004176:	4413      	add	r3, r2
 8004178:	460a      	mov	r2, r1
 800417a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3302      	adds	r3, #2
 8004182:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8004184:	4b6c      	ldr	r3, [pc, #432]	@ (8004338 <buildDataFrame+0x294>)
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 800418c:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <buildDataFrame+0x294>)
 800418e:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 8004196:	4a68      	ldr	r2, [pc, #416]	@ (8004338 <buildDataFrame+0x294>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4413      	add	r3, r2
 800419c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80041a0:	2206      	movs	r2, #6
 80041a2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1c5c      	adds	r4, r3, #1
 80041a8:	f7fe f869 	bl	800227e <os_getBattLevel>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b61      	ldr	r3, [pc, #388]	@ (8004338 <buildDataFrame+0x294>)
 80041b2:	4423      	add	r3, r4
 80041b4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3302      	adds	r3, #2
 80041bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004338 <buildDataFrame+0x294>)
 80041be:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 80041c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004338 <buildDataFrame+0x294>)
 80041c4:	4413      	add	r3, r2
 80041c6:	460a      	mov	r2, r1
 80041c8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	3303      	adds	r3, #3
 80041d0:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 80041d2:	4b59      	ldr	r3, [pc, #356]	@ (8004338 <buildDataFrame+0x294>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 80041da:	4b57      	ldr	r3, [pc, #348]	@ (8004338 <buildDataFrame+0x294>)
 80041dc:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 80041e4:	4a54      	ldr	r2, [pc, #336]	@ (8004338 <buildDataFrame+0x294>)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80041ee:	2203      	movs	r2, #3
 80041f0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 80041f2:	4b51      	ldr	r3, [pc, #324]	@ (8004338 <buildDataFrame+0x294>)
 80041f4:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3301      	adds	r3, #1
 80041fc:	f002 0207 	and.w	r2, r2, #7
 8004200:	b2d1      	uxtb	r1, r2
 8004202:	4a4d      	ldr	r2, [pc, #308]	@ (8004338 <buildDataFrame+0x294>)
 8004204:	4413      	add	r3, r2
 8004206:	460a      	mov	r2, r1
 8004208:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	3302      	adds	r3, #2
 8004210:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 8004212:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <buildDataFrame+0x294>)
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 800421a:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <buildDataFrame+0x294>)
 800421c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 8004224:	4a44      	ldr	r2, [pc, #272]	@ (8004338 <buildDataFrame+0x294>)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4413      	add	r3, r2
 800422a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800422e:	2212      	movs	r2, #18
 8004230:	701a      	strb	r2, [r3, #0]
        end += 1;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3301      	adds	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 8004238:	4b3f      	ldr	r3, [pc, #252]	@ (8004338 <buildDataFrame+0x294>)
 800423a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 8004242:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <buildDataFrame+0x294>)
 8004244:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004248:	2b00      	cmp	r3, #0
 800424a:	da03      	bge.n	8004254 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 800424c:	4b3a      	ldr	r3, [pc, #232]	@ (8004338 <buildDataFrame+0x294>)
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 8004254:	4b38      	ldr	r3, [pc, #224]	@ (8004338 <buildDataFrame+0x294>)
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 800425c:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <buildDataFrame+0x294>)
 800425e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01a      	beq.n	800429c <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 8004266:	4a34      	ldr	r2, [pc, #208]	@ (8004338 <buildDataFrame+0x294>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4413      	add	r3, r2
 800426c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004270:	2211      	movs	r2, #17
 8004272:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8004274:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <buildDataFrame+0x294>)
 8004276:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3301      	adds	r3, #1
 800427e:	f002 0201 	and.w	r2, r2, #1
 8004282:	b2d1      	uxtb	r1, r2
 8004284:	4a2c      	ldr	r2, [pc, #176]	@ (8004338 <buildDataFrame+0x294>)
 8004286:	4413      	add	r3, r2
 8004288:	460a      	mov	r2, r1
 800428a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3302      	adds	r3, #2
 8004292:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8004294:	4b28      	ldr	r3, [pc, #160]	@ (8004338 <buildDataFrame+0x294>)
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 800429c:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <buildDataFrame+0x294>)
 800429e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01a      	beq.n	80042dc <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 80042a6:	4a24      	ldr	r2, [pc, #144]	@ (8004338 <buildDataFrame+0x294>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80042b0:	2207      	movs	r2, #7
 80042b2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 80042b4:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <buildDataFrame+0x294>)
 80042b6:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3301      	adds	r3, #1
 80042be:	f002 0203 	and.w	r2, r2, #3
 80042c2:	b2d1      	uxtb	r1, r2
 80042c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004338 <buildDataFrame+0x294>)
 80042c6:	4413      	add	r3, r2
 80042c8:	460a      	mov	r2, r1
 80042ca:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3302      	adds	r3, #2
 80042d2:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 80042d4:	4b18      	ldr	r3, [pc, #96]	@ (8004338 <buildDataFrame+0x294>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b18      	cmp	r3, #24
 80042e0:	dd01      	ble.n	80042e6 <buildDataFrame+0x242>
 80042e2:	f7fd fd7d 	bl	8001de0 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <buildDataFrame+0x250>
 80042ec:	79bb      	ldrb	r3, [r7, #6]
 80042ee:	3305      	adds	r3, #5
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e000      	b.n	80042f6 <buildDataFrame+0x252>
 80042f4:	2304      	movs	r3, #4
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	4413      	add	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d905      	bls.n	8004310 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3304      	adds	r3, #4
 800430e:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8004310:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <buildDataFrame+0x294>)
 8004312:	2240      	movs	r2, #64	@ 0x40
 8004314:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8004318:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <buildDataFrame+0x294>)
 800431a:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <buildDataFrame+0x294>)
 8004320:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8004324:	4313      	orrs	r3, r2
 8004326:	b2db      	uxtb	r3, r3
 8004328:	b25b      	sxtb	r3, r3
 800432a:	4a03      	ldr	r2, [pc, #12]	@ (8004338 <buildDataFrame+0x294>)
 800432c:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8004330:	2a00      	cmp	r2, #0
 8004332:	db03      	blt.n	800433c <buildDataFrame+0x298>
 8004334:	2240      	movs	r2, #64	@ 0x40
 8004336:	e002      	b.n	800433e <buildDataFrame+0x29a>
 8004338:	200001bc 	.word	0x200001bc
 800433c:	2200      	movs	r2, #0
 800433e:	4313      	orrs	r3, r2
 8004340:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3b08      	subs	r3, #8
 8004348:	b2db      	uxtb	r3, r3
 800434a:	b25b      	sxtb	r3, r3
 800434c:	4313      	orrs	r3, r2
 800434e:	b25b      	sxtb	r3, r3
 8004350:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8004352:	4b40      	ldr	r3, [pc, #256]	@ (8004454 <buildDataFrame+0x3b0>)
 8004354:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8004358:	4a3f      	ldr	r2, [pc, #252]	@ (8004458 <buildDataFrame+0x3b4>)
 800435a:	4b3e      	ldr	r3, [pc, #248]	@ (8004454 <buildDataFrame+0x3b0>)
 800435c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7fd ff49 	bl	80021fa <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 8004368:	4b3a      	ldr	r3, [pc, #232]	@ (8004454 <buildDataFrame+0x3b0>)
 800436a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8004372:	4b38      	ldr	r3, [pc, #224]	@ (8004454 <buildDataFrame+0x3b0>)
 8004374:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004378:	3301      	adds	r3, #1
 800437a:	4a36      	ldr	r2, [pc, #216]	@ (8004454 <buildDataFrame+0x3b0>)
 800437c:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8004380:	4a36      	ldr	r2, [pc, #216]	@ (800445c <buildDataFrame+0x3b8>)
 8004382:	4b34      	ldr	r3, [pc, #208]	@ (8004454 <buildDataFrame+0x3b0>)
 8004384:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29b      	uxth	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7fd ff1b 	bl	80021cc <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 8004396:	4b2f      	ldr	r3, [pc, #188]	@ (8004454 <buildDataFrame+0x3b0>)
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d03e      	beq.n	8004422 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 80043a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004454 <buildDataFrame+0x3b0>)
 80043a6:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 80043ae:	4b29      	ldr	r3, [pc, #164]	@ (8004454 <buildDataFrame+0x3b0>)
 80043b0:	2280      	movs	r2, #128	@ 0x80
 80043b2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 80043b6:	4b27      	ldr	r3, [pc, #156]	@ (8004454 <buildDataFrame+0x3b0>)
 80043b8:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <buildDataFrame+0x324>
 80043c0:	4b24      	ldr	r3, [pc, #144]	@ (8004454 <buildDataFrame+0x3b0>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 80043c8:	4b22      	ldr	r3, [pc, #136]	@ (8004454 <buildDataFrame+0x3b0>)
 80043ca:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 80043ce:	4a21      	ldr	r2, [pc, #132]	@ (8004454 <buildDataFrame+0x3b0>)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80043d8:	460a      	mov	r2, r1
 80043da:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <buildDataFrame+0x3bc>)
 80043e2:	4413      	add	r3, r2
 80043e4:	79ba      	ldrb	r2, [r7, #6]
 80043e6:	491f      	ldr	r1, [pc, #124]	@ (8004464 <buildDataFrame+0x3c0>)
 80043e8:	4618      	mov	r0, r3
 80043ea:	f009 fb3f 	bl	800da6c <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80043ee:	4b19      	ldr	r3, [pc, #100]	@ (8004454 <buildDataFrame+0x3b0>)
 80043f0:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <buildDataFrame+0x358>
 80043f8:	481b      	ldr	r0, [pc, #108]	@ (8004468 <buildDataFrame+0x3c4>)
 80043fa:	e000      	b.n	80043fe <buildDataFrame+0x35a>
 80043fc:	481b      	ldr	r0, [pc, #108]	@ (800446c <buildDataFrame+0x3c8>)
 80043fe:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <buildDataFrame+0x3b0>)
 8004400:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8004404:	4b13      	ldr	r3, [pc, #76]	@ (8004454 <buildDataFrame+0x3b0>)
 8004406:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800440a:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8004410:	4a13      	ldr	r2, [pc, #76]	@ (8004460 <buildDataFrame+0x3bc>)
 8004412:	4413      	add	r3, r2
 8004414:	79ba      	ldrb	r2, [r7, #6]
 8004416:	9201      	str	r2, [sp, #4]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	2300      	movs	r3, #0
 800441c:	4622      	mov	r2, r4
 800441e:	f7fe f853 	bl	80024c8 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 8004422:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <buildDataFrame+0x3b0>)
 8004424:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8004428:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <buildDataFrame+0x3b0>)
 800442a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	3b04      	subs	r3, #4
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <buildDataFrame+0x3bc>)
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	480a      	ldr	r0, [pc, #40]	@ (8004468 <buildDataFrame+0x3c4>)
 800443e:	f7fd ffc5 	bl	80023cc <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8004442:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <buildDataFrame+0x3b0>)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}
 8004452:	bf00      	nop
 8004454:	200001bc 	.word	0x200001bc
 8004458:	20000305 	.word	0x20000305
 800445c:	2000030a 	.word	0x2000030a
 8004460:	20000304 	.word	0x20000304
 8004464:	20000279 	.word	0x20000279
 8004468:	200002b0 	.word	0x200002b0
 800446c:	200002c0 	.word	0x200002c0

08004470 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8004478:	2000      	movs	r0, #0
 800447a:	f001 fdc1 	bl	8006000 <os_radio>
    os_clearCallback(&LMIC.osjob);
 800447e:	4823      	ldr	r0, [pc, #140]	@ (800450c <onBcnRx+0x9c>)
 8004480:	f000 ffbe 	bl	8005400 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8004484:	4b22      	ldr	r3, [pc, #136]	@ (8004510 <onBcnRx+0xa0>)
 8004486:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <onBcnRx+0xa0>)
 8004490:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004494:	f023 0303 	bic.w	r3, r3, #3
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <onBcnRx+0xa0>)
 800449c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7fe fead 	bl	8003200 <reportEvent>
        return;
 80044a6:	e02d      	b.n	8004504 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 80044a8:	f7fe ff2e 	bl	8003308 <decodeBeacon>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	dc0f      	bgt.n	80044d2 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 80044b2:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <onBcnRx+0xa0>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 80044ba:	2003      	movs	r0, #3
 80044bc:	f001 fda0 	bl	8006000 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <onBcnRx+0xa0>)
 80044c2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80044c6:	4a13      	ldr	r2, [pc, #76]	@ (8004514 <onBcnRx+0xa4>)
 80044c8:	4619      	mov	r1, r3
 80044ca:	4810      	ldr	r0, [pc, #64]	@ (800450c <onBcnRx+0x9c>)
 80044cc:	f000 ffdc 	bl	8005488 <os_setTimedCallback>
        return;
 80044d0:	e018      	b.n	8004504 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 80044d2:	2101      	movs	r1, #1
 80044d4:	200d      	movs	r0, #13
 80044d6:	f7fe f983 	bl	80027e0 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <onBcnRx+0xa0>)
 80044dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <onBcnRx+0xa0>)
 80044e8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 80044ec:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <onBcnRx+0xa0>)
 80044ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <onBcnRx+0xa0>)
 80044fa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 80044fe:	2002      	movs	r0, #2
 8004500:	f7fe fe7e 	bl	8003200 <reportEvent>
}
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	200001d0 	.word	0x200001d0
 8004510:	200001bc 	.word	0x200001bc
 8004514:	08004471 	.word	0x08004471

08004518 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 800451c:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <startScan+0xa4>)
 800451e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <startScan+0x1c>
 8004526:	4b25      	ldr	r3, [pc, #148]	@ (80045bc <startScan+0xa4>)
 8004528:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <startScan+0x20>
 8004534:	f7fd fc54 	bl	8001de0 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8004538:	4b20      	ldr	r3, [pc, #128]	@ (80045bc <startScan+0xa4>)
 800453a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d137      	bne.n	80045b6 <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8004546:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <startScan+0xa4>)
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 800454e:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <startScan+0xa4>)
 8004550:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8004554:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <startScan+0xa4>)
 8004556:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 800455a:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <startScan+0xa4>)
 800455c:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8004560:	4b16      	ldr	r3, [pc, #88]	@ (80045bc <startScan+0xa4>)
 8004562:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8004566:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <startScan+0xa4>)
 8004568:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004576:	b29a      	uxth	r2, r3
 8004578:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <startScan+0xa4>)
 800457a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 800457e:	f7fe fd71 	bl	8003064 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8004582:	f000 ff17 	bl	80053b4 <os_getTime>
 8004586:	4603      	mov	r3, r0
 8004588:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 800458c:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 8004590:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <startScan+0xa4>)
 8004592:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8004596:	4b09      	ldr	r3, [pc, #36]	@ (80045bc <startScan+0xa4>)
 8004598:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800459c:	4a07      	ldr	r2, [pc, #28]	@ (80045bc <startScan+0xa4>)
 800459e:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <startScan+0xa4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a06      	ldr	r2, [pc, #24]	@ (80045c0 <startScan+0xa8>)
 80045a6:	4619      	mov	r1, r3
 80045a8:	4806      	ldr	r0, [pc, #24]	@ (80045c4 <startScan+0xac>)
 80045aa:	f000 ff6d 	bl	8005488 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 80045ae:	2003      	movs	r0, #3
 80045b0:	f001 fd26 	bl	8006000 <os_radio>
 80045b4:	e000      	b.n	80045b8 <startScan+0xa0>
        return;
 80045b6:	bf00      	nop
}
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	200001bc 	.word	0x200001bc
 80045c0:	08004471 	.word	0x08004471
 80045c4:	200001d0 	.word	0x200001d0

080045c8 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <buildJoinRequest+0x64>)
 80045d4:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	79fa      	ldrb	r2, [r7, #7]
 80045da:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd33 	bl	800504c <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3309      	adds	r3, #9
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd42 	bl	8005074 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3311      	adds	r3, #17
 80045f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004630 <buildJoinRequest+0x68>)
 80045f6:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd fde5 	bl	80021cc <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8004602:	2113      	movs	r1, #19
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7fd ff09 	bl	800241c <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 800460a:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <buildJoinRequest+0x68>)
 800460c:	2217      	movs	r2, #23
 800460e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 8004612:	4b07      	ldr	r3, [pc, #28]	@ (8004630 <buildJoinRequest+0x68>)
 8004614:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8004618:	3301      	adds	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <buildJoinRequest+0x68>)
 800461e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000304 	.word	0x20000304
 8004630:	200001bc 	.word	0x200001bc

08004634 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 800463c:	2005      	movs	r0, #5
 800463e:	f7fe fddf 	bl	8003200 <reportEvent>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8004650:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <LMIC_startJoining+0x88>)
 8004652:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004656:	2b00      	cmp	r3, #0
 8004658:	d138      	bne.n	80046cc <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 800465a:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <LMIC_startJoining+0x88>)
 800465c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004660:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <LMIC_startJoining+0x20>
 8004668:	f7fd fbba 	bl	8001de0 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 800466c:	4b19      	ldr	r3, [pc, #100]	@ (80046d4 <LMIC_startJoining+0x88>)
 800466e:	2200      	movs	r2, #0
 8004670:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8004674:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <LMIC_startJoining+0x88>)
 8004676:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800467a:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <LMIC_startJoining+0x88>)
 8004686:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 800468a:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <LMIC_startJoining+0x88>)
 800468c:	2200      	movs	r2, #0
 800468e:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8004692:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <LMIC_startJoining+0x88>)
 8004694:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <LMIC_startJoining+0x88>)
 800469a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <LMIC_startJoining+0x88>)
 80046a0:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <LMIC_startJoining+0x88>)
 80046a6:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 80046aa:	f7fe fd01 	bl	80030b0 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 80046ae:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <LMIC_startJoining+0x88>)
 80046b0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <LMIC_startJoining+0x88>)
 80046bc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 80046c0:	4905      	ldr	r1, [pc, #20]	@ (80046d8 <LMIC_startJoining+0x8c>)
 80046c2:	4806      	ldr	r0, [pc, #24]	@ (80046dc <LMIC_startJoining+0x90>)
 80046c4:	f000 feba 	bl	800543c <os_setCallback>
        return 1;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200001bc 	.word	0x200001bc
 80046d8:	08004635 	.word	0x08004635
 80046dc:	200001d0 	.word	0x200001d0

080046e0 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <processPingRx+0x38>)
 80046ea:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <processPingRx+0x38>)
 80046f4:	2204      	movs	r2, #4
 80046f6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 80046fa:	f7fe fe99 	bl	8003430 <decodeFrame>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8004704:	200d      	movs	r0, #13
 8004706:	f7fe fd7b 	bl	8003200 <reportEvent>
            return;
 800470a:	e001      	b.n	8004710 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 800470c:	f000 fa2a 	bl	8004b64 <engineUpdate>
}
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200001bc 	.word	0x200001bc

0800471c <processDnData>:


static bit_t processDnData (void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8004720:	4b76      	ldr	r3, [pc, #472]	@ (80048fc <processDnData+0x1e0>)
 8004722:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <processDnData+0x16>
 800472e:	f7fd fb57 	bl	8001de0 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8004732:	4b72      	ldr	r3, [pc, #456]	@ (80048fc <processDnData+0x1e0>)
 8004734:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004738:	2b00      	cmp	r3, #0
 800473a:	f040 80ce 	bne.w	80048da <processDnData+0x1be>
      norx:
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8004742:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8004744:	4b6d      	ldr	r3, [pc, #436]	@ (80048fc <processDnData+0x1e0>)
 8004746:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800474a:	2b00      	cmp	r3, #0
 800474c:	d038      	beq.n	80047c0 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 800474e:	4b6b      	ldr	r3, [pc, #428]	@ (80048fc <processDnData+0x1e0>)
 8004750:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004754:	2b07      	cmp	r3, #7
 8004756:	d82e      	bhi.n	80047b6 <processDnData+0x9a>
                LMIC.txCnt += 1;
 8004758:	4b68      	ldr	r3, [pc, #416]	@ (80048fc <processDnData+0x1e0>)
 800475a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800475e:	3301      	adds	r3, #1
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b66      	ldr	r3, [pc, #408]	@ (80048fc <processDnData+0x1e0>)
 8004764:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8004768:	4b64      	ldr	r3, [pc, #400]	@ (80048fc <processDnData+0x1e0>)
 800476a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800476e:	4a63      	ldr	r2, [pc, #396]	@ (80048fc <processDnData+0x1e0>)
 8004770:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 8004774:	4611      	mov	r1, r2
 8004776:	4a62      	ldr	r2, [pc, #392]	@ (8004900 <processDnData+0x1e4>)
 8004778:	5c52      	ldrb	r2, [r2, r1]
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f7fd fcbd 	bl	80020fc <lowerDR>
 8004782:	4603      	mov	r3, r0
 8004784:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004788:	4619      	mov	r1, r3
 800478a:	2002      	movs	r0, #2
 800478c:	f7fe f9ea 	bl	8002b64 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8004790:	4b5a      	ldr	r3, [pc, #360]	@ (80048fc <processDnData+0x1e0>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2103      	movs	r1, #3
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe f9a2 	bl	8002ae0 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 800479c:	4b57      	ldr	r3, [pc, #348]	@ (80048fc <processDnData+0x1e0>)
 800479e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80047a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	4b54      	ldr	r3, [pc, #336]	@ (80048fc <processDnData+0x1e0>)
 80047aa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 80047ae:	f000 f9d9 	bl	8004b64 <engineUpdate>
                return 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e09f      	b.n	80048f6 <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 80047b6:	4b51      	ldr	r3, [pc, #324]	@ (80048fc <processDnData+0x1e0>)
 80047b8:	2260      	movs	r2, #96	@ 0x60
 80047ba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 80047be:	e003      	b.n	80047c8 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 80047c0:	4b4e      	ldr	r3, [pc, #312]	@ (80048fc <processDnData+0x1e0>)
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 80047c8:	4b4c      	ldr	r3, [pc, #304]	@ (80048fc <processDnData+0x1e0>)
 80047ca:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80047ce:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80047d2:	d009      	beq.n	80047e8 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 80047d4:	4b49      	ldr	r3, [pc, #292]	@ (80048fc <processDnData+0x1e0>)
 80047d6:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	b25a      	sxtb	r2, r3
 80047e2:	4b46      	ldr	r3, [pc, #280]	@ (80048fc <processDnData+0x1e0>)
 80047e4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 80047e8:	4b44      	ldr	r3, [pc, #272]	@ (80048fc <processDnData+0x1e0>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80047f0:	4b42      	ldr	r3, [pc, #264]	@ (80048fc <processDnData+0x1e0>)
 80047f2:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 80047f6:	4b41      	ldr	r3, [pc, #260]	@ (80048fc <processDnData+0x1e0>)
 80047f8:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 80047fc:	e000      	b.n	8004800 <processDnData+0xe4>
    }
    goto txcomplete;
 80047fe:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8004800:	4b3e      	ldr	r3, [pc, #248]	@ (80048fc <processDnData+0x1e0>)
 8004802:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004806:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800480a:	b29a      	uxth	r2, r3
 800480c:	4b3b      	ldr	r3, [pc, #236]	@ (80048fc <processDnData+0x1e0>)
 800480e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8004812:	4b3a      	ldr	r3, [pc, #232]	@ (80048fc <processDnData+0x1e0>)
 8004814:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <processDnData+0x12a>
 8004820:	4b36      	ldr	r3, [pc, #216]	@ (80048fc <processDnData+0x1e0>)
 8004822:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 800482e:	4b33      	ldr	r3, [pc, #204]	@ (80048fc <processDnData+0x1e0>)
 8004830:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004838:	b29a      	uxth	r2, r3
 800483a:	4b30      	ldr	r3, [pc, #192]	@ (80048fc <processDnData+0x1e0>)
 800483c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 8004840:	200f      	movs	r0, #15
 8004842:	f7fe fcdd 	bl	8003200 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8004846:	200a      	movs	r0, #10
 8004848:	f7fe fcda 	bl	8003200 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 800484c:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <processDnData+0x1e0>)
 800484e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004852:	2b18      	cmp	r3, #24
 8004854:	dd1c      	ble.n	8004890 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8004856:	4b29      	ldr	r3, [pc, #164]	@ (80048fc <processDnData+0x1e0>)
 8004858:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd fc1f 	bl	80020a0 <decDR>
 8004862:	4603      	mov	r3, r0
 8004864:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004868:	4619      	mov	r1, r3
 800486a:	2003      	movs	r0, #3
 800486c:	f7fe f97a 	bl	8002b64 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8004870:	4b22      	ldr	r3, [pc, #136]	@ (80048fc <processDnData+0x1e0>)
 8004872:	220c      	movs	r2, #12
 8004874:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004878:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <processDnData+0x1e0>)
 800487a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800487e:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 8004882:	b29a      	uxth	r2, r3
 8004884:	4b1d      	ldr	r3, [pc, #116]	@ (80048fc <processDnData+0x1e0>)
 8004886:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 800488a:	200e      	movs	r0, #14
 800488c:	f7fe fcb8 	bl	8003200 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8004890:	4b1a      	ldr	r3, [pc, #104]	@ (80048fc <processDnData+0x1e0>)
 8004892:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01d      	beq.n	80048d6 <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800489a:	4b18      	ldr	r3, [pc, #96]	@ (80048fc <processDnData+0x1e0>)
 800489c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 80048a8:	2002      	movs	r0, #2
 80048aa:	f7fe fca9 	bl	8003200 <reportEvent>
                LMIC.bcninfoTries = 0;
 80048ae:	4b13      	ldr	r3, [pc, #76]	@ (80048fc <processDnData+0x1e0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 80048b6:	e00e      	b.n	80048d6 <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 80048b8:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <processDnData+0x1e0>)
 80048ba:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80048be:	3b01      	subs	r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4b0e      	ldr	r3, [pc, #56]	@ (80048fc <processDnData+0x1e0>)
 80048c4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <processDnData+0x1e0>)
 80048ca:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 80048d2:	f7ff fe21 	bl	8004518 <startScan>
        return 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00d      	b.n	80048f6 <processDnData+0x1da>
    if( !decodeFrame() ) {
 80048da:	f7fe fda9 	bl	8003430 <decodeFrame>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d18c      	bne.n	80047fe <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80048e4:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <processDnData+0x1e0>)
 80048e6:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f43f af27 	beq.w	8004742 <processDnData+0x26>
            return 0;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200001bc 	.word	0x200001bc
 8004900:	0800ec98 	.word	0x0800ec98

08004904 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 800490c:	4b81      	ldr	r3, [pc, #516]	@ (8004b14 <processBeacon+0x210>)
 800490e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004912:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8004914:	4b7f      	ldr	r3, [pc, #508]	@ (8004b14 <processBeacon+0x210>)
 8004916:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800491a:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800491c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b14 <processBeacon+0x210>)
 800491e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8087 	beq.w	8004a36 <processBeacon+0x132>
 8004928:	f7fe fcee 	bl	8003308 <decodeBeacon>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	f340 8081 	ble.w	8004a36 <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8004934:	2304      	movs	r3, #4
 8004936:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004942:	2100      	movs	r1, #0
 8004944:	200d      	movs	r0, #13
 8004946:	f7fd ff4b 	bl	80027e0 <calcBcnRxWindowFromMillis>
            goto rev;
 800494a:	e0d2      	b.n	8004af2 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	b29a      	uxth	r2, r3
 8004950:	4b70      	ldr	r3, [pc, #448]	@ (8004b14 <processBeacon+0x210>)
 8004952:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004956:	b29b      	uxth	r3, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004960:	b29b      	uxth	r3, r3
 8004962:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8004964:	4b6b      	ldr	r3, [pc, #428]	@ (8004b14 <processBeacon+0x210>)
 8004966:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800496a:	2b00      	cmp	r3, #0
 800496c:	d013      	beq.n	8004996 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 800496e:	4b69      	ldr	r3, [pc, #420]	@ (8004b14 <processBeacon+0x210>)
 8004970:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004974:	b29a      	uxth	r2, r3
 8004976:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800497a:	4966      	ldr	r1, [pc, #408]	@ (8004b14 <processBeacon+0x210>)
 800497c:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8004980:	1a59      	subs	r1, r3, r1
 8004982:	4b64      	ldr	r3, [pc, #400]	@ (8004b14 <processBeacon+0x210>)
 8004984:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004988:	3301      	adds	r3, #1
 800498a:	fb91 f3f3 	sdiv	r3, r1, r3
 800498e:	b29b      	uxth	r3, r3
 8004990:	4413      	add	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8004996:	4b5f      	ldr	r3, [pc, #380]	@ (8004b14 <processBeacon+0x210>)
 8004998:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d127      	bne.n	80049f4 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 80049a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b14 <processBeacon+0x210>)
 80049a6:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	8abb      	ldrh	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 80049b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da03      	bge.n	80049c4 <processBeacon+0xc0>
 80049bc:	8a7b      	ldrh	r3, [r7, #18]
 80049be:	425b      	negs	r3, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 80049c4:	4a53      	ldr	r2, [pc, #332]	@ (8004b14 <processBeacon+0x210>)
 80049c6:	8a7b      	ldrh	r3, [r7, #18]
 80049c8:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 80049cc:	4b51      	ldr	r3, [pc, #324]	@ (8004b14 <processBeacon+0x210>)
 80049ce:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80049d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	dd03      	ble.n	80049e2 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 80049da:	4a4e      	ldr	r2, [pc, #312]	@ (8004b14 <processBeacon+0x210>)
 80049dc:	8a7b      	ldrh	r3, [r7, #18]
 80049de:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 80049e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b14 <processBeacon+0x210>)
 80049e4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80049e8:	f023 0308 	bic.w	r3, r3, #8
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4b49      	ldr	r3, [pc, #292]	@ (8004b14 <processBeacon+0x210>)
 80049f0:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 80049f4:	4a47      	ldr	r2, [pc, #284]	@ (8004b14 <processBeacon+0x210>)
 80049f6:	8abb      	ldrh	r3, [r7, #20]
 80049f8:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 80049fc:	4b45      	ldr	r3, [pc, #276]	@ (8004b14 <processBeacon+0x210>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8004a04:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <processBeacon+0x210>)
 8004a06:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004a0a:	4b42      	ldr	r3, [pc, #264]	@ (8004b14 <processBeacon+0x210>)
 8004a0c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004a10:	4b40      	ldr	r3, [pc, #256]	@ (8004b14 <processBeacon+0x210>)
 8004a12:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004a16:	f023 0304 	bic.w	r3, r3, #4
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b14 <processBeacon+0x210>)
 8004a1e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004a22:	4b3c      	ldr	r3, [pc, #240]	@ (8004b14 <processBeacon+0x210>)
 8004a24:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d14c      	bne.n	8004aca <processBeacon+0x1c6>
 8004a30:	f7fd f9d6 	bl	8001de0 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004a34:	e049      	b.n	8004aca <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8004a36:	2303      	movs	r3, #3
 8004a38:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8004a3a:	4b36      	ldr	r3, [pc, #216]	@ (8004b14 <processBeacon+0x210>)
 8004a3c:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8004a40:	4b34      	ldr	r3, [pc, #208]	@ (8004b14 <processBeacon+0x210>)
 8004a42:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004a46:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8004a4a:	4413      	add	r3, r2
 8004a4c:	4a31      	ldr	r2, [pc, #196]	@ (8004b14 <processBeacon+0x210>)
 8004a4e:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004a52:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <processBeacon+0x210>)
 8004a54:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8004a58:	3380      	adds	r3, #128	@ 0x80
 8004a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b14 <processBeacon+0x210>)
 8004a5c:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 8004a60:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <processBeacon+0x210>)
 8004a62:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004a66:	3301      	adds	r3, #1
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <processBeacon+0x210>)
 8004a6c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004a70:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <processBeacon+0x210>)
 8004a72:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004a76:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004a7a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a7e:	2104      	movs	r1, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe f82d 	bl	8002ae0 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <processBeacon+0x210>)
 8004a88:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004a8c:	2b14      	cmp	r3, #20
 8004a8e:	d908      	bls.n	8004aa2 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004a90:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <processBeacon+0x210>)
 8004a92:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a96:	f043 0320 	orr.w	r3, r3, #32
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <processBeacon+0x210>)
 8004a9e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b14 <processBeacon+0x210>)
 8004aa4:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004aa8:	2b64      	cmp	r3, #100	@ 0x64
 8004aaa:	d90f      	bls.n	8004acc <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <processBeacon+0x210>)
 8004aae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ab2:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8004ab6:	f023 0302 	bic.w	r3, r3, #2
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <processBeacon+0x210>)
 8004abe:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004ac2:	200b      	movs	r0, #11
 8004ac4:	f7fe fb9c 	bl	8003200 <reportEvent>
            return;
 8004ac8:	e021      	b.n	8004b0e <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004aca:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004acc:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <processBeacon+0x210>)
 8004ace:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004ad2:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fd fe2d 	bl	8002738 <calcRxWindow>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	1ae3      	subs	r3, r4, r3
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8004b14 <processBeacon+0x210>)
 8004ae4:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <processBeacon+0x210>)
 8004aea:	7c1a      	ldrb	r2, [r3, #16]
 8004aec:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <processBeacon+0x210>)
 8004aee:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004af2:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <processBeacon+0x210>)
 8004af4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004b00:	4805      	ldr	r0, [pc, #20]	@ (8004b18 <processBeacon+0x214>)
 8004b02:	f7fd fef3 	bl	80028ec <rxschedInit>
    reportEvent(ev);
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fb79 	bl	8003200 <reportEvent>
}
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	200001bc 	.word	0x200001bc
 8004b18:	200002f0 	.word	0x200002f0

08004b1c <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004b24:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <startRxBcn+0x1c>)
 8004b26:	4a05      	ldr	r2, [pc, #20]	@ (8004b3c <startRxBcn+0x20>)
 8004b28:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004b2a:	2002      	movs	r0, #2
 8004b2c:	f001 fa68 	bl	8006000 <os_radio>
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	200001bc 	.word	0x200001bc
 8004b3c:	08004905 	.word	0x08004905

08004b40 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8004b48:	4b04      	ldr	r3, [pc, #16]	@ (8004b5c <startRxPing+0x1c>)
 8004b4a:	4a05      	ldr	r2, [pc, #20]	@ (8004b60 <startRxPing+0x20>)
 8004b4c:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004b4e:	2002      	movs	r0, #2
 8004b50:	f001 fa56 	bl	8006000 <os_radio>
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200001bc 	.word	0x200001bc
 8004b60:	080046e1 	.word	0x080046e1

08004b64 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 8004b6a:	4b90      	ldr	r3, [pc, #576]	@ (8004dac <engineUpdate+0x248>)
 8004b6c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b70:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 81ab 	bne.w	8004ed0 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8004b7a:	4b8c      	ldr	r3, [pc, #560]	@ (8004dac <engineUpdate+0x248>)
 8004b7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <engineUpdate+0x34>
 8004b84:	4b89      	ldr	r3, [pc, #548]	@ (8004dac <engineUpdate+0x248>)
 8004b86:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <engineUpdate+0x34>
        LMIC_startJoining();
 8004b92:	f7ff fd5b 	bl	800464c <LMIC_startJoining>
        return;
 8004b96:	e19e      	b.n	8004ed6 <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004b98:	f000 fc0c 	bl	80053b4 <os_getTime>
 8004b9c:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004ba6:	4b81      	ldr	r3, [pc, #516]	@ (8004dac <engineUpdate+0x248>)
 8004ba8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004bba:	4b7c      	ldr	r3, [pc, #496]	@ (8004dac <engineUpdate+0x248>)
 8004bbc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	dd01      	ble.n	8004bca <engineUpdate+0x66>
 8004bc6:	f7fd f90b 	bl	8001de0 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004bca:	4b78      	ldr	r3, [pc, #480]	@ (8004dac <engineUpdate+0x248>)
 8004bcc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004bd0:	3b40      	subs	r3, #64	@ 0x40
 8004bd2:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004bd4:	4b75      	ldr	r3, [pc, #468]	@ (8004dac <engineUpdate+0x248>)
 8004bd6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004bda:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80f2 	beq.w	8004dc8 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004be4:	4b71      	ldr	r3, [pc, #452]	@ (8004dac <engineUpdate+0x248>)
 8004be6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004bea:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 8004bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8004dac <engineUpdate+0x248>)
 8004bfc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 8004c08:	68b8      	ldr	r0, [r7, #8]
 8004c0a:	f7fe f98f 	bl	8002f2c <nextTx>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4a66      	ldr	r2, [pc, #408]	@ (8004dac <engineUpdate+0x248>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b65      	ldr	r3, [pc, #404]	@ (8004dac <engineUpdate+0x248>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 8004c1a:	4b64      	ldr	r3, [pc, #400]	@ (8004dac <engineUpdate+0x248>)
 8004c1c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004c20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	4b61      	ldr	r3, [pc, #388]	@ (8004dac <engineUpdate+0x248>)
 8004c28:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8004c2c:	e002      	b.n	8004c34 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dac <engineUpdate+0x248>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004c34:	4b5d      	ldr	r3, [pc, #372]	@ (8004dac <engineUpdate+0x248>)
 8004c36:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <engineUpdate+0xe8>
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <engineUpdate+0x248>)
 8004c40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <engineUpdate+0xfe>
 8004c4c:	4b57      	ldr	r3, [pc, #348]	@ (8004dac <engineUpdate+0x248>)
 8004c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da03      	bge.n	8004c62 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 8004c5a:	4b54      	ldr	r3, [pc, #336]	@ (8004dac <engineUpdate+0x248>)
 8004c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c60:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004c62:	4b52      	ldr	r3, [pc, #328]	@ (8004dac <engineUpdate+0x248>)
 8004c64:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d017      	beq.n	8004ca0 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <engineUpdate+0x116>
 8004c76:	4a4e      	ldr	r2, [pc, #312]	@ (8004db0 <engineUpdate+0x24c>)
 8004c78:	e000      	b.n	8004c7c <engineUpdate+0x118>
 8004c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8004db4 <engineUpdate+0x250>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	441a      	add	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dd0b      	ble.n	8004ca0 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004c8e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c92:	2110      	movs	r1, #16
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd ff23 	bl	8002ae0 <txDelay>
            txbeg = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004c9e:	e09b      	b.n	8004dd8 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3340      	adds	r3, #64	@ 0x40
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da70      	bge.n	8004d8e <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <engineUpdate+0x248>)
 8004cb2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004cb6:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01d      	beq.n	8004cfa <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <engineUpdate+0x248>)
 8004cc0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004ccc:	4b37      	ldr	r3, [pc, #220]	@ (8004dac <engineUpdate+0x248>)
 8004cce:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fa10 	bl	80020fc <lowerDR>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004ce0:	23c0      	movs	r3, #192	@ 0xc0
 8004ce2:	73bb      	strb	r3, [r7, #14]
 8004ce4:	e001      	b.n	8004cea <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fc6b 	bl	80045c8 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8004dac <engineUpdate+0x248>)
 8004cf4:	4a30      	ldr	r2, [pc, #192]	@ (8004db8 <engineUpdate+0x254>)
 8004cf6:	61da      	str	r2, [r3, #28]
 8004cf8:	e01d      	b.n	8004d36 <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <engineUpdate+0x248>)
 8004cfc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8004d00:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8004d04:	d907      	bls.n	8004d16 <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 8004d0a:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8004d0c:	492b      	ldr	r1, [pc, #172]	@ (8004dbc <engineUpdate+0x258>)
 8004d0e:	482c      	ldr	r0, [pc, #176]	@ (8004dc0 <engineUpdate+0x25c>)
 8004d10:	f000 fb94 	bl	800543c <os_setCallback>
                    return;
 8004d14:	e0df      	b.n	8004ed6 <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8004d16:	4b25      	ldr	r3, [pc, #148]	@ (8004dac <engineUpdate+0x248>)
 8004d18:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <engineUpdate+0x1c8>
 8004d20:	4b22      	ldr	r3, [pc, #136]	@ (8004dac <engineUpdate+0x248>)
 8004d22:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d0ee      	beq.n	8004d0a <engineUpdate+0x1a6>
                }
                buildDataFrame();
 8004d2c:	f7ff f9ba 	bl	80040a4 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8004d30:	4b1e      	ldr	r3, [pc, #120]	@ (8004dac <engineUpdate+0x248>)
 8004d32:	4a24      	ldr	r2, [pc, #144]	@ (8004dc4 <engineUpdate+0x260>)
 8004d34:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fd f98b 	bl	8002054 <updr2rps>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b1a      	ldr	r3, [pc, #104]	@ (8004dac <engineUpdate+0x248>)
 8004d44:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fd f91c 	bl	8001f88 <setCr>
 8004d50:	4603      	mov	r3, r0
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <engineUpdate+0x248>)
 8004d56:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8004d58:	4a14      	ldr	r2, [pc, #80]	@ (8004dac <engineUpdate+0x248>)
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <engineUpdate+0x248>)
 8004d60:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 8004d6a:	b21b      	sxth	r3, r3
 8004d6c:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8004d70:	b21b      	sxth	r3, r3
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <engineUpdate+0x248>)
 8004d76:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 8004d7a:	6938      	ldr	r0, [r7, #16]
 8004d7c:	f7fe f88c 	bl	8002e98 <updateTx>
            reportEvent(EV_TXSTART);
 8004d80:	2011      	movs	r0, #17
 8004d82:	f7fe fa3d 	bl	8003200 <reportEvent>
            os_radio(RADIO_TX);
 8004d86:	2001      	movs	r0, #1
 8004d88:	f001 f93a 	bl	8006000 <os_radio>
            return;
 8004d8c:	e0a3      	b.n	8004ed6 <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004d8e:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <engineUpdate+0x248>)
 8004d90:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 808c 	beq.w	8004eb6 <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d119      	bne.n	8004dd8 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3301      	adds	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e015      	b.n	8004dd8 <engineUpdate+0x274>
 8004dac:	200001bc 	.word	0x200001bc
 8004db0:	00046500 	.word	0x00046500
 8004db4:	0002ee00 	.word	0x0002ee00
 8004db8:	08003f65 	.word	0x08003f65
 8004dbc:	0800321f 	.word	0x0800321f
 8004dc0:	200001d0 	.word	0x200001d0
 8004dc4:	08004075 	.word	0x08004075
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004dc8:	4b44      	ldr	r3, [pc, #272]	@ (8004edc <engineUpdate+0x378>)
 8004dca:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d07e      	beq.n	8004ed4 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 8004dd6:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004dd8:	4b40      	ldr	r3, [pc, #256]	@ (8004edc <engineUpdate+0x378>)
 8004dda:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d041      	beq.n	8004e6a <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3340      	adds	r3, #64	@ 0x40
 8004dea:	4619      	mov	r1, r3
 8004dec:	483c      	ldr	r0, [pc, #240]	@ (8004ee0 <engineUpdate+0x37c>)
 8004dee:	f7fd fdeb 	bl	80029c8 <rxschedNext>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d038      	beq.n	8004e6a <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <engineUpdate+0x2a8>
 8004dfe:	4b37      	ldr	r3, [pc, #220]	@ (8004edc <engineUpdate+0x378>)
 8004e00:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db56      	blt.n	8004eba <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 8004e0c:	4b33      	ldr	r3, [pc, #204]	@ (8004edc <engineUpdate+0x378>)
 8004e0e:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 8004e12:	4b32      	ldr	r3, [pc, #200]	@ (8004edc <engineUpdate+0x378>)
 8004e14:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 8004e16:	4b31      	ldr	r3, [pc, #196]	@ (8004edc <engineUpdate+0x378>)
 8004e18:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004edc <engineUpdate+0x378>)
 8004e1e:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 8004e20:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <engineUpdate+0x378>)
 8004e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e26:	4a2d      	ldr	r2, [pc, #180]	@ (8004edc <engineUpdate+0x378>)
 8004e28:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <engineUpdate+0x378>)
 8004e2c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fd f921 	bl	8002078 <dndr2rps>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b28      	ldr	r3, [pc, #160]	@ (8004edc <engineUpdate+0x378>)
 8004e3c:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 8004e3e:	4b27      	ldr	r3, [pc, #156]	@ (8004edc <engineUpdate+0x378>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 8004e46:	4b25      	ldr	r3, [pc, #148]	@ (8004edc <engineUpdate+0x378>)
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8004e52:	da01      	bge.n	8004e58 <engineUpdate+0x2f4>
 8004e54:	f7fc ffc4 	bl	8001de0 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8004e58:	4b20      	ldr	r3, [pc, #128]	@ (8004edc <engineUpdate+0x378>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	3b40      	subs	r3, #64	@ 0x40
 8004e5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ee4 <engineUpdate+0x380>)
 8004e60:	4619      	mov	r1, r3
 8004e62:	4821      	ldr	r0, [pc, #132]	@ (8004ee8 <engineUpdate+0x384>)
 8004e64:	f000 fb10 	bl	8005488 <os_setTimedCallback>
            return;
 8004e68:	e035      	b.n	8004ed6 <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <engineUpdate+0x316>
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db21      	blt.n	8004ebe <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 8004e7a:	f7fe f8f3 	bl	8003064 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8004e7e:	4b17      	ldr	r3, [pc, #92]	@ (8004edc <engineUpdate+0x378>)
 8004e80:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8004e84:	4b15      	ldr	r3, [pc, #84]	@ (8004edc <engineUpdate+0x378>)
 8004e86:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8004e88:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <engineUpdate+0x378>)
 8004e8a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <engineUpdate+0x378>)
 8004e90:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db06      	blt.n	8004eaa <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <engineUpdate+0x378>)
 8004e9e:	4a13      	ldr	r2, [pc, #76]	@ (8004eec <engineUpdate+0x388>)
 8004ea0:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004ea2:	2002      	movs	r0, #2
 8004ea4:	f001 f8ac 	bl	8006000 <os_radio>
        return;
 8004ea8:	e015      	b.n	8004ed6 <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8004eaa:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <engineUpdate+0x38c>)
 8004eac:	6979      	ldr	r1, [r7, #20]
 8004eae:	480e      	ldr	r0, [pc, #56]	@ (8004ee8 <engineUpdate+0x384>)
 8004eb0:	f000 faea 	bl	8005488 <os_setTimedCallback>
    return;
 8004eb4:	e00f      	b.n	8004ed6 <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <engineUpdate+0x35c>
                goto txdelay;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <engineUpdate+0x35c>
        goto txdelay;
 8004ebe:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3b40      	subs	r3, #64	@ 0x40
 8004ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ef4 <engineUpdate+0x390>)
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4807      	ldr	r0, [pc, #28]	@ (8004ee8 <engineUpdate+0x384>)
 8004eca:	f000 fadd 	bl	8005488 <os_setTimedCallback>
 8004ece:	e002      	b.n	8004ed6 <engineUpdate+0x372>
        return;
 8004ed0:	bf00      	nop
 8004ed2:	e000      	b.n	8004ed6 <engineUpdate+0x372>
            return;
 8004ed4:	bf00      	nop
}
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	200001bc 	.word	0x200001bc
 8004ee0:	200002f0 	.word	0x200002f0
 8004ee4:	08004b41 	.word	0x08004b41
 8004ee8:	200001d0 	.word	0x200001d0
 8004eec:	08004905 	.word	0x08004905
 8004ef0:	08004b1d 	.word	0x08004b1d
 8004ef4:	080031ed 	.word	0x080031ed

08004ef8 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 8004ef8:	b598      	push	{r3, r4, r7, lr}
 8004efa:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 8004efc:	2000      	movs	r0, #0
 8004efe:	f001 f87f 	bl	8006000 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004f02:	4821      	ldr	r0, [pc, #132]	@ (8004f88 <LMIC_reset+0x90>)
 8004f04:	f000 fa7c 	bl	8005400 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 8004f08:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	481f      	ldr	r0, [pc, #124]	@ (8004f8c <LMIC_reset+0x94>)
 8004f10:	f008 fd80 	bl	800da14 <memset>
    LMIC.devaddr      =  0;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <LMIC_reset+0x94>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 8004f1c:	f000 ff74 	bl	8005e08 <radio_rand1>
 8004f20:	4603      	mov	r3, r0
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	b21c      	sxth	r4, r3
 8004f26:	f000 ff6f 	bl	8005e08 <radio_rand1>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	4323      	orrs	r3, r4
 8004f30:	b21b      	sxth	r3, r3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	4b15      	ldr	r3, [pc, #84]	@ (8004f8c <LMIC_reset+0x94>)
 8004f36:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 8004f3a:	4b14      	ldr	r3, [pc, #80]	@ (8004f8c <LMIC_reset+0x94>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 8004f42:	4b12      	ldr	r3, [pc, #72]	@ (8004f8c <LMIC_reset+0x94>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <LMIC_reset+0x94>)
 8004f4c:	2280      	movs	r2, #128	@ 0x80
 8004f4e:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8004f52:	4b0e      	ldr	r3, [pc, #56]	@ (8004f8c <LMIC_reset+0x94>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <LMIC_reset+0x94>)
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f90 <LMIC_reset+0x98>)
 8004f5e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <LMIC_reset+0x94>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 8004f6a:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <LMIC_reset+0x94>)
 8004f6c:	4a08      	ldr	r2, [pc, #32]	@ (8004f90 <LMIC_reset+0x98>)
 8004f6e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <LMIC_reset+0x94>)
 8004f74:	2203      	movs	r2, #3
 8004f76:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 8004f7a:	4b04      	ldr	r3, [pc, #16]	@ (8004f8c <LMIC_reset+0x94>)
 8004f7c:	22ff      	movs	r2, #255	@ 0xff
 8004f7e:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004f82:	bf00      	nop
 8004f84:	bd98      	pop	{r3, r4, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200001d0 	.word	0x200001d0
 8004f8c:	200001bc 	.word	0x200001bc
 8004f90:	33d3e608 	.word	0x33d3e608

08004f94 <LMIC_init>:


void LMIC_init (void) {
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8004f98:	4b04      	ldr	r3, [pc, #16]	@ (8004fac <LMIC_init+0x18>)
 8004f9a:	2240      	movs	r2, #64	@ 0x40
 8004f9c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	200001bc 	.word	0x200001bc

08004fb0 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <LMIC_setTxData+0x34>)
 8004fb6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004fba:	f043 0308 	orr.w	r3, r3, #8
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <LMIC_setTxData+0x34>)
 8004fc2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004fc6:	4b07      	ldr	r3, [pc, #28]	@ (8004fe4 <LMIC_setTxData+0x34>)
 8004fc8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <LMIC_setTxData+0x34>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    engineUpdate();
 8004fdc:	f7ff fdc2 	bl	8004b64 <engineUpdate>
}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200001bc 	.word	0x200001bc

08004fe8 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6039      	str	r1, [r7, #0]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	71fb      	strb	r3, [r7, #7]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	71bb      	strb	r3, [r7, #6]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 8005000:	79bb      	ldrb	r3, [r7, #6]
 8005002:	2b34      	cmp	r3, #52	@ 0x34
 8005004:	d902      	bls.n	800500c <LMIC_setTxData2+0x24>
        return -2;
 8005006:	f06f 0301 	mvn.w	r3, #1
 800500a:	e017      	b.n	800503c <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 8005012:	79bb      	ldrb	r3, [r7, #6]
 8005014:	461a      	mov	r2, r3
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	480a      	ldr	r0, [pc, #40]	@ (8005044 <LMIC_setTxData2+0x5c>)
 800501a:	f008 fd27 	bl	800da6c <memcpy>
    LMIC.pendTxConf = confirmed;
 800501e:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <LMIC_setTxData2+0x60>)
 8005020:	797b      	ldrb	r3, [r7, #5]
 8005022:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
    LMIC.pendTxPort = port;
 8005026:	4a08      	ldr	r2, [pc, #32]	@ (8005048 <LMIC_setTxData2+0x60>)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
    LMIC.pendTxLen  = dlen;
 800502e:	4a06      	ldr	r2, [pc, #24]	@ (8005048 <LMIC_setTxData2+0x60>)
 8005030:	79bb      	ldrb	r3, [r7, #6]
 8005032:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC_setTxData();
 8005036:	f7ff ffbb 	bl	8004fb0 <LMIC_setTxData>
    return 0;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000279 	.word	0x20000279
 8005048:	200001bc 	.word	0x200001bc

0800504c <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4906      	ldr	r1, [pc, #24]	@ (8005070 <os_getArtEui+0x24>)
 8005058:	461a      	mov	r2, r3
 800505a:	460b      	mov	r3, r1
 800505c:	cb03      	ldmia	r3!, {r0, r1}
 800505e:	6010      	str	r0, [r2, #0]
 8005060:	6051      	str	r1, [r2, #4]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	0800ecf4 	.word	0x0800ecf4

08005074 <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4906      	ldr	r1, [pc, #24]	@ (8005098 <os_getDevEui+0x24>)
 8005080:	461a      	mov	r2, r3
 8005082:	460b      	mov	r3, r1
 8005084:	cb03      	ldmia	r3!, {r0, r1}
 8005086:	6010      	str	r0, [r2, #0]
 8005088:	6051      	str	r1, [r2, #4]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	0800ecfc 	.word	0x0800ecfc

0800509c <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 800509c:	b4b0      	push	{r4, r5, r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a06      	ldr	r2, [pc, #24]	@ (80050c0 <os_getDevKey+0x24>)
 80050a8:	461c      	mov	r4, r3
 80050aa:	4615      	mov	r5, r2
 80050ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ae:	6020      	str	r0, [r4, #0]
 80050b0:	6061      	str	r1, [r4, #4]
 80050b2:	60a2      	str	r2, [r4, #8]
 80050b4:	60e3      	str	r3, [r4, #12]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bcb0      	pop	{r4, r5, r7}
 80050be:	4770      	bx	lr
 80050c0:	0800ed04 	.word	0x0800ed04

080050c4 <initsensor>:
void initsensor(){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET); //alimente le capteur de temperature
 80050c8:	2201      	movs	r2, #1
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050d0:	f005 fc0a 	bl	800a8e8 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80050d4:	217f      	movs	r1, #127	@ 0x7f
 80050d6:	4802      	ldr	r0, [pc, #8]	@ (80050e0 <initsensor+0x1c>)
 80050d8:	f005 f8b8 	bl	800a24c <HAL_ADCEx_Calibration_Start>
}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	2000003c 	.word	0x2000003c

080050e4 <initfunc>:

void initfunc (osjob_t* j) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 80050ec:	f7ff ffea 	bl	80050c4 <initsensor>
	// reset MAC state
	LMIC_reset();
 80050f0:	f7ff ff02 	bl	8004ef8 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 80050f4:	f7ff faaa 	bl	800464c <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <reportfunc>:
	return  (188686 - 147 * raw_adc1_in15);
}

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]



	// BME680

	if (bme68x_single_measure(&data) == 0) {
 8005108:	481f      	ldr	r0, [pc, #124]	@ (8005188 <reportfunc+0x88>)
 800510a:	f003 fa59 	bl	80085c0 <bme68x_single_measure>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <reportfunc+0x2a>

		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8005114:	f003 fcd2 	bl	8008abc <bme68x_iaq>
 8005118:	eef0 7a40 	vmov.f32	s15, s0
 800511c:	4b1a      	ldr	r3, [pc, #104]	@ (8005188 <reportfunc+0x88>)
 800511e:	edc3 7a02 	vstr	s15, [r3, #8]

		HAL_Delay(2000);
 8005122:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005126:	f003 fdad 	bl	8008c84 <HAL_Delay>
	}


	uint16_t val = (int)(data.temperature);
 800512a:	4b17      	ldr	r3, [pc, #92]	@ (8005188 <reportfunc+0x88>)
 800512c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005134:	ee17 3a90 	vmov	r3, s15
 8005138:	81fb      	strh	r3, [r7, #14]

	// prepare and schedule data for transmission
	LMIC.frame[0] = 0;
 800513a:	4b14      	ldr	r3, [pc, #80]	@ (800518c <reportfunc+0x8c>)
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[1] = 0x67; //adresse capteur
 8005142:	4b12      	ldr	r3, [pc, #72]	@ (800518c <reportfunc+0x8c>)
 8005144:	2267      	movs	r2, #103	@ 0x67
 8005146:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149

	LMIC.frame[2] = val << 8; //valeur capteur
 800514a:	4b10      	ldr	r3, [pc, #64]	@ (800518c <reportfunc+0x8c>)
 800514c:	2200      	movs	r2, #0
 800514e:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
	LMIC.frame[3] = val;
 8005152:	89fb      	ldrh	r3, [r7, #14]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <reportfunc+0x8c>)
 8005158:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b

	LMIC_setTxData2(1, LMIC.frame, 4, 0); // (port 1, 2 bytes, unconfirmed)
 800515c:	2300      	movs	r3, #0
 800515e:	2204      	movs	r2, #4
 8005160:	490b      	ldr	r1, [pc, #44]	@ (8005190 <reportfunc+0x90>)
 8005162:	2001      	movs	r0, #1
 8005164:	f7ff ff40 	bl	8004fe8 <LMIC_setTxData2>
	// reschedule job in 60 seconds
	os_setTimedCallback(j, os_getTime()+sec2osticks(15), reportfunc);
 8005168:	f000 f924 	bl	80053b4 <os_getTime>
 800516c:	4603      	mov	r3, r0
 800516e:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8005172:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005176:	4a07      	ldr	r2, [pc, #28]	@ (8005194 <reportfunc+0x94>)
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f984 	bl	8005488 <os_setTimedCallback>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	2000036c 	.word	0x2000036c
 800518c:	200001bc 	.word	0x200001bc
 8005190:	20000304 	.word	0x20000304
 8005194:	08005101 	.word	0x08005101

08005198 <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
	switch(ev) {
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	2b0e      	cmp	r3, #14
 80051a8:	d824      	bhi.n	80051f4 <onEvent+0x5c>
 80051aa:	a201      	add	r2, pc, #4	@ (adr r2, 80051b0 <onEvent+0x18>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051f5 	.word	0x080051f5
 80051b4:	080051f5 	.word	0x080051f5
 80051b8:	080051f5 	.word	0x080051f5
 80051bc:	080051f5 	.word	0x080051f5
 80051c0:	080051f5 	.word	0x080051f5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051f5 	.word	0x080051f5
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	080051f5 	.word	0x080051f5
 80051e0:	080051f5 	.word	0x080051f5
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	080051f5 	.word	0x080051f5
	// network joined, session established
		case EV_JOINING:
			break;

		case EV_JOINED:
			reportfunc(&reportjob);
 80051ec:	4804      	ldr	r0, [pc, #16]	@ (8005200 <onEvent+0x68>)
 80051ee:	f7ff ff87 	bl	8005100 <reportfunc>
			break;
 80051f2:	e000      	b.n	80051f6 <onEvent+0x5e>
		case EV_LINK_DEAD:
			break;
		case EV_LINK_ALIVE:
			break;
		default:
			break;
 80051f4:	bf00      	nop
	}
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	2000038c 	.word	0x2000038c

08005204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800520a:	f003 fcc6 	bl	8008b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800520e:	f000 f853 	bl	80052b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005212:	f7fc fbd5 	bl	80019c0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8005216:	f000 ff1f 	bl	8006058 <MX_SPI3_Init>
  MX_TIM7_Init();
 800521a:	f001 f877 	bl	800630c <MX_TIM7_Init>
  MX_TIM6_Init();
 800521e:	f001 f83d 	bl	800629c <MX_TIM6_Init>
  MX_ADC1_Init();
 8005222:	f7fb fdbb 	bl	8000d9c <MX_ADC1_Init>
  MX_I2C1_Init();
 8005226:	f7fc fde3 	bl	8001df0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* BME680 API forced mode test */
  bme68x_start(&data, &hi2c1);
 800522a:	491c      	ldr	r1, [pc, #112]	@ (800529c <main+0x98>)
 800522c:	481c      	ldr	r0, [pc, #112]	@ (80052a0 <main+0x9c>)
 800522e:	f003 f971 	bl	8008514 <bme68x_start>



  HAL_TIM_Base_Start_IT(&htim6); //demarrage du timer 6 en interruption toutes les secondes pour la mesure temperature
 8005232:	481c      	ldr	r0, [pc, #112]	@ (80052a4 <main+0xa0>)
 8005234:	f008 f976 	bl	800d524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8005238:	481b      	ldr	r0, [pc, #108]	@ (80052a8 <main+0xa4>)
 800523a:	f008 f973 	bl	800d524 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 800523e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ac <main+0xa8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <main+0xa8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524c:	601a      	str	r2, [r3, #0]

  osjob_t initjob;
  // initialize runtime env
  os_init();
 800524e:	f000 f89f 	bl	8005390 <os_init>
  // setup initial job
  os_setCallback(&initjob, initfunc);
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	4916      	ldr	r1, [pc, #88]	@ (80052b0 <main+0xac>)
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f8f0 	bl	800543c <os_setCallback>


  // test BME
  err_code = bme68x_single_measure(&data);
 800525c:	4810      	ldr	r0, [pc, #64]	@ (80052a0 <main+0x9c>)
 800525e:	f003 f9af 	bl	80085c0 <bme68x_single_measure>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <main+0xb0>)
 8005268:	601a      	str	r2, [r3, #0]
  if (bme68x_single_measure(&data) == 0) {
 800526a:	480d      	ldr	r0, [pc, #52]	@ (80052a0 <main+0x9c>)
 800526c:	f003 f9a8 	bl	80085c0 <bme68x_single_measure>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <main+0x88>

	// Measurement is successful, so continue with IAQ
	data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8005276:	f003 fc21 	bl	8008abc <bme68x_iaq>
 800527a:	eef0 7a40 	vmov.f32	s15, s0
 800527e:	4b08      	ldr	r3, [pc, #32]	@ (80052a0 <main+0x9c>)
 8005280:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_Delay(2000);
 8005284:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005288:	f003 fcfc 	bl	8008c84 <HAL_Delay>
  }



  // execute scheduled jobs and events
  os_runloop();
 800528c:	f000 f932 	bl	80054f4 <os_runloop>
  // (not reached)
  return 0;
 8005290:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000168 	.word	0x20000168
 80052a0:	2000036c 	.word	0x2000036c
 80052a4:	20000414 	.word	0x20000414
 80052a8:	20000460 	.word	0x20000460
 80052ac:	200003b0 	.word	0x200003b0
 80052b0:	080050e5 	.word	0x080050e5
 80052b4:	20000388 	.word	0x20000388

080052b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b096      	sub	sp, #88	@ 0x58
 80052bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052be:	f107 0314 	add.w	r3, r7, #20
 80052c2:	2244      	movs	r2, #68	@ 0x44
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f008 fba4 	bl	800da14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052cc:	463b      	mov	r3, r7
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	60da      	str	r2, [r3, #12]
 80052d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80052da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80052de:	f006 fa51 	bl	800b784 <HAL_PWREx_ControlVoltageScaling>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80052e8:	f000 f84c 	bl	8005384 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80052ec:	2302      	movs	r3, #2
 80052ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80052f6:	2310      	movs	r3, #16
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052fa:	2302      	movs	r3, #2
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80052fe:	2302      	movs	r3, #2
 8005300:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8005306:	230a      	movs	r3, #10
 8005308:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800530a:	2307      	movs	r3, #7
 800530c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800530e:	2302      	movs	r3, #2
 8005310:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005312:	2302      	movs	r3, #2
 8005314:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005316:	f107 0314 	add.w	r3, r7, #20
 800531a:	4618      	mov	r0, r3
 800531c:	f006 fa88 	bl	800b830 <HAL_RCC_OscConfig>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8005326:	f000 f82d 	bl	8005384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800532a:	230f      	movs	r3, #15
 800532c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800532e:	2303      	movs	r3, #3
 8005330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800533e:	463b      	mov	r3, r7
 8005340:	2104      	movs	r1, #4
 8005342:	4618      	mov	r0, r3
 8005344:	f006 fe88 	bl	800c058 <HAL_RCC_ClockConfig>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800534e:	f000 f819 	bl	8005384 <Error_Handler>
  }
}
 8005352:	bf00      	nop
 8005354:	3758      	adds	r7, #88	@ 0x58
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_ADC_ConvCpltCallback>:
//	}
//}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	raw_adc1_in15 = HAL_ADC_GetValue(&hadc1);
 8005364:	4805      	ldr	r0, [pc, #20]	@ (800537c <HAL_ADC_ConvCpltCallback+0x20>)
 8005366:	f004 f8a7 	bl	80094b8 <HAL_ADC_GetValue>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	4b04      	ldr	r3, [pc, #16]	@ (8005380 <HAL_ADC_ConvCpltCallback+0x24>)
 8005370:	601a      	str	r2, [r3, #0]
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	2000003c 	.word	0x2000003c
 8005380:	20000368 	.word	0x20000368

08005384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005388:	b672      	cpsid	i
}
 800538a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <Error_Handler+0x8>

08005390 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8005394:	2208      	movs	r2, #8
 8005396:	2100      	movs	r1, #0
 8005398:	4805      	ldr	r0, [pc, #20]	@ (80053b0 <os_init+0x20>)
 800539a:	f008 fb3b 	bl	800da14 <memset>
    hal_init();
 800539e:	f7fc fd09 	bl	8001db4 <hal_init>
    radio_init();
 80053a2:	f000 fcbd 	bl	8005d20 <radio_init>
    LMIC_init();
 80053a6:	f7ff fdf5 	bl	8004f94 <LMIC_init>
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000398 	.word	0x20000398

080053b4 <os_getTime>:

ostime_t os_getTime () {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
    return hal_ticks();
 80053b8:	f7fc fc12 	bl	8001be0 <hal_ticks>
 80053bc:	4603      	mov	r3, r0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80053cc:	e00d      	b.n	80053ea <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d105      	bne.n	80053e4 <unlinkjob+0x22>
            *pnext = job->next;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
            return 1;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e007      	b.n	80053f4 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ed      	bne.n	80053ce <unlinkjob+0xc>
        }
    }
    return 0;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8005408:	f7fc fca8 	bl	8001d5c <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4809      	ldr	r0, [pc, #36]	@ (8005434 <os_clearCallback+0x34>)
 8005410:	f7ff ffd7 	bl	80053c2 <unlinkjob>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <os_clearCallback+0x26>
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4806      	ldr	r0, [pc, #24]	@ (8005438 <os_clearCallback+0x38>)
 800541e:	f7ff ffd0 	bl	80053c2 <unlinkjob>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8005426:	f7fc fca9 	bl	8001d7c <hal_enableIRQs>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000398 	.word	0x20000398
 8005438:	2000039c 	.word	0x2000039c

0800543c <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8005446:	f7fc fc89 	bl	8001d5c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	480d      	ldr	r0, [pc, #52]	@ (8005484 <os_setCallback+0x48>)
 800544e:	f7ff ffb8 	bl	80053c2 <unlinkjob>
    // fill-in job
    job->func = cb;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 800545e:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <os_setCallback+0x48>)
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e002      	b.n	800546a <os_setCallback+0x2e>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f8      	bne.n	8005464 <os_setCallback+0x28>
    *pnext = job;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005478:	f7fc fc80 	bl	8001d7c <hal_enableIRQs>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	2000039c 	.word	0x2000039c

08005488 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8005494:	f7fc fc62 	bl	8001d5c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	4815      	ldr	r0, [pc, #84]	@ (80054f0 <os_setTimedCallback+0x68>)
 800549c:	f7ff ff91 	bl	80053c2 <unlinkjob>
    // fill-in job
    job->deadline = time;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	605a      	str	r2, [r3, #4]
    job->func = cb;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80054b2:	4b0f      	ldr	r3, [pc, #60]	@ (80054f0 <os_setTimedCallback+0x68>)
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e00e      	b.n	80054d6 <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dd04      	ble.n	80054d0 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]
            break;
 80054ce:	e006      	b.n	80054de <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1ec      	bne.n	80054b8 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 80054e4:	f7fc fc4a 	bl	8001d7c <hal_enableIRQs>
}
 80054e8:	bf00      	nop
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20000398 	.word	0x20000398

080054f4 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 80054fe:	f7fc fc2d 	bl	8001d5c <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8005502:	4b16      	ldr	r3, [pc, #88]	@ (800555c <os_runloop+0x68>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <os_runloop+0x26>
            j = OS.runnablejobs;
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <os_runloop+0x68>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a11      	ldr	r2, [pc, #68]	@ (800555c <os_runloop+0x68>)
 8005516:	6053      	str	r3, [r2, #4]
 8005518:	e016      	b.n	8005548 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <os_runloop+0x68>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <os_runloop+0x50>
 8005522:	4b0e      	ldr	r3, [pc, #56]	@ (800555c <os_runloop+0x68>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fc fbb7 	bl	8001c9c <hal_checkTimer>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8005534:	4b09      	ldr	r3, [pc, #36]	@ (800555c <os_runloop+0x68>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a07      	ldr	r2, [pc, #28]	@ (800555c <os_runloop+0x68>)
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e001      	b.n	8005548 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8005544:	f7fc fc2e 	bl	8001da4 <hal_sleep>
        }
        hal_enableIRQs();
 8005548:	f7fc fc18 	bl	8001d7c <hal_enableIRQs>
        if(j) { // run job callback
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0d3      	beq.n	80054fa <os_runloop+0x6>
            j->func(j);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
    while(1) {
 800555a:	e7ce      	b.n	80054fa <os_runloop+0x6>
 800555c:	20000398 	.word	0x20000398

08005560 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	460a      	mov	r2, r1
 800556a:	71fb      	strb	r3, [r7, #7]
 800556c:	4613      	mov	r3, r2
 800556e:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005570:	2000      	movs	r0, #0
 8005572:	f7fc faad 	bl	8001ad0 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4618      	mov	r0, r3
 8005580:	f7fc fb08 	bl	8001b94 <hal_spi>
    hal_spi(data);
 8005584:	79bb      	ldrb	r3, [r7, #6]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fc fb04 	bl	8001b94 <hal_spi>
    hal_pin_nss(1);
 800558c:	2001      	movs	r0, #1
 800558e:	f7fc fa9f 	bl	8001ad0 <hal_pin_nss>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <readReg>:

static u1_t readReg (u1_t addr) {
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7fc fa93 	bl	8001ad0 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc faee 	bl	8001b94 <hal_spi>
    u1_t val = hal_spi(0x00);
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fc faeb 	bl	8001b94 <hal_spi>
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 80055c2:	2001      	movs	r0, #1
 80055c4:	f7fc fa84 	bl	8001ad0 <hal_pin_nss>
    return val;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	4603      	mov	r3, r0
 80055da:	6039      	str	r1, [r7, #0]
 80055dc:	71fb      	strb	r3, [r7, #7]
 80055de:	4613      	mov	r3, r2
 80055e0:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80055e2:	2000      	movs	r0, #0
 80055e4:	f7fc fa74 	bl	8001ad0 <hal_pin_nss>
    hal_spi(addr | 0x80);
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fc facf 	bl	8001b94 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	e009      	b.n	8005610 <writeBuf+0x3e>
        hal_spi(buf[i]);
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	4413      	add	r3, r2
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7fc fac5 	bl	8001b94 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	3301      	adds	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
 8005610:	7bfa      	ldrb	r2, [r7, #15]
 8005612:	79bb      	ldrb	r3, [r7, #6]
 8005614:	429a      	cmp	r2, r3
 8005616:	d3f1      	bcc.n	80055fc <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8005618:	2001      	movs	r0, #1
 800561a:	f7fc fa59 	bl	8001ad0 <hal_pin_nss>
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8005626:	b590      	push	{r4, r7, lr}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	4603      	mov	r3, r0
 800562e:	6039      	str	r1, [r7, #0]
 8005630:	71fb      	strb	r3, [r7, #7]
 8005632:	4613      	mov	r3, r2
 8005634:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005636:	2000      	movs	r0, #0
 8005638:	f7fc fa4a 	bl	8001ad0 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005642:	b2db      	uxtb	r3, r3
 8005644:	4618      	mov	r0, r3
 8005646:	f7fc faa5 	bl	8001b94 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e00a      	b.n	8005666 <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	18d4      	adds	r4, r2, r3
 8005656:	2000      	movs	r0, #0
 8005658:	f7fc fa9c 	bl	8001b94 <hal_spi>
 800565c:	4603      	mov	r3, r0
 800565e:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	3301      	adds	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	79bb      	ldrb	r3, [r7, #6]
 800566a:	429a      	cmp	r2, r3
 800566c:	d3f0      	bcc.n	8005650 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 800566e:	2001      	movs	r0, #1
 8005670:	f7fc fa2e 	bl	8001ad0 <hal_pin_nss>
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <opmode>:

static void opmode (u1_t mode) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8005686:	2001      	movs	r0, #1
 8005688:	f7ff ff87 	bl	800559a <readReg>
 800568c:	4603      	mov	r3, r0
 800568e:	b25b      	sxtb	r3, r3
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	b25a      	sxtb	r2, r3
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	4313      	orrs	r3, r2
 800569c:	b25b      	sxtb	r3, r3
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	2001      	movs	r0, #1
 80056a4:	f7ff ff5c 	bl	8005560 <writeReg>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <opmodeLora>:

static void opmodeLora() {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	f043 0308 	orr.w	r3, r3, #8
 80056c0:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	4619      	mov	r1, r3
 80056c6:	2001      	movs	r0, #1
 80056c8:	f7ff ff4a 	bl	8005560 <writeReg>
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <opmodeFSK>:

static void opmodeFSK() {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
    u1_t u = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	4619      	mov	r1, r3
 80056ea:	2001      	movs	r0, #1
 80056ec:	f7ff ff38 	bl	8005560 <writeReg>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80056fe:	4b54      	ldr	r3, [pc, #336]	@ (8005850 <configLoraModem+0x158>)
 8005700:	89db      	ldrh	r3, [r3, #14]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fc0c 	bl	8001f20 <getSf>
 8005708:	4603      	mov	r3, r0
 800570a:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	71fb      	strb	r3, [r7, #7]
 8005710:	2300      	movs	r3, #0
 8005712:	71bb      	strb	r3, [r7, #6]
 8005714:	2300      	movs	r3, #0
 8005716:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8005718:	4b4d      	ldr	r3, [pc, #308]	@ (8005850 <configLoraModem+0x158>)
 800571a:	89db      	ldrh	r3, [r3, #14]
 800571c:	4618      	mov	r0, r3
 800571e:	f7fc fc0f 	bl	8001f40 <getBw>
 8005722:	4603      	mov	r3, r0
 8005724:	2b02      	cmp	r3, #2
 8005726:	d010      	beq.n	800574a <configLoraModem+0x52>
 8005728:	2b02      	cmp	r3, #2
 800572a:	dc13      	bgt.n	8005754 <configLoraModem+0x5c>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <configLoraModem+0x3e>
 8005730:	2b01      	cmp	r3, #1
 8005732:	d005      	beq.n	8005740 <configLoraModem+0x48>
 8005734:	e00e      	b.n	8005754 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800573c:	71fb      	strb	r3, [r7, #7]
 800573e:	e00b      	b.n	8005758 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005746:	71fb      	strb	r3, [r7, #7]
 8005748:	e006      	b.n	8005758 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8005750:	71fb      	strb	r3, [r7, #7]
 8005752:	e001      	b.n	8005758 <configLoraModem+0x60>
        default:
            ASSERT(0);
 8005754:	f7fc fb44 	bl	8001de0 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005758:	4b3d      	ldr	r3, [pc, #244]	@ (8005850 <configLoraModem+0x158>)
 800575a:	89db      	ldrh	r3, [r3, #14]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fc fc01 	bl	8001f64 <getCr>
 8005762:	4603      	mov	r3, r0
 8005764:	2b03      	cmp	r3, #3
 8005766:	d81f      	bhi.n	80057a8 <configLoraModem+0xb0>
 8005768:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <configLoraModem+0x78>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005781 	.word	0x08005781
 8005774:	0800578b 	.word	0x0800578b
 8005778:	08005795 	.word	0x08005795
 800577c:	0800579f 	.word	0x0800579f
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	71fb      	strb	r3, [r7, #7]
 8005788:	e010      	b.n	80057ac <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	f043 0304 	orr.w	r3, r3, #4
 8005790:	71fb      	strb	r3, [r7, #7]
 8005792:	e00b      	b.n	80057ac <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	f043 0306 	orr.w	r3, r3, #6
 800579a:	71fb      	strb	r3, [r7, #7]
 800579c:	e006      	b.n	80057ac <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	f043 0308 	orr.w	r3, r3, #8
 80057a4:	71fb      	strb	r3, [r7, #7]
 80057a6:	e001      	b.n	80057ac <configLoraModem+0xb4>
        default:
            ASSERT(0);
 80057a8:	f7fc fb1a 	bl	8001de0 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 80057ac:	4b28      	ldr	r3, [pc, #160]	@ (8005850 <configLoraModem+0x158>)
 80057ae:	89db      	ldrh	r3, [r3, #14]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fc fc29 	bl	8002008 <getIh>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 80057c4:	4b22      	ldr	r3, [pc, #136]	@ (8005850 <configLoraModem+0x158>)
 80057c6:	89db      	ldrh	r3, [r3, #14]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fc fc1d 	bl	8002008 <getIh>
 80057ce:	4603      	mov	r3, r0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	4619      	mov	r1, r3
 80057d4:	2022      	movs	r0, #34	@ 0x22
 80057d6:	f7ff fec3 	bl	8005560 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	4619      	mov	r1, r3
 80057de:	201d      	movs	r0, #29
 80057e0:	f7ff febe 	bl	8005560 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 80057e4:	793b      	ldrb	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	3370      	adds	r3, #112	@ 0x70
 80057f0:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <configLoraModem+0x158>)
 80057f4:	89db      	ldrh	r3, [r3, #14]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fc fbdf 	bl	8001fba <getNocrc>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8005802:	79bb      	ldrb	r3, [r7, #6]
 8005804:	f043 0304 	orr.w	r3, r3, #4
 8005808:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 800580a:	79bb      	ldrb	r3, [r7, #6]
 800580c:	4619      	mov	r1, r3
 800580e:	201e      	movs	r0, #30
 8005810:	f7ff fea6 	bl	8005560 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8005814:	2304      	movs	r3, #4
 8005816:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8005818:	793b      	ldrb	r3, [r7, #4]
 800581a:	2b05      	cmp	r3, #5
 800581c:	d002      	beq.n	8005824 <configLoraModem+0x12c>
 800581e:	793b      	ldrb	r3, [r7, #4]
 8005820:	2b06      	cmp	r3, #6
 8005822:	d10b      	bne.n	800583c <configLoraModem+0x144>
 8005824:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <configLoraModem+0x158>)
 8005826:	89db      	ldrh	r3, [r3, #14]
 8005828:	4618      	mov	r0, r3
 800582a:	f7fc fb89 	bl	8001f40 <getBw>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8005834:	797b      	ldrb	r3, [r7, #5]
 8005836:	f043 0308 	orr.w	r3, r3, #8
 800583a:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 800583c:	797b      	ldrb	r3, [r7, #5]
 800583e:	4619      	mov	r1, r3
 8005840:	2026      	movs	r0, #38	@ 0x26
 8005842:	f7ff fe8d 	bl	8005560 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200001bc 	.word	0x200001bc

08005854 <configChannel>:

static void configChannel () {
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 800585a:	4c1b      	ldr	r4, [pc, #108]	@ (80058c8 <configChannel+0x74>)
 800585c:	68a4      	ldr	r4, [r4, #8]
 800585e:	2500      	movs	r5, #0
 8005860:	4622      	mov	r2, r4
 8005862:	462b      	mov	r3, r5
 8005864:	0b51      	lsrs	r1, r2, #13
 8005866:	04d0      	lsls	r0, r2, #19
 8005868:	4a18      	ldr	r2, [pc, #96]	@ (80058cc <configChannel+0x78>)
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	f7fb f91d 	bl	8000aac <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 800587a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	0c02      	lsrs	r2, r0, #16
 8005888:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800588c:	0c0b      	lsrs	r3, r1, #16
 800588e:	b2d3      	uxtb	r3, r2
 8005890:	4619      	mov	r1, r3
 8005892:	2006      	movs	r0, #6
 8005894:	f7ff fe64 	bl	8005560 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	0a02      	lsrs	r2, r0, #8
 80058a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80058aa:	0a0b      	lsrs	r3, r1, #8
 80058ac:	b2d3      	uxtb	r3, r2
 80058ae:	4619      	mov	r1, r3
 80058b0:	2007      	movs	r0, #7
 80058b2:	f7ff fe55 	bl	8005560 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 80058b6:	783b      	ldrb	r3, [r7, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	2008      	movs	r0, #8
 80058bc:	f7ff fe50 	bl	8005560 <writeReg>
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bdb0      	pop	{r4, r5, r7, pc}
 80058c8:	200001bc 	.word	0x200001bc
 80058cc:	01e84800 	.word	0x01e84800

080058d0 <configPower>:



static void configPower () {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <configPower+0x5c>)
 80058d8:	7c9b      	ldrb	r3, [r3, #18]
 80058da:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 80058dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	dd02      	ble.n	80058ea <configPower+0x1a>
        pw = 15;
 80058e4:	230f      	movs	r3, #15
 80058e6:	71fb      	strb	r3, [r7, #7]
 80058e8:	e005      	b.n	80058f6 <configPower+0x26>
    } else if(pw < 2) {
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	dc01      	bgt.n	80058f6 <configPower+0x26>
        pw = 2;
 80058f2:	2302      	movs	r3, #2
 80058f4:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005902:	b25b      	sxtb	r3, r3
 8005904:	b2db      	uxtb	r3, r3
 8005906:	4619      	mov	r1, r3
 8005908:	2009      	movs	r0, #9
 800590a:	f7ff fe29 	bl	8005560 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 800590e:	205a      	movs	r0, #90	@ 0x5a
 8005910:	f7ff fe43 	bl	800559a <readReg>
 8005914:	4603      	mov	r3, r0
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	b2db      	uxtb	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	205a      	movs	r0, #90	@ 0x5a
 8005920:	f7ff fe1e 	bl	8005560 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200001bc 	.word	0x200001bc

08005930 <txfsk>:

static void txfsk () {
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8005934:	2110      	movs	r1, #16
 8005936:	2001      	movs	r0, #1
 8005938:	f7ff fe12 	bl	8005560 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 800593c:	2001      	movs	r0, #1
 800593e:	f7ff fe2c 	bl	800559a <readReg>
 8005942:	4603      	mov	r3, r0
 8005944:	2b10      	cmp	r3, #16
 8005946:	d001      	beq.n	800594c <txfsk+0x1c>
 8005948:	f7fc fa4a 	bl	8001de0 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 800594c:	2001      	movs	r0, #1
 800594e:	f7ff fe95 	bl	800567c <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005952:	2102      	movs	r1, #2
 8005954:	2002      	movs	r0, #2
 8005956:	f7ff fe03 	bl	8005560 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	2003      	movs	r0, #3
 800595e:	f7ff fdff 	bl	8005560 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005962:	2101      	movs	r1, #1
 8005964:	2004      	movs	r0, #4
 8005966:	f7ff fdfb 	bl	8005560 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800596a:	2199      	movs	r1, #153	@ 0x99
 800596c:	2005      	movs	r0, #5
 800596e:	f7ff fdf7 	bl	8005560 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005972:	2100      	movs	r1, #0
 8005974:	2025      	movs	r0, #37	@ 0x25
 8005976:	f7ff fdf3 	bl	8005560 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 800597a:	2105      	movs	r1, #5
 800597c:	2026      	movs	r0, #38	@ 0x26
 800597e:	f7ff fdef 	bl	8005560 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005982:	2112      	movs	r1, #18
 8005984:	2027      	movs	r0, #39	@ 0x27
 8005986:	f7ff fdeb 	bl	8005560 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 800598a:	21d0      	movs	r1, #208	@ 0xd0
 800598c:	2030      	movs	r0, #48	@ 0x30
 800598e:	f7ff fde7 	bl	8005560 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005992:	2140      	movs	r1, #64	@ 0x40
 8005994:	2031      	movs	r0, #49	@ 0x31
 8005996:	f7ff fde3 	bl	8005560 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 800599a:	21c1      	movs	r1, #193	@ 0xc1
 800599c:	2028      	movs	r0, #40	@ 0x28
 800599e:	f7ff fddf 	bl	8005560 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 80059a2:	2194      	movs	r1, #148	@ 0x94
 80059a4:	2029      	movs	r0, #41	@ 0x29
 80059a6:	f7ff fddb 	bl	8005560 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 80059aa:	21c1      	movs	r1, #193	@ 0xc1
 80059ac:	202a      	movs	r0, #42	@ 0x2a
 80059ae:	f7ff fdd7 	bl	8005560 <writeReg>
    // configure frequency
    configChannel();
 80059b2:	f7ff ff4f 	bl	8005854 <configChannel>
    // configure output power
    configPower();
 80059b6:	f7ff ff8b 	bl	80058d0 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 80059ba:	2134      	movs	r1, #52	@ 0x34
 80059bc:	2040      	movs	r0, #64	@ 0x40
 80059be:	f7ff fdcf 	bl	8005560 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <txfsk+0xd4>)
 80059c4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80059c8:	3301      	adds	r3, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	2032      	movs	r0, #50	@ 0x32
 80059d0:	f7ff fdc6 	bl	8005560 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <txfsk+0xd4>)
 80059d6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80059da:	4619      	mov	r1, r3
 80059dc:	2000      	movs	r0, #0
 80059de:	f7ff fdbf 	bl	8005560 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80059e2:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <txfsk+0xd4>)
 80059e4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80059e8:	461a      	mov	r2, r3
 80059ea:	4907      	ldr	r1, [pc, #28]	@ (8005a08 <txfsk+0xd8>)
 80059ec:	2000      	movs	r0, #0
 80059ee:	f7ff fdf0 	bl	80055d2 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 80059f2:	2001      	movs	r0, #1
 80059f4:	f7fc f861 	bl	8001aba <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 80059f8:	2003      	movs	r0, #3
 80059fa:	f7ff fe3f 	bl	800567c <opmode>
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200001bc 	.word	0x200001bc
 8005a08:	20000304 	.word	0x20000304

08005a0c <txlora>:

static void txlora () {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8005a10:	f7ff fe4e 	bl	80056b0 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005a14:	2001      	movs	r0, #1
 8005a16:	f7ff fdc0 	bl	800559a <readReg>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db01      	blt.n	8005a26 <txlora+0x1a>
 8005a22:	f7fc f9dd 	bl	8001de0 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7ff fe28 	bl	800567c <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8005a2c:	f7ff fe64 	bl	80056f8 <configLoraModem>
    // configure frequency
    configChannel();
 8005a30:	f7ff ff10 	bl	8005854 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8005a34:	200a      	movs	r0, #10
 8005a36:	f7ff fdb0 	bl	800559a <readReg>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	b25b      	sxtb	r3, r3
 8005a44:	f043 0308 	orr.w	r3, r3, #8
 8005a48:	b25b      	sxtb	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	200a      	movs	r0, #10
 8005a50:	f7ff fd86 	bl	8005560 <writeReg>
    configPower();
 8005a54:	f7ff ff3c 	bl	80058d0 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005a58:	2134      	movs	r1, #52	@ 0x34
 8005a5a:	2039      	movs	r0, #57	@ 0x39
 8005a5c:	f7ff fd80 	bl	8005560 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005a60:	21f0      	movs	r1, #240	@ 0xf0
 8005a62:	2040      	movs	r0, #64	@ 0x40
 8005a64:	f7ff fd7c 	bl	8005560 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005a68:	21ff      	movs	r1, #255	@ 0xff
 8005a6a:	2012      	movs	r0, #18
 8005a6c:	f7ff fd78 	bl	8005560 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005a70:	21f7      	movs	r1, #247	@ 0xf7
 8005a72:	2011      	movs	r0, #17
 8005a74:	f7ff fd74 	bl	8005560 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005a78:	2100      	movs	r1, #0
 8005a7a:	200e      	movs	r0, #14
 8005a7c:	f7ff fd70 	bl	8005560 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005a80:	2100      	movs	r1, #0
 8005a82:	200d      	movs	r0, #13
 8005a84:	f7ff fd6c 	bl	8005560 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <txlora+0xac>)
 8005a8a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005a8e:	4619      	mov	r1, r3
 8005a90:	2022      	movs	r0, #34	@ 0x22
 8005a92:	f7ff fd65 	bl	8005560 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <txlora+0xac>)
 8005a98:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4907      	ldr	r1, [pc, #28]	@ (8005abc <txlora+0xb0>)
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7ff fd96 	bl	80055d2 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7fc f807 	bl	8001aba <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005aac:	2003      	movs	r0, #3
 8005aae:	f7ff fde5 	bl	800567c <opmode>
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200001bc 	.word	0x200001bc
 8005abc:	20000304 	.word	0x20000304

08005ac0 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	f7ff fd68 	bl	800559a <readReg>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <starttx+0x18>
 8005ad4:	f7fc f984 	bl	8001de0 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005ad8:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <starttx+0x38>)
 8005ada:	89db      	ldrh	r3, [r3, #14]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fc fa1f 	bl	8001f20 <getSf>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <starttx+0x2e>
        txfsk();
 8005ae8:	f7ff ff22 	bl	8005930 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005aec:	e001      	b.n	8005af2 <starttx+0x32>
        txlora();
 8005aee:	f7ff ff8d 	bl	8005a0c <txlora>
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200001bc 	.word	0x200001bc

08005afc <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8005b06:	f7ff fdd3 	bl	80056b0 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f7ff fd45 	bl	800559a <readReg>
 8005b10:	4603      	mov	r3, r0
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	db01      	blt.n	8005b1c <rxlora+0x20>
 8005b18:	f7fc f962 	bl	8001de0 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7ff fdad 	bl	800567c <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d108      	bne.n	8005b3a <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8005b28:	210a      	movs	r1, #10
 8005b2a:	201d      	movs	r0, #29
 8005b2c:	f7ff fd18 	bl	8005560 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8005b30:	2170      	movs	r1, #112	@ 0x70
 8005b32:	201e      	movs	r0, #30
 8005b34:	f7ff fd14 	bl	8005560 <writeReg>
 8005b38:	e003      	b.n	8005b42 <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8005b3a:	f7ff fddd 	bl	80056f8 <configLoraModem>
        // configure frequency
        configChannel();
 8005b3e:	f7ff fe89 	bl	8005854 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8005b42:	2121      	movs	r1, #33	@ 0x21
 8005b44:	200c      	movs	r0, #12
 8005b46:	f7ff fd0b 	bl	8005560 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8005b4a:	2140      	movs	r1, #64	@ 0x40
 8005b4c:	2023      	movs	r0, #35	@ 0x23
 8005b4e:	f7ff fd07 	bl	8005560 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8005b52:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <rxlora+0xf0>)
 8005b54:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005b5c:	2033      	movs	r0, #51	@ 0x33
 8005b5e:	f7ff fd1c 	bl	800559a <readReg>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	2033      	movs	r0, #51	@ 0x33
 8005b6e:	f7ff fcf7 	bl	8005560 <writeReg>
 8005b72:	e00a      	b.n	8005b8a <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005b74:	2033      	movs	r0, #51	@ 0x33
 8005b76:	f7ff fd10 	bl	800559a <readReg>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	2033      	movs	r0, #51	@ 0x33
 8005b86:	f7ff fceb 	bl	8005560 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005b8a:	4b18      	ldr	r3, [pc, #96]	@ (8005bec <rxlora+0xf0>)
 8005b8c:	7c1b      	ldrb	r3, [r3, #16]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	201f      	movs	r0, #31
 8005b92:	f7ff fce5 	bl	8005560 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005b96:	2134      	movs	r1, #52	@ 0x34
 8005b98:	2039      	movs	r0, #57	@ 0x39
 8005b9a:	f7ff fce1 	bl	8005560 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8005b9e:	21c0      	movs	r1, #192	@ 0xc0
 8005ba0:	2040      	movs	r0, #64	@ 0x40
 8005ba2:	f7ff fcdd 	bl	8005560 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005ba6:	21ff      	movs	r1, #255	@ 0xff
 8005ba8:	2012      	movs	r0, #18
 8005baa:	f7ff fcd9 	bl	8005560 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8005bf0 <rxlora+0xf4>)
 8005bb2:	5cd3      	ldrb	r3, [r2, r3]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	4619      	mov	r1, r3
 8005bba:	2011      	movs	r0, #17
 8005bbc:	f7ff fcd0 	bl	8005560 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fb ff7a 	bl	8001aba <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005bcc:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <rxlora+0xf0>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fc f852 	bl	8001c7a <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005bd6:	2006      	movs	r0, #6
 8005bd8:	f7ff fd50 	bl	800567c <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005bdc:	e002      	b.n	8005be4 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 8005bde:	2005      	movs	r0, #5
 8005be0:	f7ff fd4c 	bl	800567c <opmode>
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	200001bc 	.word	0x200001bc
 8005bf0:	0800ed14 	.word	0x0800ed14

08005bf4 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <rxfsk+0x14>
 8005c04:	f7fc f8ec 	bl	8001de0 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005c08:	f7ff fd64 	bl	80056d4 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	f7ff fcc4 	bl	800559a <readReg>
 8005c12:	4603      	mov	r3, r0
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da01      	bge.n	8005c1e <rxfsk+0x2a>
 8005c1a:	f7fc f8e1 	bl	8001de0 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f7ff fd2c 	bl	800567c <opmode>
    // configure frequency
    configChannel();
 8005c24:	f7ff fe16 	bl	8005854 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8005c28:	2121      	movs	r1, #33	@ 0x21
 8005c2a:	200c      	movs	r0, #12
 8005c2c:	f7ff fc98 	bl	8005560 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8005c30:	211e      	movs	r1, #30
 8005c32:	200d      	movs	r0, #13
 8005c34:	f7ff fc94 	bl	8005560 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8005c38:	210b      	movs	r1, #11
 8005c3a:	2012      	movs	r0, #18
 8005c3c:	f7ff fc90 	bl	8005560 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8005c40:	2112      	movs	r1, #18
 8005c42:	2013      	movs	r0, #19
 8005c44:	f7ff fc8c 	bl	8005560 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005c48:	21aa      	movs	r1, #170	@ 0xaa
 8005c4a:	201f      	movs	r0, #31
 8005c4c:	f7ff fc88 	bl	8005560 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8005c50:	2112      	movs	r1, #18
 8005c52:	2027      	movs	r0, #39	@ 0x27
 8005c54:	f7ff fc84 	bl	8005560 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005c58:	21d8      	movs	r1, #216	@ 0xd8
 8005c5a:	2030      	movs	r0, #48	@ 0x30
 8005c5c:	f7ff fc80 	bl	8005560 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005c60:	2140      	movs	r1, #64	@ 0x40
 8005c62:	2031      	movs	r0, #49	@ 0x31
 8005c64:	f7ff fc7c 	bl	8005560 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005c68:	21c1      	movs	r1, #193	@ 0xc1
 8005c6a:	2028      	movs	r0, #40	@ 0x28
 8005c6c:	f7ff fc78 	bl	8005560 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005c70:	2194      	movs	r1, #148	@ 0x94
 8005c72:	2029      	movs	r0, #41	@ 0x29
 8005c74:	f7ff fc74 	bl	8005560 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005c78:	21c1      	movs	r1, #193	@ 0xc1
 8005c7a:	202a      	movs	r0, #42	@ 0x2a
 8005c7c:	f7ff fc70 	bl	8005560 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8005c80:	21ff      	movs	r1, #255	@ 0xff
 8005c82:	2021      	movs	r0, #33	@ 0x21
 8005c84:	f7ff fc6c 	bl	8005560 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005c88:	2102      	movs	r1, #2
 8005c8a:	2002      	movs	r0, #2
 8005c8c:	f7ff fc68 	bl	8005560 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005c90:	2180      	movs	r1, #128	@ 0x80
 8005c92:	2003      	movs	r0, #3
 8005c94:	f7ff fc64 	bl	8005560 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005c98:	2101      	movs	r1, #1
 8005c9a:	2004      	movs	r0, #4
 8005c9c:	f7ff fc60 	bl	8005560 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005ca0:	2199      	movs	r1, #153	@ 0x99
 8005ca2:	2005      	movs	r0, #5
 8005ca4:	f7ff fc5c 	bl	8005560 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005ca8:	2138      	movs	r1, #56	@ 0x38
 8005caa:	2040      	movs	r0, #64	@ 0x40
 8005cac:	f7ff fc58 	bl	8005560 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f7fb ff02 	bl	8001aba <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005cb6:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <rxfsk+0xdc>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fb ffdd 	bl	8001c7a <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8005cc0:	2005      	movs	r0, #5
 8005cc2:	f7ff fcdb 	bl	800567c <opmode>
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200001bc 	.word	0x200001bc

08005cd4 <startrx>:

static void startrx (u1_t rxmode) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f7ff fc5b 	bl	800559a <readReg>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <startrx+0x1e>
 8005cee:	f7fc f877 	bl	8001de0 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <startrx+0x48>)
 8005cf4:	89db      	ldrh	r3, [r3, #14]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fc f912 	bl	8001f20 <getSf>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <startrx+0x38>
        rxfsk(rxmode);
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff75 	bl	8005bf4 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 8005d0a:	e003      	b.n	8005d14 <startrx+0x40>
        rxlora(rxmode);
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fef4 	bl	8005afc <rxlora>
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	200001bc 	.word	0x200001bc

08005d20 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8005d26:	f7fc f819 	bl	8001d5c <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7fb fee1 	bl	8001af2 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8005d30:	f7ff fb40 	bl	80053b4 <os_getTime>
 8005d34:	4603      	mov	r3, r0
 8005d36:	3320      	adds	r3, #32
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fb ff9e 	bl	8001c7a <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 8005d3e:	2002      	movs	r0, #2
 8005d40:	f7fb fed7 	bl	8001af2 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8005d44:	f7ff fb36 	bl	80053b4 <os_getTime>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	33a0      	adds	r3, #160	@ 0xa0
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fb ff94 	bl	8001c7a <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 8005d52:	2000      	movs	r0, #0
 8005d54:	f7ff fc92 	bl	800567c <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8005d58:	2042      	movs	r0, #66	@ 0x42
 8005d5a:	f7ff fc1e 	bl	800559a <readReg>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	2b12      	cmp	r3, #18
 8005d66:	d001      	beq.n	8005d6c <radio_init+0x4c>
 8005d68:	f7fc f83a 	bl	8001de0 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	f7ff fec5 	bl	8005afc <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8005d72:	bf00      	nop
 8005d74:	2001      	movs	r0, #1
 8005d76:	f7ff fc10 	bl	800559a <readReg>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	2b05      	cmp	r3, #5
 8005d82:	d1f7      	bne.n	8005d74 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005d84:	2301      	movs	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e02c      	b.n	8005de4 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	e023      	b.n	8005dd8 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8005d90:	bf00      	nop
 8005d92:	202c      	movs	r0, #44	@ 0x2c
 8005d94:	f7ff fc01 	bl	800559a <readReg>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	71bb      	strb	r3, [r7, #6]
 8005da0:	79bc      	ldrb	r4, [r7, #6]
 8005da2:	202c      	movs	r0, #44	@ 0x2c
 8005da4:	f7ff fbf9 	bl	800559a <readReg>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d0ef      	beq.n	8005d92 <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8005db2:	4a14      	ldr	r2, [pc, #80]	@ (8005e04 <radio_init+0xe4>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	b25a      	sxtb	r2, r3
 8005dbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	b2d9      	uxtb	r1, r3
 8005dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005e04 <radio_init+0xe4>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	460a      	mov	r2, r1
 8005dd0:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	ddd8      	ble.n	8005d90 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	ddcf      	ble.n	8005d8a <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 8005dea:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <radio_init+0xe4>)
 8005dec:	2210      	movs	r2, #16
 8005dee:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8005df0:	2000      	movs	r0, #0
 8005df2:	f7ff fc43 	bl	800567c <opmode>

    hal_enableIRQs();
 8005df6:	f7fb ffc1 	bl	8001d7c <hal_enableIRQs>
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	200003a0 	.word	0x200003a0

08005e08 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 8005e0e:	4b10      	ldr	r3, [pc, #64]	@ (8005e50 <radio_rand1+0x48>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <radio_rand1+0x16>
 8005e1a:	f7fb ffe1 	bl	8001de0 <hal_failed>
    if( i==16 ) {
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d106      	bne.n	8005e32 <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8005e24:	2210      	movs	r2, #16
 8005e26:	490a      	ldr	r1, [pc, #40]	@ (8005e50 <radio_rand1+0x48>)
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f7fb f905 	bl	8001038 <os_aes>
        i = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	71fa      	strb	r2, [r7, #7]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <radio_rand1+0x48>)
 8005e3c:	5c9b      	ldrb	r3, [r3, r2]
 8005e3e:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 8005e40:	4a03      	ldr	r2, [pc, #12]	@ (8005e50 <radio_rand1+0x48>)
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	7013      	strb	r3, [r2, #0]
    return v;
 8005e46:	79bb      	ldrb	r3, [r7, #6]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200003a0 	.word	0x200003a0

08005e54 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 8005e5e:	f7ff faa9 	bl	80053b4 <os_getTime>
 8005e62:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005e64:	2001      	movs	r0, #1
 8005e66:	f7ff fb98 	bl	800559a <readReg>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	da74      	bge.n	8005f5c <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 8005e72:	2012      	movs	r0, #18
 8005e74:	f7ff fb91 	bl	800559a <readReg>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8005e7c:	7a7b      	ldrb	r3, [r7, #9]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	4a59      	ldr	r2, [pc, #356]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e05c      	b.n	8005f4a <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8005e90:	7a7b      	ldrb	r3, [r7, #9]
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04f      	beq.n	8005f3a <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8005e9a:	4b55      	ldr	r3, [pc, #340]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005e9c:	89db      	ldrh	r3, [r3, #14]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fc f84e 	bl	8001f40 <getBw>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8005eaa:	4b51      	ldr	r3, [pc, #324]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005eac:	89db      	ldrh	r3, [r3, #14]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fc f836 	bl	8001f20 <getSf>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff4 <radio_irq_handler+0x1a0>)
 8005eba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1a9b      	subs	r3, r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8005ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005ecc:	201d      	movs	r0, #29
 8005ece:	f7ff fb64 	bl	800559a <readReg>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8005edc:	2022      	movs	r0, #34	@ 0x22
 8005ede:	f7ff fb5c 	bl	800559a <readReg>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	e004      	b.n	8005ef2 <radio_irq_handler+0x9e>
 8005ee8:	2013      	movs	r0, #19
 8005eea:	f7ff fb56 	bl	800559a <readReg>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005ef4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8005ef8:	2010      	movs	r0, #16
 8005efa:	f7ff fb4e 	bl	800559a <readReg>
 8005efe:	4603      	mov	r3, r0
 8005f00:	4619      	mov	r1, r3
 8005f02:	200d      	movs	r0, #13
 8005f04:	f7ff fb2c 	bl	8005560 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005f08:	4b39      	ldr	r3, [pc, #228]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f0a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4939      	ldr	r1, [pc, #228]	@ (8005ff8 <radio_irq_handler+0x1a4>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7ff fb87 	bl	8005626 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8005f18:	2019      	movs	r0, #25
 8005f1a:	f7ff fb3e 	bl	800559a <readReg>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	b25a      	sxtb	r2, r3
 8005f22:	4b33      	ldr	r3, [pc, #204]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f24:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8005f26:	201a      	movs	r0, #26
 8005f28:	f7ff fb37 	bl	800559a <readReg>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	3b3d      	subs	r3, #61	@ 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	b25a      	sxtb	r2, r3
 8005f34:	4b2e      	ldr	r3, [pc, #184]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f36:	731a      	strb	r2, [r3, #12]
 8005f38:	e007      	b.n	8005f4a <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 8005f3a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da03      	bge.n	8005f4a <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 8005f42:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8005f4a:	21ff      	movs	r1, #255	@ 0xff
 8005f4c:	2011      	movs	r0, #17
 8005f4e:	f7ff fb07 	bl	8005560 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 8005f52:	21ff      	movs	r1, #255	@ 0xff
 8005f54:	2012      	movs	r0, #18
 8005f56:	f7ff fb03 	bl	8005560 <writeReg>
 8005f5a:	e03c      	b.n	8005fd6 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8005f5c:	203e      	movs	r0, #62	@ 0x3e
 8005f5e:	f7ff fb1c 	bl	800559a <readReg>
 8005f62:	4603      	mov	r3, r0
 8005f64:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005f66:	203f      	movs	r0, #63	@ 0x3f
 8005f68:	f7ff fb17 	bl	800559a <readReg>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8005f70:	7abb      	ldrb	r3, [r7, #10]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e029      	b.n	8005fd6 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8005f82:	7abb      	ldrb	r3, [r7, #10]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d019      	beq.n	8005fc0 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8005f8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8005f92:	2032      	movs	r0, #50	@ 0x32
 8005f94:	f7ff fb01 	bl	800559a <readReg>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4b14      	ldr	r3, [pc, #80]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005f9e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005fa2:	4b13      	ldr	r3, [pc, #76]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005fa4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4913      	ldr	r1, [pc, #76]	@ (8005ff8 <radio_irq_handler+0x1a4>)
 8005fac:	2000      	movs	r0, #0
 8005fae:	f7ff fb3a 	bl	8005626 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	731a      	strb	r2, [r3, #12]
 8005fbe:	e00a      	b.n	8005fd6 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 8005fca:	4b09      	ldr	r3, [pc, #36]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8005fd2:	e000      	b.n	8005fd6 <radio_irq_handler+0x182>
        } else {
            while(1);
 8005fd4:	e7fe      	b.n	8005fd4 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	f7ff fb50 	bl	800567c <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005fdc:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <radio_irq_handler+0x19c>)
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4806      	ldr	r0, [pc, #24]	@ (8005ffc <radio_irq_handler+0x1a8>)
 8005fe4:	f7ff fa2a 	bl	800543c <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200001bc 	.word	0x200001bc
 8005ff4:	0800ed18 	.word	0x0800ed18
 8005ff8:	20000304 	.word	0x20000304
 8005ffc:	200001d0 	.word	0x200001d0

08006000 <os_radio>:

void os_radio (u1_t mode) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 800600a:	f7fb fea7 	bl	8001d5c <hal_disableIRQs>
    switch (mode) {
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d81a      	bhi.n	800604a <os_radio+0x4a>
 8006014:	a201      	add	r2, pc, #4	@ (adr r2, 800601c <os_radio+0x1c>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	0800602d 	.word	0x0800602d
 8006020:	08006035 	.word	0x08006035
 8006024:	0800603b 	.word	0x0800603b
 8006028:	08006043 	.word	0x08006043
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 800602c:	2000      	movs	r0, #0
 800602e:	f7ff fb25 	bl	800567c <opmode>
        break;
 8006032:	e00a      	b.n	800604a <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8006034:	f7ff fd44 	bl	8005ac0 <starttx>
        break;
 8006038:	e007      	b.n	800604a <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 800603a:	2000      	movs	r0, #0
 800603c:	f7ff fe4a 	bl	8005cd4 <startrx>
        break;
 8006040:	e003      	b.n	800604a <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 8006042:	2001      	movs	r0, #1
 8006044:	f7ff fe46 	bl	8005cd4 <startrx>
        break;
 8006048:	bf00      	nop
    }
    hal_enableIRQs();
 800604a:	f7fb fe97 	bl	8001d7c <hal_enableIRQs>
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop

08006058 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <MX_SPI3_Init+0x74>)
 800605e:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <MX_SPI3_Init+0x78>)
 8006060:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <MX_SPI3_Init+0x74>)
 8006064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006068:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800606a:	4b18      	ldr	r3, [pc, #96]	@ (80060cc <MX_SPI3_Init+0x74>)
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006070:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <MX_SPI3_Init+0x74>)
 8006072:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006076:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006078:	4b14      	ldr	r3, [pc, #80]	@ (80060cc <MX_SPI3_Init+0x74>)
 800607a:	2200      	movs	r2, #0
 800607c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <MX_SPI3_Init+0x74>)
 8006080:	2200      	movs	r2, #0
 8006082:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006084:	4b11      	ldr	r3, [pc, #68]	@ (80060cc <MX_SPI3_Init+0x74>)
 8006086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800608a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800608c:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <MX_SPI3_Init+0x74>)
 800608e:	2228      	movs	r2, #40	@ 0x28
 8006090:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006092:	4b0e      	ldr	r3, [pc, #56]	@ (80060cc <MX_SPI3_Init+0x74>)
 8006094:	2200      	movs	r2, #0
 8006096:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006098:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <MX_SPI3_Init+0x74>)
 800609a:	2200      	movs	r2, #0
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609e:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <MX_SPI3_Init+0x74>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80060a4:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <MX_SPI3_Init+0x74>)
 80060a6:	2207      	movs	r2, #7
 80060a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80060aa:	4b08      	ldr	r3, [pc, #32]	@ (80060cc <MX_SPI3_Init+0x74>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <MX_SPI3_Init+0x74>)
 80060b2:	2208      	movs	r2, #8
 80060b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80060b6:	4805      	ldr	r0, [pc, #20]	@ (80060cc <MX_SPI3_Init+0x74>)
 80060b8:	f006 fca2 	bl	800ca00 <HAL_SPI_Init>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80060c2:	f7ff f95f 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	200003b0 	.word	0x200003b0
 80060d0:	40003c00 	.word	0x40003c00

080060d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	@ 0x28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <HAL_SPI_MspInit+0x8c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d12f      	bne.n	8006156 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80060f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <HAL_SPI_MspInit+0x90>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006164 <HAL_SPI_MspInit+0x90>)
 80060fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006100:	6593      	str	r3, [r2, #88]	@ 0x58
 8006102:	4b18      	ldr	r3, [pc, #96]	@ (8006164 <HAL_SPI_MspInit+0x90>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800610e:	4b15      	ldr	r3, [pc, #84]	@ (8006164 <HAL_SPI_MspInit+0x90>)
 8006110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006112:	4a14      	ldr	r2, [pc, #80]	@ (8006164 <HAL_SPI_MspInit+0x90>)
 8006114:	f043 0302 	orr.w	r3, r3, #2
 8006118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800611a:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <HAL_SPI_MspInit+0x90>)
 800611c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006126:	2338      	movs	r3, #56	@ 0x38
 8006128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612a:	2302      	movs	r3, #2
 800612c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006132:	2303      	movs	r3, #3
 8006134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006136:	2306      	movs	r3, #6
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	4619      	mov	r1, r3
 8006140:	4809      	ldr	r0, [pc, #36]	@ (8006168 <HAL_SPI_MspInit+0x94>)
 8006142:	f004 fa67 	bl	800a614 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	2033      	movs	r0, #51	@ 0x33
 800614c:	f004 f9eb 	bl	800a526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8006150:	2033      	movs	r0, #51	@ 0x33
 8006152:	f004 fa04 	bl	800a55e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006156:	bf00      	nop
 8006158:	3728      	adds	r7, #40	@ 0x28
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40003c00 	.word	0x40003c00
 8006164:	40021000 	.word	0x40021000
 8006168:	48000400 	.word	0x48000400

0800616c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006172:	4b0f      	ldr	r3, [pc, #60]	@ (80061b0 <HAL_MspInit+0x44>)
 8006174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006176:	4a0e      	ldr	r2, [pc, #56]	@ (80061b0 <HAL_MspInit+0x44>)
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	6613      	str	r3, [r2, #96]	@ 0x60
 800617e:	4b0c      	ldr	r3, [pc, #48]	@ (80061b0 <HAL_MspInit+0x44>)
 8006180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <HAL_MspInit+0x44>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	4a08      	ldr	r2, [pc, #32]	@ (80061b0 <HAL_MspInit+0x44>)
 8006190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006194:	6593      	str	r3, [r2, #88]	@ 0x58
 8006196:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <HAL_MspInit+0x44>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40021000 	.word	0x40021000

080061b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <NMI_Handler+0x4>

080061bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <HardFault_Handler+0x4>

080061c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <MemManage_Handler+0x4>

080061cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <BusFault_Handler+0x4>

080061d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061d8:	bf00      	nop
 80061da:	e7fd      	b.n	80061d8 <UsageFault_Handler+0x4>

080061dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061ee:	bf00      	nop
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061fc:	bf00      	nop
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800620a:	f002 fd1b 	bl	8008c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006218:	4802      	ldr	r0, [pc, #8]	@ (8006224 <ADC1_IRQHandler+0x10>)
 800621a:	f003 f95a 	bl	80094d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	2000003c 	.word	0x2000003c

08006228 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800622c:	2040      	movs	r0, #64	@ 0x40
 800622e:	f004 fb73 	bl	800a918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8006232:	2080      	movs	r0, #128	@ 0x80
 8006234:	f004 fb70 	bl	800a918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006238:	bf00      	nop
 800623a:	bd80      	pop	{r7, pc}

0800623c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006240:	4802      	ldr	r0, [pc, #8]	@ (800624c <SPI3_IRQHandler+0x10>)
 8006242:	f006 fe9f 	bl	800cf84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8006246:	bf00      	nop
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200003b0 	.word	0x200003b0

08006250 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006254:	4802      	ldr	r0, [pc, #8]	@ (8006260 <TIM6_DAC_IRQHandler+0x10>)
 8006256:	f007 f9b9 	bl	800d5cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800625a:	bf00      	nop
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000414 	.word	0x20000414

08006264 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006268:	4802      	ldr	r0, [pc, #8]	@ (8006274 <TIM7_IRQHandler+0x10>)
 800626a:	f007 f9af 	bl	800d5cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000460 	.word	0x20000460

08006278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800627c:	4b06      	ldr	r3, [pc, #24]	@ (8006298 <SystemInit+0x20>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006282:	4a05      	ldr	r2, [pc, #20]	@ (8006298 <SystemInit+0x20>)
 8006284:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006288:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	605a      	str	r2, [r3, #4]
 80062aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80062ac:	4b15      	ldr	r3, [pc, #84]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062ae:	4a16      	ldr	r2, [pc, #88]	@ (8006308 <MX_TIM6_Init+0x6c>)
 80062b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 80062b2:	4b14      	ldr	r3, [pc, #80]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062b4:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 80062b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ba:	4b12      	ldr	r3, [pc, #72]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062bc:	2200      	movs	r2, #0
 80062be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 80062c0:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80062ce:	480d      	ldr	r0, [pc, #52]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062d0:	f007 f8d0 	bl	800d474 <HAL_TIM_Base_Init>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80062da:	f7ff f853 	bl	8005384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4806      	ldr	r0, [pc, #24]	@ (8006304 <MX_TIM6_Init+0x68>)
 80062ec:	f007 fb0e 	bl	800d90c <HAL_TIMEx_MasterConfigSynchronization>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80062f6:	f7ff f845 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000414 	.word	0x20000414
 8006308:	40001000 	.word	0x40001000

0800630c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006312:	1d3b      	adds	r3, r7, #4
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800631c:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <MX_TIM7_Init+0x68>)
 800631e:	4a16      	ldr	r2, [pc, #88]	@ (8006378 <MX_TIM7_Init+0x6c>)
 8006320:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 8006322:	4b14      	ldr	r3, [pc, #80]	@ (8006374 <MX_TIM7_Init+0x68>)
 8006324:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8006328:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632a:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <MX_TIM7_Init+0x68>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8006330:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <MX_TIM7_Init+0x68>)
 8006332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006336:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006338:	4b0e      	ldr	r3, [pc, #56]	@ (8006374 <MX_TIM7_Init+0x68>)
 800633a:	2200      	movs	r2, #0
 800633c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800633e:	480d      	ldr	r0, [pc, #52]	@ (8006374 <MX_TIM7_Init+0x68>)
 8006340:	f007 f898 	bl	800d474 <HAL_TIM_Base_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800634a:	f7ff f81b 	bl	8005384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4806      	ldr	r0, [pc, #24]	@ (8006374 <MX_TIM7_Init+0x68>)
 800635c:	f007 fad6 	bl	800d90c <HAL_TIMEx_MasterConfigSynchronization>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8006366:	f7ff f80d 	bl	8005384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000460 	.word	0x20000460
 8006378:	40001400 	.word	0x40001400

0800637c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1a      	ldr	r2, [pc, #104]	@ (80063f4 <HAL_TIM_Base_MspInit+0x78>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d114      	bne.n	80063b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800638e:	4b1a      	ldr	r3, [pc, #104]	@ (80063f8 <HAL_TIM_Base_MspInit+0x7c>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <HAL_TIM_Base_MspInit+0x7c>)
 8006394:	f043 0310 	orr.w	r3, r3, #16
 8006398:	6593      	str	r3, [r2, #88]	@ 0x58
 800639a:	4b17      	ldr	r3, [pc, #92]	@ (80063f8 <HAL_TIM_Base_MspInit+0x7c>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80063a6:	2200      	movs	r2, #0
 80063a8:	2100      	movs	r1, #0
 80063aa:	2036      	movs	r0, #54	@ 0x36
 80063ac:	f004 f8bb 	bl	800a526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80063b0:	2036      	movs	r0, #54	@ 0x36
 80063b2:	f004 f8d4 	bl	800a55e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80063b6:	e018      	b.n	80063ea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a0f      	ldr	r2, [pc, #60]	@ (80063fc <HAL_TIM_Base_MspInit+0x80>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d113      	bne.n	80063ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <HAL_TIM_Base_MspInit+0x7c>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	4a0c      	ldr	r2, [pc, #48]	@ (80063f8 <HAL_TIM_Base_MspInit+0x7c>)
 80063c8:	f043 0320 	orr.w	r3, r3, #32
 80063cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ce:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <HAL_TIM_Base_MspInit+0x7c>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80063da:	2200      	movs	r2, #0
 80063dc:	2100      	movs	r1, #0
 80063de:	2037      	movs	r0, #55	@ 0x37
 80063e0:	f004 f8a1 	bl	800a526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80063e4:	2037      	movs	r0, #55	@ 0x37
 80063e6:	f004 f8ba 	bl	800a55e <HAL_NVIC_EnableIRQ>
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40001000 	.word	0x40001000
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40001400 	.word	0x40001400

08006400 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bme68x_soft_reset(dev);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f901 	bl	8006610 <bme68x_soft_reset>
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8006412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d120      	bne.n	800645c <bme68x_init+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	20d0      	movs	r0, #208	@ 0xd0
 8006422:	f000 f8b1 	bl	8006588 <bme68x_get_regs>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800642a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d114      	bne.n	800645c <bme68x_init+0x5c>
        {
            if (dev->chip_id == BME68X_CHIP_ID)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b61      	cmp	r3, #97	@ 0x61
 8006438:	d10e      	bne.n	8006458 <bme68x_init+0x58>
            {
                /* Read Variant ID */
                rslt = read_variant_id(dev);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f002 f84c 	bl	80084d8 <read_variant_id>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME68X_OK)
 8006444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d107      	bne.n	800645c <bme68x_init+0x5c>
                {
                    /* Get the Calibration data */
                    rslt = get_calib_data(dev);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 ff3f 	bl	80082d0 <get_calib_data>
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	e001      	b.n	800645c <bme68x_init+0x5c>
                }
            }
            else
            {
                rslt = BME68X_E_DEV_NOT_FOUND;
 8006458:	23fd      	movs	r3, #253	@ 0xfd
 800645a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800645c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b08a      	sub	sp, #40	@ 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	f107 0314 	add.w	r3, r7, #20
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	609a      	str	r2, [r3, #8]
 8006486:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006488:	6838      	ldr	r0, [r7, #0]
 800648a:	f001 fcfb 	bl	8007e84 <null_ptr_check>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8006494:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006498:	2b00      	cmp	r3, #0
 800649a:	d16c      	bne.n	8006576 <bme68x_set_regs+0x10e>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d069      	beq.n	8006576 <bme68x_set_regs+0x10e>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d066      	beq.n	8006576 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d05d      	beq.n	800656a <bme68x_set_regs+0x102>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b0a      	cmp	r3, #10
 80064b2:	d85a      	bhi.n	800656a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80064b8:	e034      	b.n	8006524 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	7b1b      	ldrb	r3, [r3, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d118      	bne.n	80064f4 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80064c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fc18 	bl	8007d02 <set_mem_page>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80064d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	781a      	ldrb	r2, [r3, #0]
 80064e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	3328      	adds	r3, #40	@ 0x28
 80064ec:	443b      	add	r3, r7
 80064ee:	f803 2c18 	strb.w	r2, [r3, #-24]
 80064f2:	e009      	b.n	8006508 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80064f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	441a      	add	r2, r3
 80064fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	3328      	adds	r3, #40	@ 0x28
 8006502:	443b      	add	r3, r7
 8006504:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8006508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	441a      	add	r2, r3
 800650e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	3301      	adds	r3, #1
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	3328      	adds	r3, #40	@ 0x28
 8006518:	443b      	add	r3, r7
 800651a:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 800651e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	d8c6      	bhi.n	80064ba <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 800652c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11e      	bne.n	8006572 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8006538:	7c38      	ldrb	r0, [r7, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	1e5a      	subs	r2, r3, #1
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685d      	ldr	r5, [r3, #4]
 8006544:	f107 0310 	add.w	r3, r7, #16
 8006548:	1c59      	adds	r1, r3, #1
 800654a:	462b      	mov	r3, r5
 800654c:	47a0      	blx	r4
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8006562:	23fe      	movs	r3, #254	@ 0xfe
 8006564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8006568:	e003      	b.n	8006572 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800656a:	23fc      	movs	r3, #252	@ 0xfc
 800656c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006570:	e004      	b.n	800657c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8006572:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006574:	e002      	b.n	800657c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006576:	23ff      	movs	r3, #255	@ 0xff
 8006578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800657c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006580:	4618      	mov	r0, r3
 8006582:	3728      	adds	r7, #40	@ 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bdb0      	pop	{r4, r5, r7, pc}

08006588 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006598:	6838      	ldr	r0, [r7, #0]
 800659a:	f001 fc73 	bl	8007e84 <null_ptr_check>
 800659e:	4603      	mov	r3, r0
 80065a0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 80065a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d12a      	bne.n	8006600 <bme68x_get_regs+0x78>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d027      	beq.n	8006600 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	7b1b      	ldrb	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10e      	bne.n	80065d6 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fba0 	bl	8007d02 <set_mem_page>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 80065c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065d4:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	7bf8      	ldrb	r0, [r7, #15]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	47a0      	blx	r4
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 80065fa:	23fe      	movs	r3, #254	@ 0xfe
 80065fc:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 80065fe:	e001      	b.n	8006604 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006600:	23ff      	movs	r3, #255	@ 0xff
 8006602:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006604:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006608:	4618      	mov	r0, r3
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}

08006610 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8006618:	23e0      	movs	r3, #224	@ 0xe0
 800661a:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 800661c:	23b6      	movs	r3, #182	@ 0xb6
 800661e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fc2f 	bl	8007e84 <null_ptr_check>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800662a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d12b      	bne.n	800668a <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	7b1b      	ldrb	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fbc6 	bl	8007dcc <get_mem_page>
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8006644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d11e      	bne.n	800668a <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800664c:	f107 010d 	add.w	r1, r7, #13
 8006650:	f107 000e 	add.w	r0, r7, #14
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f7ff ff06 	bl	8006468 <bme68x_set_regs>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]

            /* Wait for 5ms */
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6852      	ldr	r2, [r2, #4]
 8006668:	4611      	mov	r1, r2
 800666a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800666e:	4798      	blx	r3
            if (rslt == BME68X_OK)
 8006670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <bme68x_soft_reset+0x7a>
            {
                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7b1b      	ldrb	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fba3 	bl	8007dcc <get_mem_page>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80066a2:	2300      	movs	r3, #0
 80066a4:	77bb      	strb	r3, [r7, #30]
 80066a6:	2301      	movs	r3, #1
 80066a8:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80066aa:	4a7c      	ldr	r2, [pc, #496]	@ (800689c <bme68x_set_conf+0x204>)
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066b4:	6018      	str	r0, [r3, #0]
 80066b6:	3304      	adds	r3, #4
 80066b8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	2300      	movs	r3, #0
 80066c0:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 80066c2:	f107 031c 	add.w	r3, r7, #28
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f94a 	bl	8006962 <bme68x_get_op_mode>
 80066ce:	4603      	mov	r3, r0
 80066d0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 80066d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	2000      	movs	r0, #0
 80066de:	f000 f8df 	bl	80068a0 <bme68x_set_op_mode>
 80066e2:	4603      	mov	r3, r0
 80066e4:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 80066ec:	23ff      	movs	r3, #255	@ 0xff
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e0b2      	b.n	8006858 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 80066f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f040 80ae 	bne.w	8006858 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 80066fc:	7d38      	ldrb	r0, [r7, #20]
 80066fe:	f107 010c 	add.w	r1, r7, #12
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2205      	movs	r2, #5
 8006706:	f7ff ff3f 	bl	8006588 <bme68x_get_regs>
 800670a:	4603      	mov	r3, r0
 800670c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8006716:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3303      	adds	r3, #3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	2107      	movs	r1, #7
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fb7f 	bl	8007e2a <boundary_check>
 800672c:	4603      	mov	r3, r0
 800672e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006730:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3301      	adds	r3, #1
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	2105      	movs	r1, #5
 8006740:	4618      	mov	r0, r3
 8006742:	f001 fb72 	bl	8007e2a <boundary_check>
 8006746:	4603      	mov	r3, r0
 8006748:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800674a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d108      	bne.n	8006764 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3302      	adds	r3, #2
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	2105      	movs	r1, #5
 800675a:	4618      	mov	r0, r3
 800675c:	f001 fb65 	bl	8007e2a <boundary_check>
 8006760:	4603      	mov	r3, r0
 8006762:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	2105      	movs	r1, #5
 8006772:	4618      	mov	r0, r3
 8006774:	f001 fb59 	bl	8007e2a <boundary_check>
 8006778:	4603      	mov	r3, r0
 800677a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800677c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	2108      	movs	r1, #8
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fb4c 	bl	8007e2a <boundary_check>
 8006792:	4603      	mov	r3, r0
 8006794:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006796:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d15c      	bne.n	8006858 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800679e:	7c3b      	ldrb	r3, [r7, #16]
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	f023 031c 	bic.w	r3, r3, #28
 80067a6:	b25a      	sxtb	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	78db      	ldrb	r3, [r3, #3]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	f003 031c 	and.w	r3, r3, #28
 80067b4:	b25b      	sxtb	r3, r3
 80067b6:	4313      	orrs	r3, r2
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	b25a      	sxtb	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	015b      	lsls	r3, r3, #5
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	4313      	orrs	r3, r2
 80067d2:	b25b      	sxtb	r3, r3
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	f023 031c 	bic.w	r3, r3, #28
 80067e0:	b25a      	sxtb	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	789b      	ldrb	r3, [r3, #2]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	f003 031c 	and.w	r3, r3, #28
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	4313      	orrs	r3, r2
 80067f2:	b25b      	sxtb	r3, r3
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80067f8:	7b7b      	ldrb	r3, [r7, #13]
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	b25a      	sxtb	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b25b      	sxtb	r3, r3
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	b25b      	sxtb	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b25b      	sxtb	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	2b08      	cmp	r3, #8
 800681c:	d004      	beq.n	8006828 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	791b      	ldrb	r3, [r3, #4]
 8006822:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8006828:	7c3b      	ldrb	r3, [r7, #16]
 800682a:	b25b      	sxtb	r3, r3
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	b25a      	sxtb	r2, r3
 8006832:	7fbb      	ldrb	r3, [r7, #30]
 8006834:	015b      	lsls	r3, r3, #5
 8006836:	b25b      	sxtb	r3, r3
 8006838:	4313      	orrs	r3, r2
 800683a:	b25b      	sxtb	r3, r3
 800683c:	b2db      	uxtb	r3, r3
 800683e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8006840:	7b3b      	ldrb	r3, [r7, #12]
 8006842:	b25b      	sxtb	r3, r3
 8006844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006848:	b25a      	sxtb	r2, r3
 800684a:	7f7b      	ldrb	r3, [r7, #29]
 800684c:	01db      	lsls	r3, r3, #7
 800684e:	b25b      	sxtb	r3, r3
 8006850:	4313      	orrs	r3, r2
 8006852:	b25b      	sxtb	r3, r3
 8006854:	b2db      	uxtb	r3, r3
 8006856:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8006858:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8006860:	f107 010c 	add.w	r1, r7, #12
 8006864:	f107 0014 	add.w	r0, r7, #20
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2205      	movs	r2, #5
 800686c:	f7ff fdfc 	bl	8006468 <bme68x_set_regs>
 8006870:	4603      	mov	r3, r0
 8006872:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006874:	7f3b      	ldrb	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <bme68x_set_conf+0x1f8>
 800687a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8006882:	7f3b      	ldrb	r3, [r7, #28]
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f80a 	bl	80068a0 <bme68x_set_op_mode>
 800688c:	4603      	mov	r3, r0
 800688e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006890:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	0800daa0 	.word	0x0800daa0

080068a0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	6039      	str	r1, [r7, #0]
 80068aa:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80068b0:	2374      	movs	r3, #116	@ 0x74
 80068b2:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80068b4:	f107 010d 	add.w	r1, r7, #13
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2201      	movs	r2, #1
 80068bc:	2074      	movs	r0, #116	@ 0x74
 80068be:	f7ff fe63 	bl	8006588 <bme68x_get_regs>
 80068c2:	4603      	mov	r3, r0
 80068c4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80068c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d11d      	bne.n	800690a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80068ce:	7b7b      	ldrb	r3, [r7, #13]
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d016      	beq.n	800690a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80068dc:	7b7b      	ldrb	r3, [r7, #13]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80068e6:	f107 010d 	add.w	r1, r7, #13
 80068ea:	f107 000c 	add.w	r0, r7, #12
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f7ff fdb9 	bl	8006468 <bme68x_set_regs>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	4611      	mov	r1, r2
 8006904:	f242 7010 	movw	r0, #10000	@ 0x2710
 8006908:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <bme68x_set_op_mode+0x78>
 8006910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0cd      	beq.n	80068b4 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <bme68x_set_op_mode+0xb6>
 800691e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d117      	bne.n	8006956 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8006926:	7b7b      	ldrb	r3, [r7, #13]
 8006928:	b25b      	sxtb	r3, r3
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	b25a      	sxtb	r2, r3
 8006930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	b25b      	sxtb	r3, r3
 800693a:	4313      	orrs	r3, r2
 800693c:	b25b      	sxtb	r3, r3
 800693e:	b2db      	uxtb	r3, r3
 8006940:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006942:	f107 010d 	add.w	r1, r7, #13
 8006946:	f107 000c 	add.w	r0, r7, #12
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	f7ff fd8b 	bl	8006468 <bme68x_set_regs>
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00f      	beq.n	8006992 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8006972:	f107 010e 	add.w	r1, r7, #14
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2201      	movs	r2, #1
 800697a:	2074      	movs	r0, #116	@ 0x74
 800697c:	f7ff fe04 	bl	8006588 <bme68x_get_regs>
 8006980:	4603      	mov	r3, r0
 8006982:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	b2da      	uxtb	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	e001      	b.n	8006996 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006992:	23ff      	movs	r3, #255	@ 0xff
 8006994:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	@ 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 80069b2:	2300      	movs	r3, #0
 80069b4:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 80069b6:	4a34      	ldr	r2, [pc, #208]	@ (8006a88 <bme68x_get_meas_dur+0xe4>)
 80069b8:	f107 0314 	add.w	r3, r7, #20
 80069bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069c0:	6018      	str	r0, [r3, #0]
 80069c2:	3304      	adds	r3, #4
 80069c4:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d058      	beq.n	8006a7e <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3301      	adds	r3, #1
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	2105      	movs	r1, #5
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 fa28 	bl	8007e2a <boundary_check>
 80069da:	4603      	mov	r3, r0
 80069dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 80069e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3302      	adds	r3, #2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	2105      	movs	r1, #5
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fa1a 	bl	8007e2a <boundary_check>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 80069fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d108      	bne.n	8006a16 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	2105      	movs	r1, #5
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 fa0d 	bl	8007e2a <boundary_check>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006a16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d12f      	bne.n	8006a7e <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	3328      	adds	r3, #40	@ 0x28
 8006a24:	443b      	add	r3, r7
 8006a26:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006a2a:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	789b      	ldrb	r3, [r3, #2]
 8006a30:	3328      	adds	r3, #40	@ 0x28
 8006a32:	443b      	add	r3, r7
 8006a34:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	3328      	adds	r3, #40	@ 0x28
 8006a46:	443b      	add	r3, r7
 8006a48:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8006a66:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8006a6e:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d003      	beq.n	8006a7e <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006a7c:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3728      	adds	r7, #40	@ 0x28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0800daa8 	.word	0x0800daa8

08006a8c <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8006a8c:	b5b0      	push	{r4, r5, r7, lr}
 8006a8e:	b09e      	sub	sp, #120	@ 0x78
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    struct bme68x_data *field_ptr[3] = { 0 };
 8006aae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	605a      	str	r2, [r3, #4]
 8006ab8:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8006aba:	f107 0314 	add.w	r3, r7, #20
 8006abe:	2254      	movs	r2, #84	@ 0x54
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f006 ffa6 	bl	800da14 <memset>

    field_ptr[0] = &field_data[0];
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	66bb      	str	r3, [r7, #104]	@ 0x68
    field_ptr[1] = &field_data[1];
 8006ace:	f107 0314 	add.w	r3, r7, #20
 8006ad2:	331c      	adds	r3, #28
 8006ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    field_ptr[2] = &field_data[2];
 8006ad6:	f107 0314 	add.w	r3, r7, #20
 8006ada:	3338      	adds	r3, #56	@ 0x38
 8006adc:	673b      	str	r3, [r7, #112]	@ 0x70

    rslt = null_ptr_check(dev);
 8006ade:	6838      	ldr	r0, [r7, #0]
 8006ae0:	f001 f9d0 	bl	8007e84 <null_ptr_check>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if ((rslt == BME68X_OK) && (data != NULL))
 8006aea:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 80c1 	bne.w	8006c76 <bme68x_get_data+0x1ea>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 80bd 	beq.w	8006c76 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d11c      	bne.n	8006b3c <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	2000      	movs	r0, #0
 8006b08:	f000 fd8b 	bl	8007622 <read_field_data>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (rslt == BME68X_OK)
 8006b12:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 80a1 	bne.w	8006c5e <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b25b      	sxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da03      	bge.n	8006b2e <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8006b2c:	e097      	b.n	8006c5e <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
                    rslt = BME68X_W_NO_NEW_DATA;
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006b3a:	e090      	b.n	8006c5e <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d003      	beq.n	8006b4a <bme68x_get_data+0xbe>
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	f040 8087 	bne.w	8006c58 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8006b4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 feaa 	bl	80078aa <read_all_field_data>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            new_fields = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006b68:	e014      	b.n	8006b94 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8006b6a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	3378      	adds	r3, #120	@ 0x78
 8006b72:	443b      	add	r3, r7
 8006b74:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b25b      	sxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da04      	bge.n	8006b8a <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8006b80:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8006b84:	3301      	adds	r3, #1
 8006b86:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8006b8a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006b8e:	3301      	adds	r3, #1
 8006b90:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006b94:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d803      	bhi.n	8006ba4 <bme68x_get_data+0x118>
 8006b9c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0e2      	beq.n	8006b6a <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006baa:	e01c      	b.n	8006be6 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8006bac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006bb6:	e00d      	b.n	8006bd4 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8006bb8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8006bbc:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 8006bc0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 fb09 	bl	80081dc <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8006bca:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006bd4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d9ed      	bls.n	8006bb8 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8006bdc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006be0:	3301      	adds	r3, #1
 8006be2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006be6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d803      	bhi.n	8006bf6 <bme68x_get_data+0x16a>
 8006bee:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0da      	beq.n	8006bac <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006bfc:	e01c      	b.n	8006c38 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8006bfe:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	3378      	adds	r3, #120	@ 0x78
 8006c06:	443b      	add	r3, r7
 8006c08:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8006c0c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	461c      	mov	r4, r3
 8006c20:	460d      	mov	r5, r1
 8006c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8006c2e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006c32:	3301      	adds	r3, #1
 8006c34:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006c38:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d803      	bhi.n	8006c48 <bme68x_get_data+0x1bc>
 8006c40:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0da      	beq.n	8006bfe <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8006c48:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (new_fields == 0)
 8006c56:	e002      	b.n	8006c5e <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        }

        if (n_data == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8006c64:	23ff      	movs	r3, #255	@ 0xff
 8006c66:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        if (n_data == NULL)
 8006c6a:	e007      	b.n	8006c7c <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8006c72:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8006c74:	e002      	b.n	8006c7c <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006c76:	23ff      	movs	r3, #255	@ 0xff
 8006c78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    }

    return rslt;
 8006c7c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3778      	adds	r7, #120	@ 0x78
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bdb0      	pop	{r4, r5, r7, pc}

08006c88 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8006c9e:	f247 1370 	movw	r3, #29040	@ 0x7170
 8006ca2:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d06e      	beq.n	8006d88 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	2000      	movs	r0, #0
 8006cae:	f7ff fdf7 	bl	80068a0 <bme68x_set_op_mode>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 8006cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8006cbe:	f107 021c 	add.w	r2, r7, #28
 8006cc2:	7bf9      	ldrb	r1, [r7, #15]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68b8      	ldr	r0, [r7, #8]
 8006cc8:	f001 f8fc 	bl	8007ec4 <set_conf>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006cd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d159      	bne.n	8006d8c <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8006cd8:	f107 0118 	add.w	r1, r7, #24
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	2070      	movs	r0, #112	@ 0x70
 8006ce2:	f7ff fc51 	bl	8006588 <bme68x_get_regs>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8006cea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d14c      	bne.n	8006d8c <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d10b      	bne.n	8006d12 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d102      	bne.n	8006d0c <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8006d06:	2302      	movs	r3, #2
 8006d08:	777b      	strb	r3, [r7, #29]
 8006d0a:	e006      	b.n	8006d1a <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	777b      	strb	r3, [r7, #29]
 8006d10:	e003      	b.n	8006d1a <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8006d12:	2301      	movs	r3, #1
 8006d14:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8006d16:	2300      	movs	r3, #0
 8006d18:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8006d1a:	7e3b      	ldrb	r3, [r7, #24]
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	f023 0308 	bic.w	r3, r3, #8
 8006d22:	b25a      	sxtb	r2, r3
 8006d24:	7fbb      	ldrb	r3, [r7, #30]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	b25b      	sxtb	r3, r3
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8006d38:	7e7b      	ldrb	r3, [r7, #25]
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	f023 030f 	bic.w	r3, r3, #15
 8006d40:	b25a      	sxtb	r2, r3
 8006d42:	7f3b      	ldrb	r3, [r7, #28]
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b25b      	sxtb	r3, r3
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8006d54:	7e7b      	ldrb	r3, [r7, #25]
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006d5c:	b25a      	sxtb	r2, r3
 8006d5e:	7f7b      	ldrb	r3, [r7, #29]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8006d72:	f107 0118 	add.w	r1, r7, #24
 8006d76:	f107 0014 	add.w	r0, r7, #20
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f7ff fb73 	bl	8006468 <bme68x_set_regs>
 8006d82:	4603      	mov	r3, r0
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e001      	b.n	8006d8c <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006d88:	23ff      	movs	r3, #255	@ 0xff
 8006d8a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006d8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e90 <calc_temperature+0xf8>
 8006db0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	8bdb      	ldrh	r3, [r3, #30]
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc0:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8006e94 <calc_temperature+0xfc>
 8006dc4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006dc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dec:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006e98 <calc_temperature+0x100>
 8006df0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	8bdb      	ldrh	r3, [r3, #30]
 8006df8:	ee07 3a90 	vmov	s15, r3
 8006dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e00:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8006e9c <calc_temperature+0x104>
 8006e04:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006e08:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e16:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8006e98 <calc_temperature+0x100>
 8006e1a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	8bdb      	ldrh	r3, [r3, #30]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8006e2a:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006e9c <calc_temperature+0x104>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8006e36:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e48:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8006e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8006e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e54:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8006e58:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8006e70:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8006ea0 <calc_temperature+0x108>
 8006e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e78:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	ee07 3a90 	vmov	s15, r3
}
 8006e82:	eeb0 0a67 	vmov.f32	s0, s15
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	46800000 	.word	0x46800000
 8006e94:	44800000 	.word	0x44800000
 8006e98:	48000000 	.word	0x48000000
 8006e9c:	46000000 	.word	0x46000000
 8006ea0:	45a00000 	.word	0x45a00000

08006ea4 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8006eb4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ebc:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80070f8 <calc_pressure+0x254>
 8006ec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ec4:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8006ec8:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ecc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ede:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 80070fc <calc_pressure+0x258>
 8006ee2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006f08:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f10:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8006f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f18:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f2e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8007100 <calc_pressure+0x25c>
 8006f32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3a:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f54:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007104 <calc_pressure+0x260>
 8006f60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f7e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8007108 <calc_pressure+0x264>
 8006f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f86:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8006f8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8006f8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800710c <calc_pressure+0x268>
 8006f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8007110 <calc_pressure+0x26c>
 8006fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fc4:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8006fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8006fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fd0:	ee17 3a90 	vmov	r3, s15
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8081 	beq.w	80070dc <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8006fda:	ed97 7a03 	vldr	s14, [r7, #12]
 8006fde:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8007114 <calc_pressure+0x270>
 8006fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8006fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fee:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8007118 <calc_pressure+0x274>
 8006ff2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006ff6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffe:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007010:	edd7 7a05 	vldr	s15, [r7, #20]
 8007014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007018:	edd7 7a05 	vldr	s15, [r7, #20]
 800701c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007020:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 800711c <calc_pressure+0x278>
 8007024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007028:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800703a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800710c <calc_pressure+0x268>
 800703e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007042:	ed97 7a05 	vldr	s14, [r7, #20]
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 800704e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007052:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007120 <calc_pressure+0x27c>
 8007056:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800705a:	edd7 6a05 	vldr	s13, [r7, #20]
 800705e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8007120 <calc_pressure+0x27c>
 8007062:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800706a:	edd7 6a05 	vldr	s13, [r7, #20]
 800706e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8007120 <calc_pressure+0x27c>
 8007072:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007088:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 80070fc <calc_pressure+0x258>
 800708c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007094:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8007098:	ed97 7a04 	vldr	s14, [r7, #16]
 800709c:	edd7 7a03 	vldr	s15, [r7, #12]
 80070a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80070a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ba:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007124 <calc_pressure+0x280>
 80070be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80070c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070c6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80070ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80070d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070d6:	edc7 7a05 	vstr	s15, [r7, #20]
 80070da:	e002      	b.n	80070e2 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	ee07 3a90 	vmov	s15, r3
}
 80070e8:	eeb0 0a67 	vmov.f32	s0, s15
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	477a0000 	.word	0x477a0000
 80070fc:	48000000 	.word	0x48000000
 8007100:	47800000 	.word	0x47800000
 8007104:	46800000 	.word	0x46800000
 8007108:	49000000 	.word	0x49000000
 800710c:	47000000 	.word	0x47000000
 8007110:	49800000 	.word	0x49800000
 8007114:	45800000 	.word	0x45800000
 8007118:	45c35000 	.word	0x45c35000
 800711c:	4f000000 	.word	0x4f000000
 8007120:	43800000 	.word	0x43800000
 8007124:	43000000 	.word	0x43000000

08007128 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	@ 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800713a:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80072a4 <calc_humidity+0x17c>
 800713e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007142:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	8a1b      	ldrh	r3, [r3, #16]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8007160:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007172:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8007176:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800717a:	edd7 7a06 	vldr	s15, [r7, #24]
 800717e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8007186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800718a:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	8a5b      	ldrh	r3, [r3, #18]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80072a8 <calc_humidity+0x180>
 800719e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b0:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80072ac <calc_humidity+0x184>
 80071b4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80071b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80071bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c4:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071d6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80072b0 <calc_humidity+0x188>
 80071da:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80071de:	edd7 7a06 	vldr	s15, [r7, #24]
 80071e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80071e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80071ea:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 80071f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	7ddb      	ldrb	r3, [r3, #23]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800720e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80072ac <calc_humidity+0x184>
 8007212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007216:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007228:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80072b4 <calc_humidity+0x18c>
 800722c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007230:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8007234:	ed97 7a02 	vldr	s14, [r7, #8]
 8007238:	edd7 7a06 	vldr	s15, [r7, #24]
 800723c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007240:	edd7 7a03 	vldr	s15, [r7, #12]
 8007244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007248:	edd7 7a04 	vldr	s15, [r7, #16]
 800724c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007250:	edd7 7a04 	vldr	s15, [r7, #16]
 8007254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007258:	ed97 7a04 	vldr	s14, [r7, #16]
 800725c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007260:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8007264:	edd7 7a07 	vldr	s15, [r7, #28]
 8007268:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80072b8 <calc_humidity+0x190>
 800726c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007274:	dd02      	ble.n	800727c <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8007276:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <calc_humidity+0x194>)
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	e009      	b.n	8007290 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 800727c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007280:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007288:	d502      	bpl.n	8007290 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	ee07 3a90 	vmov	s15, r3
}
 8007296:	eeb0 0a67 	vmov.f32	s0, s15
 800729a:	3724      	adds	r7, #36	@ 0x24
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	45a00000 	.word	0x45a00000
 80072a8:	48800000 	.word	0x48800000
 80072ac:	46800000 	.word	0x46800000
 80072b0:	49800000 	.word	0x49800000
 80072b4:	4a000000 	.word	0x4a000000
 80072b8:	42c80000 	.word	0x42c80000
 80072bc:	42c80000 	.word	0x42c80000

080072c0 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 80072c0:	b4b0      	push	{r4, r5, r7}
 80072c2:	b0a9      	sub	sp, #164	@ 0xa4
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	603a      	str	r2, [r7, #0]
 80072ca:	80fb      	strh	r3, [r7, #6]
 80072cc:	460b      	mov	r3, r1
 80072ce:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 80072de:	797b      	ldrb	r3, [r7, #5]
 80072e0:	2201      	movs	r2, #1
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 80072f2:	4b3e      	ldr	r3, [pc, #248]	@ (80073ec <calc_gas_resistance_low+0x12c>)
 80072f4:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80072f8:	461d      	mov	r5, r3
 80072fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007306:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800730a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 800730e:	4b38      	ldr	r3, [pc, #224]	@ (80073f0 <calc_gas_resistance_low+0x130>)
 8007310:	f107 0408 	add.w	r4, r7, #8
 8007314:	461d      	mov	r5, r3
 8007316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800731c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007322:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8007330:	ee07 3a90 	vmov	s15, r3
 8007334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007338:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800733c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007340:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80073f4 <calc_gas_resistance_low+0x134>
 8007344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007348:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 800734c:	797b      	ldrb	r3, [r7, #5]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	33a0      	adds	r3, #160	@ 0xa0
 8007352:	443b      	add	r3, r7
 8007354:	3b58      	subs	r3, #88	@ 0x58
 8007356:	ed93 7a00 	vldr	s14, [r3]
 800735a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80073f8 <calc_gas_resistance_low+0x138>
 800735e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800736a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800736e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007372:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8007376:	797b      	ldrb	r3, [r7, #5]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	33a0      	adds	r3, #160	@ 0xa0
 800737c:	443b      	add	r3, r7
 800737e:	3b98      	subs	r3, #152	@ 0x98
 8007380:	ed93 7a00 	vldr	s14, [r3]
 8007384:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80073f8 <calc_gas_resistance_low+0x138>
 8007388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800738c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007394:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8007398:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800739c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80073fc <calc_gas_resistance_low+0x13c>
 80073a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073a4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80073a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073ac:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80073b0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8007400 <calc_gas_resistance_low+0x140>
 80073b4:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80073b8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80073bc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80073c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 80073d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073dc:	ee07 3a90 	vmov	s15, r3
}
 80073e0:	eeb0 0a67 	vmov.f32	s0, s15
 80073e4:	37a4      	adds	r7, #164	@ 0xa4
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bcb0      	pop	{r4, r5, r7}
 80073ea:	4770      	bx	lr
 80073ec:	0800dab0 	.word	0x0800dab0
 80073f0:	0800daf0 	.word	0x0800daf0
 80073f4:	44a78000 	.word	0x44a78000
 80073f8:	42c80000 	.word	0x42c80000
 80073fc:	340637bd 	.word	0x340637bd
 8007400:	44000000 	.word	0x44000000

08007404 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	460a      	mov	r2, r1
 800740e:	80fb      	strh	r3, [r7, #6]
 8007410:	4613      	mov	r3, r2
 8007412:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8007414:	797b      	ldrb	r3, [r7, #5]
 8007416:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007426:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4613      	mov	r3, r2
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	4413      	add	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007438:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007444:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8007474 <calc_gas_resistance_high+0x70>
 8007448:	ee67 6a87 	vmul.f32	s13, s15, s14
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800745a:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	ee07 3a90 	vmov	s15, r3
}
 8007464:	eeb0 0a67 	vmov.f32	s0, s15
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	49742400 	.word	0x49742400

08007478 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8007478:	b480      	push	{r7}
 800747a:	b08b      	sub	sp, #44	@ 0x2c
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8007484:	89fb      	ldrh	r3, [r7, #14]
 8007486:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800748a:	d902      	bls.n	8007492 <calc_res_heat+0x1a>
    {
        temp = 400;
 800748c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007490:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074a0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80074a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074a8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80075bc <calc_res_heat+0x144>
 80074ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074c2:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80075c0 <calc_res_heat+0x148>
 80074c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074ca:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80075c4 <calc_res_heat+0x14c>
 80074ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074d2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80075c8 <calc_res_heat+0x150>
 80074d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074da:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80075cc <calc_res_heat+0x154>
 80074f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074f4:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 80074f8:	89fb      	ldrh	r3, [r7, #14]
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007502:	edd7 7a08 	vldr	s15, [r7, #32]
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800750e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007512:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800752c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007534:	ed97 7a06 	vldr	s14, [r7, #24]
 8007538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800753c:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8007552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007556:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800755a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007562:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007574:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80075d0 <calc_res_heat+0x158>
 8007578:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800757c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007580:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007584:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007588:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800758c:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007590:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8007594:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8007598:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80075d4 <calc_res_heat+0x15c>
 800759c:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80075a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80075a8:	793b      	ldrb	r3, [r7, #4]
 80075aa:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80075ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	372c      	adds	r7, #44	@ 0x2c
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	42440000 	.word	0x42440000
 80075c0:	47000000 	.word	0x47000000
 80075c4:	3a03126f 	.word	0x3a03126f
 80075c8:	3b1a0275 	.word	0x3b1a0275
 80075cc:	44800000 	.word	0x44800000
 80075d0:	3b03126f 	.word	0x3b03126f
 80075d4:	4059999a 	.word	0x4059999a

080075d8 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 80075ec:	d308      	bcc.n	8007600 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 80075ee:	23ff      	movs	r3, #255	@ 0xff
 80075f0:	73bb      	strb	r3, [r7, #14]
 80075f2:	e00f      	b.n	8007614 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	089b      	lsrs	r3, r3, #2
 80075f8:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	3301      	adds	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	2b3f      	cmp	r3, #63	@ 0x3f
 8007604:	d8f6      	bhi.n	80075f4 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	b2da      	uxtb	r2, r3
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	019b      	lsls	r3, r3, #6
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4413      	add	r3, r2
 8007612:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8007614:	7bbb      	ldrb	r3, [r7, #14]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b08e      	sub	sp, #56	@ 0x38
 8007626:	af00      	add	r7, sp, #0
 8007628:	4603      	mov	r3, r0
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	609a      	str	r2, [r3, #8]
 8007646:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8007648:	2305      	movs	r3, #5
 800764a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 800764e:	e11d      	b.n	800788c <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	461a      	mov	r2, r3
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	4413      	add	r3, r2
 8007658:	b2db      	uxtb	r3, r3
 800765a:	331d      	adds	r3, #29
 800765c:	b2d8      	uxtb	r0, r3
 800765e:	f107 0110 	add.w	r1, r7, #16
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2211      	movs	r2, #17
 8007666:	f7fe ff8f 	bl	8006588 <bme68x_get_regs>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 8007676:	23ff      	movs	r3, #255	@ 0xff
 8007678:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 800767c:	e10f      	b.n	800789e <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 800767e:	7c3b      	ldrb	r3, [r7, #16]
 8007680:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007684:	b2da      	uxtb	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 800768a:	7c3b      	ldrb	r3, [r7, #16]
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	b2da      	uxtb	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8007696:	7c7a      	ldrb	r2, [r7, #17]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 800769c:	7cbb      	ldrb	r3, [r7, #18]
 800769e:	031a      	lsls	r2, r3, #12
 80076a0:	7cfb      	ldrb	r3, [r7, #19]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	4313      	orrs	r3, r2
 80076a6:	7d3a      	ldrb	r2, [r7, #20]
 80076a8:	0912      	lsrs	r2, r2, #4
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	4313      	orrs	r3, r2
 80076ae:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80076b0:	7d7b      	ldrb	r3, [r7, #21]
 80076b2:	031a      	lsls	r2, r3, #12
 80076b4:	7dbb      	ldrb	r3, [r7, #22]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	4313      	orrs	r3, r2
 80076ba:	7dfa      	ldrb	r2, [r7, #23]
 80076bc:	0912      	lsrs	r2, r2, #4
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	4313      	orrs	r3, r2
 80076c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80076c4:	7e3b      	ldrb	r3, [r7, #24]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	7e7a      	ldrb	r2, [r7, #25]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80076d0:	7f7b      	ldrb	r3, [r7, #29]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	7fba      	ldrb	r2, [r7, #30]
 80076d8:	0992      	lsrs	r2, r2, #6
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	4313      	orrs	r3, r2
 80076de:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80076e0:	7ffb      	ldrb	r3, [r7, #31]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80076ea:	0992      	lsrs	r2, r2, #6
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	4313      	orrs	r3, r2
 80076f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 80076f2:	7fbb      	ldrb	r3, [r7, #30]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 80076fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d11c      	bne.n	800774a <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b25a      	sxtb	r2, r3
 8007716:	f897 3020 	ldrb.w	r3, [r7, #32]
 800771a:	b25b      	sxtb	r3, r3
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	b25b      	sxtb	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b25b      	sxtb	r3, r3
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b25a      	sxtb	r2, r3
 8007732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007736:	b25b      	sxtb	r3, r3
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	b25b      	sxtb	r3, r3
 800773e:	4313      	orrs	r3, r2
 8007740:	b25b      	sxtb	r3, r3
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e019      	b.n	800777e <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b25a      	sxtb	r2, r3
 8007750:	7fbb      	ldrb	r3, [r7, #30]
 8007752:	b25b      	sxtb	r3, r3
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	b25b      	sxtb	r3, r3
 800775a:	4313      	orrs	r3, r2
 800775c:	b25b      	sxtb	r3, r3
 800775e:	b2da      	uxtb	r2, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b25a      	sxtb	r2, r3
 800776a:	7fbb      	ldrb	r3, [r7, #30]
 800776c:	b25b      	sxtb	r3, r3
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	b25b      	sxtb	r3, r3
 8007774:	4313      	orrs	r3, r2
 8007776:	b25b      	sxtb	r3, r3
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b25b      	sxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	da70      	bge.n	800786a <read_field_data+0x248>
 8007788:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800778c:	2b00      	cmp	r3, #0
 800778e:	d16c      	bne.n	800786a <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	335a      	adds	r3, #90	@ 0x5a
 8007796:	b2d8      	uxtb	r0, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	1cd9      	adds	r1, r3, #3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f7fe fef2 	bl	8006588 <bme68x_get_regs>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 80077aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10c      	bne.n	80077cc <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	3350      	adds	r3, #80	@ 0x50
 80077b8:	b2d8      	uxtb	r0, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f7fe fee1 	bl	8006588 <bme68x_get_regs>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 80077cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10c      	bne.n	80077ee <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	3364      	adds	r3, #100	@ 0x64
 80077da:	b2d8      	uxtb	r0, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	1d59      	adds	r1, r3, #5
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f7fe fed0 	bl	8006588 <bme68x_get_regs>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 80077ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d139      	bne.n	800786a <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077fa:	f7ff facd 	bl	8006d98 <calc_temperature>
 80077fe:	eef0 7a40 	vmov.f32	s15, s0
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	edc3 7a03 	vstr	s15, [r3, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800780c:	f7ff fb4a 	bl	8006ea4 <calc_pressure>
 8007810:	eef0 7a40 	vmov.f32	s15, s0
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	edc3 7a04 	vstr	s15, [r3, #16]
                data->humidity = calc_humidity(adc_hum, dev);
 800781a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff fc82 	bl	8007128 <calc_humidity>
 8007824:	eef0 7a40 	vmov.f32	s15, s0
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	edc3 7a05 	vstr	s15, [r3, #20]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d10c      	bne.n	8007850 <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8007836:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800783a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fde0 	bl	8007404 <calc_gas_resistance_high>
 8007844:	eef0 7a40 	vmov.f32	s15, s0
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	edc3 7a06 	vstr	s15, [r3, #24]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 800784e:	e026      	b.n	800789e <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8007850:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007854:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fd31 	bl	80072c0 <calc_gas_resistance_low>
 800785e:	eef0 7a40 	vmov.f32	s15, s0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	edc3 7a06 	vstr	s15, [r3, #24]
                break;
 8007868:	e019      	b.n	800789e <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 800786a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6852      	ldr	r2, [r2, #4]
 800787a:	4611      	mov	r1, r2
 800787c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8007880:	4798      	blx	r3
        }

        tries--;
 8007882:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007886:	3b01      	subs	r3, #1
 8007888:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 800788c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <read_field_data+0x27c>
 8007894:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007898:	2b00      	cmp	r3, #0
 800789a:	f43f aed9 	beq.w	8007650 <read_field_data+0x2e>
    }

    return rslt;
 800789e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3738      	adds	r7, #56	@ 0x38
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 80078aa:	b590      	push	{r4, r7, lr}
 80078ac:	b09d      	sub	sp, #116	@ 0x74
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80078ba:	2300      	movs	r3, #0
 80078bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80078c2:	222f      	movs	r2, #47	@ 0x2f
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f006 f8a4 	bl	800da14 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80078cc:	2300      	movs	r3, #0
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
 80078e0:	615a      	str	r2, [r3, #20]
 80078e2:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10c      	bne.n	8007906 <read_all_field_data+0x5c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d107      	bne.n	8007906 <read_all_field_data+0x5c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3308      	adds	r3, #8
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8007900:	23ff      	movs	r3, #255	@ 0xff
 8007902:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007906:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 800790e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2233      	movs	r2, #51	@ 0x33
 8007916:	201d      	movs	r0, #29
 8007918:	f7fe fe36 	bl	8006588 <bme68x_get_regs>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007922:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800792a:	f107 0108 	add.w	r1, r7, #8
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	221e      	movs	r2, #30
 8007932:	2050      	movs	r0, #80	@ 0x50
 8007934:	f7fe fe28 	bl	8006588 <bme68x_get_regs>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800793e:	2300      	movs	r3, #0
 8007940:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007944:	e1ce      	b.n	8007ce4 <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8007946:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800794a:	461a      	mov	r2, r3
 800794c:	0112      	lsls	r2, r2, #4
 800794e:	4413      	add	r3, r2
 8007950:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8007954:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007958:	3370      	adds	r3, #112	@ 0x70
 800795a:	443b      	add	r3, r7
 800795c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007960:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	440b      	add	r3, r1
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8007974:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007978:	3370      	adds	r3, #112	@ 0x70
 800797a:	443b      	add	r3, r7
 800797c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007980:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	440b      	add	r3, r1
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f002 020f 	and.w	r2, r2, #15
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8007994:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	440b      	add	r3, r1
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3270      	adds	r2, #112	@ 0x70
 80079a8:	443a      	add	r2, r7
 80079aa:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80079ae:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 80079b0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80079b4:	3302      	adds	r3, #2
 80079b6:	3370      	adds	r3, #112	@ 0x70
 80079b8:	443b      	add	r3, r7
 80079ba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80079be:	031a      	lsls	r2, r3, #12
 80079c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80079c4:	3303      	adds	r3, #3
 80079c6:	3370      	adds	r3, #112	@ 0x70
 80079c8:	443b      	add	r3, r7
 80079ca:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80079d2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80079d6:	3204      	adds	r2, #4
 80079d8:	3270      	adds	r2, #112	@ 0x70
 80079da:	443a      	add	r2, r7
 80079dc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80079e0:	0912      	lsrs	r2, r2, #4
 80079e2:	b2d2      	uxtb	r2, r2
        adc_pres =
 80079e4:	4313      	orrs	r3, r2
 80079e6:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 80079e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80079ec:	3305      	adds	r3, #5
 80079ee:	3370      	adds	r3, #112	@ 0x70
 80079f0:	443b      	add	r3, r7
 80079f2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80079f6:	031a      	lsls	r2, r3, #12
 80079f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80079fc:	3306      	adds	r3, #6
 80079fe:	3370      	adds	r3, #112	@ 0x70
 8007a00:	443b      	add	r3, r7
 8007a02:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8007a0a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007a0e:	3207      	adds	r2, #7
 8007a10:	3270      	adds	r2, #112	@ 0x70
 8007a12:	443a      	add	r2, r7
 8007a14:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007a18:	0912      	lsrs	r2, r2, #4
 8007a1a:	b2d2      	uxtb	r2, r2
        adc_temp =
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8007a20:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007a24:	3308      	adds	r3, #8
 8007a26:	3370      	adds	r3, #112	@ 0x70
 8007a28:	443b      	add	r3, r7
 8007a2a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007a36:	3209      	adds	r2, #9
 8007a38:	3270      	adds	r2, #112	@ 0x70
 8007a3a:	443a      	add	r2, r7
 8007a3c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8007a46:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007a4a:	330d      	adds	r3, #13
 8007a4c:	3370      	adds	r3, #112	@ 0x70
 8007a4e:	443b      	add	r3, r7
 8007a50:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007a5c:	320e      	adds	r2, #14
 8007a5e:	3270      	adds	r2, #112	@ 0x70
 8007a60:	443a      	add	r2, r7
 8007a62:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007a66:	0992      	lsrs	r2, r2, #6
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8007a70:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007a74:	330f      	adds	r3, #15
 8007a76:	3370      	adds	r3, #112	@ 0x70
 8007a78:	443b      	add	r3, r7
 8007a7a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007a86:	3210      	adds	r2, #16
 8007a88:	3270      	adds	r2, #112	@ 0x70
 8007a8a:	443a      	add	r2, r7
 8007a8c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007a90:	0992      	lsrs	r2, r2, #6
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8007a9a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007a9e:	330e      	adds	r3, #14
 8007aa0:	3370      	adds	r3, #112	@ 0x70
 8007aa2:	443b      	add	r3, r7
 8007aa4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8007ab0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	3370      	adds	r3, #112	@ 0x70
 8007ab8:	443b      	add	r3, r7
 8007aba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d13a      	bne.n	8007b44 <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8007ace:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	b25a      	sxtb	r2, r3
 8007ade:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	3370      	adds	r3, #112	@ 0x70
 8007ae6:	443b      	add	r3, r7
 8007ae8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b259      	sxtb	r1, r3
 8007af8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	b2ca      	uxtb	r2, r1
 8007b06:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8007b08:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b25a      	sxtb	r2, r3
 8007b18:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	3370      	adds	r3, #112	@ 0x70
 8007b20:	443b      	add	r3, r7
 8007b22:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b259      	sxtb	r1, r3
 8007b32:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	b2ca      	uxtb	r2, r1
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e039      	b.n	8007bb8 <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8007b44:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b25a      	sxtb	r2, r3
 8007b54:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007b58:	330e      	adds	r3, #14
 8007b5a:	3370      	adds	r3, #112	@ 0x70
 8007b5c:	443b      	add	r3, r7
 8007b5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	b25b      	sxtb	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b259      	sxtb	r1, r3
 8007b6e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	b2ca      	uxtb	r2, r1
 8007b7c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8007b7e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b25a      	sxtb	r2, r3
 8007b8e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007b92:	330e      	adds	r3, #14
 8007b94:	3370      	adds	r3, #112	@ 0x70
 8007b96:	443b      	add	r3, r7
 8007b98:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	b25b      	sxtb	r3, r3
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	b259      	sxtb	r1, r3
 8007ba8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	b2ca      	uxtb	r2, r1
 8007bb6:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8007bb8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8007bd8:	443a      	add	r2, r7
 8007bda:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007bde:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8007be0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	f103 020a 	add.w	r2, r3, #10
 8007bf2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	440b      	add	r3, r1
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3270      	adds	r2, #112	@ 0x70
 8007c00:	443a      	add	r2, r7
 8007c02:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007c06:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8007c08:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	f103 0214 	add.w	r2, r3, #20
 8007c1a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	440b      	add	r3, r1
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3270      	adds	r2, #112	@ 0x70
 8007c28:	443a      	add	r2, r7
 8007c2a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007c2e:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8007c30:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4413      	add	r3, r2
 8007c3a:	681c      	ldr	r4, [r3, #0]
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007c40:	f7ff f8aa 	bl	8006d98 <calc_temperature>
 8007c44:	eef0 7a40 	vmov.f32	s15, s0
 8007c48:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8007c4c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	681c      	ldr	r4, [r3, #0]
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007c5c:	f7ff f922 	bl	8006ea4 <calc_pressure>
 8007c60:	eef0 7a40 	vmov.f32	s15, s0
 8007c64:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8007c68:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	681c      	ldr	r4, [r3, #0]
 8007c74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fa54 	bl	8007128 <calc_humidity>
 8007c80:	eef0 7a40 	vmov.f32	s15, s0
 8007c84:	edc4 7a05 	vstr	s15, [r4, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d112      	bne.n	8007cb6 <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8007c90:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	681c      	ldr	r4, [r3, #0]
 8007c9c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8007ca0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fbac 	bl	8007404 <calc_gas_resistance_high>
 8007cac:	eef0 7a40 	vmov.f32	s15, s0
 8007cb0:	edc4 7a06 	vstr	s15, [r4, #24]
 8007cb4:	e011      	b.n	8007cda <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8007cb6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	681c      	ldr	r4, [r3, #0]
 8007cc2:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 8007cc6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff faf7 	bl	80072c0 <calc_gas_resistance_low>
 8007cd2:	eef0 7a40 	vmov.f32	s15, s0
 8007cd6:	edc4 7a06 	vstr	s15, [r4, #24]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007cda:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007ce4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d804      	bhi.n	8007cf6 <read_all_field_data+0x44c>
 8007cec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f43f ae28 	beq.w	8007946 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8007cf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3774      	adds	r7, #116	@ 0x74
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}

08007d02 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8007d02:	b590      	push	{r4, r7, lr}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	4603      	mov	r3, r0
 8007d0a:	6039      	str	r1, [r7, #0]
 8007d0c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	f000 f8b8 	bl	8007e84 <null_ptr_check>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8007d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d14f      	bne.n	8007dc0 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8007d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	da02      	bge.n	8007d2e <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73bb      	strb	r3, [r7, #14]
 8007d2c:	e001      	b.n	8007d32 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 8007d2e:	2310      	movs	r3, #16
 8007d30:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	7b5b      	ldrb	r3, [r3, #13]
 8007d36:	7bba      	ldrb	r2, [r7, #14]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d041      	beq.n	8007dc0 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	7bba      	ldrb	r2, [r7, #14]
 8007d40:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f107 010d 	add.w	r1, r7, #13
 8007d4e:	2201      	movs	r2, #1
 8007d50:	20f3      	movs	r0, #243	@ 0xf3
 8007d52:	47a0      	blx	r4
 8007d54:	4603      	mov	r3, r0
 8007d56:	461a      	mov	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8007d68:	23fe      	movs	r3, #254	@ 0xfe
 8007d6a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 8007d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d125      	bne.n	8007dc0 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8007d74:	7b7b      	ldrb	r3, [r7, #13]
 8007d76:	f023 0310 	bic.w	r3, r3, #16
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	7b5b      	ldrb	r3, [r3, #13]
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	b25a      	sxtb	r2, r3
 8007d8a:	7b7b      	ldrb	r3, [r7, #13]
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f107 010d 	add.w	r1, r7, #13
 8007da2:	2201      	movs	r2, #1
 8007da4:	2073      	movs	r0, #115	@ 0x73
 8007da6:	47a0      	blx	r4
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8007dbc:	23fe      	movs	r3, #254	@ 0xfe
 8007dbe:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8007dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd90      	pop	{r4, r7, pc}

08007dcc <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8007dcc:	b590      	push	{r4, r7, lr}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f855 	bl	8007e84 <null_ptr_check>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8007dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d11b      	bne.n	8007e1e <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f107 010e 	add.w	r1, r7, #14
 8007df2:	2201      	movs	r2, #1
 8007df4:	20f3      	movs	r0, #243	@ 0xf3
 8007df6:	47a0      	blx	r4
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8007e0c:	23fe      	movs	r3, #254	@ 0xfe
 8007e0e:	73fb      	strb	r3, [r7, #15]
 8007e10:	e005      	b.n	8007e1e <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8007e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd90      	pop	{r4, r7, pc}

08007e2a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	460b      	mov	r3, r1
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f823 	bl	8007e84 <null_ptr_check>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <boundary_check+0x4a>
 8007e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d111      	bne.n	8007e74 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	7afa      	ldrb	r2, [r7, #11]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d20e      	bcs.n	8007e78 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	7afa      	ldrb	r2, [r7, #11]
 8007e5e:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 8007e72:	e001      	b.n	8007e78 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8007e74:	23ff      	movs	r3, #255	@ 0xff
 8007e76:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <null_ptr_check+0x2a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <null_ptr_check+0x2a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <null_ptr_check+0x2a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8007eae:	23ff      	movs	r3, #255	@ 0xff
 8007eb0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8007ec4:	b590      	push	{r4, r7, lr}
 8007ec6:	b093      	sub	sp, #76	@ 0x4c
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8007ee0:	236e      	movs	r3, #110	@ 0x6e
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8007ee6:	4aa1      	ldr	r2, [pc, #644]	@ (800816c <set_conf+0x2a8>)
 8007ee8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eee:	c303      	stmia	r3!, {r0, r1}
 8007ef0:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8007ef2:	4a9e      	ldr	r2, [pc, #632]	@ (800816c <set_conf+0x2a8>)
 8007ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007efa:	c303      	stmia	r3!, {r0, r1}
 8007efc:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8007efe:	4a9b      	ldr	r2, [pc, #620]	@ (800816c <set_conf+0x2a8>)
 8007f00:	f107 0320 	add.w	r3, r7, #32
 8007f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f06:	c303      	stmia	r3!, {r0, r1}
 8007f08:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8007f0a:	4a98      	ldr	r2, [pc, #608]	@ (800816c <set_conf+0x2a8>)
 8007f0c:	f107 0314 	add.w	r3, r7, #20
 8007f10:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f12:	c303      	stmia	r3!, {r0, r1}
 8007f14:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d024      	beq.n	8007f66 <set_conf+0xa2>
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	f300 80f9 	bgt.w	8008114 <set_conf+0x250>
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d002      	beq.n	8007f2c <set_conf+0x68>
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d07c      	beq.n	8008024 <set_conf+0x160>
 8007f2a:	e0f3      	b.n	8008114 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8007f2c:	235a      	movs	r3, #90	@ 0x5a
 8007f2e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff fa9d 	bl	8007478 <calc_res_heat>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8007f44:	2364      	movs	r3, #100	@ 0x64
 8007f46:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	889b      	ldrh	r3, [r3, #4]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fb42 	bl	80075d8 <calc_gas_wait>
 8007f54:	4603      	mov	r3, r0
 8007f56:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8007f64:	e0db      	b.n	800811e <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <set_conf+0xb2>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8007f76:	23ff      	movs	r3, #255	@ 0xff
 8007f78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8007f7c:	e0cf      	b.n	800811e <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8007f84:	e03f      	b.n	8008006 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8007f86:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007f8a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007f8e:	325a      	adds	r2, #90	@ 0x5a
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	3348      	adds	r3, #72	@ 0x48
 8007f94:	443b      	add	r3, r7
 8007f96:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	4413      	add	r3, r2
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff fa62 	bl	8007478 <calc_res_heat>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8007fbc:	443b      	add	r3, r7
 8007fbe:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8007fc2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007fc6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007fca:	3264      	adds	r2, #100	@ 0x64
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	3348      	adds	r3, #72	@ 0x48
 8007fd0:	443b      	add	r3, r7
 8007fd2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff faf5 	bl	80075d8 <calc_gas_wait>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8007ff6:	443b      	add	r3, r7
 8007ff8:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8007ffc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008000:	3301      	adds	r3, #1
 8008002:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	7c1b      	ldrb	r3, [r3, #16]
 800800a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800800e:	429a      	cmp	r2, r3
 8008010:	d3b9      	bcc.n	8007f86 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	7c1a      	ldrb	r2, [r3, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	7c1b      	ldrb	r3, [r3, #16]
 800801e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8008022:	e07c      	b.n	800811e <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <set_conf+0x170>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8008034:	23ff      	movs	r3, #255	@ 0xff
 8008036:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 800803a:	e070      	b.n	800811e <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8a5b      	ldrh	r3, [r3, #18]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8008044:	2303      	movs	r3, #3
 8008046:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 800804a:	2300      	movs	r3, #0
 800804c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008050:	e03a      	b.n	80080c8 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8008052:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008056:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800805a:	325a      	adds	r2, #90	@ 0x5a
 800805c:	b2d2      	uxtb	r2, r2
 800805e:	3348      	adds	r3, #72	@ 0x48
 8008060:	443b      	add	r3, r7
 8008062:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff f9fc 	bl	8007478 <calc_res_heat>
 8008080:	4603      	mov	r3, r0
 8008082:	461a      	mov	r2, r3
 8008084:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8008088:	443b      	add	r3, r7
 800808a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800808e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008092:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008096:	3264      	adds	r2, #100	@ 0x64
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	3348      	adds	r3, #72	@ 0x48
 800809c:	443b      	add	r3, r7
 800809e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	4413      	add	r3, r2
 80080ae:	881a      	ldrh	r2, [r3, #0]
 80080b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	3348      	adds	r3, #72	@ 0x48
 80080b8:	443b      	add	r3, r7
 80080ba:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 80080be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80080c2:	3301      	adds	r3, #1
 80080c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	7c1b      	ldrb	r3, [r3, #16]
 80080cc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d3be      	bcc.n	8008052 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	7c1a      	ldrb	r2, [r3, #16]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8a5b      	ldrh	r3, [r3, #18]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f841 	bl	8008170 <calc_heatr_dur_shared>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 80080f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10f      	bne.n	800811c <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 80080fc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8008100:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2201      	movs	r2, #1
 8008108:	f7fe f9ae 	bl	8006468 <bme68x_set_regs>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8008112:	e003      	b.n	800811c <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8008114:	2301      	movs	r3, #1
 8008116:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800811a:	e000      	b.n	800811e <set_conf+0x25a>
            break;
 800811c:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 800811e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10b      	bne.n	800813e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8008126:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800812a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800812e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f7fe f998 	bl	8006468 <bme68x_set_regs>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 800813e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8008146:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800814a:	f107 0114 	add.w	r1, r7, #20
 800814e:	f107 0020 	add.w	r0, r7, #32
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	f7fe f988 	bl	8006468 <bme68x_set_regs>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 800815e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8008162:	4618      	mov	r0, r3
 8008164:	374c      	adds	r7, #76	@ 0x4c
 8008166:	46bd      	mov	sp, r7
 8008168:	bd90      	pop	{r4, r7, pc}
 800816a:	bf00      	nop
 800816c:	0800db30 	.word	0x0800db30

08008170 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 800817e:	88fb      	ldrh	r3, [r7, #6]
 8008180:	f240 7282 	movw	r2, #1922	@ 0x782
 8008184:	4293      	cmp	r3, r2
 8008186:	d902      	bls.n	800818e <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8008188:	23ff      	movs	r3, #255	@ 0xff
 800818a:	73bb      	strb	r3, [r7, #14]
 800818c:	e01d      	b.n	80081ca <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008194:	fb03 f202 	mul.w	r2, r3, r2
 8008198:	4b0f      	ldr	r3, [pc, #60]	@ (80081d8 <calc_heatr_dur_shared+0x68>)
 800819a:	fba3 1302 	umull	r1, r3, r3, r2
 800819e:	1ad2      	subs	r2, r2, r3
 80081a0:	0852      	lsrs	r2, r2, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 80081a8:	e005      	b.n	80081b6 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	089b      	lsrs	r3, r3, #2
 80081ae:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	3301      	adds	r3, #1
 80081b4:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80081ba:	d8f6      	bhi.n	80081aa <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	019b      	lsls	r3, r3, #6
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4413      	add	r3, r2
 80081c8:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	12c8b89f 	.word	0x12c8b89f

080081dc <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	603a      	str	r2, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	460b      	mov	r3, r1
 80081ea:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	4413      	add	r3, r2
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	789b      	ldrb	r3, [r3, #2]
 80081f8:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80081fa:	79bb      	ldrb	r3, [r7, #6]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	4413      	add	r3, r2
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	789b      	ldrb	r3, [r3, #2]
 8008206:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	4413      	add	r3, r2
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b25b      	sxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	da21      	bge.n	800825e <sort_sensor_data+0x82>
 800821a:	79bb      	ldrb	r3, [r7, #6]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4413      	add	r3, r2
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	b25b      	sxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	da18      	bge.n	800825e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 800822c:	89ba      	ldrh	r2, [r7, #12]
 800822e:	89fb      	ldrh	r3, [r7, #14]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	b29b      	uxth	r3, r3
 8008234:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8008236:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800823a:	f113 0f02 	cmn.w	r3, #2
 800823e:	db03      	blt.n	8008248 <sort_sensor_data+0x6c>
 8008240:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008244:	2b00      	cmp	r3, #0
 8008246:	db03      	blt.n	8008250 <sort_sensor_data+0x74>
 8008248:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800824c:	2b02      	cmp	r3, #2
 800824e:	dd16      	ble.n	800827e <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8008250:	79b9      	ldrb	r1, [r7, #6]
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f816 	bl	8008288 <swap_fields>
    {
 800825c:	e00f      	b.n	800827e <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800825e:	79bb      	ldrb	r3, [r7, #6]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4413      	add	r3, r2
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	b25b      	sxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	da07      	bge.n	8008280 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8008270:	79b9      	ldrb	r1, [r7, #6]
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f806 	bl	8008288 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 800827c:	e000      	b.n	8008280 <sort_sensor_data+0xa4>
    {
 800827e:	bf00      	nop
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	603a      	str	r2, [r7, #0]
 8008292:	71fb      	strb	r3, [r7, #7]
 8008294:	460b      	mov	r3, r1
 8008296:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	4413      	add	r3, r2
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 80082a4:	79bb      	ldrb	r3, [r7, #6]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	441a      	add	r2, r3
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	440b      	add	r3, r1
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 80082b8:	79bb      	ldrb	r3, [r7, #6]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	4413      	add	r3, r2
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08e      	sub	sp, #56	@ 0x38
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 80082d8:	f107 010c 	add.w	r1, r7, #12
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2217      	movs	r2, #23
 80082e0:	208a      	movs	r0, #138	@ 0x8a
 80082e2:	f7fe f951 	bl	8006588 <bme68x_get_regs>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 80082ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10b      	bne.n	800830c <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 80082f4:	f107 030c 	add.w	r3, r7, #12
 80082f8:	f103 0117 	add.w	r1, r3, #23
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	220e      	movs	r2, #14
 8008300:	20e1      	movs	r0, #225	@ 0xe1
 8008302:	f7fe f941 	bl	8006588 <bme68x_get_regs>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 800830c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10b      	bne.n	800832c <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2205      	movs	r2, #5
 8008320:	2000      	movs	r0, #0
 8008322:	f7fe f931 	bl	8006588 <bme68x_get_regs>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 800832c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 80cb 	bne.w	80084cc <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8008336:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	b21a      	sxth	r2, r3
 800833e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008342:	b21b      	sxth	r3, r3
 8008344:	4313      	orrs	r3, r2
 8008346:	b21b      	sxth	r3, r3
 8008348:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 800834e:	7b7b      	ldrb	r3, [r7, #13]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	b21a      	sxth	r2, r3
 8008354:	7b3b      	ldrb	r3, [r7, #12]
 8008356:	b21b      	sxth	r3, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	b25a      	sxtb	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800836a:	7c7b      	ldrb	r3, [r7, #17]
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	b21a      	sxth	r2, r3
 8008370:	7c3b      	ldrb	r3, [r7, #16]
 8008372:	b21b      	sxth	r3, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	b21b      	sxth	r3, r3
 8008378:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 800837e:	7cfb      	ldrb	r3, [r7, #19]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	b21a      	sxth	r2, r3
 8008384:	7cbb      	ldrb	r3, [r7, #18]
 8008386:	b21b      	sxth	r3, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8008390:	7d3b      	ldrb	r3, [r7, #20]
 8008392:	b25a      	sxtb	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	021b      	lsls	r3, r3, #8
 800839e:	b21a      	sxth	r2, r3
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
 80083a2:	b21b      	sxth	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 80083ac:	7e7b      	ldrb	r3, [r7, #25]
 80083ae:	021b      	lsls	r3, r3, #8
 80083b0:	b21a      	sxth	r2, r3
 80083b2:	7e3b      	ldrb	r3, [r7, #24]
 80083b4:	b21b      	sxth	r3, r3
 80083b6:	4313      	orrs	r3, r2
 80083b8:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80083be:	7efb      	ldrb	r3, [r7, #27]
 80083c0:	b25a      	sxtb	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80083c8:	7ebb      	ldrb	r3, [r7, #26]
 80083ca:	b25a      	sxtb	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80083d2:	7ffb      	ldrb	r3, [r7, #31]
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	b21a      	sxth	r2, r3
 80083d8:	7fbb      	ldrb	r3, [r7, #30]
 80083da:	b21b      	sxth	r3, r3
 80083dc:	4313      	orrs	r3, r2
 80083de:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 80083e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	b21a      	sxth	r2, r3
 80083ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083f0:	b21b      	sxth	r3, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 80083fa:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008404:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 800840c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008410:	b21b      	sxth	r3, r3
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008418:	4313      	orrs	r3, r2
 800841a:	b21b      	sxth	r3, r3
 800841c:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8008422:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	b21a      	sxth	r2, r3
 800842a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800842e:	091b      	lsrs	r3, r3, #4
 8008430:	b2db      	uxtb	r3, r3
 8008432:	b21b      	sxth	r3, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	b21b      	sxth	r3, r3
 8008438:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 800843e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008442:	b25a      	sxtb	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8008448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800844c:	b25a      	sxtb	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8008452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008456:	b25a      	sxtb	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 800845c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8008464:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008468:	b25a      	sxtb	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 800846e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008472:	b25a      	sxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8008478:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	b21a      	sxth	r2, r3
 8008480:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008484:	b21b      	sxth	r3, r3
 8008486:	4313      	orrs	r3, r2
 8008488:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 800848e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008492:	b25a      	sxtb	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8008498:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800849c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da00      	bge.n	80084a6 <get_calib_data+0x1d6>
 80084a4:	330f      	adds	r3, #15
 80084a6:	111b      	asrs	r3, r3, #4
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80084b0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80084b4:	b25a      	sxtb	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80084bc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80084c0:	b25b      	sxtb	r3, r3
 80084c2:	111b      	asrs	r3, r3, #4
 80084c4:	b25a      	sxtb	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 80084cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3738      	adds	r7, #56	@ 0x38
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 80084e4:	f107 010e 	add.w	r1, r7, #14
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	20f0      	movs	r0, #240	@ 0xf0
 80084ee:	f7fe f84b 	bl	8006588 <bme68x_get_regs>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 80084f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d103      	bne.n	8008506 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	461a      	mov	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8008506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <bme68x_start>:


volatile uint8_t err_code_2;

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 800851e:	2254      	movs	r2, #84	@ 0x54
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	4820      	ldr	r0, [pc, #128]	@ (80085a4 <bme68x_start+0x90>)
 8008524:	f005 faa2 	bl	800da6c <memcpy>

	// Init.
	//TODO: bme mal init ici ........!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	err_code_2 = bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8008528:	2101      	movs	r1, #1
 800852a:	481f      	ldr	r0, [pc, #124]	@ (80085a8 <bme68x_start+0x94>)
 800852c:	f000 f8f0 	bl	8008710 <bme68x_interface_init>
 8008530:	4603      	mov	r3, r0
 8008532:	b2da      	uxtb	r2, r3
 8008534:	4b1d      	ldr	r3, [pc, #116]	@ (80085ac <bme68x_start+0x98>)
 8008536:	701a      	strb	r2, [r3, #0]
	bme68x_init(&bme);
 8008538:	481b      	ldr	r0, [pc, #108]	@ (80085a8 <bme68x_start+0x94>)
 800853a:	f7fd ff61 	bl	8006400 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 800853e:	4a1c      	ldr	r2, [pc, #112]	@ (80085b0 <bme68x_start+0x9c>)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8008544:	4b1b      	ldr	r3, [pc, #108]	@ (80085b4 <bme68x_start+0xa0>)
 8008546:	2202      	movs	r2, #2
 8008548:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 800854a:	4b1a      	ldr	r3, [pc, #104]	@ (80085b4 <bme68x_start+0xa0>)
 800854c:	2208      	movs	r2, #8
 800854e:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8008550:	4b18      	ldr	r3, [pc, #96]	@ (80085b4 <bme68x_start+0xa0>)
 8008552:	2202      	movs	r2, #2
 8008554:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8008556:	4b17      	ldr	r3, [pc, #92]	@ (80085b4 <bme68x_start+0xa0>)
 8008558:	2203      	movs	r2, #3
 800855a:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 800855c:	4b15      	ldr	r3, [pc, #84]	@ (80085b4 <bme68x_start+0xa0>)
 800855e:	2204      	movs	r2, #4
 8008560:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8008562:	4911      	ldr	r1, [pc, #68]	@ (80085a8 <bme68x_start+0x94>)
 8008564:	4813      	ldr	r0, [pc, #76]	@ (80085b4 <bme68x_start+0xa0>)
 8008566:	f7fe f897 	bl	8006698 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 800856a:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <bme68x_start+0xa4>)
 800856c:	2201      	movs	r2, #1
 800856e:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8008570:	4b11      	ldr	r3, [pc, #68]	@ (80085b8 <bme68x_start+0xa4>)
 8008572:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8008576:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8008578:	4b0f      	ldr	r3, [pc, #60]	@ (80085b8 <bme68x_start+0xa4>)
 800857a:	2296      	movs	r2, #150	@ 0x96
 800857c:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 800857e:	4a0a      	ldr	r2, [pc, #40]	@ (80085a8 <bme68x_start+0x94>)
 8008580:	490d      	ldr	r1, [pc, #52]	@ (80085b8 <bme68x_start+0xa4>)
 8008582:	2001      	movs	r0, #1
 8008584:	f7fe fb80 	bl	8006c88 <bme68x_set_heatr_conf>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <bme68x_start+0xa8>)
 800858e:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8008590:	f000 f908 	bl	80087a4 <bme68x_GetGasReference>

	return rslt;
 8008594:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <bme68x_start+0xa8>)
 8008596:	f993 3000 	ldrsb.w	r3, [r3]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200004ac 	.word	0x200004ac
 80085a8:	20000500 	.word	0x20000500
 80085ac:	20000585 	.word	0x20000585
 80085b0:	20000550 	.word	0x20000550
 80085b4:	20000558 	.word	0x20000558
 80085b8:	20000560 	.word	0x20000560
 80085bc:	20000554 	.word	0x20000554

080085c0 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80085c8:	4916      	ldr	r1, [pc, #88]	@ (8008624 <bme68x_single_measure+0x64>)
 80085ca:	2001      	movs	r0, #1
 80085cc:	f7fe f968 	bl	80068a0 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 80085d0:	4a14      	ldr	r2, [pc, #80]	@ (8008624 <bme68x_single_measure+0x64>)
 80085d2:	4915      	ldr	r1, [pc, #84]	@ (8008628 <bme68x_single_measure+0x68>)
 80085d4:	2001      	movs	r0, #1
 80085d6:	f7fe f9e5 	bl	80069a4 <bme68x_get_meas_dur>
 80085da:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 80085dc:	4a13      	ldr	r2, [pc, #76]	@ (800862c <bme68x_single_measure+0x6c>)
 80085de:	8892      	ldrh	r2, [r2, #4]
 80085e0:	4611      	mov	r1, r2
 80085e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085e6:	fb01 f202 	mul.w	r2, r1, r2
 80085ea:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 80085ec:	4a10      	ldr	r2, [pc, #64]	@ (8008630 <bme68x_single_measure+0x70>)
 80085ee:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000); // modification pour la compatibilite stack lora
 80085f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008630 <bme68x_single_measure+0x70>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008634 <bme68x_single_measure+0x74>)
 80085f6:	fba2 2303 	umull	r2, r3, r2, r3
 80085fa:	099b      	lsrs	r3, r3, #6
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fb41 	bl	8008c84 <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8008602:	4b08      	ldr	r3, [pc, #32]	@ (8008624 <bme68x_single_measure+0x64>)
 8008604:	4a0c      	ldr	r2, [pc, #48]	@ (8008638 <bme68x_single_measure+0x78>)
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	2001      	movs	r0, #1
 800860a:	f7fe fa3f 	bl	8006a8c <bme68x_get_data>
 800860e:	4603      	mov	r3, r0
 8008610:	461a      	mov	r2, r3
 8008612:	4b0a      	ldr	r3, [pc, #40]	@ (800863c <bme68x_single_measure+0x7c>)
 8008614:	701a      	strb	r2, [r3, #0]
	return rslt;
 8008616:	4b09      	ldr	r3, [pc, #36]	@ (800863c <bme68x_single_measure+0x7c>)
 8008618:	f993 3000 	ldrsb.w	r3, [r3]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000500 	.word	0x20000500
 8008628:	20000558 	.word	0x20000558
 800862c:	20000560 	.word	0x20000560
 8008630:	20000574 	.word	0x20000574
 8008634:	10624dd3 	.word	0x10624dd3
 8008638:	20000578 	.word	0x20000578
 800863c:	20000554 	.word	0x20000554

08008640 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008640:	b580      	push	{r7, lr}
 8008642:	b08a      	sub	sp, #40	@ 0x28
 8008644:	af04      	add	r7, sp, #16
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	b29b      	uxth	r3, r3
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	b299      	uxth	r1, r3
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	b29a      	uxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	b29b      	uxth	r3, r3
 8008666:	200f      	movs	r0, #15
 8008668:	9002      	str	r0, [sp, #8]
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	2301      	movs	r3, #1
 8008672:	4806      	ldr	r0, [pc, #24]	@ (800868c <bme68x_i2c_write+0x4c>)
 8008674:	f002 fa04 	bl	800aa80 <HAL_I2C_Mem_Write>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 800867e:	2300      	movs	r3, #0
 8008680:	e000      	b.n	8008684 <bme68x_i2c_write+0x44>

	return 1;
 8008682:	2301      	movs	r3, #1
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	200004ac 	.word	0x200004ac

08008690 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	@ 0x28
 8008694:	af04      	add	r7, sp, #16
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	b21b      	sxth	r3, r3
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	b21b      	sxth	r3, r3
 80086b2:	b299      	uxth	r1, r3
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	200f      	movs	r0, #15
 80086be:	9002      	str	r0, [sp, #8]
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	2301      	movs	r3, #1
 80086c8:	4806      	ldr	r0, [pc, #24]	@ (80086e4 <bme68x_i2c_read+0x54>)
 80086ca:	f002 faed 	bl	800aca8 <HAL_I2C_Mem_Read>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	e000      	b.n	80086da <bme68x_i2c_read+0x4a>

	return 1;
 80086d8:	2301      	movs	r3, #1
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	200004ac 	.word	0x200004ac

080086e8 <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a05      	ldr	r2, [pc, #20]	@ (800870c <bme68x_delay_us+0x24>)
 80086f6:	fba2 2303 	umull	r2, r3, r2, r3
 80086fa:	099b      	lsrs	r3, r3, #6
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fac1 	bl	8008c84 <HAL_Delay>
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	10624dd3 	.word	0x10624dd3

08008710 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d02c      	beq.n	8008780 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8008726:	4b1a      	ldr	r3, [pc, #104]	@ (8008790 <bme68x_interface_init+0x80>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	b299      	uxth	r1, r3
 800872e:	2305      	movs	r3, #5
 8008730:	2205      	movs	r2, #5
 8008732:	4818      	ldr	r0, [pc, #96]	@ (8008794 <bme68x_interface_init+0x84>)
 8008734:	f002 fbd2 	bl	800aedc <HAL_I2C_IsDeviceReady>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d105      	bne.n	800874a <bme68x_interface_init+0x3a>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d118      	bne.n	800877a <bme68x_interface_init+0x6a>
 8008748:	e004      	b.n	8008754 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 800874a:	23fe      	movs	r3, #254	@ 0xfe
 800874c:	73fb      	strb	r3, [r7, #15]
			return rslt;
 800874e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008752:	e019      	b.n	8008788 <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a10      	ldr	r2, [pc, #64]	@ (8008798 <bme68x_interface_init+0x88>)
 8008758:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a0f      	ldr	r2, [pc, #60]	@ (800879c <bme68x_interface_init+0x8c>)
 800875e:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a0d      	ldr	r2, [pc, #52]	@ (80087a0 <bme68x_interface_init+0x90>)
 800876a:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a08      	ldr	r2, [pc, #32]	@ (8008790 <bme68x_interface_init+0x80>)
 8008770:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	221e      	movs	r2, #30
 8008776:	739a      	strb	r2, [r3, #14]
 8008778:	e004      	b.n	8008784 <bme68x_interface_init+0x74>
			return -2;
 800877a:	f06f 0301 	mvn.w	r3, #1
 800877e:	e003      	b.n	8008788 <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8008780:	23ff      	movs	r3, #255	@ 0xff
 8008782:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8008784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000004 	.word	0x20000004
 8008794:	200004ac 	.word	0x200004ac
 8008798:	08008691 	.word	0x08008691
 800879c:	08008641 	.word	0x08008641
 80087a0:	080086e9 	.word	0x080086e9

080087a4 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 80087aa:	230a      	movs	r3, #10
 80087ac:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 80087ae:	2301      	movs	r3, #1
 80087b0:	607b      	str	r3, [r7, #4]
 80087b2:	e013      	b.n	80087dc <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 80087b4:	4b14      	ldr	r3, [pc, #80]	@ (8008808 <bme68x_GetGasReference+0x64>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff ff01 	bl	80085c0 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 80087be:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <bme68x_GetGasReference+0x64>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80087c6:	4b11      	ldr	r3, [pc, #68]	@ (800880c <bme68x_GetGasReference+0x68>)
 80087c8:	edd3 7a00 	vldr	s15, [r3]
 80087cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087d0:	4b0e      	ldr	r3, [pc, #56]	@ (800880c <bme68x_GetGasReference+0x68>)
 80087d2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3301      	adds	r3, #1
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	dde7      	ble.n	80087b4 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 80087e4:	4b09      	ldr	r3, [pc, #36]	@ (800880c <bme68x_GetGasReference+0x68>)
 80087e6:	edd3 6a00 	vldr	s13, [r3]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f8:	4b04      	ldr	r3, [pc, #16]	@ (800880c <bme68x_GetGasReference+0x68>)
 80087fa:	edc3 7a00 	vstr	s15, [r3]

}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000550 	.word	0x20000550
 800880c:	20000008 	.word	0x20000008

08008810 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8008810:	b5b0      	push	{r4, r5, r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8008816:	4b52      	ldr	r3, [pc, #328]	@ (8008960 <bme68x_GetHumidityScore+0x150>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	edd3 7a05 	vldr	s15, [r3, #20]
 800881e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008964 <bme68x_GetHumidityScore+0x154>
 8008822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882a:	db0e      	blt.n	800884a <bme68x_GetHumidityScore+0x3a>
 800882c:	4b4c      	ldr	r3, [pc, #304]	@ (8008960 <bme68x_GetHumidityScore+0x150>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	edd3 7a05 	vldr	s15, [r3, #20]
 8008834:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8008968 <bme68x_GetHumidityScore+0x158>
 8008838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800883c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008840:	d803      	bhi.n	800884a <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8008842:	4b4a      	ldr	r3, [pc, #296]	@ (800896c <bme68x_GetHumidityScore+0x15c>)
 8008844:	4a4a      	ldr	r2, [pc, #296]	@ (8008970 <bme68x_GetHumidityScore+0x160>)
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	e076      	b.n	8008938 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 800884a:	4b45      	ldr	r3, [pc, #276]	@ (8008960 <bme68x_GetHumidityScore+0x150>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008852:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8008964 <bme68x_GetHumidityScore+0x154>
 8008856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800885a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885e:	d52e      	bpl.n	80088be <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8008860:	4b44      	ldr	r3, [pc, #272]	@ (8008974 <bme68x_GetHumidityScore+0x164>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f7f7 fe17 	bl	8000498 <__aeabi_f2d>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	f04f 0000 	mov.w	r0, #0
 8008872:	4941      	ldr	r1, [pc, #260]	@ (8008978 <bme68x_GetHumidityScore+0x168>)
 8008874:	f7f7 ff92 	bl	800079c <__aeabi_ddiv>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4614      	mov	r4, r2
 800887e:	461d      	mov	r5, r3
 8008880:	4b37      	ldr	r3, [pc, #220]	@ (8008960 <bme68x_GetHumidityScore+0x150>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	4618      	mov	r0, r3
 8008888:	f7f7 fe06 	bl	8000498 <__aeabi_f2d>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f7 fe58 	bl	8000548 <__aeabi_dmul>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4610      	mov	r0, r2
 800889e:	4619      	mov	r1, r3
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	4b35      	ldr	r3, [pc, #212]	@ (800897c <bme68x_GetHumidityScore+0x16c>)
 80088a6:	f7f7 fe4f 	bl	8000548 <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	f7f8 f85b 	bl	800096c <__aeabi_d2f>
 80088b6:	4603      	mov	r3, r0
 80088b8:	4a2c      	ldr	r2, [pc, #176]	@ (800896c <bme68x_GetHumidityScore+0x15c>)
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	e03c      	b.n	8008938 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 80088be:	4b2d      	ldr	r3, [pc, #180]	@ (8008974 <bme68x_GetHumidityScore+0x164>)
 80088c0:	edd3 7a00 	vldr	s15, [r3]
 80088c4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8008980 <bme68x_GetHumidityScore+0x170>
 80088c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088cc:	ee17 0a90 	vmov	r0, s15
 80088d0:	f7f7 fde2 	bl	8000498 <__aeabi_f2d>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	f04f 0000 	mov.w	r0, #0
 80088dc:	4929      	ldr	r1, [pc, #164]	@ (8008984 <bme68x_GetHumidityScore+0x174>)
 80088de:	f7f7 ff5d 	bl	800079c <__aeabi_ddiv>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4614      	mov	r4, r2
 80088e8:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 80088ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008960 <bme68x_GetHumidityScore+0x150>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f7 fdd1 	bl	8000498 <__aeabi_f2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7f7 fe23 	bl	8000548 <__aeabi_dmul>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	a313      	add	r3, pc, #76	@ (adr r3, 8008958 <bme68x_GetHumidityScore+0x148>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fc64 	bl	80001dc <__adddf3>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4610      	mov	r0, r2
 800891a:	4619      	mov	r1, r3
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	4b16      	ldr	r3, [pc, #88]	@ (800897c <bme68x_GetHumidityScore+0x16c>)
 8008922:	f7f7 fe11 	bl	8000548 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	f7f8 f81d 	bl	800096c <__aeabi_d2f>
 8008932:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008934:	4a0d      	ldr	r2, [pc, #52]	@ (800896c <bme68x_GetHumidityScore+0x15c>)
 8008936:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8008938:	4b0c      	ldr	r3, [pc, #48]	@ (800896c <bme68x_GetHumidityScore+0x15c>)
 800893a:	edd3 7a00 	vldr	s15, [r3]
 800893e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008942:	edc7 7a01 	vstr	s15, [r7, #4]
 8008946:	793b      	ldrb	r3, [r7, #4]
 8008948:	b25b      	sxtb	r3, r3
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bdb0      	pop	{r4, r5, r7, pc}
 8008952:	bf00      	nop
 8008954:	f3af 8000 	nop.w
 8008958:	ded6ba8c 	.word	0xded6ba8c
 800895c:	3fdaaaa7 	.word	0x3fdaaaa7
 8008960:	20000550 	.word	0x20000550
 8008964:	42180000 	.word	0x42180000
 8008968:	42280000 	.word	0x42280000
 800896c:	2000057c 	.word	0x2000057c
 8008970:	41c80000 	.word	0x41c80000
 8008974:	2000000c 	.word	0x2000000c
 8008978:	3fd00000 	.word	0x3fd00000
 800897c:	40590000 	.word	0x40590000
 8008980:	42c80000 	.word	0x42c80000
 8008984:	bfd00000 	.word	0xbfd00000

08008988 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 8008988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008990:	4b42      	ldr	r3, [pc, #264]	@ (8008a9c <bme68x_GetGasScore+0x114>)
 8008992:	ed93 7a00 	vldr	s14, [r3]
 8008996:	4b42      	ldr	r3, [pc, #264]	@ (8008aa0 <bme68x_GetGasScore+0x118>)
 8008998:	edd3 7a00 	vldr	s15, [r3]
 800899c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089a0:	ee17 0a90 	vmov	r0, s15
 80089a4:	f7f7 fd78 	bl	8000498 <__aeabi_f2d>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	f04f 0000 	mov.w	r0, #0
 80089b0:	493c      	ldr	r1, [pc, #240]	@ (8008aa4 <bme68x_GetGasScore+0x11c>)
 80089b2:	f7f7 fef3 	bl	800079c <__aeabi_ddiv>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4614      	mov	r4, r2
 80089bc:	461d      	mov	r5, r3
 80089be:	4b3a      	ldr	r3, [pc, #232]	@ (8008aa8 <bme68x_GetGasScore+0x120>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7f7 fd68 	bl	8000498 <__aeabi_f2d>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f7 fdba 	bl	8000548 <__aeabi_dmul>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4690      	mov	r8, r2
 80089da:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 80089dc:	4b30      	ldr	r3, [pc, #192]	@ (8008aa0 <bme68x_GetGasScore+0x118>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f7 fd59 	bl	8000498 <__aeabi_f2d>
 80089e6:	4604      	mov	r4, r0
 80089e8:	460d      	mov	r5, r1
 80089ea:	4b2c      	ldr	r3, [pc, #176]	@ (8008a9c <bme68x_GetGasScore+0x114>)
 80089ec:	ed93 7a00 	vldr	s14, [r3]
 80089f0:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa0 <bme68x_GetGasScore+0x118>)
 80089f2:	edd3 7a00 	vldr	s15, [r3]
 80089f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089fa:	ee17 0a90 	vmov	r0, s15
 80089fe:	f7f7 fd4b 	bl	8000498 <__aeabi_f2d>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	f04f 0000 	mov.w	r0, #0
 8008a0a:	4926      	ldr	r1, [pc, #152]	@ (8008aa4 <bme68x_GetGasScore+0x11c>)
 8008a0c:	f7f7 fec6 	bl	800079c <__aeabi_ddiv>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f7 fd96 	bl	8000548 <__aeabi_dmul>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4640      	mov	r0, r8
 8008a22:	4649      	mov	r1, r9
 8008a24:	f7f7 fbd8 	bl	80001d8 <__aeabi_dsub>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4619      	mov	r1, r3
			* 100.00;
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	4b1d      	ldr	r3, [pc, #116]	@ (8008aac <bme68x_GetGasScore+0x124>)
 8008a36:	f7f7 fd87 	bl	8000548 <__aeabi_dmul>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4610      	mov	r0, r2
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7f7 ff93 	bl	800096c <__aeabi_d2f>
 8008a46:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008a48:	4a19      	ldr	r2, [pc, #100]	@ (8008ab0 <bme68x_GetGasScore+0x128>)
 8008a4a:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8008a4c:	4b18      	ldr	r3, [pc, #96]	@ (8008ab0 <bme68x_GetGasScore+0x128>)
 8008a4e:	edd3 7a00 	vldr	s15, [r3]
 8008a52:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008ab4 <bme68x_GetGasScore+0x12c>
 8008a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5e:	dd02      	ble.n	8008a66 <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8008a60:	4b13      	ldr	r3, [pc, #76]	@ (8008ab0 <bme68x_GetGasScore+0x128>)
 8008a62:	4a15      	ldr	r2, [pc, #84]	@ (8008ab8 <bme68x_GetGasScore+0x130>)
 8008a64:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 8008a66:	4b12      	ldr	r3, [pc, #72]	@ (8008ab0 <bme68x_GetGasScore+0x128>)
 8008a68:	edd3 7a00 	vldr	s15, [r3]
 8008a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a74:	d503      	bpl.n	8008a7e <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 8008a76:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab0 <bme68x_GetGasScore+0x128>)
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]

	return gas_score;
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab0 <bme68x_GetGasScore+0x128>)
 8008a80:	edd3 7a00 	vldr	s15, [r3]
 8008a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a88:	edc7 7a01 	vstr	s15, [r7, #4]
 8008a8c:	793b      	ldrb	r3, [r7, #4]
 8008a8e:	b25b      	sxtb	r3, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000014 	.word	0x20000014
 8008aa0:	20000010 	.word	0x20000010
 8008aa4:	3fe80000 	.word	0x3fe80000
 8008aa8:	20000008 	.word	0x20000008
 8008aac:	40590000 	.word	0x40590000
 8008ab0:	20000580 	.word	0x20000580
 8008ab4:	42960000 	.word	0x42960000
 8008ab8:	42960000 	.word	0x42960000

08008abc <bme68x_iaq>:

float bme68x_iaq() {
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b3c <bme68x_iaq+0x80>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fea2 	bl	8008810 <bme68x_GetHumidityScore>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8008ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8008b3c <bme68x_iaq+0x80>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ff57 	bl	8008988 <bme68x_GetGasScore>
 8008ada:	4603      	mov	r3, r0
 8008adc:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008ade:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
	float air_quality_score = (100
 8008ae8:	ee07 3a90 	vmov	s15, r3
 8008aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008af0:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8008af4:	4b12      	ldr	r3, [pc, #72]	@ (8008b40 <bme68x_iaq+0x84>)
 8008af6:	f993 2000 	ldrsb.w	r2, [r3]
 8008afa:	b2d3      	uxtb	r3, r2
 8008afc:	3301      	adds	r3, #1
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	b259      	sxtb	r1, r3
 8008b02:	4b0f      	ldr	r3, [pc, #60]	@ (8008b40 <bme68x_iaq+0x84>)
 8008b04:	7019      	strb	r1, [r3, #0]
 8008b06:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <bme68x_iaq+0x88>)
 8008b08:	fb83 1302 	smull	r1, r3, r3, r2
 8008b0c:	1059      	asrs	r1, r3, #1
 8008b0e:	17d3      	asrs	r3, r2, #31
 8008b10:	1ac9      	subs	r1, r1, r3
 8008b12:	460b      	mov	r3, r1
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	b25b      	sxtb	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d104      	bne.n	8008b2a <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8008b20:	4b06      	ldr	r3, [pc, #24]	@ (8008b3c <bme68x_iaq+0x80>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff fe3d 	bl	80087a4 <bme68x_GetGasReference>

	return air_quality_score;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	ee07 3a90 	vmov	s15, r3

}
 8008b30:	eeb0 0a67 	vmov.f32	s0, s15
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd90      	pop	{r4, r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000550 	.word	0x20000550
 8008b40:	20000584 	.word	0x20000584
 8008b44:	66666667 	.word	0x66666667

08008b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008b4c:	f7fd fb94 	bl	8006278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b50:	480c      	ldr	r0, [pc, #48]	@ (8008b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8008b52:	490d      	ldr	r1, [pc, #52]	@ (8008b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008b54:	4a0d      	ldr	r2, [pc, #52]	@ (8008b8c <LoopForever+0xe>)
  movs r3, #0
 8008b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b58:	e002      	b.n	8008b60 <LoopCopyDataInit>

08008b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b5e:	3304      	adds	r3, #4

08008b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b64:	d3f9      	bcc.n	8008b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b66:	4a0a      	ldr	r2, [pc, #40]	@ (8008b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b68:	4c0a      	ldr	r4, [pc, #40]	@ (8008b94 <LoopForever+0x16>)
  movs r3, #0
 8008b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b6c:	e001      	b.n	8008b72 <LoopFillZerobss>

08008b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b70:	3204      	adds	r2, #4

08008b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b74:	d3fb      	bcc.n	8008b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b76:	f004 ff55 	bl	800da24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b7a:	f7fc fb43 	bl	8005204 <main>

08008b7e <LoopForever>:

LoopForever:
    b LoopForever
 8008b7e:	e7fe      	b.n	8008b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b88:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8008b8c:	0800ed78 	.word	0x0800ed78
  ldr r2, =_sbss
 8008b90:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8008b94:	2000058c 	.word	0x2000058c

08008b98 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b98:	e7fe      	b.n	8008b98 <CAN1_RX0_IRQHandler>

08008b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ba4:	2003      	movs	r0, #3
 8008ba6:	f001 fcb3 	bl	800a510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008baa:	200f      	movs	r0, #15
 8008bac:	f000 f80e 	bl	8008bcc <HAL_InitTick>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	71fb      	strb	r3, [r7, #7]
 8008bba:	e001      	b.n	8008bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008bbc:	f7fd fad6 	bl	800616c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008bd8:	4b17      	ldr	r3, [pc, #92]	@ (8008c38 <HAL_InitTick+0x6c>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d023      	beq.n	8008c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008be0:	4b16      	ldr	r3, [pc, #88]	@ (8008c3c <HAL_InitTick+0x70>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	4b14      	ldr	r3, [pc, #80]	@ (8008c38 <HAL_InitTick+0x6c>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	4619      	mov	r1, r3
 8008bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 fcbf 	bl	800a57a <HAL_SYSTICK_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10f      	bne.n	8008c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b0f      	cmp	r3, #15
 8008c06:	d809      	bhi.n	8008c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c08:	2200      	movs	r2, #0
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	f001 fc89 	bl	800a526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008c14:	4a0a      	ldr	r2, [pc, #40]	@ (8008c40 <HAL_InitTick+0x74>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e007      	b.n	8008c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
 8008c20:	e004      	b.n	8008c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	73fb      	strb	r3, [r7, #15]
 8008c26:	e001      	b.n	8008c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000001c 	.word	0x2000001c
 8008c3c:	20000000 	.word	0x20000000
 8008c40:	20000018 	.word	0x20000018

08008c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <HAL_IncTick+0x20>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4b06      	ldr	r3, [pc, #24]	@ (8008c68 <HAL_IncTick+0x24>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4413      	add	r3, r2
 8008c54:	4a04      	ldr	r2, [pc, #16]	@ (8008c68 <HAL_IncTick+0x24>)
 8008c56:	6013      	str	r3, [r2, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	2000001c 	.word	0x2000001c
 8008c68:	20000588 	.word	0x20000588

08008c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c70:	4b03      	ldr	r3, [pc, #12]	@ (8008c80 <HAL_GetTick+0x14>)
 8008c72:	681b      	ldr	r3, [r3, #0]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	20000588 	.word	0x20000588

08008c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c8c:	f7ff ffee 	bl	8008c6c <HAL_GetTick>
 8008c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d005      	beq.n	8008caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <HAL_Delay+0x44>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008caa:	bf00      	nop
 8008cac:	f7ff ffde 	bl	8008c6c <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d8f7      	bhi.n	8008cac <HAL_Delay+0x28>
  {
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	2000001c 	.word	0x2000001c

08008ccc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	609a      	str	r2, [r3, #8]
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	609a      	str	r2, [r3, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3360      	adds	r3, #96	@ 0x60
 8008d46:	461a      	mov	r2, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4b08      	ldr	r3, [pc, #32]	@ (8008d78 <LL_ADC_SetOffset+0x44>)
 8008d56:	4013      	ands	r3, r2
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	03fff000 	.word	0x03fff000

08008d7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3360      	adds	r3, #96	@ 0x60
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3360      	adds	r3, #96	@ 0x60
 8008db8:	461a      	mov	r2, r3
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3330      	adds	r3, #48	@ 0x30
 8008e14:	461a      	mov	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	0a1b      	lsrs	r3, r3, #8
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	f003 030c 	and.w	r3, r3, #12
 8008e20:	4413      	add	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f003 031f 	and.w	r3, r3, #31
 8008e2e:	211f      	movs	r1, #31
 8008e30:	fa01 f303 	lsl.w	r3, r1, r3
 8008e34:	43db      	mvns	r3, r3
 8008e36:	401a      	ands	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	0e9b      	lsrs	r3, r3, #26
 8008e3c:	f003 011f 	and.w	r1, r3, #31
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e50:	bf00      	nop
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3314      	adds	r3, #20
 8008e92:	461a      	mov	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	0e5b      	lsrs	r3, r3, #25
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	4413      	add	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	0d1b      	lsrs	r3, r3, #20
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	2107      	movs	r1, #7
 8008eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	401a      	ands	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	0d1b      	lsrs	r3, r3, #20
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008ecc:	bf00      	nop
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f003 0318 	and.w	r3, r3, #24
 8008efa:	4908      	ldr	r1, [pc, #32]	@ (8008f1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8008efc:	40d9      	lsrs	r1, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	400b      	ands	r3, r1
 8008f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f06:	431a      	orrs	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008f0e:	bf00      	nop
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	0007ffff 	.word	0x0007ffff

08008f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6093      	str	r3, [r2, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f58:	d101      	bne.n	8008f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008f80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fa8:	d101      	bne.n	8008fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008fd0:	f043 0201 	orr.w	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008ff8:	f043 0202 	orr.w	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <LL_ADC_IsEnabled+0x18>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <LL_ADC_IsEnabled+0x1a>
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b02      	cmp	r3, #2
 8009044:	d101      	bne.n	800904a <LL_ADC_IsDisableOngoing+0x18>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <LL_ADC_IsDisableOngoing+0x1a>
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009068:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800906c:	f043 0204 	orr.w	r2, r3, #4
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b04      	cmp	r3, #4
 8009092:	d101      	bne.n	8009098 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d101      	bne.n	80090be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e126      	b.n	8009334 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7f7 feb5 	bl	8000e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ff19 	bl	8008f44 <LL_ADC_IsDeepPowerDownEnabled>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff feff 	bl	8008f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4618      	mov	r0, r3
 8009128:	f7ff ff34 	bl	8008f94 <LL_ADC_IsInternalRegulatorEnabled>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d115      	bne.n	800915e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff ff18 	bl	8008f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800913c:	4b7f      	ldr	r3, [pc, #508]	@ (800933c <HAL_ADC_Init+0x270>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	099b      	lsrs	r3, r3, #6
 8009142:	4a7f      	ldr	r2, [pc, #508]	@ (8009340 <HAL_ADC_Init+0x274>)
 8009144:	fba2 2303 	umull	r2, r3, r2, r3
 8009148:	099b      	lsrs	r3, r3, #6
 800914a:	3301      	adds	r3, #1
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009150:	e002      	b.n	8009158 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3b01      	subs	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f9      	bne.n	8009152 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff ff16 	bl	8008f94 <LL_ADC_IsInternalRegulatorEnabled>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10d      	bne.n	800918a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009172:	f043 0210 	orr.w	r2, r3, #16
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917e:	f043 0201 	orr.w	r2, r3, #1
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff ff76 	bl	8009080 <LL_ADC_REG_IsConversionOngoing>
 8009194:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f040 80bf 	bne.w	8009322 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f040 80bb 	bne.w	8009322 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80091b4:	f043 0202 	orr.w	r2, r3, #2
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff ff23 	bl	800900c <LL_ADC_IsEnabled>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091cc:	485d      	ldr	r0, [pc, #372]	@ (8009344 <HAL_ADC_Init+0x278>)
 80091ce:	f7ff ff1d 	bl	800900c <LL_ADC_IsEnabled>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d105      	bne.n	80091e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	4619      	mov	r1, r3
 80091de:	485a      	ldr	r0, [pc, #360]	@ (8009348 <HAL_ADC_Init+0x27c>)
 80091e0:	f7ff fd74 	bl	8008ccc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7e5b      	ldrb	r3, [r3, #25]
 80091e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80091ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80091f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80091fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009202:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009204:	4313      	orrs	r3, r2
 8009206:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d106      	bne.n	8009220 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009216:	3b01      	subs	r3, #1
 8009218:	045b      	lsls	r3, r3, #17
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	4313      	orrs	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009234:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	4313      	orrs	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	4b42      	ldr	r3, [pc, #264]	@ (800934c <HAL_ADC_Init+0x280>)
 8009244:	4013      	ands	r3, r2
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	69b9      	ldr	r1, [r7, #24]
 800924c:	430b      	orrs	r3, r1
 800924e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff ff26 	bl	80090a6 <LL_ADC_INJ_IsConversionOngoing>
 800925a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d13d      	bne.n	80092de <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d13a      	bne.n	80092de <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800926c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009274:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009276:	4313      	orrs	r3, r2
 8009278:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009284:	f023 0302 	bic.w	r3, r3, #2
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	69b9      	ldr	r1, [r7, #24]
 800928e:	430b      	orrs	r3, r1
 8009290:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009298:	2b01      	cmp	r3, #1
 800929a:	d118      	bne.n	80092ce <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80092a6:	f023 0304 	bic.w	r3, r3, #4
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80092b2:	4311      	orrs	r1, r2
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80092b8:	4311      	orrs	r1, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80092be:	430a      	orrs	r2, r1
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	611a      	str	r2, [r3, #16]
 80092cc:	e007      	b.n	80092de <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0201 	bic.w	r2, r2, #1
 80092dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d10c      	bne.n	8009300 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ec:	f023 010f 	bic.w	r1, r3, #15
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	1e5a      	subs	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80092fe:	e007      	b.n	8009310 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 020f 	bic.w	r2, r2, #15
 800930e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	f043 0201 	orr.w	r2, r3, #1
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009320:	e007      	b.n	8009332 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009326:	f043 0210 	orr.w	r2, r3, #16
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009332:	7ffb      	ldrb	r3, [r7, #31]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000000 	.word	0x20000000
 8009340:	053e2d63 	.word	0x053e2d63
 8009344:	50040000 	.word	0x50040000
 8009348:	50040300 	.word	0x50040300
 800934c:	fff0c007 	.word	0xfff0c007

08009350 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff fe8f 	bl	8009080 <LL_ADC_REG_IsConversionOngoing>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	f040 80a0 	bne.w	80094aa <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_ADC_Start_IT+0x28>
 8009374:	2302      	movs	r3, #2
 8009376:	e09b      	b.n	80094b0 <HAL_ADC_Start_IT+0x160>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fe51 	bl	800a028 <ADC_Enable>
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 8087 	bne.w	80094a0 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009396:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d006      	beq.n	80093c0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b6:	f023 0206 	bic.w	r2, r3, #6
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80093be:	e002      	b.n	80093c6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	221c      	movs	r2, #28
 80093cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 021c 	bic.w	r2, r2, #28
 80093e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	2b08      	cmp	r3, #8
 80093ec:	d108      	bne.n	8009400 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0208 	orr.w	r2, r2, #8
 80093fc:	605a      	str	r2, [r3, #4]
          break;
 80093fe:	e008      	b.n	8009412 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0204 	orr.w	r2, r2, #4
 800940e:	605a      	str	r2, [r3, #4]
          break;
 8009410:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009416:	2b00      	cmp	r3, #0
 8009418:	d107      	bne.n	800942a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0210 	orr.w	r2, r2, #16
 8009428:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d02d      	beq.n	8009494 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009440:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d110      	bne.n	8009472 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0220 	bic.w	r2, r2, #32
 800945e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800946e:	605a      	str	r2, [r3, #4]
            break;
 8009470:	e010      	b.n	8009494 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009480:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0220 	orr.w	r2, r2, #32
 8009490:	605a      	str	r2, [r3, #4]
            break;
 8009492:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fddd 	bl	8009058 <LL_ADC_REG_StartConversion>
 800949e:	e006      	b.n	80094ae <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80094a8:	e001      	b.n	80094ae <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80094aa:	2302      	movs	r3, #2
 80094ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b088      	sub	sp, #32
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d017      	beq.n	8009528 <HAL_ADC_IRQHandler+0x56>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d012      	beq.n	8009528 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009506:	f003 0310 	and.w	r3, r3, #16
 800950a:	2b00      	cmp	r3, #0
 800950c:	d105      	bne.n	800951a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009512:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 ff1e 	bl	800a35c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2202      	movs	r2, #2
 8009526:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 0304 	and.w	r3, r3, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <HAL_ADC_IRQHandler+0x6a>
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009542:	2b00      	cmp	r3, #0
 8009544:	d05e      	beq.n	8009604 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d059      	beq.n	8009604 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	d105      	bne.n	8009568 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009560:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fc36 	bl	8008dde <LL_ADC_REG_IsTriggerSourceSWStart>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d03e      	beq.n	80095f6 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d135      	bne.n	80095f6 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b08      	cmp	r3, #8
 8009596:	d12e      	bne.n	80095f6 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff fd6f 	bl	8009080 <LL_ADC_REG_IsConversionOngoing>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11a      	bne.n	80095de <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 020c 	bic.w	r2, r2, #12
 80095b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d112      	bne.n	80095f6 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d4:	f043 0201 	orr.w	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	655a      	str	r2, [r3, #84]	@ 0x54
 80095dc:	e00b      	b.n	80095f6 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e2:	f043 0210 	orr.w	r2, r3, #16
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ee:	f043 0201 	orr.w	r2, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7fb feb0 	bl	800535c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	220c      	movs	r2, #12
 8009602:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_ADC_IRQHandler+0x146>
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800961e:	2b00      	cmp	r3, #0
 8009620:	d072      	beq.n	8009708 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d06d      	beq.n	8009708 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	d105      	bne.n	8009644 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fc07 	bl	8008e5c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800964e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fbc2 	bl	8008dde <LL_ADC_REG_IsTriggerSourceSWStart>
 800965a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d047      	beq.n	80096fa <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <HAL_ADC_IRQHandler+0x1b2>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d03f      	beq.n	80096fa <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009680:	2b00      	cmp	r3, #0
 8009682:	d13a      	bne.n	80096fa <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968e:	2b40      	cmp	r3, #64	@ 0x40
 8009690:	d133      	bne.n	80096fa <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d12e      	bne.n	80096fa <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fd00 	bl	80090a6 <LL_ADC_INJ_IsConversionOngoing>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d11a      	bne.n	80096e2 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80096ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d112      	bne.n	80096fa <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d8:	f043 0201 	orr.w	r2, r3, #1
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	655a      	str	r2, [r3, #84]	@ 0x54
 80096e0:	e00b      	b.n	80096fa <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e6:	f043 0210 	orr.w	r2, r3, #16
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f2:	f043 0201 	orr.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fe06 	bl	800a30c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2260      	movs	r2, #96	@ 0x60
 8009706:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970e:	2b00      	cmp	r3, #0
 8009710:	d011      	beq.n	8009736 <HAL_ADC_IRQHandler+0x264>
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00c      	beq.n	8009736 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009720:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f886 	bl	800983a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2280      	movs	r2, #128	@ 0x80
 8009734:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800973c:	2b00      	cmp	r3, #0
 800973e:	d012      	beq.n	8009766 <HAL_ADC_IRQHandler+0x294>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00d      	beq.n	8009766 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fdec 	bl	800a334 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800976c:	2b00      	cmp	r3, #0
 800976e:	d012      	beq.n	8009796 <HAL_ADC_IRQHandler+0x2c4>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fdde 	bl	800a348 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009794:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	d02a      	beq.n	80097f6 <HAL_ADC_IRQHandler+0x324>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f003 0310 	and.w	r3, r3, #16
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d025      	beq.n	80097f6 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80097b2:	2301      	movs	r3, #1
 80097b4:	61fb      	str	r3, [r7, #28]
 80097b6:	e008      	b.n	80097ca <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80097c6:	2301      	movs	r3, #1
 80097c8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d10e      	bne.n	80097ee <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e0:	f043 0202 	orr.w	r2, r3, #2
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f830 	bl	800984e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2210      	movs	r2, #16
 80097f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d018      	beq.n	8009832 <HAL_ADC_IRQHandler+0x360>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981a:	f043 0208 	orr.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800982a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fd77 	bl	800a320 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009832:	bf00      	nop
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
	...

08009864 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b0b6      	sub	sp, #216	@ 0xd8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009874:	2300      	movs	r3, #0
 8009876:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800987e:	2b01      	cmp	r3, #1
 8009880:	d101      	bne.n	8009886 <HAL_ADC_ConfigChannel+0x22>
 8009882:	2302      	movs	r3, #2
 8009884:	e3bb      	b.n	8009ffe <HAL_ADC_ConfigChannel+0x79a>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fbf4 	bl	8009080 <LL_ADC_REG_IsConversionOngoing>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 83a0 	bne.w	8009fe0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2b05      	cmp	r3, #5
 80098ae:	d824      	bhi.n	80098fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	3b02      	subs	r3, #2
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d81b      	bhi.n	80098f2 <HAL_ADC_ConfigChannel+0x8e>
 80098ba:	a201      	add	r2, pc, #4	@ (adr r2, 80098c0 <HAL_ADC_ConfigChannel+0x5c>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098d9 	.word	0x080098d9
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098e9 	.word	0x080098e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80098d0:	230c      	movs	r3, #12
 80098d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80098d6:	e010      	b.n	80098fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80098d8:	2312      	movs	r3, #18
 80098da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80098de:	e00c      	b.n	80098fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80098e0:	2318      	movs	r3, #24
 80098e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80098e6:	e008      	b.n	80098fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80098e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80098f0:	e003      	b.n	80098fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80098f2:	2306      	movs	r3, #6
 80098f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80098f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009908:	f7ff fa7c 	bl	8008e04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fbb5 	bl	8009080 <LL_ADC_REG_IsConversionOngoing>
 8009916:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fbc1 	bl	80090a6 <LL_ADC_INJ_IsConversionOngoing>
 8009924:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800992c:	2b00      	cmp	r3, #0
 800992e:	f040 81a4 	bne.w	8009c7a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 819f 	bne.w	8009c7a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	6819      	ldr	r1, [r3, #0]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	461a      	mov	r2, r3
 800994a:	f7ff fa9a 	bl	8008e82 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695a      	ldr	r2, [r3, #20]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	08db      	lsrs	r3, r3, #3
 800995a:	f003 0303 	and.w	r3, r3, #3
 800995e:	005b      	lsls	r3, r3, #1
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b04      	cmp	r3, #4
 800996e:	d00a      	beq.n	8009986 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	6919      	ldr	r1, [r3, #16]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009980:	f7ff f9d8 	bl	8008d34 <LL_ADC_SetOffset>
 8009984:	e179      	b.n	8009c7a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2100      	movs	r1, #0
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff f9f5 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009992:	4603      	mov	r3, r0
 8009994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <HAL_ADC_ConfigChannel+0x14e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2100      	movs	r1, #0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff f9ea 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 80099a8:	4603      	mov	r3, r0
 80099aa:	0e9b      	lsrs	r3, r3, #26
 80099ac:	f003 021f 	and.w	r2, r3, #31
 80099b0:	e01e      	b.n	80099f0 <HAL_ADC_ConfigChannel+0x18c>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff f9df 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 80099be:	4603      	mov	r3, r0
 80099c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099c8:	fa93 f3a3 	rbit	r3, r3
 80099cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80099d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80099d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80099d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80099e0:	2320      	movs	r3, #32
 80099e2:	e004      	b.n	80099ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80099e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80099e8:	fab3 f383 	clz	r3, r3
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <HAL_ADC_ConfigChannel+0x1a4>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	0e9b      	lsrs	r3, r3, #26
 8009a02:	f003 031f 	and.w	r3, r3, #31
 8009a06:	e018      	b.n	8009a3a <HAL_ADC_ConfigChannel+0x1d6>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a14:	fa93 f3a3 	rbit	r3, r3
 8009a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8009a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	e004      	b.n	8009a3a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009a34:	fab3 f383 	clz	r3, r3
 8009a38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d106      	bne.n	8009a4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff f9ae 	bl	8008da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2101      	movs	r1, #1
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff f992 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10a      	bne.n	8009a78 <HAL_ADC_ConfigChannel+0x214>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2101      	movs	r1, #1
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff f987 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	0e9b      	lsrs	r3, r3, #26
 8009a72:	f003 021f 	and.w	r2, r3, #31
 8009a76:	e01e      	b.n	8009ab6 <HAL_ADC_ConfigChannel+0x252>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff f97c 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a8e:	fa93 f3a3 	rbit	r3, r3
 8009a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8009a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8009a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8009aa6:	2320      	movs	r3, #32
 8009aa8:	e004      	b.n	8009ab4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8009aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aae:	fab3 f383 	clz	r3, r3
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <HAL_ADC_ConfigChannel+0x26a>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	0e9b      	lsrs	r3, r3, #26
 8009ac8:	f003 031f 	and.w	r3, r3, #31
 8009acc:	e018      	b.n	8009b00 <HAL_ADC_ConfigChannel+0x29c>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ada:	fa93 f3a3 	rbit	r3, r3
 8009ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8009ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8009aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009af2:	2320      	movs	r3, #32
 8009af4:	e004      	b.n	8009b00 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8009af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009afa:	fab3 f383 	clz	r3, r3
 8009afe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d106      	bne.n	8009b12 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff f94b 	bl	8008da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2102      	movs	r1, #2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff f92f 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <HAL_ADC_ConfigChannel+0x2da>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2102      	movs	r1, #2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff f924 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009b34:	4603      	mov	r3, r0
 8009b36:	0e9b      	lsrs	r3, r3, #26
 8009b38:	f003 021f 	and.w	r2, r3, #31
 8009b3c:	e01e      	b.n	8009b7c <HAL_ADC_ConfigChannel+0x318>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2102      	movs	r1, #2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff f919 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b54:	fa93 f3a3 	rbit	r3, r3
 8009b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8009b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8009b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009b6c:	2320      	movs	r3, #32
 8009b6e:	e004      	b.n	8009b7a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8009b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b74:	fab3 f383 	clz	r3, r3
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d105      	bne.n	8009b94 <HAL_ADC_ConfigChannel+0x330>
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	0e9b      	lsrs	r3, r3, #26
 8009b8e:	f003 031f 	and.w	r3, r3, #31
 8009b92:	e014      	b.n	8009bbe <HAL_ADC_ConfigChannel+0x35a>
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b9c:	fa93 f3a3 	rbit	r3, r3
 8009ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8009ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8009ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	e004      	b.n	8009bbe <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bb8:	fab3 f383 	clz	r3, r3
 8009bbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d106      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff f8ec 	bl	8008da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2103      	movs	r1, #3
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff f8d0 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <HAL_ADC_ConfigChannel+0x398>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2103      	movs	r1, #3
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff f8c5 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	0e9b      	lsrs	r3, r3, #26
 8009bf6:	f003 021f 	and.w	r2, r3, #31
 8009bfa:	e017      	b.n	8009c2c <HAL_ADC_ConfigChannel+0x3c8>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2103      	movs	r1, #3
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff f8ba 	bl	8008d7c <LL_ADC_GetOffsetChannel>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c0e:	fa93 f3a3 	rbit	r3, r3
 8009c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8009c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8009c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8009c1e:	2320      	movs	r3, #32
 8009c20:	e003      	b.n	8009c2a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8009c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c24:	fab3 f383 	clz	r3, r3
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <HAL_ADC_ConfigChannel+0x3e0>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	0e9b      	lsrs	r3, r3, #26
 8009c3e:	f003 031f 	and.w	r3, r3, #31
 8009c42:	e011      	b.n	8009c68 <HAL_ADC_ConfigChannel+0x404>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c4c:	fa93 f3a3 	rbit	r3, r3
 8009c50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8009c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8009c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	e003      	b.n	8009c68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8009c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c62:	fab3 f383 	clz	r3, r3
 8009c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d106      	bne.n	8009c7a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	2103      	movs	r1, #3
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff f897 	bl	8008da8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff f9c4 	bl	800900c <LL_ADC_IsEnabled>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 8140 	bne.w	8009f0c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f7ff f91d 	bl	8008ed8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	4a8f      	ldr	r2, [pc, #572]	@ (8009ee0 <HAL_ADC_ConfigChannel+0x67c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	f040 8131 	bne.w	8009f0c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10b      	bne.n	8009cd2 <HAL_ADC_ConfigChannel+0x46e>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	0e9b      	lsrs	r3, r3, #26
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	f003 031f 	and.w	r3, r3, #31
 8009cc6:	2b09      	cmp	r3, #9
 8009cc8:	bf94      	ite	ls
 8009cca:	2301      	movls	r3, #1
 8009ccc:	2300      	movhi	r3, #0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	e019      	b.n	8009d06 <HAL_ADC_ConfigChannel+0x4a2>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cda:	fa93 f3a3 	rbit	r3, r3
 8009cde:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8009ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8009ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8009cea:	2320      	movs	r3, #32
 8009cec:	e003      	b.n	8009cf6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8009cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cf0:	fab3 f383 	clz	r3, r3
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	f003 031f 	and.w	r3, r3, #31
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	bf94      	ite	ls
 8009d00:	2301      	movls	r3, #1
 8009d02:	2300      	movhi	r3, #0
 8009d04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d079      	beq.n	8009dfe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d107      	bne.n	8009d26 <HAL_ADC_ConfigChannel+0x4c2>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	0e9b      	lsrs	r3, r3, #26
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	069b      	lsls	r3, r3, #26
 8009d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009d24:	e015      	b.n	8009d52 <HAL_ADC_ConfigChannel+0x4ee>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2e:	fa93 f3a3 	rbit	r3, r3
 8009d32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8009d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8009d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8009d3e:	2320      	movs	r3, #32
 8009d40:	e003      	b.n	8009d4a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8009d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d44:	fab3 f383 	clz	r3, r3
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	069b      	lsls	r3, r3, #26
 8009d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <HAL_ADC_ConfigChannel+0x50e>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	0e9b      	lsrs	r3, r3, #26
 8009d64:	3301      	adds	r3, #1
 8009d66:	f003 031f 	and.w	r3, r3, #31
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d70:	e017      	b.n	8009da2 <HAL_ADC_ConfigChannel+0x53e>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d7a:	fa93 f3a3 	rbit	r3, r3
 8009d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8009d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8009d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009d8a:	2320      	movs	r3, #32
 8009d8c:	e003      	b.n	8009d96 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d90:	fab3 f383 	clz	r3, r3
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	3301      	adds	r3, #1
 8009d98:	f003 031f 	and.w	r3, r3, #31
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009da2:	ea42 0103 	orr.w	r1, r2, r3
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <HAL_ADC_ConfigChannel+0x564>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	0e9b      	lsrs	r3, r3, #26
 8009db8:	3301      	adds	r3, #1
 8009dba:	f003 021f 	and.w	r2, r3, #31
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4413      	add	r3, r2
 8009dc4:	051b      	lsls	r3, r3, #20
 8009dc6:	e018      	b.n	8009dfa <HAL_ADC_ConfigChannel+0x596>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd0:	fa93 f3a3 	rbit	r3, r3
 8009dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8009dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8009de0:	2320      	movs	r3, #32
 8009de2:	e003      	b.n	8009dec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	fab3 f383 	clz	r3, r3
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	3301      	adds	r3, #1
 8009dee:	f003 021f 	and.w	r2, r3, #31
 8009df2:	4613      	mov	r3, r2
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	4413      	add	r3, r2
 8009df8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	e081      	b.n	8009f02 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d107      	bne.n	8009e1a <HAL_ADC_ConfigChannel+0x5b6>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	0e9b      	lsrs	r3, r3, #26
 8009e10:	3301      	adds	r3, #1
 8009e12:	069b      	lsls	r3, r3, #26
 8009e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e18:	e015      	b.n	8009e46 <HAL_ADC_ConfigChannel+0x5e2>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e22:	fa93 f3a3 	rbit	r3, r3
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8009e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8009e32:	2320      	movs	r3, #32
 8009e34:	e003      	b.n	8009e3e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	fab3 f383 	clz	r3, r3
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	3301      	adds	r3, #1
 8009e40:	069b      	lsls	r3, r3, #26
 8009e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d109      	bne.n	8009e66 <HAL_ADC_ConfigChannel+0x602>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	0e9b      	lsrs	r3, r3, #26
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f003 031f 	and.w	r3, r3, #31
 8009e5e:	2101      	movs	r1, #1
 8009e60:	fa01 f303 	lsl.w	r3, r1, r3
 8009e64:	e017      	b.n	8009e96 <HAL_ADC_ConfigChannel+0x632>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	fa93 f3a3 	rbit	r3, r3
 8009e72:	61bb      	str	r3, [r7, #24]
  return result;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8009e7e:	2320      	movs	r3, #32
 8009e80:	e003      	b.n	8009e8a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	fab3 f383 	clz	r3, r3
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	f003 031f 	and.w	r3, r3, #31
 8009e90:	2101      	movs	r1, #1
 8009e92:	fa01 f303 	lsl.w	r3, r1, r3
 8009e96:	ea42 0103 	orr.w	r1, r2, r3
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <HAL_ADC_ConfigChannel+0x65e>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	0e9b      	lsrs	r3, r3, #26
 8009eac:	3301      	adds	r3, #1
 8009eae:	f003 021f 	and.w	r2, r3, #31
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3b1e      	subs	r3, #30
 8009eba:	051b      	lsls	r3, r3, #20
 8009ebc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009ec0:	e01e      	b.n	8009f00 <HAL_ADC_ConfigChannel+0x69c>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	fa93 f3a3 	rbit	r3, r3
 8009ece:	60fb      	str	r3, [r7, #12]
  return result;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d104      	bne.n	8009ee4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8009eda:	2320      	movs	r3, #32
 8009edc:	e006      	b.n	8009eec <HAL_ADC_ConfigChannel+0x688>
 8009ede:	bf00      	nop
 8009ee0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	fab3 f383 	clz	r3, r3
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	3301      	adds	r3, #1
 8009eee:	f003 021f 	and.w	r2, r3, #31
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3b1e      	subs	r3, #30
 8009efa:	051b      	lsls	r3, r3, #20
 8009efc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009f00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009f06:	4619      	mov	r1, r3
 8009f08:	f7fe ffbb 	bl	8008e82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	4b3d      	ldr	r3, [pc, #244]	@ (800a008 <HAL_ADC_ConfigChannel+0x7a4>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d06c      	beq.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009f18:	483c      	ldr	r0, [pc, #240]	@ (800a00c <HAL_ADC_ConfigChannel+0x7a8>)
 8009f1a:	f7fe fefd 	bl	8008d18 <LL_ADC_GetCommonPathInternalCh>
 8009f1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a3a      	ldr	r2, [pc, #232]	@ (800a010 <HAL_ADC_ConfigChannel+0x7ac>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d127      	bne.n	8009f7c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d121      	bne.n	8009f7c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a35      	ldr	r2, [pc, #212]	@ (800a014 <HAL_ADC_ConfigChannel+0x7b0>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d157      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	482f      	ldr	r0, [pc, #188]	@ (800a00c <HAL_ADC_ConfigChannel+0x7a8>)
 8009f4e:	f7fe fed0 	bl	8008cf2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009f52:	4b31      	ldr	r3, [pc, #196]	@ (800a018 <HAL_ADC_ConfigChannel+0x7b4>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	4a30      	ldr	r2, [pc, #192]	@ (800a01c <HAL_ADC_ConfigChannel+0x7b8>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	099b      	lsrs	r3, r3, #6
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	4613      	mov	r3, r2
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009f6c:	e002      	b.n	8009f74 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1f9      	bne.n	8009f6e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f7a:	e03a      	b.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a27      	ldr	r2, [pc, #156]	@ (800a020 <HAL_ADC_ConfigChannel+0x7bc>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d113      	bne.n	8009fae <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10d      	bne.n	8009fae <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a1f      	ldr	r2, [pc, #124]	@ (800a014 <HAL_ADC_ConfigChannel+0x7b0>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d12a      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009fa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4819      	ldr	r0, [pc, #100]	@ (800a00c <HAL_ADC_ConfigChannel+0x7a8>)
 8009fa8:	f7fe fea3 	bl	8008cf2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009fac:	e021      	b.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a1c      	ldr	r2, [pc, #112]	@ (800a024 <HAL_ADC_ConfigChannel+0x7c0>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d11c      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d116      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a12      	ldr	r2, [pc, #72]	@ (800a014 <HAL_ADC_ConfigChannel+0x7b0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d111      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009fce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009fd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	480c      	ldr	r0, [pc, #48]	@ (800a00c <HAL_ADC_ConfigChannel+0x7a8>)
 8009fda:	f7fe fe8a 	bl	8008cf2 <LL_ADC_SetCommonPathInternalCh>
 8009fde:	e008      	b.n	8009ff2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe4:	f043 0220 	orr.w	r2, r3, #32
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8009ffa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	37d8      	adds	r7, #216	@ 0xd8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	80080000 	.word	0x80080000
 800a00c:	50040300 	.word	0x50040300
 800a010:	c7520000 	.word	0xc7520000
 800a014:	50040000 	.word	0x50040000
 800a018:	20000000 	.word	0x20000000
 800a01c:	053e2d63 	.word	0x053e2d63
 800a020:	cb840000 	.word	0xcb840000
 800a024:	80000001 	.word	0x80000001

0800a028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a030:	2300      	movs	r3, #0
 800a032:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe ffe7 	bl	800900c <LL_ADC_IsEnabled>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d169      	bne.n	800a118 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	4b36      	ldr	r3, [pc, #216]	@ (800a124 <ADC_Enable+0xfc>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00d      	beq.n	800a06e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a056:	f043 0210 	orr.w	r2, r3, #16
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a062:	f043 0201 	orr.w	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e055      	b.n	800a11a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe ffa2 	bl	8008fbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a078:	482b      	ldr	r0, [pc, #172]	@ (800a128 <ADC_Enable+0x100>)
 800a07a:	f7fe fe4d 	bl	8008d18 <LL_ADC_GetCommonPathInternalCh>
 800a07e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a084:	2b00      	cmp	r3, #0
 800a086:	d013      	beq.n	800a0b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a088:	4b28      	ldr	r3, [pc, #160]	@ (800a12c <ADC_Enable+0x104>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	099b      	lsrs	r3, r3, #6
 800a08e:	4a28      	ldr	r2, [pc, #160]	@ (800a130 <ADC_Enable+0x108>)
 800a090:	fba2 2303 	umull	r2, r3, r2, r3
 800a094:	099b      	lsrs	r3, r3, #6
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	4613      	mov	r3, r2
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a0a2:	e002      	b.n	800a0aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1f9      	bne.n	800a0a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a0b0:	f7fe fddc 	bl	8008c6c <HAL_GetTick>
 800a0b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0b6:	e028      	b.n	800a10a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe ffa5 	bl	800900c <LL_ADC_IsEnabled>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d104      	bne.n	800a0d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe ff75 	bl	8008fbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a0d2:	f7fe fdcb 	bl	8008c6c <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d914      	bls.n	800a10a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d00d      	beq.n	800a10a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f2:	f043 0210 	orr.w	r2, r3, #16
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fe:	f043 0201 	orr.w	r2, r3, #1
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e007      	b.n	800a11a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b01      	cmp	r3, #1
 800a116:	d1cf      	bne.n	800a0b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	8000003f 	.word	0x8000003f
 800a128:	50040300 	.word	0x50040300
 800a12c:	20000000 	.word	0x20000000
 800a130:	053e2d63 	.word	0x053e2d63

0800a134 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe ff76 	bl	8009032 <LL_ADC_IsDisableOngoing>
 800a146:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe ff5d 	bl	800900c <LL_ADC_IsEnabled>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d047      	beq.n	800a1e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d144      	bne.n	800a1e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 030d 	and.w	r3, r3, #13
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d10c      	bne.n	800a186 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe ff37 	bl	8008fe4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2203      	movs	r2, #3
 800a17c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a17e:	f7fe fd75 	bl	8008c6c <HAL_GetTick>
 800a182:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a184:	e029      	b.n	800a1da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18a:	f043 0210 	orr.w	r2, r3, #16
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a196:	f043 0201 	orr.w	r2, r3, #1
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e023      	b.n	800a1ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a1a2:	f7fe fd63 	bl	8008c6c <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d914      	bls.n	800a1da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c2:	f043 0210 	orr.w	r2, r3, #16
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ce:	f043 0201 	orr.w	r2, r3, #1
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e007      	b.n	800a1ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1dc      	bne.n	800a1a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <LL_ADC_StartCalibration>:
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a20e:	4313      	orrs	r3, r2
 800a210:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	609a      	str	r2, [r3, #8]
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <LL_ADC_IsCalibrationOnGoing>:
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a238:	d101      	bne.n	800a23e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e000      	b.n	800a240 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a256:	2300      	movs	r3, #0
 800a258:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a260:	2b01      	cmp	r3, #1
 800a262:	d101      	bne.n	800a268 <HAL_ADCEx_Calibration_Start+0x1c>
 800a264:	2302      	movs	r3, #2
 800a266:	e04d      	b.n	800a304 <HAL_ADCEx_Calibration_Start+0xb8>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff ff5f 	bl	800a134 <ADC_Disable>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d136      	bne.n	800a2ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a284:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a288:	f023 0302 	bic.w	r3, r3, #2
 800a28c:	f043 0202 	orr.w	r2, r3, #2
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff ffa9 	bl	800a1f2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a2a0:	e014      	b.n	800a2cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800a2ae:	d30d      	bcc.n	800a2cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b4:	f023 0312 	bic.w	r3, r3, #18
 800a2b8:	f043 0210 	orr.w	r2, r3, #16
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e01b      	b.n	800a304 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff ffa7 	bl	800a224 <LL_ADC_IsCalibrationOnGoing>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e2      	bne.n	800a2a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	f043 0201 	orr.w	r2, r3, #1
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2ec:	e005      	b.n	800a2fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2f2:	f043 0210 	orr.w	r2, r3, #16
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a380:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b4 <__NVIC_SetPriorityGrouping+0x44>)
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a38c:	4013      	ands	r3, r2
 800a38e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a39c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a3a2:	4a04      	ldr	r2, [pc, #16]	@ (800a3b4 <__NVIC_SetPriorityGrouping+0x44>)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	60d3      	str	r3, [r2, #12]
}
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	e000ed00 	.word	0xe000ed00

0800a3b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a3bc:	4b04      	ldr	r3, [pc, #16]	@ (800a3d0 <__NVIC_GetPriorityGrouping+0x18>)
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	0a1b      	lsrs	r3, r3, #8
 800a3c2:	f003 0307 	and.w	r3, r3, #7
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	e000ed00 	.word	0xe000ed00

0800a3d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	db0b      	blt.n	800a3fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	f003 021f 	and.w	r2, r3, #31
 800a3ec:	4907      	ldr	r1, [pc, #28]	@ (800a40c <__NVIC_EnableIRQ+0x38>)
 800a3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3f2:	095b      	lsrs	r3, r3, #5
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	fa00 f202 	lsl.w	r2, r0, r2
 800a3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a3fe:	bf00      	nop
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	e000e100 	.word	0xe000e100

0800a410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	6039      	str	r1, [r7, #0]
 800a41a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a41c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a420:	2b00      	cmp	r3, #0
 800a422:	db0a      	blt.n	800a43a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	b2da      	uxtb	r2, r3
 800a428:	490c      	ldr	r1, [pc, #48]	@ (800a45c <__NVIC_SetPriority+0x4c>)
 800a42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a42e:	0112      	lsls	r2, r2, #4
 800a430:	b2d2      	uxtb	r2, r2
 800a432:	440b      	add	r3, r1
 800a434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a438:	e00a      	b.n	800a450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	4908      	ldr	r1, [pc, #32]	@ (800a460 <__NVIC_SetPriority+0x50>)
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	f003 030f 	and.w	r3, r3, #15
 800a446:	3b04      	subs	r3, #4
 800a448:	0112      	lsls	r2, r2, #4
 800a44a:	b2d2      	uxtb	r2, r2
 800a44c:	440b      	add	r3, r1
 800a44e:	761a      	strb	r2, [r3, #24]
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	e000e100 	.word	0xe000e100
 800a460:	e000ed00 	.word	0xe000ed00

0800a464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a464:	b480      	push	{r7}
 800a466:	b089      	sub	sp, #36	@ 0x24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f1c3 0307 	rsb	r3, r3, #7
 800a47e:	2b04      	cmp	r3, #4
 800a480:	bf28      	it	cs
 800a482:	2304      	movcs	r3, #4
 800a484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	3304      	adds	r3, #4
 800a48a:	2b06      	cmp	r3, #6
 800a48c:	d902      	bls.n	800a494 <NVIC_EncodePriority+0x30>
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	3b03      	subs	r3, #3
 800a492:	e000      	b.n	800a496 <NVIC_EncodePriority+0x32>
 800a494:	2300      	movs	r3, #0
 800a496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a498:	f04f 32ff 	mov.w	r2, #4294967295
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a2:	43da      	mvns	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	401a      	ands	r2, r3
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a4ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b6:	43d9      	mvns	r1, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4bc:	4313      	orrs	r3, r2
         );
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3724      	adds	r7, #36	@ 0x24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4dc:	d301      	bcc.n	800a4e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e00f      	b.n	800a502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a4e2:	4a0a      	ldr	r2, [pc, #40]	@ (800a50c <SysTick_Config+0x40>)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a4ea:	210f      	movs	r1, #15
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	f7ff ff8e 	bl	800a410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a4f4:	4b05      	ldr	r3, [pc, #20]	@ (800a50c <SysTick_Config+0x40>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a4fa:	4b04      	ldr	r3, [pc, #16]	@ (800a50c <SysTick_Config+0x40>)
 800a4fc:	2207      	movs	r2, #7
 800a4fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	e000e010 	.word	0xe000e010

0800a510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff ff29 	bl	800a370 <__NVIC_SetPriorityGrouping>
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b086      	sub	sp, #24
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	4603      	mov	r3, r0
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
 800a532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a538:	f7ff ff3e 	bl	800a3b8 <__NVIC_GetPriorityGrouping>
 800a53c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	6978      	ldr	r0, [r7, #20]
 800a544:	f7ff ff8e 	bl	800a464 <NVIC_EncodePriority>
 800a548:	4602      	mov	r2, r0
 800a54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a54e:	4611      	mov	r1, r2
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff ff5d 	bl	800a410 <__NVIC_SetPriority>
}
 800a556:	bf00      	nop
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	4603      	mov	r3, r0
 800a566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff ff31 	bl	800a3d4 <__NVIC_EnableIRQ>
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff ffa2 	bl	800a4cc <SysTick_Config>
 800a588:	4603      	mov	r3, r0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d005      	beq.n	800a5b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
 800a5b4:	e029      	b.n	800a60a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 020e 	bic.w	r2, r2, #14
 800a5c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5da:	f003 021c 	and.w	r2, r3, #28
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a5e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3
    }
  }
  return status;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a61e:	2300      	movs	r3, #0
 800a620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a622:	e148      	b.n	800a8b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	2101      	movs	r1, #1
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	fa01 f303 	lsl.w	r3, r1, r3
 800a630:	4013      	ands	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 813a 	beq.w	800a8b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	2b01      	cmp	r3, #1
 800a646:	d005      	beq.n	800a654 <HAL_GPIO_Init+0x40>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f003 0303 	and.w	r3, r3, #3
 800a650:	2b02      	cmp	r3, #2
 800a652:	d130      	bne.n	800a6b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	2203      	movs	r2, #3
 800a660:	fa02 f303 	lsl.w	r3, r2, r3
 800a664:	43db      	mvns	r3, r3
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	4013      	ands	r3, r2
 800a66a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	fa02 f303 	lsl.w	r3, r2, r3
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a68a:	2201      	movs	r2, #1
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	fa02 f303 	lsl.w	r3, r2, r3
 800a692:	43db      	mvns	r3, r3
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	4013      	ands	r3, r2
 800a698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	091b      	lsrs	r3, r3, #4
 800a6a0:	f003 0201 	and.w	r2, r3, #1
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d017      	beq.n	800a6f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	2203      	movs	r2, #3
 800a6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f003 0303 	and.w	r3, r3, #3
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d123      	bne.n	800a746 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	08da      	lsrs	r2, r3, #3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3208      	adds	r2, #8
 800a706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	220f      	movs	r2, #15
 800a716:	fa02 f303 	lsl.w	r3, r2, r3
 800a71a:	43db      	mvns	r3, r3
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	4013      	ands	r3, r2
 800a720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	fa02 f303 	lsl.w	r3, r2, r3
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4313      	orrs	r3, r2
 800a736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	08da      	lsrs	r2, r3, #3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3208      	adds	r2, #8
 800a740:	6939      	ldr	r1, [r7, #16]
 800a742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	2203      	movs	r2, #3
 800a752:	fa02 f303 	lsl.w	r3, r2, r3
 800a756:	43db      	mvns	r3, r3
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4013      	ands	r3, r2
 800a75c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f003 0203 	and.w	r2, r3, #3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	fa02 f303 	lsl.w	r3, r2, r3
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	4313      	orrs	r3, r2
 800a772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 8094 	beq.w	800a8b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a788:	4b52      	ldr	r3, [pc, #328]	@ (800a8d4 <HAL_GPIO_Init+0x2c0>)
 800a78a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a78c:	4a51      	ldr	r2, [pc, #324]	@ (800a8d4 <HAL_GPIO_Init+0x2c0>)
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	6613      	str	r3, [r2, #96]	@ 0x60
 800a794:	4b4f      	ldr	r3, [pc, #316]	@ (800a8d4 <HAL_GPIO_Init+0x2c0>)
 800a796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	60bb      	str	r3, [r7, #8]
 800a79e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a7a0:	4a4d      	ldr	r2, [pc, #308]	@ (800a8d8 <HAL_GPIO_Init+0x2c4>)
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	089b      	lsrs	r3, r3, #2
 800a7a6:	3302      	adds	r3, #2
 800a7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f003 0303 	and.w	r3, r3, #3
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	220f      	movs	r2, #15
 800a7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7bc:	43db      	mvns	r3, r3
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a7ca:	d00d      	beq.n	800a7e8 <HAL_GPIO_Init+0x1d4>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a43      	ldr	r2, [pc, #268]	@ (800a8dc <HAL_GPIO_Init+0x2c8>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d007      	beq.n	800a7e4 <HAL_GPIO_Init+0x1d0>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a42      	ldr	r2, [pc, #264]	@ (800a8e0 <HAL_GPIO_Init+0x2cc>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d101      	bne.n	800a7e0 <HAL_GPIO_Init+0x1cc>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e004      	b.n	800a7ea <HAL_GPIO_Init+0x1d6>
 800a7e0:	2307      	movs	r3, #7
 800a7e2:	e002      	b.n	800a7ea <HAL_GPIO_Init+0x1d6>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <HAL_GPIO_Init+0x1d6>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	f002 0203 	and.w	r2, r2, #3
 800a7f0:	0092      	lsls	r2, r2, #2
 800a7f2:	4093      	lsls	r3, r2
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a7fa:	4937      	ldr	r1, [pc, #220]	@ (800a8d8 <HAL_GPIO_Init+0x2c4>)
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	089b      	lsrs	r3, r3, #2
 800a800:	3302      	adds	r3, #2
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a808:	4b36      	ldr	r3, [pc, #216]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	43db      	mvns	r3, r3
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	4013      	ands	r3, r2
 800a816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4313      	orrs	r3, r2
 800a82a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a82c:	4a2d      	ldr	r2, [pc, #180]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a832:	4b2c      	ldr	r3, [pc, #176]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	43db      	mvns	r3, r3
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4013      	ands	r3, r2
 800a840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a856:	4a23      	ldr	r2, [pc, #140]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a85c:	4b21      	ldr	r3, [pc, #132]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	43db      	mvns	r3, r3
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4013      	ands	r3, r2
 800a86a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d003      	beq.n	800a880 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a880:	4a18      	ldr	r2, [pc, #96]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a886:	4b17      	ldr	r3, [pc, #92]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	43db      	mvns	r3, r3
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4013      	ands	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a8aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a8e4 <HAL_GPIO_Init+0x2d0>)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f47f aeaf 	bne.w	800a624 <HAL_GPIO_Init+0x10>
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	bf00      	nop
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	40010000 	.word	0x40010000
 800a8dc:	48000400 	.word	0x48000400
 800a8e0:	48000800 	.word	0x48000800
 800a8e4:	40010400 	.word	0x40010400

0800a8e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	807b      	strh	r3, [r7, #2]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a8f8:	787b      	ldrb	r3, [r7, #1]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a8fe:	887a      	ldrh	r2, [r7, #2]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a904:	e002      	b.n	800a90c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a906:	887a      	ldrh	r2, [r7, #2]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a922:	4b08      	ldr	r3, [pc, #32]	@ (800a944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a924:	695a      	ldr	r2, [r3, #20]
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	4013      	ands	r3, r2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d006      	beq.n	800a93c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a92e:	4a05      	ldr	r2, [pc, #20]	@ (800a944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	4618      	mov	r0, r3
 800a938:	f7f7 f910 	bl	8001b5c <HAL_GPIO_EXTI_Callback>
  }
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	40010400 	.word	0x40010400

0800a948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e08d      	b.n	800aa76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f7 fa7e 	bl	8001e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2224      	movs	r2, #36	@ 0x24
 800a978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 0201 	bic.w	r2, r2, #1
 800a98a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d107      	bne.n	800a9c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	689a      	ldr	r2, [r3, #8]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a9be:	609a      	str	r2, [r3, #8]
 800a9c0:	e006      	b.n	800a9d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	689a      	ldr	r2, [r3, #8]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a9ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d108      	bne.n	800a9ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9e6:	605a      	str	r2, [r3, #4]
 800a9e8:	e007      	b.n	800a9fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aa08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aa1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69d9      	ldr	r1, [r3, #28]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a1a      	ldr	r2, [r3, #32]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0201 	orr.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af02      	add	r7, sp, #8
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4603      	mov	r3, r0
 800aa90:	817b      	strh	r3, [r7, #10]
 800aa92:	460b      	mov	r3, r1
 800aa94:	813b      	strh	r3, [r7, #8]
 800aa96:	4613      	mov	r3, r2
 800aa98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	f040 80f9 	bne.w	800ac9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <HAL_I2C_Mem_Write+0x34>
 800aaae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0ed      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d101      	bne.n	800aace <HAL_I2C_Mem_Write+0x4e>
 800aaca:	2302      	movs	r3, #2
 800aacc:	e0e6      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aad6:	f7fe f8c9 	bl	8008c6c <HAL_GetTick>
 800aada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	2319      	movs	r3, #25
 800aae2:	2201      	movs	r2, #1
 800aae4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f000 fbaf 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e0d1      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2221      	movs	r2, #33	@ 0x21
 800aafc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2240      	movs	r2, #64	@ 0x40
 800ab04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6a3a      	ldr	r2, [r7, #32]
 800ab12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ab18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab20:	88f8      	ldrh	r0, [r7, #6]
 800ab22:	893a      	ldrh	r2, [r7, #8]
 800ab24:	8979      	ldrh	r1, [r7, #10]
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	4603      	mov	r3, r0
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fabf 	bl	800b0b4 <I2C_RequestMemoryWrite>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e0a9      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2bff      	cmp	r3, #255	@ 0xff
 800ab50:	d90e      	bls.n	800ab70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22ff      	movs	r2, #255	@ 0xff
 800ab56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	8979      	ldrh	r1, [r7, #10]
 800ab60:	2300      	movs	r3, #0
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 fd33 	bl	800b5d4 <I2C_TransferConfig>
 800ab6e:	e00f      	b.n	800ab90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	8979      	ldrh	r1, [r7, #10]
 800ab82:	2300      	movs	r3, #0
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 fd22 	bl	800b5d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 fbb2 	bl	800b2fe <I2C_WaitOnTXISFlagUntilTimeout>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e07b      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba8:	781a      	ldrb	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d034      	beq.n	800ac48 <HAL_I2C_Mem_Write+0x1c8>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d130      	bne.n	800ac48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abec:	2200      	movs	r2, #0
 800abee:	2180      	movs	r1, #128	@ 0x80
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fb2b 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e04d      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	2bff      	cmp	r3, #255	@ 0xff
 800ac08:	d90e      	bls.n	800ac28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	22ff      	movs	r2, #255	@ 0xff
 800ac0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	8979      	ldrh	r1, [r7, #10]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fcd7 	bl	800b5d4 <I2C_TransferConfig>
 800ac26:	e00f      	b.n	800ac48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	8979      	ldrh	r1, [r7, #10]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fcc6 	bl	800b5d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d19e      	bne.n	800ab90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 fb98 	bl	800b38c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e01a      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6859      	ldr	r1, [r3, #4]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b0a      	ldr	r3, [pc, #40]	@ (800aca4 <HAL_I2C_Mem_Write+0x224>)
 800ac7a:	400b      	ands	r3, r1
 800ac7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2220      	movs	r2, #32
 800ac82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e000      	b.n	800ac9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ac9a:	2302      	movs	r3, #2
  }
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	fe00e800 	.word	0xfe00e800

0800aca8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af02      	add	r7, sp, #8
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	4608      	mov	r0, r1
 800acb2:	4611      	mov	r1, r2
 800acb4:	461a      	mov	r2, r3
 800acb6:	4603      	mov	r3, r0
 800acb8:	817b      	strh	r3, [r7, #10]
 800acba:	460b      	mov	r3, r1
 800acbc:	813b      	strh	r3, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b20      	cmp	r3, #32
 800accc:	f040 80fd 	bne.w	800aeca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <HAL_I2C_Mem_Read+0x34>
 800acd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d105      	bne.n	800ace8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ace2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e0f1      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d101      	bne.n	800acf6 <HAL_I2C_Mem_Read+0x4e>
 800acf2:	2302      	movs	r3, #2
 800acf4:	e0ea      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800acfe:	f7fd ffb5 	bl	8008c6c <HAL_GetTick>
 800ad02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	2319      	movs	r3, #25
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f000 fa9b 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e0d5      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2222      	movs	r2, #34	@ 0x22
 800ad24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2240      	movs	r2, #64	@ 0x40
 800ad2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a3a      	ldr	r2, [r7, #32]
 800ad3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad48:	88f8      	ldrh	r0, [r7, #6]
 800ad4a:	893a      	ldrh	r2, [r7, #8]
 800ad4c:	8979      	ldrh	r1, [r7, #10]
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	4603      	mov	r3, r0
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f9ff 	bl	800b15c <I2C_RequestMemoryRead>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d005      	beq.n	800ad70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0ad      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	2bff      	cmp	r3, #255	@ 0xff
 800ad78:	d90e      	bls.n	800ad98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	8979      	ldrh	r1, [r7, #10]
 800ad88:	4b52      	ldr	r3, [pc, #328]	@ (800aed4 <HAL_I2C_Mem_Read+0x22c>)
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 fc1f 	bl	800b5d4 <I2C_TransferConfig>
 800ad96:	e00f      	b.n	800adb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	8979      	ldrh	r1, [r7, #10]
 800adaa:	4b4a      	ldr	r3, [pc, #296]	@ (800aed4 <HAL_I2C_Mem_Read+0x22c>)
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f000 fc0e 	bl	800b5d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbe:	2200      	movs	r2, #0
 800adc0:	2104      	movs	r1, #4
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 fa42 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e07c      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800addc:	b2d2      	uxtb	r2, r2
 800adde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adee:	3b01      	subs	r3, #1
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	3b01      	subs	r3, #1
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d034      	beq.n	800ae78 <HAL_I2C_Mem_Read+0x1d0>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d130      	bne.n	800ae78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	2180      	movs	r1, #128	@ 0x80
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 fa13 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e04d      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	2bff      	cmp	r3, #255	@ 0xff
 800ae38:	d90e      	bls.n	800ae58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	8979      	ldrh	r1, [r7, #10]
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fbbf 	bl	800b5d4 <I2C_TransferConfig>
 800ae56:	e00f      	b.n	800ae78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	8979      	ldrh	r1, [r7, #10]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f000 fbae 	bl	800b5d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d19a      	bne.n	800adb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fa80 	bl	800b38c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e01a      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6859      	ldr	r1, [r3, #4]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	4b0b      	ldr	r3, [pc, #44]	@ (800aed8 <HAL_I2C_Mem_Read+0x230>)
 800aeaa:	400b      	ands	r3, r1
 800aeac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e000      	b.n	800aecc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aeca:	2302      	movs	r3, #2
  }
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	80002400 	.word	0x80002400
 800aed8:	fe00e800 	.word	0xfe00e800

0800aedc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08a      	sub	sp, #40	@ 0x28
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	460b      	mov	r3, r1
 800aeea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b20      	cmp	r3, #32
 800aefa:	f040 80d6 	bne.w	800b0aa <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af0c:	d101      	bne.n	800af12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800af0e:	2302      	movs	r3, #2
 800af10:	e0cc      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_I2C_IsDeviceReady+0x44>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e0c5      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2224      	movs	r2, #36	@ 0x24
 800af2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d107      	bne.n	800af4e <HAL_I2C_IsDeviceReady+0x72>
 800af3e:	897b      	ldrh	r3, [r7, #10]
 800af40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800af48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800af4c:	e006      	b.n	800af5c <HAL_I2C_IsDeviceReady+0x80>
 800af4e:	897b      	ldrh	r3, [r7, #10]
 800af50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800af58:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	6812      	ldr	r2, [r2, #0]
 800af60:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800af62:	f7fd fe83 	bl	8008c6c <HAL_GetTick>
 800af66:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b20      	cmp	r3, #32
 800af74:	bf0c      	ite	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	2300      	movne	r3, #0
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	f003 0310 	and.w	r3, r3, #16
 800af88:	2b10      	cmp	r3, #16
 800af8a:	bf0c      	ite	eq
 800af8c:	2301      	moveq	r3, #1
 800af8e:	2300      	movne	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800af94:	e034      	b.n	800b000 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d01a      	beq.n	800afd4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af9e:	f7fd fe65 	bl	8008c6c <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d302      	bcc.n	800afb4 <HAL_I2C_IsDeviceReady+0xd8>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10f      	bne.n	800afd4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc0:	f043 0220 	orr.w	r2, r3, #32
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e06b      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	f003 0320 	and.w	r3, r3, #32
 800afde:	2b20      	cmp	r3, #32
 800afe0:	bf0c      	ite	eq
 800afe2:	2301      	moveq	r3, #1
 800afe4:	2300      	movne	r3, #0
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	bf0c      	ite	eq
 800aff8:	2301      	moveq	r3, #1
 800affa:	2300      	movne	r3, #0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b000:	7ffb      	ldrb	r3, [r7, #31]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d102      	bne.n	800b00c <HAL_I2C_IsDeviceReady+0x130>
 800b006:	7fbb      	ldrb	r3, [r7, #30]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0c4      	beq.n	800af96 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	f003 0310 	and.w	r3, r3, #16
 800b016:	2b10      	cmp	r3, #16
 800b018:	d01a      	beq.n	800b050 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2200      	movs	r2, #0
 800b022:	2120      	movs	r1, #32
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 f911 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e03b      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2220      	movs	r2, #32
 800b03a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	e02d      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2200      	movs	r2, #0
 800b058:	2120      	movs	r1, #32
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 f8f6 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e020      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2210      	movs	r2, #16
 800b070:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2220      	movs	r2, #32
 800b078:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	3301      	adds	r3, #1
 800b07e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	429a      	cmp	r2, r3
 800b086:	f63f af56 	bhi.w	800af36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b096:	f043 0220 	orr.w	r2, r3, #32
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800b0aa:	2302      	movs	r3, #2
  }
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3720      	adds	r7, #32
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	817b      	strh	r3, [r7, #10]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	813b      	strh	r3, [r7, #8]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	8979      	ldrh	r1, [r7, #10]
 800b0d4:	4b20      	ldr	r3, [pc, #128]	@ (800b158 <I2C_RequestMemoryWrite+0xa4>)
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 fa79 	bl	800b5d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0e2:	69fa      	ldr	r2, [r7, #28]
 800b0e4:	69b9      	ldr	r1, [r7, #24]
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 f909 	bl	800b2fe <I2C_WaitOnTXISFlagUntilTimeout>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e02c      	b.n	800b150 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0f6:	88fb      	ldrh	r3, [r7, #6]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d105      	bne.n	800b108 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0fc:	893b      	ldrh	r3, [r7, #8]
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	629a      	str	r2, [r3, #40]	@ 0x28
 800b106:	e015      	b.n	800b134 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b108:	893b      	ldrh	r3, [r7, #8]
 800b10a:	0a1b      	lsrs	r3, r3, #8
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	69b9      	ldr	r1, [r7, #24]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f000 f8ef 	bl	800b2fe <I2C_WaitOnTXISFlagUntilTimeout>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e012      	b.n	800b150 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b12a:	893b      	ldrh	r3, [r7, #8]
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	2200      	movs	r2, #0
 800b13c:	2180      	movs	r1, #128	@ 0x80
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 f884 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e000      	b.n	800b150 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	80002000 	.word	0x80002000

0800b15c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af02      	add	r7, sp, #8
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	461a      	mov	r2, r3
 800b16a:	4603      	mov	r3, r0
 800b16c:	817b      	strh	r3, [r7, #10]
 800b16e:	460b      	mov	r3, r1
 800b170:	813b      	strh	r3, [r7, #8]
 800b172:	4613      	mov	r3, r2
 800b174:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b176:	88fb      	ldrh	r3, [r7, #6]
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	8979      	ldrh	r1, [r7, #10]
 800b17c:	4b20      	ldr	r3, [pc, #128]	@ (800b200 <I2C_RequestMemoryRead+0xa4>)
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	2300      	movs	r3, #0
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 fa26 	bl	800b5d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b188:	69fa      	ldr	r2, [r7, #28]
 800b18a:	69b9      	ldr	r1, [r7, #24]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 f8b6 	bl	800b2fe <I2C_WaitOnTXISFlagUntilTimeout>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e02c      	b.n	800b1f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b19c:	88fb      	ldrh	r3, [r7, #6]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d105      	bne.n	800b1ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b1a2:	893b      	ldrh	r3, [r7, #8]
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800b1ac:	e015      	b.n	800b1da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b1ae:	893b      	ldrh	r3, [r7, #8]
 800b1b0:	0a1b      	lsrs	r3, r3, #8
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1bc:	69fa      	ldr	r2, [r7, #28]
 800b1be:	69b9      	ldr	r1, [r7, #24]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f89c 	bl	800b2fe <I2C_WaitOnTXISFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e012      	b.n	800b1f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b1d0:	893b      	ldrh	r3, [r7, #8]
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2140      	movs	r1, #64	@ 0x40
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 f831 	bl	800b24c <I2C_WaitOnFlagUntilTimeout>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e000      	b.n	800b1f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	80002000 	.word	0x80002000

0800b204 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	f003 0302 	and.w	r3, r3, #2
 800b216:	2b02      	cmp	r3, #2
 800b218:	d103      	bne.n	800b222 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2200      	movs	r2, #0
 800b220:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d007      	beq.n	800b240 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0201 	orr.w	r2, r2, #1
 800b23e:	619a      	str	r2, [r3, #24]
  }
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	4613      	mov	r3, r2
 800b25a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b25c:	e03b      	b.n	800b2d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b25e:	69ba      	ldr	r2, [r7, #24]
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 f8d6 	bl	800b414 <I2C_IsErrorOccurred>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e041      	b.n	800b2f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b278:	d02d      	beq.n	800b2d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b27a:	f7fd fcf7 	bl	8008c6c <HAL_GetTick>
 800b27e:	4602      	mov	r2, r0
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d302      	bcc.n	800b290 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d122      	bne.n	800b2d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	699a      	ldr	r2, [r3, #24]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	4013      	ands	r3, r2
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	bf0c      	ite	eq
 800b2a0:	2301      	moveq	r3, #1
 800b2a2:	2300      	movne	r3, #0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d113      	bne.n	800b2d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2b2:	f043 0220 	orr.w	r2, r3, #32
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e00f      	b.n	800b2f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	699a      	ldr	r2, [r3, #24]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4013      	ands	r3, r2
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2301      	moveq	r3, #1
 800b2e8:	2300      	movne	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d0b4      	beq.n	800b25e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b30a:	e033      	b.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f87f 	bl	800b414 <I2C_IsErrorOccurred>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e031      	b.n	800b384 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b326:	d025      	beq.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b328:	f7fd fca0 	bl	8008c6c <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	429a      	cmp	r2, r3
 800b336:	d302      	bcc.n	800b33e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d11a      	bne.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d013      	beq.n	800b374 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b350:	f043 0220 	orr.w	r2, r3, #32
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2220      	movs	r2, #32
 800b35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e007      	b.n	800b384 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	f003 0302 	and.w	r3, r3, #2
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d1c4      	bne.n	800b30c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b398:	e02f      	b.n	800b3fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 f838 	bl	800b414 <I2C_IsErrorOccurred>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e02d      	b.n	800b40a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ae:	f7fd fc5d 	bl	8008c6c <HAL_GetTick>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d302      	bcc.n	800b3c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d11a      	bne.n	800b3fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b20      	cmp	r3, #32
 800b3d0:	d013      	beq.n	800b3fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3d6:	f043 0220 	orr.w	r2, r3, #32
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e007      	b.n	800b40a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b20      	cmp	r3, #32
 800b406:	d1c8      	bne.n	800b39a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b08a      	sub	sp, #40	@ 0x28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	f003 0310 	and.w	r3, r3, #16
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d068      	beq.n	800b512 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2210      	movs	r2, #16
 800b446:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b448:	e049      	b.n	800b4de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b450:	d045      	beq.n	800b4de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b452:	f7fd fc0b 	bl	8008c6c <HAL_GetTick>
 800b456:	4602      	mov	r2, r0
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d302      	bcc.n	800b468 <I2C_IsErrorOccurred+0x54>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d13a      	bne.n	800b4de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b472:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b47a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b48a:	d121      	bne.n	800b4d0 <I2C_IsErrorOccurred+0xbc>
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b492:	d01d      	beq.n	800b4d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b494:	7cfb      	ldrb	r3, [r7, #19]
 800b496:	2b20      	cmp	r3, #32
 800b498:	d01a      	beq.n	800b4d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b4aa:	f7fd fbdf 	bl	8008c6c <HAL_GetTick>
 800b4ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4b0:	e00e      	b.n	800b4d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b4b2:	f7fd fbdb 	bl	8008c6c <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	2b19      	cmp	r3, #25
 800b4be:	d907      	bls.n	800b4d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	f043 0320 	orr.w	r3, r3, #32
 800b4c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b4ce:	e006      	b.n	800b4de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b20      	cmp	r3, #32
 800b4dc:	d1e9      	bne.n	800b4b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	f003 0320 	and.w	r3, r3, #32
 800b4e8:	2b20      	cmp	r3, #32
 800b4ea:	d003      	beq.n	800b4f4 <I2C_IsErrorOccurred+0xe0>
 800b4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d0aa      	beq.n	800b44a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d103      	bne.n	800b504 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2220      	movs	r2, #32
 800b502:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	f043 0304 	orr.w	r3, r3, #4
 800b50a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	f043 0301 	orr.w	r3, r3, #1
 800b52a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00b      	beq.n	800b55e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	f043 0308 	orr.w	r3, r3, #8
 800b54c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b556:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	f043 0302 	orr.w	r3, r3, #2
 800b56e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01c      	beq.n	800b5c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff fe3b 	bl	800b204 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6859      	ldr	r1, [r3, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <I2C_IsErrorOccurred+0x1bc>)
 800b59a:	400b      	ands	r3, r1
 800b59c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3728      	adds	r7, #40	@ 0x28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	fe00e800 	.word	0xfe00e800

0800b5d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	607b      	str	r3, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	817b      	strh	r3, [r7, #10]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5e6:	897b      	ldrh	r3, [r7, #10]
 800b5e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b5ec:	7a7b      	ldrb	r3, [r7, #9]
 800b5ee:	041b      	lsls	r3, r3, #16
 800b5f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b602:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	0d5b      	lsrs	r3, r3, #21
 800b60e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b612:	4b08      	ldr	r3, [pc, #32]	@ (800b634 <I2C_TransferConfig+0x60>)
 800b614:	430b      	orrs	r3, r1
 800b616:	43db      	mvns	r3, r3
 800b618:	ea02 0103 	and.w	r1, r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	430a      	orrs	r2, r1
 800b624:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	03ff63ff 	.word	0x03ff63ff

0800b638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b20      	cmp	r3, #32
 800b64c:	d138      	bne.n	800b6c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b654:	2b01      	cmp	r3, #1
 800b656:	d101      	bne.n	800b65c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b658:	2302      	movs	r3, #2
 800b65a:	e032      	b.n	800b6c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2224      	movs	r2, #36	@ 0x24
 800b668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f022 0201 	bic.w	r2, r2, #1
 800b67a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b68a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6819      	ldr	r1, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	430a      	orrs	r2, r1
 800b69a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f042 0201 	orr.w	r2, r2, #1
 800b6aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e000      	b.n	800b6c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b6c0:	2302      	movs	r3, #2
  }
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b20      	cmp	r3, #32
 800b6e2:	d139      	bne.n	800b758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e033      	b.n	800b75a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2224      	movs	r2, #36	@ 0x24
 800b6fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f022 0201 	bic.w	r2, r2, #1
 800b710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	021b      	lsls	r3, r3, #8
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	4313      	orrs	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0201 	orr.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2220      	movs	r2, #32
 800b748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	e000      	b.n	800b75a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b758:	2302      	movs	r3, #2
  }
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
	...

0800b768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b76c:	4b04      	ldr	r3, [pc, #16]	@ (800b780 <HAL_PWREx_GetVoltageRange+0x18>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800b774:	4618      	mov	r0, r3
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	40007000 	.word	0x40007000

0800b784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b792:	d130      	bne.n	800b7f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b794:	4b23      	ldr	r3, [pc, #140]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b79c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7a0:	d038      	beq.n	800b814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b7a2:	4b20      	ldr	r3, [pc, #128]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b7b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2232      	movs	r2, #50	@ 0x32
 800b7b8:	fb02 f303 	mul.w	r3, r2, r3
 800b7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800b82c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b7be:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c2:	0c9b      	lsrs	r3, r3, #18
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b7c8:	e002      	b.n	800b7d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b7d0:	4b14      	ldr	r3, [pc, #80]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7dc:	d102      	bne.n	800b7e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f2      	bne.n	800b7ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7f0:	d110      	bne.n	800b814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e00f      	b.n	800b816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b7fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b802:	d007      	beq.n	800b814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b804:	4b07      	ldr	r3, [pc, #28]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b80c:	4a05      	ldr	r2, [pc, #20]	@ (800b824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b80e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	40007000 	.word	0x40007000
 800b828:	20000000 	.word	0x20000000
 800b82c:	431bde83 	.word	0x431bde83

0800b830 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d102      	bne.n	800b844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	f000 bc02 	b.w	800c048 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b844:	4b96      	ldr	r3, [pc, #600]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f003 030c 	and.w	r3, r3, #12
 800b84c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b84e:	4b94      	ldr	r3, [pc, #592]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f003 0303 	and.w	r3, r3, #3
 800b856:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0310 	and.w	r3, r3, #16
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80e4 	beq.w	800ba2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d007      	beq.n	800b87c <HAL_RCC_OscConfig+0x4c>
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	2b0c      	cmp	r3, #12
 800b870:	f040 808b 	bne.w	800b98a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b01      	cmp	r3, #1
 800b878:	f040 8087 	bne.w	800b98a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b87c:	4b88      	ldr	r3, [pc, #544]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0302 	and.w	r3, r3, #2
 800b884:	2b00      	cmp	r3, #0
 800b886:	d005      	beq.n	800b894 <HAL_RCC_OscConfig+0x64>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e3d9      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a1a      	ldr	r2, [r3, #32]
 800b898:	4b81      	ldr	r3, [pc, #516]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0308 	and.w	r3, r3, #8
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d004      	beq.n	800b8ae <HAL_RCC_OscConfig+0x7e>
 800b8a4:	4b7e      	ldr	r3, [pc, #504]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b8ac:	e005      	b.n	800b8ba <HAL_RCC_OscConfig+0x8a>
 800b8ae:	4b7c      	ldr	r3, [pc, #496]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8b4:	091b      	lsrs	r3, r3, #4
 800b8b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d223      	bcs.n	800b906 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 fd54 	bl	800c370 <RCC_SetFlashLatencyFromMSIRange>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e3ba      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b8d2:	4b73      	ldr	r3, [pc, #460]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a72      	ldr	r2, [pc, #456]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8d8:	f043 0308 	orr.w	r3, r3, #8
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	4b70      	ldr	r3, [pc, #448]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	496d      	ldr	r1, [pc, #436]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b8f0:	4b6b      	ldr	r3, [pc, #428]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	4968      	ldr	r1, [pc, #416]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b900:	4313      	orrs	r3, r2
 800b902:	604b      	str	r3, [r1, #4]
 800b904:	e025      	b.n	800b952 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b906:	4b66      	ldr	r3, [pc, #408]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a65      	ldr	r2, [pc, #404]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b90c:	f043 0308 	orr.w	r3, r3, #8
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	4b63      	ldr	r3, [pc, #396]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	4960      	ldr	r1, [pc, #384]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b920:	4313      	orrs	r3, r2
 800b922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b924:	4b5e      	ldr	r3, [pc, #376]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	021b      	lsls	r3, r3, #8
 800b932:	495b      	ldr	r1, [pc, #364]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b934:	4313      	orrs	r3, r2
 800b936:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d109      	bne.n	800b952 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	4618      	mov	r0, r3
 800b944:	f000 fd14 	bl	800c370 <RCC_SetFlashLatencyFromMSIRange>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e37a      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b952:	f000 fc81 	bl	800c258 <HAL_RCC_GetSysClockFreq>
 800b956:	4602      	mov	r2, r0
 800b958:	4b51      	ldr	r3, [pc, #324]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	091b      	lsrs	r3, r3, #4
 800b95e:	f003 030f 	and.w	r3, r3, #15
 800b962:	4950      	ldr	r1, [pc, #320]	@ (800baa4 <HAL_RCC_OscConfig+0x274>)
 800b964:	5ccb      	ldrb	r3, [r1, r3]
 800b966:	f003 031f 	and.w	r3, r3, #31
 800b96a:	fa22 f303 	lsr.w	r3, r2, r3
 800b96e:	4a4e      	ldr	r2, [pc, #312]	@ (800baa8 <HAL_RCC_OscConfig+0x278>)
 800b970:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b972:	4b4e      	ldr	r3, [pc, #312]	@ (800baac <HAL_RCC_OscConfig+0x27c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4618      	mov	r0, r3
 800b978:	f7fd f928 	bl	8008bcc <HAL_InitTick>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b980:	7bfb      	ldrb	r3, [r7, #15]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d052      	beq.n	800ba2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	e35e      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d032      	beq.n	800b9f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b992:	4b43      	ldr	r3, [pc, #268]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a42      	ldr	r2, [pc, #264]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b998:	f043 0301 	orr.w	r3, r3, #1
 800b99c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b99e:	f7fd f965 	bl	8008c6c <HAL_GetTick>
 800b9a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b9a4:	e008      	b.n	800b9b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b9a6:	f7fd f961 	bl	8008c6c <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d901      	bls.n	800b9b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e347      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b9b8:	4b39      	ldr	r3, [pc, #228]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0302 	and.w	r3, r3, #2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d0f0      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b9c4:	4b36      	ldr	r3, [pc, #216]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a35      	ldr	r2, [pc, #212]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9ca:	f043 0308 	orr.w	r3, r3, #8
 800b9ce:	6013      	str	r3, [r2, #0]
 800b9d0:	4b33      	ldr	r3, [pc, #204]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	4930      	ldr	r1, [pc, #192]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b9e2:	4b2f      	ldr	r3, [pc, #188]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	492b      	ldr	r1, [pc, #172]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	604b      	str	r3, [r1, #4]
 800b9f6:	e01a      	b.n	800ba2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b9f8:	4b29      	ldr	r3, [pc, #164]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a28      	ldr	r2, [pc, #160]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800b9fe:	f023 0301 	bic.w	r3, r3, #1
 800ba02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ba04:	f7fd f932 	bl	8008c6c <HAL_GetTick>
 800ba08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ba0a:	e008      	b.n	800ba1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba0c:	f7fd f92e 	bl	8008c6c <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d901      	bls.n	800ba1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e314      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ba1e:	4b20      	ldr	r3, [pc, #128]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f0      	bne.n	800ba0c <HAL_RCC_OscConfig+0x1dc>
 800ba2a:	e000      	b.n	800ba2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ba2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 0301 	and.w	r3, r3, #1
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d073      	beq.n	800bb22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d005      	beq.n	800ba4c <HAL_RCC_OscConfig+0x21c>
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	2b0c      	cmp	r3, #12
 800ba44:	d10e      	bne.n	800ba64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d10b      	bne.n	800ba64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba4c:	4b14      	ldr	r3, [pc, #80]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d063      	beq.n	800bb20 <HAL_RCC_OscConfig+0x2f0>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d15f      	bne.n	800bb20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e2f1      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6c:	d106      	bne.n	800ba7c <HAL_RCC_OscConfig+0x24c>
 800ba6e:	4b0c      	ldr	r3, [pc, #48]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a0b      	ldr	r2, [pc, #44]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	e025      	b.n	800bac8 <HAL_RCC_OscConfig+0x298>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba84:	d114      	bne.n	800bab0 <HAL_RCC_OscConfig+0x280>
 800ba86:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a05      	ldr	r2, [pc, #20]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	4b03      	ldr	r3, [pc, #12]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a02      	ldr	r2, [pc, #8]	@ (800baa0 <HAL_RCC_OscConfig+0x270>)
 800ba98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	e013      	b.n	800bac8 <HAL_RCC_OscConfig+0x298>
 800baa0:	40021000 	.word	0x40021000
 800baa4:	0800ed28 	.word	0x0800ed28
 800baa8:	20000000 	.word	0x20000000
 800baac:	20000018 	.word	0x20000018
 800bab0:	4ba0      	ldr	r3, [pc, #640]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a9f      	ldr	r2, [pc, #636]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	4b9d      	ldr	r3, [pc, #628]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a9c      	ldr	r2, [pc, #624]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d013      	beq.n	800baf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bad0:	f7fd f8cc 	bl	8008c6c <HAL_GetTick>
 800bad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bad6:	e008      	b.n	800baea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bad8:	f7fd f8c8 	bl	8008c6c <HAL_GetTick>
 800badc:	4602      	mov	r2, r0
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	2b64      	cmp	r3, #100	@ 0x64
 800bae4:	d901      	bls.n	800baea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e2ae      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800baea:	4b92      	ldr	r3, [pc, #584]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0f0      	beq.n	800bad8 <HAL_RCC_OscConfig+0x2a8>
 800baf6:	e014      	b.n	800bb22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baf8:	f7fd f8b8 	bl	8008c6c <HAL_GetTick>
 800bafc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bafe:	e008      	b.n	800bb12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb00:	f7fd f8b4 	bl	8008c6c <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	2b64      	cmp	r3, #100	@ 0x64
 800bb0c:	d901      	bls.n	800bb12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e29a      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bb12:	4b88      	ldr	r3, [pc, #544]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1f0      	bne.n	800bb00 <HAL_RCC_OscConfig+0x2d0>
 800bb1e:	e000      	b.n	800bb22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d060      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d005      	beq.n	800bb40 <HAL_RCC_OscConfig+0x310>
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	2b0c      	cmp	r3, #12
 800bb38:	d119      	bne.n	800bb6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d116      	bne.n	800bb6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb40:	4b7c      	ldr	r3, [pc, #496]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d005      	beq.n	800bb58 <HAL_RCC_OscConfig+0x328>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e277      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb58:	4b76      	ldr	r3, [pc, #472]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	061b      	lsls	r3, r3, #24
 800bb66:	4973      	ldr	r1, [pc, #460]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb6c:	e040      	b.n	800bbf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d023      	beq.n	800bbbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb76:	4b6f      	ldr	r3, [pc, #444]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a6e      	ldr	r2, [pc, #440]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb82:	f7fd f873 	bl	8008c6c <HAL_GetTick>
 800bb86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb88:	e008      	b.n	800bb9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb8a:	f7fd f86f 	bl	8008c6c <HAL_GetTick>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d901      	bls.n	800bb9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e255      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb9c:	4b65      	ldr	r3, [pc, #404]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0f0      	beq.n	800bb8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bba8:	4b62      	ldr	r3, [pc, #392]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	061b      	lsls	r3, r3, #24
 800bbb6:	495f      	ldr	r1, [pc, #380]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	604b      	str	r3, [r1, #4]
 800bbbc:	e018      	b.n	800bbf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbbe:	4b5d      	ldr	r3, [pc, #372]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a5c      	ldr	r2, [pc, #368]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bbc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbca:	f7fd f84f 	bl	8008c6c <HAL_GetTick>
 800bbce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bbd0:	e008      	b.n	800bbe4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbd2:	f7fd f84b 	bl	8008c6c <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d901      	bls.n	800bbe4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e231      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bbe4:	4b53      	ldr	r3, [pc, #332]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f0      	bne.n	800bbd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0308 	and.w	r3, r3, #8
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d03c      	beq.n	800bc76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01c      	beq.n	800bc3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc04:	4b4b      	ldr	r3, [pc, #300]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc0a:	4a4a      	ldr	r2, [pc, #296]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc0c:	f043 0301 	orr.w	r3, r3, #1
 800bc10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc14:	f7fd f82a 	bl	8008c6c <HAL_GetTick>
 800bc18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bc1a:	e008      	b.n	800bc2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc1c:	f7fd f826 	bl	8008c6c <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d901      	bls.n	800bc2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e20c      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bc2e:	4b41      	ldr	r3, [pc, #260]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0ef      	beq.n	800bc1c <HAL_RCC_OscConfig+0x3ec>
 800bc3c:	e01b      	b.n	800bc76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc3e:	4b3d      	ldr	r3, [pc, #244]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc44:	4a3b      	ldr	r2, [pc, #236]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc46:	f023 0301 	bic.w	r3, r3, #1
 800bc4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc4e:	f7fd f80d 	bl	8008c6c <HAL_GetTick>
 800bc52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc54:	e008      	b.n	800bc68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc56:	f7fd f809 	bl	8008c6c <HAL_GetTick>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d901      	bls.n	800bc68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bc64:	2303      	movs	r3, #3
 800bc66:	e1ef      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc68:	4b32      	ldr	r3, [pc, #200]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1ef      	bne.n	800bc56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0304 	and.w	r3, r3, #4
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 80a6 	beq.w	800bdd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc84:	2300      	movs	r3, #0
 800bc86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bc88:	4b2a      	ldr	r3, [pc, #168]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10d      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc94:	4b27      	ldr	r3, [pc, #156]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc98:	4a26      	ldr	r2, [pc, #152]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bc9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bca0:	4b24      	ldr	r3, [pc, #144]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bca8:	60bb      	str	r3, [r7, #8]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bcac:	2301      	movs	r3, #1
 800bcae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcb0:	4b21      	ldr	r3, [pc, #132]	@ (800bd38 <HAL_RCC_OscConfig+0x508>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d118      	bne.n	800bcee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcbc:	4b1e      	ldr	r3, [pc, #120]	@ (800bd38 <HAL_RCC_OscConfig+0x508>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd38 <HAL_RCC_OscConfig+0x508>)
 800bcc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bcc8:	f7fc ffd0 	bl	8008c6c <HAL_GetTick>
 800bccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcce:	e008      	b.n	800bce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcd0:	f7fc ffcc 	bl	8008c6c <HAL_GetTick>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	d901      	bls.n	800bce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e1b2      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bce2:	4b15      	ldr	r3, [pc, #84]	@ (800bd38 <HAL_RCC_OscConfig+0x508>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0f0      	beq.n	800bcd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d108      	bne.n	800bd08 <HAL_RCC_OscConfig+0x4d8>
 800bcf6:	4b0f      	ldr	r3, [pc, #60]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcfc:	4a0d      	ldr	r2, [pc, #52]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bcfe:	f043 0301 	orr.w	r3, r3, #1
 800bd02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bd06:	e029      	b.n	800bd5c <HAL_RCC_OscConfig+0x52c>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	2b05      	cmp	r3, #5
 800bd0e:	d115      	bne.n	800bd3c <HAL_RCC_OscConfig+0x50c>
 800bd10:	4b08      	ldr	r3, [pc, #32]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd16:	4a07      	ldr	r2, [pc, #28]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bd18:	f043 0304 	orr.w	r3, r3, #4
 800bd1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bd20:	4b04      	ldr	r3, [pc, #16]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd26:	4a03      	ldr	r2, [pc, #12]	@ (800bd34 <HAL_RCC_OscConfig+0x504>)
 800bd28:	f043 0301 	orr.w	r3, r3, #1
 800bd2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bd30:	e014      	b.n	800bd5c <HAL_RCC_OscConfig+0x52c>
 800bd32:	bf00      	nop
 800bd34:	40021000 	.word	0x40021000
 800bd38:	40007000 	.word	0x40007000
 800bd3c:	4b9a      	ldr	r3, [pc, #616]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd42:	4a99      	ldr	r2, [pc, #612]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bd44:	f023 0301 	bic.w	r3, r3, #1
 800bd48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bd4c:	4b96      	ldr	r3, [pc, #600]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd52:	4a95      	ldr	r2, [pc, #596]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bd54:	f023 0304 	bic.w	r3, r3, #4
 800bd58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d016      	beq.n	800bd92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd64:	f7fc ff82 	bl	8008c6c <HAL_GetTick>
 800bd68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd6a:	e00a      	b.n	800bd82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd6c:	f7fc ff7e 	bl	8008c6c <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d901      	bls.n	800bd82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e162      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd82:	4b89      	ldr	r3, [pc, #548]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd88:	f003 0302 	and.w	r3, r3, #2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0ed      	beq.n	800bd6c <HAL_RCC_OscConfig+0x53c>
 800bd90:	e015      	b.n	800bdbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd92:	f7fc ff6b 	bl	8008c6c <HAL_GetTick>
 800bd96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd98:	e00a      	b.n	800bdb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd9a:	f7fc ff67 	bl	8008c6c <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d901      	bls.n	800bdb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bdac:	2303      	movs	r3, #3
 800bdae:	e14b      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bdb0:	4b7d      	ldr	r3, [pc, #500]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1ed      	bne.n	800bd9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bdbe:	7ffb      	ldrb	r3, [r7, #31]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d105      	bne.n	800bdd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdc4:	4b78      	ldr	r3, [pc, #480]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bdc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdc8:	4a77      	ldr	r2, [pc, #476]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bdca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bdce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0320 	and.w	r3, r3, #32
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d03c      	beq.n	800be56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d01c      	beq.n	800be1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bde4:	4b70      	ldr	r3, [pc, #448]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bde6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdea:	4a6f      	ldr	r2, [pc, #444]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bdec:	f043 0301 	orr.w	r3, r3, #1
 800bdf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdf4:	f7fc ff3a 	bl	8008c6c <HAL_GetTick>
 800bdf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bdfa:	e008      	b.n	800be0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdfc:	f7fc ff36 	bl	8008c6c <HAL_GetTick>
 800be00:	4602      	mov	r2, r0
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	2b02      	cmp	r3, #2
 800be08:	d901      	bls.n	800be0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e11c      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800be0e:	4b66      	ldr	r3, [pc, #408]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800be10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d0ef      	beq.n	800bdfc <HAL_RCC_OscConfig+0x5cc>
 800be1c:	e01b      	b.n	800be56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800be1e:	4b62      	ldr	r3, [pc, #392]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800be20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be24:	4a60      	ldr	r2, [pc, #384]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800be26:	f023 0301 	bic.w	r3, r3, #1
 800be2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be2e:	f7fc ff1d 	bl	8008c6c <HAL_GetTick>
 800be32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800be34:	e008      	b.n	800be48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be36:	f7fc ff19 	bl	8008c6c <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	2b02      	cmp	r3, #2
 800be42:	d901      	bls.n	800be48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800be44:	2303      	movs	r3, #3
 800be46:	e0ff      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800be48:	4b57      	ldr	r3, [pc, #348]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800be4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1ef      	bne.n	800be36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80f3 	beq.w	800c046 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be64:	2b02      	cmp	r3, #2
 800be66:	f040 80c9 	bne.w	800bffc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800be6a:	4b4f      	ldr	r3, [pc, #316]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f003 0203 	and.w	r2, r3, #3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d12c      	bne.n	800bed8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be88:	3b01      	subs	r3, #1
 800be8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d123      	bne.n	800bed8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d11b      	bne.n	800bed8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beaa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800beac:	429a      	cmp	r2, r3
 800beae:	d113      	bne.n	800bed8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beba:	085b      	lsrs	r3, r3, #1
 800bebc:	3b01      	subs	r3, #1
 800bebe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d109      	bne.n	800bed8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	3b01      	subs	r3, #1
 800bed2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d06b      	beq.n	800bfb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	2b0c      	cmp	r3, #12
 800bedc:	d062      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bede:	4b32      	ldr	r3, [pc, #200]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e0ac      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800beee:	4b2e      	ldr	r3, [pc, #184]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a2d      	ldr	r2, [pc, #180]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bef4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bef8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800befa:	f7fc feb7 	bl	8008c6c <HAL_GetTick>
 800befe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf00:	e008      	b.n	800bf14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf02:	f7fc feb3 	bl	8008c6c <HAL_GetTick>
 800bf06:	4602      	mov	r2, r0
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d901      	bls.n	800bf14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e099      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf14:	4b24      	ldr	r3, [pc, #144]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1f0      	bne.n	800bf02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf20:	4b21      	ldr	r3, [pc, #132]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	4b21      	ldr	r3, [pc, #132]	@ (800bfac <HAL_RCC_OscConfig+0x77c>)
 800bf26:	4013      	ands	r3, r2
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bf30:	3a01      	subs	r2, #1
 800bf32:	0112      	lsls	r2, r2, #4
 800bf34:	4311      	orrs	r1, r2
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bf3a:	0212      	lsls	r2, r2, #8
 800bf3c:	4311      	orrs	r1, r2
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bf42:	0852      	lsrs	r2, r2, #1
 800bf44:	3a01      	subs	r2, #1
 800bf46:	0552      	lsls	r2, r2, #21
 800bf48:	4311      	orrs	r1, r2
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800bf4e:	0852      	lsrs	r2, r2, #1
 800bf50:	3a01      	subs	r2, #1
 800bf52:	0652      	lsls	r2, r2, #25
 800bf54:	4311      	orrs	r1, r2
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bf5a:	06d2      	lsls	r2, r2, #27
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	4912      	ldr	r1, [pc, #72]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bf64:	4b10      	ldr	r3, [pc, #64]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a0f      	ldr	r2, [pc, #60]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bf70:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bf7c:	f7fc fe76 	bl	8008c6c <HAL_GetTick>
 800bf80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf82:	e008      	b.n	800bf96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf84:	f7fc fe72 	bl	8008c6c <HAL_GetTick>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d901      	bls.n	800bf96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e058      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf96:	4b04      	ldr	r3, [pc, #16]	@ (800bfa8 <HAL_RCC_OscConfig+0x778>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d0f0      	beq.n	800bf84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bfa2:	e050      	b.n	800c046 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e04f      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
 800bfa8:	40021000 	.word	0x40021000
 800bfac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bfb0:	4b27      	ldr	r3, [pc, #156]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d144      	bne.n	800c046 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bfbc:	4b24      	ldr	r3, [pc, #144]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a23      	ldr	r2, [pc, #140]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800bfc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bfc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bfc8:	4b21      	ldr	r3, [pc, #132]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	4a20      	ldr	r2, [pc, #128]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800bfce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bfd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bfd4:	f7fc fe4a 	bl	8008c6c <HAL_GetTick>
 800bfd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bfda:	e008      	b.n	800bfee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfdc:	f7fc fe46 	bl	8008c6c <HAL_GetTick>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d901      	bls.n	800bfee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	e02c      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bfee:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0f0      	beq.n	800bfdc <HAL_RCC_OscConfig+0x7ac>
 800bffa:	e024      	b.n	800c046 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	2b0c      	cmp	r3, #12
 800c000:	d01f      	beq.n	800c042 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c002:	4b13      	ldr	r3, [pc, #76]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a12      	ldr	r2, [pc, #72]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800c008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c00c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c00e:	f7fc fe2d 	bl	8008c6c <HAL_GetTick>
 800c012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c014:	e008      	b.n	800c028 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c016:	f7fc fe29 	bl	8008c6c <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	2b02      	cmp	r3, #2
 800c022:	d901      	bls.n	800c028 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e00f      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c028:	4b09      	ldr	r3, [pc, #36]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f0      	bne.n	800c016 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c034:	4b06      	ldr	r3, [pc, #24]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	4905      	ldr	r1, [pc, #20]	@ (800c050 <HAL_RCC_OscConfig+0x820>)
 800c03a:	4b06      	ldr	r3, [pc, #24]	@ (800c054 <HAL_RCC_OscConfig+0x824>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	60cb      	str	r3, [r1, #12]
 800c040:	e001      	b.n	800c046 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e000      	b.n	800c048 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	40021000 	.word	0x40021000
 800c054:	feeefffc 	.word	0xfeeefffc

0800c058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	e0e7      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c06c:	4b75      	ldr	r3, [pc, #468]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 0307 	and.w	r3, r3, #7
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	429a      	cmp	r2, r3
 800c078:	d910      	bls.n	800c09c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c07a:	4b72      	ldr	r3, [pc, #456]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f023 0207 	bic.w	r2, r3, #7
 800c082:	4970      	ldr	r1, [pc, #448]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	4313      	orrs	r3, r2
 800c088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c08a:	4b6e      	ldr	r3, [pc, #440]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0307 	and.w	r3, r3, #7
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	429a      	cmp	r2, r3
 800c096:	d001      	beq.n	800c09c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e0cf      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f003 0302 	and.w	r3, r3, #2
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d010      	beq.n	800c0ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	4b66      	ldr	r3, [pc, #408]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d908      	bls.n	800c0ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0b8:	4b63      	ldr	r3, [pc, #396]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	4960      	ldr	r1, [pc, #384]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d04c      	beq.n	800c170 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d107      	bne.n	800c0ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0de:	4b5a      	ldr	r3, [pc, #360]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d121      	bne.n	800c12e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e0a6      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d107      	bne.n	800c106 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c0f6:	4b54      	ldr	r3, [pc, #336]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d115      	bne.n	800c12e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e09a      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d107      	bne.n	800c11e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c10e:	4b4e      	ldr	r3, [pc, #312]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d109      	bne.n	800c12e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e08e      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c11e:	4b4a      	ldr	r3, [pc, #296]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e086      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c12e:	4b46      	ldr	r3, [pc, #280]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f023 0203 	bic.w	r2, r3, #3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4943      	ldr	r1, [pc, #268]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c13c:	4313      	orrs	r3, r2
 800c13e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c140:	f7fc fd94 	bl	8008c6c <HAL_GetTick>
 800c144:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c146:	e00a      	b.n	800c15e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c148:	f7fc fd90 	bl	8008c6c <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c156:	4293      	cmp	r3, r2
 800c158:	d901      	bls.n	800c15e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e06e      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c15e:	4b3a      	ldr	r3, [pc, #232]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f003 020c 	and.w	r2, r3, #12
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d1eb      	bne.n	800c148 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f003 0302 	and.w	r3, r3, #2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d010      	beq.n	800c19e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689a      	ldr	r2, [r3, #8]
 800c180:	4b31      	ldr	r3, [pc, #196]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c188:	429a      	cmp	r2, r3
 800c18a:	d208      	bcs.n	800c19e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c18c:	4b2e      	ldr	r3, [pc, #184]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	492b      	ldr	r1, [pc, #172]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c19a:	4313      	orrs	r3, r2
 800c19c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c19e:	4b29      	ldr	r3, [pc, #164]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d210      	bcs.n	800c1ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1ac:	4b25      	ldr	r3, [pc, #148]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f023 0207 	bic.w	r2, r3, #7
 800c1b4:	4923      	ldr	r1, [pc, #140]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1bc:	4b21      	ldr	r3, [pc, #132]	@ (800c244 <HAL_RCC_ClockConfig+0x1ec>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0307 	and.w	r3, r3, #7
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d001      	beq.n	800c1ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e036      	b.n	800c23c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0304 	and.w	r3, r3, #4
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d008      	beq.n	800c1ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1da:	4b1b      	ldr	r3, [pc, #108]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	4918      	ldr	r1, [pc, #96]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0308 	and.w	r3, r3, #8
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1f8:	4b13      	ldr	r3, [pc, #76]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	4910      	ldr	r1, [pc, #64]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c208:	4313      	orrs	r3, r2
 800c20a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c20c:	f000 f824 	bl	800c258 <HAL_RCC_GetSysClockFreq>
 800c210:	4602      	mov	r2, r0
 800c212:	4b0d      	ldr	r3, [pc, #52]	@ (800c248 <HAL_RCC_ClockConfig+0x1f0>)
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	091b      	lsrs	r3, r3, #4
 800c218:	f003 030f 	and.w	r3, r3, #15
 800c21c:	490b      	ldr	r1, [pc, #44]	@ (800c24c <HAL_RCC_ClockConfig+0x1f4>)
 800c21e:	5ccb      	ldrb	r3, [r1, r3]
 800c220:	f003 031f 	and.w	r3, r3, #31
 800c224:	fa22 f303 	lsr.w	r3, r2, r3
 800c228:	4a09      	ldr	r2, [pc, #36]	@ (800c250 <HAL_RCC_ClockConfig+0x1f8>)
 800c22a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c22c:	4b09      	ldr	r3, [pc, #36]	@ (800c254 <HAL_RCC_ClockConfig+0x1fc>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4618      	mov	r0, r3
 800c232:	f7fc fccb 	bl	8008bcc <HAL_InitTick>
 800c236:	4603      	mov	r3, r0
 800c238:	72fb      	strb	r3, [r7, #11]

  return status;
 800c23a:	7afb      	ldrb	r3, [r7, #11]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	40022000 	.word	0x40022000
 800c248:	40021000 	.word	0x40021000
 800c24c:	0800ed28 	.word	0x0800ed28
 800c250:	20000000 	.word	0x20000000
 800c254:	20000018 	.word	0x20000018

0800c258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c258:	b480      	push	{r7}
 800c25a:	b089      	sub	sp, #36	@ 0x24
 800c25c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	2300      	movs	r3, #0
 800c264:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c266:	4b3e      	ldr	r3, [pc, #248]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f003 030c 	and.w	r3, r3, #12
 800c26e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c270:	4b3b      	ldr	r3, [pc, #236]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	f003 0303 	and.w	r3, r3, #3
 800c278:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d005      	beq.n	800c28c <HAL_RCC_GetSysClockFreq+0x34>
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	2b0c      	cmp	r3, #12
 800c284:	d121      	bne.n	800c2ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d11e      	bne.n	800c2ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c28c:	4b34      	ldr	r3, [pc, #208]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0308 	and.w	r3, r3, #8
 800c294:	2b00      	cmp	r3, #0
 800c296:	d107      	bne.n	800c2a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c298:	4b31      	ldr	r3, [pc, #196]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c29e:	0a1b      	lsrs	r3, r3, #8
 800c2a0:	f003 030f 	and.w	r3, r3, #15
 800c2a4:	61fb      	str	r3, [r7, #28]
 800c2a6:	e005      	b.n	800c2b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c2a8:	4b2d      	ldr	r3, [pc, #180]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	091b      	lsrs	r3, r3, #4
 800c2ae:	f003 030f 	and.w	r3, r3, #15
 800c2b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c2b4:	4a2b      	ldr	r2, [pc, #172]	@ (800c364 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10d      	bne.n	800c2e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c2c8:	e00a      	b.n	800c2e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b04      	cmp	r3, #4
 800c2ce:	d102      	bne.n	800c2d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c2d0:	4b25      	ldr	r3, [pc, #148]	@ (800c368 <HAL_RCC_GetSysClockFreq+0x110>)
 800c2d2:	61bb      	str	r3, [r7, #24]
 800c2d4:	e004      	b.n	800c2e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d101      	bne.n	800c2e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c2dc:	4b23      	ldr	r3, [pc, #140]	@ (800c36c <HAL_RCC_GetSysClockFreq+0x114>)
 800c2de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2b0c      	cmp	r3, #12
 800c2e4:	d134      	bne.n	800c350 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d003      	beq.n	800c2fe <HAL_RCC_GetSysClockFreq+0xa6>
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d003      	beq.n	800c304 <HAL_RCC_GetSysClockFreq+0xac>
 800c2fc:	e005      	b.n	800c30a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c2fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c368 <HAL_RCC_GetSysClockFreq+0x110>)
 800c300:	617b      	str	r3, [r7, #20]
      break;
 800c302:	e005      	b.n	800c310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c304:	4b19      	ldr	r3, [pc, #100]	@ (800c36c <HAL_RCC_GetSysClockFreq+0x114>)
 800c306:	617b      	str	r3, [r7, #20]
      break;
 800c308:	e002      	b.n	800c310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	617b      	str	r3, [r7, #20]
      break;
 800c30e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c310:	4b13      	ldr	r3, [pc, #76]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	091b      	lsrs	r3, r3, #4
 800c316:	f003 0307 	and.w	r3, r3, #7
 800c31a:	3301      	adds	r3, #1
 800c31c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c31e:	4b10      	ldr	r3, [pc, #64]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	0a1b      	lsrs	r3, r3, #8
 800c324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	fb03 f202 	mul.w	r2, r3, r2
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	fbb2 f3f3 	udiv	r3, r2, r3
 800c334:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c336:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <HAL_RCC_GetSysClockFreq+0x108>)
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	0e5b      	lsrs	r3, r3, #25
 800c33c:	f003 0303 	and.w	r3, r3, #3
 800c340:	3301      	adds	r3, #1
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c350:	69bb      	ldr	r3, [r7, #24]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3724      	adds	r7, #36	@ 0x24
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40021000 	.word	0x40021000
 800c364:	0800ed38 	.word	0x0800ed38
 800c368:	00f42400 	.word	0x00f42400
 800c36c:	007a1200 	.word	0x007a1200

0800c370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c378:	2300      	movs	r3, #0
 800c37a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c37c:	4b2a      	ldr	r3, [pc, #168]	@ (800c428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d003      	beq.n	800c390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c388:	f7ff f9ee 	bl	800b768 <HAL_PWREx_GetVoltageRange>
 800c38c:	6178      	str	r0, [r7, #20]
 800c38e:	e014      	b.n	800c3ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c390:	4b25      	ldr	r3, [pc, #148]	@ (800c428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c394:	4a24      	ldr	r2, [pc, #144]	@ (800c428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c39a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c39c:	4b22      	ldr	r3, [pc, #136]	@ (800c428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c39e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3a4:	60fb      	str	r3, [r7, #12]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c3a8:	f7ff f9de 	bl	800b768 <HAL_PWREx_GetVoltageRange>
 800c3ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3b2:	4a1d      	ldr	r2, [pc, #116]	@ (800c428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3c0:	d10b      	bne.n	800c3da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b80      	cmp	r3, #128	@ 0x80
 800c3c6:	d919      	bls.n	800c3fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2ba0      	cmp	r3, #160	@ 0xa0
 800c3cc:	d902      	bls.n	800c3d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	613b      	str	r3, [r7, #16]
 800c3d2:	e013      	b.n	800c3fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	613b      	str	r3, [r7, #16]
 800c3d8:	e010      	b.n	800c3fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b80      	cmp	r3, #128	@ 0x80
 800c3de:	d902      	bls.n	800c3e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	613b      	str	r3, [r7, #16]
 800c3e4:	e00a      	b.n	800c3fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b80      	cmp	r3, #128	@ 0x80
 800c3ea:	d102      	bne.n	800c3f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	613b      	str	r3, [r7, #16]
 800c3f0:	e004      	b.n	800c3fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b70      	cmp	r3, #112	@ 0x70
 800c3f6:	d101      	bne.n	800c3fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c3fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c42c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f023 0207 	bic.w	r2, r3, #7
 800c404:	4909      	ldr	r1, [pc, #36]	@ (800c42c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	4313      	orrs	r3, r2
 800c40a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c40c:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	429a      	cmp	r2, r3
 800c418:	d001      	beq.n	800c41e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	40021000 	.word	0x40021000
 800c42c:	40022000 	.word	0x40022000

0800c430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c438:	2300      	movs	r3, #0
 800c43a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c43c:	2300      	movs	r3, #0
 800c43e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d031      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c450:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c454:	d01a      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c45a:	d814      	bhi.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d009      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c460:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c464:	d10f      	bne.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c466:	4b5d      	ldr	r3, [pc, #372]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	4a5c      	ldr	r2, [pc, #368]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c46c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c472:	e00c      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3304      	adds	r3, #4
 800c478:	2100      	movs	r1, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f9ce 	bl	800c81c <RCCEx_PLLSAI1_Config>
 800c480:	4603      	mov	r3, r0
 800c482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c484:	e003      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	74fb      	strb	r3, [r7, #19]
      break;
 800c48a:	e000      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c48c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c48e:	7cfb      	ldrb	r3, [r7, #19]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10b      	bne.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c494:	4b51      	ldr	r3, [pc, #324]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c49a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a2:	494e      	ldr	r1, [pc, #312]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800c4aa:	e001      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ac:	7cfb      	ldrb	r3, [r7, #19]
 800c4ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 809e 	beq.w	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c4c2:	4b46      	ldr	r3, [pc, #280]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00d      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4d8:	4b40      	ldr	r3, [pc, #256]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4e4:	4b3d      	ldr	r3, [pc, #244]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4ec:	60bb      	str	r3, [r7, #8]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4f4:	4b3a      	ldr	r3, [pc, #232]	@ (800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a39      	ldr	r2, [pc, #228]	@ (800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c4fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c500:	f7fc fbb4 	bl	8008c6c <HAL_GetTick>
 800c504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c506:	e009      	b.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c508:	f7fc fbb0 	bl	8008c6c <HAL_GetTick>
 800c50c:	4602      	mov	r2, r0
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	2b02      	cmp	r3, #2
 800c514:	d902      	bls.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	74fb      	strb	r3, [r7, #19]
        break;
 800c51a:	e005      	b.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c51c:	4b30      	ldr	r3, [pc, #192]	@ (800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0ef      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c528:	7cfb      	ldrb	r3, [r7, #19]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d15a      	bne.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c52e:	4b2b      	ldr	r3, [pc, #172]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d01e      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	429a      	cmp	r2, r3
 800c548:	d019      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c54a:	4b24      	ldr	r3, [pc, #144]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c554:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c556:	4b21      	ldr	r3, [pc, #132]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c55c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c55e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c566:	4b1d      	ldr	r3, [pc, #116]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c56c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c56e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c576:	4a19      	ldr	r2, [pc, #100]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d016      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c588:	f7fc fb70 	bl	8008c6c <HAL_GetTick>
 800c58c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c58e:	e00b      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c590:	f7fc fb6c 	bl	8008c6c <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d902      	bls.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	74fb      	strb	r3, [r7, #19]
            break;
 800c5a6:	e006      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0ec      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c5b6:	7cfb      	ldrb	r3, [r7, #19]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5bc:	4b07      	ldr	r3, [pc, #28]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5ca:	4904      	ldr	r1, [pc, #16]	@ (800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c5d2:	e009      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c5d4:	7cfb      	ldrb	r3, [r7, #19]
 800c5d6:	74bb      	strb	r3, [r7, #18]
 800c5d8:	e006      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c5da:	bf00      	nop
 800c5dc:	40021000 	.word	0x40021000
 800c5e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5e4:	7cfb      	ldrb	r3, [r7, #19]
 800c5e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c5e8:	7c7b      	ldrb	r3, [r7, #17]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d105      	bne.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5ee:	4b8a      	ldr	r3, [pc, #552]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c5f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5f2:	4a89      	ldr	r2, [pc, #548]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c5f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c606:	4b84      	ldr	r3, [pc, #528]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c60c:	f023 0203 	bic.w	r2, r3, #3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a1b      	ldr	r3, [r3, #32]
 800c614:	4980      	ldr	r1, [pc, #512]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c616:	4313      	orrs	r3, r2
 800c618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0302 	and.w	r3, r3, #2
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00a      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c628:	4b7b      	ldr	r3, [pc, #492]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c62e:	f023 020c 	bic.w	r2, r3, #12
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c636:	4978      	ldr	r1, [pc, #480]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c638:	4313      	orrs	r3, r2
 800c63a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0320 	and.w	r3, r3, #32
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c64a:	4b73      	ldr	r3, [pc, #460]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c650:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c658:	496f      	ldr	r1, [pc, #444]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c65a:	4313      	orrs	r3, r2
 800c65c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00a      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c66c:	4b6a      	ldr	r3, [pc, #424]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c672:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67a:	4967      	ldr	r1, [pc, #412]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c67c:	4313      	orrs	r3, r2
 800c67e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00a      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c68e:	4b62      	ldr	r3, [pc, #392]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c694:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c69c:	495e      	ldr	r1, [pc, #376]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00a      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6b0:	4b59      	ldr	r3, [pc, #356]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6be:	4956      	ldr	r1, [pc, #344]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00a      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6d2:	4b51      	ldr	r3, [pc, #324]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e0:	494d      	ldr	r1, [pc, #308]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d028      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6f4:	4b48      	ldr	r3, [pc, #288]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c702:	4945      	ldr	r1, [pc, #276]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c704:	4313      	orrs	r3, r2
 800c706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c70e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c712:	d106      	bne.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c714:	4b40      	ldr	r3, [pc, #256]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	4a3f      	ldr	r2, [pc, #252]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c71a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c71e:	60d3      	str	r3, [r2, #12]
 800c720:	e011      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c72a:	d10c      	bne.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3304      	adds	r3, #4
 800c730:	2101      	movs	r1, #1
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f872 	bl	800c81c <RCCEx_PLLSAI1_Config>
 800c738:	4603      	mov	r3, r0
 800c73a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c73c:	7cfb      	ldrb	r3, [r7, #19]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c742:	7cfb      	ldrb	r3, [r7, #19]
 800c744:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d028      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c752:	4b31      	ldr	r3, [pc, #196]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c760:	492d      	ldr	r1, [pc, #180]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c762:	4313      	orrs	r3, r2
 800c764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c76c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c770:	d106      	bne.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c772:	4b29      	ldr	r3, [pc, #164]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	4a28      	ldr	r2, [pc, #160]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c77c:	60d3      	str	r3, [r2, #12]
 800c77e:	e011      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c788:	d10c      	bne.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3304      	adds	r3, #4
 800c78e:	2101      	movs	r1, #1
 800c790:	4618      	mov	r0, r3
 800c792:	f000 f843 	bl	800c81c <RCCEx_PLLSAI1_Config>
 800c796:	4603      	mov	r3, r0
 800c798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c79a:	7cfb      	ldrb	r3, [r7, #19]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c7a0:	7cfb      	ldrb	r3, [r7, #19]
 800c7a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d01c      	beq.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7b0:	4b19      	ldr	r3, [pc, #100]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7be:	4916      	ldr	r1, [pc, #88]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7ce:	d10c      	bne.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	2102      	movs	r1, #2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 f820 	bl	800c81c <RCCEx_PLLSAI1_Config>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c7e0:	7cfb      	ldrb	r3, [r7, #19]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800c7e6:	7cfb      	ldrb	r3, [r7, #19]
 800c7e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c7f6:	4b08      	ldr	r3, [pc, #32]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c804:	4904      	ldr	r1, [pc, #16]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c806:	4313      	orrs	r3, r2
 800c808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c80c:	7cbb      	ldrb	r3, [r7, #18]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	40021000 	.word	0x40021000

0800c81c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c82a:	4b74      	ldr	r3, [pc, #464]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f003 0303 	and.w	r3, r3, #3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d018      	beq.n	800c868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c836:	4b71      	ldr	r3, [pc, #452]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f003 0203 	and.w	r2, r3, #3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d10d      	bne.n	800c862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
       ||
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c84e:	4b6b      	ldr	r3, [pc, #428]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	091b      	lsrs	r3, r3, #4
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
       ||
 800c85e:	429a      	cmp	r2, r3
 800c860:	d047      	beq.n	800c8f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	e044      	b.n	800c8f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b03      	cmp	r3, #3
 800c86e:	d018      	beq.n	800c8a2 <RCCEx_PLLSAI1_Config+0x86>
 800c870:	2b03      	cmp	r3, #3
 800c872:	d825      	bhi.n	800c8c0 <RCCEx_PLLSAI1_Config+0xa4>
 800c874:	2b01      	cmp	r3, #1
 800c876:	d002      	beq.n	800c87e <RCCEx_PLLSAI1_Config+0x62>
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d009      	beq.n	800c890 <RCCEx_PLLSAI1_Config+0x74>
 800c87c:	e020      	b.n	800c8c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c87e:	4b5f      	ldr	r3, [pc, #380]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b00      	cmp	r3, #0
 800c888:	d11d      	bne.n	800c8c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c88e:	e01a      	b.n	800c8c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c890:	4b5a      	ldr	r3, [pc, #360]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d116      	bne.n	800c8ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8a0:	e013      	b.n	800c8ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c8a2:	4b56      	ldr	r3, [pc, #344]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10f      	bne.n	800c8ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c8ae:	4b53      	ldr	r3, [pc, #332]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d109      	bne.n	800c8ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c8be:	e006      	b.n	800c8ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8c4:	e004      	b.n	800c8d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c8c6:	bf00      	nop
 800c8c8:	e002      	b.n	800c8d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c8ca:	bf00      	nop
 800c8cc:	e000      	b.n	800c8d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c8ce:	bf00      	nop
    }

    if(status == HAL_OK)
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10d      	bne.n	800c8f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c8d6:	4b49      	ldr	r3, [pc, #292]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	011b      	lsls	r3, r3, #4
 800c8ea:	430b      	orrs	r3, r1
 800c8ec:	4943      	ldr	r1, [pc, #268]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d17c      	bne.n	800c9f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c8f8:	4b40      	ldr	r3, [pc, #256]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c904:	f7fc f9b2 	bl	8008c6c <HAL_GetTick>
 800c908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c90a:	e009      	b.n	800c920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c90c:	f7fc f9ae 	bl	8008c6c <HAL_GetTick>
 800c910:	4602      	mov	r2, r0
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	2b02      	cmp	r3, #2
 800c918:	d902      	bls.n	800c920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	73fb      	strb	r3, [r7, #15]
        break;
 800c91e:	e005      	b.n	800c92c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c920:	4b36      	ldr	r3, [pc, #216]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1ef      	bne.n	800c90c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c92c:	7bfb      	ldrb	r3, [r7, #15]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d15f      	bne.n	800c9f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d110      	bne.n	800c95a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c938:	4b30      	ldr	r3, [pc, #192]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800c940:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	6892      	ldr	r2, [r2, #8]
 800c948:	0211      	lsls	r1, r2, #8
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	68d2      	ldr	r2, [r2, #12]
 800c94e:	06d2      	lsls	r2, r2, #27
 800c950:	430a      	orrs	r2, r1
 800c952:	492a      	ldr	r1, [pc, #168]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c954:	4313      	orrs	r3, r2
 800c956:	610b      	str	r3, [r1, #16]
 800c958:	e027      	b.n	800c9aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d112      	bne.n	800c986 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c960:	4b26      	ldr	r3, [pc, #152]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c962:	691b      	ldr	r3, [r3, #16]
 800c964:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c968:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	6892      	ldr	r2, [r2, #8]
 800c970:	0211      	lsls	r1, r2, #8
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	6912      	ldr	r2, [r2, #16]
 800c976:	0852      	lsrs	r2, r2, #1
 800c978:	3a01      	subs	r2, #1
 800c97a:	0552      	lsls	r2, r2, #21
 800c97c:	430a      	orrs	r2, r1
 800c97e:	491f      	ldr	r1, [pc, #124]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c980:	4313      	orrs	r3, r2
 800c982:	610b      	str	r3, [r1, #16]
 800c984:	e011      	b.n	800c9aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c986:	4b1d      	ldr	r3, [pc, #116]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c98e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	6892      	ldr	r2, [r2, #8]
 800c996:	0211      	lsls	r1, r2, #8
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	6952      	ldr	r2, [r2, #20]
 800c99c:	0852      	lsrs	r2, r2, #1
 800c99e:	3a01      	subs	r2, #1
 800c9a0:	0652      	lsls	r2, r2, #25
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	4915      	ldr	r1, [pc, #84]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c9aa:	4b14      	ldr	r3, [pc, #80]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a13      	ldr	r2, [pc, #76]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9b6:	f7fc f959 	bl	8008c6c <HAL_GetTick>
 800c9ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c9bc:	e009      	b.n	800c9d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c9be:	f7fc f955 	bl	8008c6c <HAL_GetTick>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d902      	bls.n	800c9d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	73fb      	strb	r3, [r7, #15]
          break;
 800c9d0:	e005      	b.n	800c9de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0ef      	beq.n	800c9be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c9e4:	4b05      	ldr	r3, [pc, #20]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9e6:	691a      	ldr	r2, [r3, #16]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	699b      	ldr	r3, [r3, #24]
 800c9ec:	4903      	ldr	r1, [pc, #12]	@ (800c9fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	40021000 	.word	0x40021000

0800ca00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e095      	b.n	800cb3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d108      	bne.n	800ca2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ca22:	d009      	beq.n	800ca38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	61da      	str	r2, [r3, #28]
 800ca2a:	e005      	b.n	800ca38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7f9 fb3e 	bl	80060d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca78:	d902      	bls.n	800ca80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e002      	b.n	800ca86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ca80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ca8e:	d007      	beq.n	800caa0 <HAL_SPI_Init+0xa0>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca98:	d002      	beq.n	800caa0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cab0:	431a      	orrs	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 0302 	and.w	r3, r3, #2
 800caba:	431a      	orrs	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	431a      	orrs	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cace:	431a      	orrs	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cad8:	431a      	orrs	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cae2:	ea42 0103 	orr.w	r1, r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	430a      	orrs	r2, r1
 800caf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	0c1b      	lsrs	r3, r3, #16
 800cafc:	f003 0204 	and.w	r2, r3, #4
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb04:	f003 0310 	and.w	r3, r3, #16
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb0e:	f003 0308 	and.w	r3, r3, #8
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cb1c:	ea42 0103 	orr.w	r1, r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	430a      	orrs	r2, r1
 800cb2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b08a      	sub	sp, #40	@ 0x28
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	60f8      	str	r0, [r7, #12]
 800cb4e:	60b9      	str	r1, [r7, #8]
 800cb50:	607a      	str	r2, [r7, #4]
 800cb52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cb54:	2301      	movs	r3, #1
 800cb56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb58:	f7fc f888 	bl	8008c6c <HAL_GetTick>
 800cb5c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cb64:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800cb6c:	887b      	ldrh	r3, [r7, #2]
 800cb6e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800cb70:	887b      	ldrh	r3, [r7, #2]
 800cb72:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cb74:	7ffb      	ldrb	r3, [r7, #31]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d00c      	beq.n	800cb94 <HAL_SPI_TransmitReceive+0x4e>
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cb80:	d106      	bne.n	800cb90 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d102      	bne.n	800cb90 <HAL_SPI_TransmitReceive+0x4a>
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	d001      	beq.n	800cb94 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800cb90:	2302      	movs	r3, #2
 800cb92:	e1f3      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <HAL_SPI_TransmitReceive+0x60>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <HAL_SPI_TransmitReceive+0x60>
 800cba0:	887b      	ldrh	r3, [r7, #2]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e1e8      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d101      	bne.n	800cbb8 <HAL_SPI_TransmitReceive+0x72>
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	e1e1      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d003      	beq.n	800cbd4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2205      	movs	r2, #5
 800cbd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	887a      	ldrh	r2, [r7, #2]
 800cbe4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	887a      	ldrh	r2, [r7, #2]
 800cbec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	887a      	ldrh	r2, [r7, #2]
 800cbfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	887a      	ldrh	r2, [r7, #2]
 800cc00:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cc16:	d802      	bhi.n	800cc1e <HAL_SPI_TransmitReceive+0xd8>
 800cc18:	8abb      	ldrh	r3, [r7, #20]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d908      	bls.n	800cc30 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cc2c:	605a      	str	r2, [r3, #4]
 800cc2e:	e007      	b.n	800cc40 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cc3e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc4a:	2b40      	cmp	r3, #64	@ 0x40
 800cc4c:	d007      	beq.n	800cc5e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cc66:	f240 8083 	bls.w	800cd70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <HAL_SPI_TransmitReceive+0x132>
 800cc72:	8afb      	ldrh	r3, [r7, #22]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d16f      	bne.n	800cd58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7c:	881a      	ldrh	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc88:	1c9a      	adds	r2, r3, #2
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	3b01      	subs	r3, #1
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc9c:	e05c      	b.n	800cd58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f003 0302 	and.w	r3, r3, #2
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d11b      	bne.n	800cce4 <HAL_SPI_TransmitReceive+0x19e>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d016      	beq.n	800cce4 <HAL_SPI_TransmitReceive+0x19e>
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d113      	bne.n	800cce4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc0:	881a      	ldrh	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cccc:	1c9a      	adds	r2, r3, #2
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d11c      	bne.n	800cd2c <HAL_SPI_TransmitReceive+0x1e6>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d016      	beq.n	800cd2c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68da      	ldr	r2, [r3, #12]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd08:	b292      	uxth	r2, r2
 800cd0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd10:	1c9a      	adds	r2, r3, #2
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cd2c:	f7fb ff9e 	bl	8008c6c <HAL_GetTick>
 800cd30:	4602      	mov	r2, r0
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d80d      	bhi.n	800cd58 <HAL_SPI_TransmitReceive+0x212>
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd42:	d009      	beq.n	800cd58 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e111      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d19d      	bne.n	800cc9e <HAL_SPI_TransmitReceive+0x158>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d197      	bne.n	800cc9e <HAL_SPI_TransmitReceive+0x158>
 800cd6e:	e0e5      	b.n	800cf3c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d003      	beq.n	800cd80 <HAL_SPI_TransmitReceive+0x23a>
 800cd78:	8afb      	ldrh	r3, [r7, #22]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	f040 80d1 	bne.w	800cf22 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d912      	bls.n	800cdb0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd8e:	881a      	ldrh	r2, [r3, #0]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd9a:	1c9a      	adds	r2, r3, #2
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	3b02      	subs	r3, #2
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cdae:	e0b8      	b.n	800cf22 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	330c      	adds	r3, #12
 800cdba:	7812      	ldrb	r2, [r2, #0]
 800cdbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cdd6:	e0a4      	b.n	800cf22 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	f003 0302 	and.w	r3, r3, #2
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d134      	bne.n	800ce50 <HAL_SPI_TransmitReceive+0x30a>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d02f      	beq.n	800ce50 <HAL_SPI_TransmitReceive+0x30a>
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d12c      	bne.n	800ce50 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d912      	bls.n	800ce26 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce04:	881a      	ldrh	r2, [r3, #0]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce10:	1c9a      	adds	r2, r3, #2
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	3b02      	subs	r3, #2
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ce24:	e012      	b.n	800ce4c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	330c      	adds	r3, #12
 800ce30:	7812      	ldrb	r2, [r2, #0]
 800ce32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	3b01      	subs	r3, #1
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	f003 0301 	and.w	r3, r3, #1
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d148      	bne.n	800cef0 <HAL_SPI_TransmitReceive+0x3aa>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d042      	beq.n	800cef0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d923      	bls.n	800cebe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68da      	ldr	r2, [r3, #12]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce80:	b292      	uxth	r2, r2
 800ce82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce88:	1c9a      	adds	r2, r3, #2
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	3b02      	subs	r3, #2
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d81f      	bhi.n	800ceec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ceba:	605a      	str	r2, [r3, #4]
 800cebc:	e016      	b.n	800ceec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f103 020c 	add.w	r2, r3, #12
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceca:	7812      	ldrb	r2, [r2, #0]
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ced4:	1c5a      	adds	r2, r3, #1
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	3b01      	subs	r3, #1
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ceec:	2301      	movs	r3, #1
 800ceee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cef0:	f7fb febc 	bl	8008c6c <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d803      	bhi.n	800cf08 <HAL_SPI_TransmitReceive+0x3c2>
 800cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf06:	d102      	bne.n	800cf0e <HAL_SPI_TransmitReceive+0x3c8>
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d109      	bne.n	800cf22 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e02c      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f47f af55 	bne.w	800cdd8 <HAL_SPI_TransmitReceive+0x292>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f47f af4e 	bne.w	800cdd8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cf3c:	6a3a      	ldr	r2, [r7, #32]
 800cf3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 fa51 	bl	800d3e8 <SPI_EndRxTxTransaction>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d008      	beq.n	800cf5e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2220      	movs	r2, #32
 800cf50:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e00e      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
  }
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3728      	adds	r7, #40	@ 0x28
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10e      	bne.n	800cfc4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d009      	beq.n	800cfc4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d004      	beq.n	800cfc4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	4798      	blx	r3
    return;
 800cfc2:	e0ce      	b.n	800d162 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d009      	beq.n	800cfe2 <HAL_SPI_IRQHandler+0x5e>
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d004      	beq.n	800cfe2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	4798      	blx	r3
    return;
 800cfe0:	e0bf      	b.n	800d162 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	f003 0320 	and.w	r3, r3, #32
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10a      	bne.n	800d002 <HAL_SPI_IRQHandler+0x7e>
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d105      	bne.n	800d002 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f000 80b0 	beq.w	800d162 <HAL_SPI_IRQHandler+0x1de>
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	f003 0320 	and.w	r3, r3, #32
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 80aa 	beq.w	800d162 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d014:	2b00      	cmp	r3, #0
 800d016:	d023      	beq.n	800d060 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	2b03      	cmp	r3, #3
 800d022:	d011      	beq.n	800d048 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d028:	f043 0204 	orr.w	r2, r3, #4
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d030:	2300      	movs	r3, #0
 800d032:	617b      	str	r3, [r7, #20]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	e00b      	b.n	800d060 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d048:	2300      	movs	r3, #0
 800d04a:	613b      	str	r3, [r7, #16]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	613b      	str	r3, [r7, #16]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	693b      	ldr	r3, [r7, #16]
        return;
 800d05e:	e080      	b.n	800d162 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f003 0320 	and.w	r3, r3, #32
 800d066:	2b00      	cmp	r3, #0
 800d068:	d014      	beq.n	800d094 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d06e:	f043 0201 	orr.w	r2, r3, #1
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d076:	2300      	movs	r3, #0
 800d078:	60fb      	str	r3, [r7, #12]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0a2:	f043 0208 	orr.w	r2, r3, #8
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	60bb      	str	r3, [r7, #8]
 800d0b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d04f      	beq.n	800d160 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d0ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	f003 0302 	and.w	r3, r3, #2
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d104      	bne.n	800d0ec <HAL_SPI_IRQHandler+0x168>
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d034      	beq.n	800d156 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	685a      	ldr	r2, [r3, #4]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 0203 	bic.w	r2, r2, #3
 800d0fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d100:	2b00      	cmp	r3, #0
 800d102:	d011      	beq.n	800d128 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d108:	4a17      	ldr	r2, [pc, #92]	@ (800d168 <HAL_SPI_IRQHandler+0x1e4>)
 800d10a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d110:	4618      	mov	r0, r3
 800d112:	f7fd fa3e 	bl	800a592 <HAL_DMA_Abort_IT>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d120:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d016      	beq.n	800d15e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d134:	4a0c      	ldr	r2, [pc, #48]	@ (800d168 <HAL_SPI_IRQHandler+0x1e4>)
 800d136:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fd fa28 	bl	800a592 <HAL_DMA_Abort_IT>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00a      	beq.n	800d15e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d14c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800d154:	e003      	b.n	800d15e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f808 	bl	800d16c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d15c:	e000      	b.n	800d160 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d15e:	bf00      	nop
    return;
 800d160:	bf00      	nop
  }
}
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	0800d181 	.word	0x0800d181

0800d16c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d174:	bf00      	nop
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d18c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff ffe5 	bl	800d16c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d1a2:	bf00      	nop
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b088      	sub	sp, #32
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d1bc:	f7fb fd56 	bl	8008c6c <HAL_GetTick>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d1cc:	f7fb fd4e 	bl	8008c6c <HAL_GetTick>
 800d1d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d1d2:	4b39      	ldr	r3, [pc, #228]	@ (800d2b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	015b      	lsls	r3, r3, #5
 800d1d8:	0d1b      	lsrs	r3, r3, #20
 800d1da:	69fa      	ldr	r2, [r7, #28]
 800d1dc:	fb02 f303 	mul.w	r3, r2, r3
 800d1e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1e2:	e054      	b.n	800d28e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ea:	d050      	beq.n	800d28e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d1ec:	f7fb fd3e 	bl	8008c6c <HAL_GetTick>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d902      	bls.n	800d202 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d13d      	bne.n	800d27e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d21a:	d111      	bne.n	800d240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d224:	d004      	beq.n	800d230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d22e:	d107      	bne.n	800d240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d23e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d248:	d10f      	bne.n	800d26a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d27a:	2303      	movs	r3, #3
 800d27c:	e017      	b.n	800d2ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d284:	2300      	movs	r3, #0
 800d286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	3b01      	subs	r3, #1
 800d28c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	689a      	ldr	r2, [r3, #8]
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	4013      	ands	r3, r2
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	bf0c      	ite	eq
 800d29e:	2301      	moveq	r3, #1
 800d2a0:	2300      	movne	r3, #0
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	79fb      	ldrb	r3, [r7, #7]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d19b      	bne.n	800d1e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3720      	adds	r7, #32
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20000000 	.word	0x20000000

0800d2bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08a      	sub	sp, #40	@ 0x28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d2ce:	f7fb fccd 	bl	8008c6c <HAL_GetTick>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d6:	1a9b      	subs	r3, r3, r2
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	4413      	add	r3, r2
 800d2dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d2de:	f7fb fcc5 	bl	8008c6c <HAL_GetTick>
 800d2e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	330c      	adds	r3, #12
 800d2ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d2ec:	4b3d      	ldr	r3, [pc, #244]	@ (800d3e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	00da      	lsls	r2, r3, #3
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	0d1b      	lsrs	r3, r3, #20
 800d2fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d304:	e060      	b.n	800d3c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d30c:	d107      	bne.n	800d31e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d104      	bne.n	800d31e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d31c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d324:	d050      	beq.n	800d3c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d326:	f7fb fca1 	bl	8008c6c <HAL_GetTick>
 800d32a:	4602      	mov	r2, r0
 800d32c:	6a3b      	ldr	r3, [r7, #32]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d332:	429a      	cmp	r2, r3
 800d334:	d902      	bls.n	800d33c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d13d      	bne.n	800d3b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d34a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d354:	d111      	bne.n	800d37a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d35e:	d004      	beq.n	800d36a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d368:	d107      	bne.n	800d37a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d378:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d382:	d10f      	bne.n	800d3a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d3a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	e010      	b.n	800d3da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	689a      	ldr	r2, [r3, #8]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d196      	bne.n	800d306 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3728      	adds	r7, #40	@ 0x28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000000 	.word	0x20000000

0800d3e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7ff ff5b 	bl	800d2bc <SPI_WaitFifoStateUntilTimeout>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d410:	f043 0220 	orr.w	r2, r3, #32
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d418:	2303      	movs	r3, #3
 800d41a:	e027      	b.n	800d46c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2200      	movs	r2, #0
 800d424:	2180      	movs	r1, #128	@ 0x80
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff fec0 	bl	800d1ac <SPI_WaitFlagStateUntilTimeout>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d007      	beq.n	800d442 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d436:	f043 0220 	orr.w	r2, r3, #32
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e014      	b.n	800d46c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2200      	movs	r2, #0
 800d44a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff ff34 	bl	800d2bc <SPI_WaitFifoStateUntilTimeout>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d45e:	f043 0220 	orr.w	r2, r3, #32
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d466:	2303      	movs	r3, #3
 800d468:	e000      	b.n	800d46c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	e049      	b.n	800d51a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d106      	bne.n	800d4a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7f8 ff6e 	bl	800637c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	f000 f9ba 	bl	800d82c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b01      	cmp	r3, #1
 800d536:	d001      	beq.n	800d53c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e03b      	b.n	800d5b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2202      	movs	r2, #2
 800d540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68da      	ldr	r2, [r3, #12]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f042 0201 	orr.w	r2, r2, #1
 800d552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a19      	ldr	r2, [pc, #100]	@ (800d5c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d009      	beq.n	800d572 <HAL_TIM_Base_Start_IT+0x4e>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d566:	d004      	beq.n	800d572 <HAL_TIM_Base_Start_IT+0x4e>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a15      	ldr	r2, [pc, #84]	@ (800d5c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d115      	bne.n	800d59e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	689a      	ldr	r2, [r3, #8]
 800d578:	4b13      	ldr	r3, [pc, #76]	@ (800d5c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800d57a:	4013      	ands	r3, r2
 800d57c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b06      	cmp	r3, #6
 800d582:	d015      	beq.n	800d5b0 <HAL_TIM_Base_Start_IT+0x8c>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d58a:	d011      	beq.n	800d5b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f042 0201 	orr.w	r2, r2, #1
 800d59a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d59c:	e008      	b.n	800d5b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f042 0201 	orr.w	r2, r2, #1
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e000      	b.n	800d5b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	40012c00 	.word	0x40012c00
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	00010007 	.word	0x00010007

0800d5cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	f003 0302 	and.w	r3, r3, #2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d020      	beq.n	800d630 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f003 0302 	and.w	r3, r3, #2
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d01b      	beq.n	800d630 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f06f 0202 	mvn.w	r2, #2
 800d600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	f003 0303 	and.w	r3, r3, #3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f8e9 	bl	800d7ee <HAL_TIM_IC_CaptureCallback>
 800d61c:	e005      	b.n	800d62a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f8db 	bl	800d7da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f8ec 	bl	800d802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	f003 0304 	and.w	r3, r3, #4
 800d636:	2b00      	cmp	r3, #0
 800d638:	d020      	beq.n	800d67c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f003 0304 	and.w	r3, r3, #4
 800d640:	2b00      	cmp	r3, #0
 800d642:	d01b      	beq.n	800d67c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f06f 0204 	mvn.w	r2, #4
 800d64c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2202      	movs	r2, #2
 800d652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	699b      	ldr	r3, [r3, #24]
 800d65a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d003      	beq.n	800d66a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f8c3 	bl	800d7ee <HAL_TIM_IC_CaptureCallback>
 800d668:	e005      	b.n	800d676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f8b5 	bl	800d7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f8c6 	bl	800d802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f003 0308 	and.w	r3, r3, #8
 800d682:	2b00      	cmp	r3, #0
 800d684:	d020      	beq.n	800d6c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f003 0308 	and.w	r3, r3, #8
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01b      	beq.n	800d6c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f06f 0208 	mvn.w	r2, #8
 800d698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2204      	movs	r2, #4
 800d69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	69db      	ldr	r3, [r3, #28]
 800d6a6:	f003 0303 	and.w	r3, r3, #3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f89d 	bl	800d7ee <HAL_TIM_IC_CaptureCallback>
 800d6b4:	e005      	b.n	800d6c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f88f 	bl	800d7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f8a0 	bl	800d802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	f003 0310 	and.w	r3, r3, #16
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d020      	beq.n	800d714 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f003 0310 	and.w	r3, r3, #16
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d01b      	beq.n	800d714 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f06f 0210 	mvn.w	r2, #16
 800d6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2208      	movs	r2, #8
 800d6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f877 	bl	800d7ee <HAL_TIM_IC_CaptureCallback>
 800d700:	e005      	b.n	800d70e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f869 	bl	800d7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f87a 	bl	800d802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00c      	beq.n	800d738 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f003 0301 	and.w	r3, r3, #1
 800d724:	2b00      	cmp	r3, #0
 800d726:	d007      	beq.n	800d738 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f06f 0201 	mvn.w	r2, #1
 800d730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7f4 faf0 	bl	8001d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00c      	beq.n	800d766 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d752:	2b00      	cmp	r3, #0
 800d754:	d007      	beq.n	800d766 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f943 	bl	800d9ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00c      	beq.n	800d78a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d776:	2b00      	cmp	r3, #0
 800d778:	d007      	beq.n	800d78a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f93b 	bl	800da00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00c      	beq.n	800d7ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f834 	bl	800d816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00c      	beq.n	800d7d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f003 0320 	and.w	r3, r3, #32
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d007      	beq.n	800d7d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f06f 0220 	mvn.w	r2, #32
 800d7ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 f903 	bl	800d9d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7d2:	bf00      	nop
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b083      	sub	sp, #12
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d7e2:	bf00      	nop
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7ee:	b480      	push	{r7}
 800d7f0:	b083      	sub	sp, #12
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7f6:	bf00      	nop
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d802:	b480      	push	{r7}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d80a:	bf00      	nop
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d81e:	bf00      	nop
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
	...

0800d82c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a30      	ldr	r2, [pc, #192]	@ (800d900 <TIM_Base_SetConfig+0xd4>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d003      	beq.n	800d84c <TIM_Base_SetConfig+0x20>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d84a:	d108      	bne.n	800d85e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a27      	ldr	r2, [pc, #156]	@ (800d900 <TIM_Base_SetConfig+0xd4>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d00b      	beq.n	800d87e <TIM_Base_SetConfig+0x52>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d86c:	d007      	beq.n	800d87e <TIM_Base_SetConfig+0x52>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a24      	ldr	r2, [pc, #144]	@ (800d904 <TIM_Base_SetConfig+0xd8>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d003      	beq.n	800d87e <TIM_Base_SetConfig+0x52>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a23      	ldr	r2, [pc, #140]	@ (800d908 <TIM_Base_SetConfig+0xdc>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d108      	bne.n	800d890 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a12      	ldr	r2, [pc, #72]	@ (800d900 <TIM_Base_SetConfig+0xd4>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d007      	beq.n	800d8cc <TIM_Base_SetConfig+0xa0>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a11      	ldr	r2, [pc, #68]	@ (800d904 <TIM_Base_SetConfig+0xd8>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d003      	beq.n	800d8cc <TIM_Base_SetConfig+0xa0>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a10      	ldr	r2, [pc, #64]	@ (800d908 <TIM_Base_SetConfig+0xdc>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d103      	bne.n	800d8d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	691a      	ldr	r2, [r3, #16]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	f003 0301 	and.w	r3, r3, #1
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d105      	bne.n	800d8f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	f023 0201 	bic.w	r2, r3, #1
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	611a      	str	r2, [r3, #16]
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	40012c00 	.word	0x40012c00
 800d904:	40014000 	.word	0x40014000
 800d908:	40014400 	.word	0x40014400

0800d90c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d101      	bne.n	800d924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d920:	2302      	movs	r3, #2
 800d922:	e04f      	b.n	800d9c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2202      	movs	r2, #2
 800d930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a21      	ldr	r2, [pc, #132]	@ (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d108      	bne.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d954:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	4313      	orrs	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4313      	orrs	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a14      	ldr	r2, [pc, #80]	@ (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d009      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d98c:	d004      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a10      	ldr	r2, [pc, #64]	@ (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d10c      	bne.n	800d9b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d99e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	40012c00 	.word	0x40012c00
 800d9d4:	40014000 	.word	0x40014000

0800d9d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <memset>:
 800da14:	4402      	add	r2, r0
 800da16:	4603      	mov	r3, r0
 800da18:	4293      	cmp	r3, r2
 800da1a:	d100      	bne.n	800da1e <memset+0xa>
 800da1c:	4770      	bx	lr
 800da1e:	f803 1b01 	strb.w	r1, [r3], #1
 800da22:	e7f9      	b.n	800da18 <memset+0x4>

0800da24 <__libc_init_array>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	4d0d      	ldr	r5, [pc, #52]	@ (800da5c <__libc_init_array+0x38>)
 800da28:	4c0d      	ldr	r4, [pc, #52]	@ (800da60 <__libc_init_array+0x3c>)
 800da2a:	1b64      	subs	r4, r4, r5
 800da2c:	10a4      	asrs	r4, r4, #2
 800da2e:	2600      	movs	r6, #0
 800da30:	42a6      	cmp	r6, r4
 800da32:	d109      	bne.n	800da48 <__libc_init_array+0x24>
 800da34:	4d0b      	ldr	r5, [pc, #44]	@ (800da64 <__libc_init_array+0x40>)
 800da36:	4c0c      	ldr	r4, [pc, #48]	@ (800da68 <__libc_init_array+0x44>)
 800da38:	f000 f826 	bl	800da88 <_init>
 800da3c:	1b64      	subs	r4, r4, r5
 800da3e:	10a4      	asrs	r4, r4, #2
 800da40:	2600      	movs	r6, #0
 800da42:	42a6      	cmp	r6, r4
 800da44:	d105      	bne.n	800da52 <__libc_init_array+0x2e>
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	f855 3b04 	ldr.w	r3, [r5], #4
 800da4c:	4798      	blx	r3
 800da4e:	3601      	adds	r6, #1
 800da50:	e7ee      	b.n	800da30 <__libc_init_array+0xc>
 800da52:	f855 3b04 	ldr.w	r3, [r5], #4
 800da56:	4798      	blx	r3
 800da58:	3601      	adds	r6, #1
 800da5a:	e7f2      	b.n	800da42 <__libc_init_array+0x1e>
 800da5c:	0800ed70 	.word	0x0800ed70
 800da60:	0800ed70 	.word	0x0800ed70
 800da64:	0800ed70 	.word	0x0800ed70
 800da68:	0800ed74 	.word	0x0800ed74

0800da6c <memcpy>:
 800da6c:	440a      	add	r2, r1
 800da6e:	4291      	cmp	r1, r2
 800da70:	f100 33ff 	add.w	r3, r0, #4294967295
 800da74:	d100      	bne.n	800da78 <memcpy+0xc>
 800da76:	4770      	bx	lr
 800da78:	b510      	push	{r4, lr}
 800da7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da82:	4291      	cmp	r1, r2
 800da84:	d1f9      	bne.n	800da7a <memcpy+0xe>
 800da86:	bd10      	pop	{r4, pc}

0800da88 <_init>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	bf00      	nop
 800da8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8e:	bc08      	pop	{r3}
 800da90:	469e      	mov	lr, r3
 800da92:	4770      	bx	lr

0800da94 <_fini>:
 800da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da96:	bf00      	nop
 800da98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9a:	bc08      	pop	{r3}
 800da9c:	469e      	mov	lr, r3
 800da9e:	4770      	bx	lr
