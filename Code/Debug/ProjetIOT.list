
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009358  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001394  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a878  0800a878  0000c054  2**0
                  CONTENTS
  4 .ARM          00000008  0800a878  0800a878  0000b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a880  0800a880  0000c054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a884  0800a884  0000b884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800a888  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000054  0800a8dc  0000c054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800a8dc  0000c448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a16c  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd4  00000000  00000000  000261f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00029dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001261  00000000  00000000  0002b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229c2  00000000  00000000  0002c7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1ac  00000000  00000000  0004f17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea07  00000000  00000000  0006a327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e0  00000000  00000000  00138d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0013f054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000054 	.word	0x20000054
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080094cc 	.word	0x080094cc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000058 	.word	0x20000058
 80001c8:	080094cc 	.word	0x080094cc

080001cc <__aeabi_ldivmod>:
 80001cc:	b97b      	cbnz	r3, 80001ee <__aeabi_ldivmod+0x22>
 80001ce:	b972      	cbnz	r2, 80001ee <__aeabi_ldivmod+0x22>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bfbe      	ittt	lt
 80001d4:	2000      	movlt	r0, #0
 80001d6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001da:	e006      	blt.n	80001ea <__aeabi_ldivmod+0x1e>
 80001dc:	bf08      	it	eq
 80001de:	2800      	cmpeq	r0, #0
 80001e0:	bf1c      	itt	ne
 80001e2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e6:	f04f 30ff 	movne.w	r0, #4294967295
 80001ea:	f000 b9b5 	b.w	8000558 <__aeabi_idiv0>
 80001ee:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f6:	2900      	cmp	r1, #0
 80001f8:	db09      	blt.n	800020e <__aeabi_ldivmod+0x42>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db1a      	blt.n	8000234 <__aeabi_ldivmod+0x68>
 80001fe:	f000 f84d 	bl	800029c <__udivmoddi4>
 8000202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020a:	b004      	add	sp, #16
 800020c:	4770      	bx	lr
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	2b00      	cmp	r3, #0
 8000216:	db1b      	blt.n	8000250 <__aeabi_ldivmod+0x84>
 8000218:	f000 f840 	bl	800029c <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	4252      	negs	r2, r2
 800022e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f82f 	bl	800029c <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4240      	negs	r0, r0
 800024a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024e:	4770      	bx	lr
 8000250:	4252      	negs	r2, r2
 8000252:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000256:	f000 f821 	bl	800029c <__udivmoddi4>
 800025a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000262:	b004      	add	sp, #16
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	4770      	bx	lr

0800026c <__aeabi_uldivmod>:
 800026c:	b953      	cbnz	r3, 8000284 <__aeabi_uldivmod+0x18>
 800026e:	b94a      	cbnz	r2, 8000284 <__aeabi_uldivmod+0x18>
 8000270:	2900      	cmp	r1, #0
 8000272:	bf08      	it	eq
 8000274:	2800      	cmpeq	r0, #0
 8000276:	bf1c      	itt	ne
 8000278:	f04f 31ff 	movne.w	r1, #4294967295
 800027c:	f04f 30ff 	movne.w	r0, #4294967295
 8000280:	f000 b96a 	b.w	8000558 <__aeabi_idiv0>
 8000284:	f1ad 0c08 	sub.w	ip, sp, #8
 8000288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800028c:	f000 f806 	bl	800029c <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4770      	bx	lr

0800029c <__udivmoddi4>:
 800029c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a0:	9d08      	ldr	r5, [sp, #32]
 80002a2:	460c      	mov	r4, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14e      	bne.n	8000346 <__udivmoddi4+0xaa>
 80002a8:	4694      	mov	ip, r2
 80002aa:	458c      	cmp	ip, r1
 80002ac:	4686      	mov	lr, r0
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	d962      	bls.n	800037a <__udivmoddi4+0xde>
 80002b4:	b14a      	cbz	r2, 80002ca <__udivmoddi4+0x2e>
 80002b6:	f1c2 0320 	rsb	r3, r2, #32
 80002ba:	4091      	lsls	r1, r2
 80002bc:	fa20 f303 	lsr.w	r3, r0, r3
 80002c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ce:	fa1f f68c 	uxth.w	r6, ip
 80002d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002da:	fb07 1114 	mls	r1, r7, r4, r1
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	fb04 f106 	mul.w	r1, r4, r6
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x64>
 80002ea:	eb1c 0303 	adds.w	r3, ip, r3
 80002ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f2:	f080 8112 	bcs.w	800051a <__udivmoddi4+0x27e>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 810f 	bls.w	800051a <__udivmoddi4+0x27e>
 80002fc:	3c02      	subs	r4, #2
 80002fe:	4463      	add	r3, ip
 8000300:	1a59      	subs	r1, r3, r1
 8000302:	fa1f f38e 	uxth.w	r3, lr
 8000306:	fbb1 f0f7 	udiv	r0, r1, r7
 800030a:	fb07 1110 	mls	r1, r7, r0, r1
 800030e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000312:	fb00 f606 	mul.w	r6, r0, r6
 8000316:	429e      	cmp	r6, r3
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x94>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000322:	f080 80fc 	bcs.w	800051e <__udivmoddi4+0x282>
 8000326:	429e      	cmp	r6, r3
 8000328:	f240 80f9 	bls.w	800051e <__udivmoddi4+0x282>
 800032c:	4463      	add	r3, ip
 800032e:	3802      	subs	r0, #2
 8000330:	1b9b      	subs	r3, r3, r6
 8000332:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa6>
 800033a:	40d3      	lsrs	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xba>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb4>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa6>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x150>
 800035e:	42a3      	cmp	r3, r4
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xcc>
 8000362:	4290      	cmp	r0, r2
 8000364:	f0c0 80f0 	bcc.w	8000548 <__udivmoddi4+0x2ac>
 8000368:	1a86      	subs	r6, r0, r2
 800036a:	eb64 0303 	sbc.w	r3, r4, r3
 800036e:	2001      	movs	r0, #1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e6      	beq.n	8000342 <__udivmoddi4+0xa6>
 8000374:	e9c5 6300 	strd	r6, r3, [r5]
 8000378:	e7e3      	b.n	8000342 <__udivmoddi4+0xa6>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f040 8090 	bne.w	80004a0 <__udivmoddi4+0x204>
 8000380:	eba1 040c 	sub.w	r4, r1, ip
 8000384:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000388:	fa1f f78c 	uxth.w	r7, ip
 800038c:	2101      	movs	r1, #1
 800038e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb08 4416 	mls	r4, r8, r6, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb07 f006 	mul.w	r0, r7, r6
 80003a2:	4298      	cmp	r0, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x11c>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x11a>
 80003b0:	4298      	cmp	r0, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2b4>
 80003b6:	4626      	mov	r6, r4
 80003b8:	1a1c      	subs	r4, r3, r0
 80003ba:	fa1f f38e 	uxth.w	r3, lr
 80003be:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c2:	fb08 4410 	mls	r4, r8, r0, r4
 80003c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ca:	fb00 f707 	mul.w	r7, r0, r7
 80003ce:	429f      	cmp	r7, r3
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x148>
 80003d2:	eb1c 0303 	adds.w	r3, ip, r3
 80003d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x146>
 80003dc:	429f      	cmp	r7, r3
 80003de:	f200 80b0 	bhi.w	8000542 <__udivmoddi4+0x2a6>
 80003e2:	4620      	mov	r0, r4
 80003e4:	1bdb      	subs	r3, r3, r7
 80003e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x9c>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000400:	ea43 030c 	orr.w	r3, r3, ip
 8000404:	40f4      	lsrs	r4, r6
 8000406:	fa00 f801 	lsl.w	r8, r0, r1
 800040a:	0c38      	lsrs	r0, r7, #16
 800040c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000410:	fbb4 fef0 	udiv	lr, r4, r0
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fb00 441e 	mls	r4, r0, lr, r4
 800041c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a1      	cmp	r9, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x1a6>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000432:	f080 8084 	bcs.w	800053e <__udivmoddi4+0x2a2>
 8000436:	45a1      	cmp	r9, r4
 8000438:	f240 8081 	bls.w	800053e <__udivmoddi4+0x2a2>
 800043c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000440:	443c      	add	r4, r7
 8000442:	eba4 0409 	sub.w	r4, r4, r9
 8000446:	fa1f f983 	uxth.w	r9, r3
 800044a:	fbb4 f3f0 	udiv	r3, r4, r0
 800044e:	fb00 4413 	mls	r4, r0, r3, r4
 8000452:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	45a4      	cmp	ip, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x1d2>
 800045e:	193c      	adds	r4, r7, r4
 8000460:	f103 30ff 	add.w	r0, r3, #4294967295
 8000464:	d267      	bcs.n	8000536 <__udivmoddi4+0x29a>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d965      	bls.n	8000536 <__udivmoddi4+0x29a>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000472:	fba0 9302 	umull	r9, r3, r0, r2
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	429c      	cmp	r4, r3
 800047c:	46ce      	mov	lr, r9
 800047e:	469c      	mov	ip, r3
 8000480:	d351      	bcc.n	8000526 <__udivmoddi4+0x28a>
 8000482:	d04e      	beq.n	8000522 <__udivmoddi4+0x286>
 8000484:	b155      	cbz	r5, 800049c <__udivmoddi4+0x200>
 8000486:	ebb8 030e 	subs.w	r3, r8, lr
 800048a:	eb64 040c 	sbc.w	r4, r4, ip
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431e      	orrs	r6, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	e9c5 6400 	strd	r6, r4, [r5]
 800049c:	2100      	movs	r1, #0
 800049e:	e750      	b.n	8000342 <__udivmoddi4+0xa6>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f103 	lsr.w	r1, r0, r3
 80004a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ac:	fa24 f303 	lsr.w	r3, r4, r3
 80004b0:	4094      	lsls	r4, r2
 80004b2:	430c      	orrs	r4, r1
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c4:	fb08 3110 	mls	r1, r8, r0, r3
 80004c8:	0c23      	lsrs	r3, r4, #16
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb00 f107 	mul.w	r1, r0, r7
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x24c>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 36ff 	add.w	r6, r0, #4294967295
 80004de:	d22c      	bcs.n	800053a <__udivmoddi4+0x29e>
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d92a      	bls.n	800053a <__udivmoddi4+0x29e>
 80004e4:	3802      	subs	r0, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f0:	fb08 3311 	mls	r3, r8, r1, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb01 f307 	mul.w	r3, r1, r7
 80004fc:	42a3      	cmp	r3, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x276>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f101 36ff 	add.w	r6, r1, #4294967295
 8000508:	d213      	bcs.n	8000532 <__udivmoddi4+0x296>
 800050a:	42a3      	cmp	r3, r4
 800050c:	d911      	bls.n	8000532 <__udivmoddi4+0x296>
 800050e:	3902      	subs	r1, #2
 8000510:	4464      	add	r4, ip
 8000512:	1ae4      	subs	r4, r4, r3
 8000514:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000518:	e739      	b.n	800038e <__udivmoddi4+0xf2>
 800051a:	4604      	mov	r4, r0
 800051c:	e6f0      	b.n	8000300 <__udivmoddi4+0x64>
 800051e:	4608      	mov	r0, r1
 8000520:	e706      	b.n	8000330 <__udivmoddi4+0x94>
 8000522:	45c8      	cmp	r8, r9
 8000524:	d2ae      	bcs.n	8000484 <__udivmoddi4+0x1e8>
 8000526:	ebb9 0e02 	subs.w	lr, r9, r2
 800052a:	eb63 0c07 	sbc.w	ip, r3, r7
 800052e:	3801      	subs	r0, #1
 8000530:	e7a8      	b.n	8000484 <__udivmoddi4+0x1e8>
 8000532:	4631      	mov	r1, r6
 8000534:	e7ed      	b.n	8000512 <__udivmoddi4+0x276>
 8000536:	4603      	mov	r3, r0
 8000538:	e799      	b.n	800046e <__udivmoddi4+0x1d2>
 800053a:	4630      	mov	r0, r6
 800053c:	e7d4      	b.n	80004e8 <__udivmoddi4+0x24c>
 800053e:	46d6      	mov	lr, sl
 8000540:	e77f      	b.n	8000442 <__udivmoddi4+0x1a6>
 8000542:	4463      	add	r3, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e74d      	b.n	80003e4 <__udivmoddi4+0x148>
 8000548:	4606      	mov	r6, r0
 800054a:	4623      	mov	r3, r4
 800054c:	4608      	mov	r0, r1
 800054e:	e70f      	b.n	8000370 <__udivmoddi4+0xd4>
 8000550:	3e02      	subs	r6, #2
 8000552:	4463      	add	r3, ip
 8000554:	e730      	b.n	80003b8 <__udivmoddi4+0x11c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e021      	b.n	80005ac <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000568:	4a37      	ldr	r2, [pc, #220]	@ (8000648 <aesroundkeys+0xec>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000570:	061a      	lsls	r2, r3, #24
 8000572:	4935      	ldr	r1, [pc, #212]	@ (8000648 <aesroundkeys+0xec>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000580:	431a      	orrs	r2, r3
 8000582:	4931      	ldr	r1, [pc, #196]	@ (8000648 <aesroundkeys+0xec>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800058a:	0a1b      	lsrs	r3, r3, #8
 800058c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000590:	431a      	orrs	r2, r3
 8000592:	492d      	ldr	r1, [pc, #180]	@ (8000648 <aesroundkeys+0xec>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800059a:	0e1b      	lsrs	r3, r3, #24
 800059c:	431a      	orrs	r2, r3
 800059e:	492a      	ldr	r1, [pc, #168]	@ (8000648 <aesroundkeys+0xec>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	ddda      	ble.n	8000568 <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 80005b2:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <aesroundkeys+0xec>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 80005b8:	e03c      	b.n	8000634 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f003 0303 	and.w	r3, r3, #3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d127      	bne.n	8000614 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	0c1b      	lsrs	r3, r3, #16
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <aesroundkeys+0xf0>)
 80005ce:	5c9b      	ldrb	r3, [r3, r2]
 80005d0:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <aesroundkeys+0xf0>)
 80005dc:	5c5b      	ldrb	r3, [r3, r1]
 80005de:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005e0:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <aesroundkeys+0xf0>)
 80005ea:	5c5b      	ldrb	r3, [r3, r1]
 80005ec:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 80005ee:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	0e12      	lsrs	r2, r2, #24
 80005f4:	4915      	ldr	r1, [pc, #84]	@ (800064c <aesroundkeys+0xf0>)
 80005f6:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 80005f8:	4053      	eors	r3, r2
 80005fa:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b04      	subs	r3, #4
 8000600:	2b00      	cmp	r3, #0
 8000602:	da00      	bge.n	8000606 <aesroundkeys+0xaa>
 8000604:	3303      	adds	r3, #3
 8000606:	109b      	asrs	r3, r3, #2
 8000608:	4619      	mov	r1, r3
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <aesroundkeys+0xf4>)
 800060c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000610:	4053      	eors	r3, r2
 8000612:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b04      	subs	r3, #4
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <aesroundkeys+0xec>)
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	4053      	eors	r3, r2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4908      	ldr	r1, [pc, #32]	@ (8000648 <aesroundkeys+0xec>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b2b      	cmp	r3, #43	@ 0x2b
 8000638:	ddbf      	ble.n	80005ba <aesroundkeys+0x5e>
    }
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000080 	.word	0x20000080
 800064c:	0800966c 	.word	0x0800966c
 8000650:	08009644 	.word	0x08009644

08000654 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	@ 0x30
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000664:	f7ff ff7a 	bl	800055c <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d010      	beq.n	8000694 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8000672:	4b5a      	ldr	r3, [pc, #360]	@ (80007dc <os_aes+0x188>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	4b58      	ldr	r3, [pc, #352]	@ (80007dc <os_aes+0x188>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4a57      	ldr	r2, [pc, #348]	@ (80007dc <os_aes+0x188>)
 800067e:	6093      	str	r3, [r2, #8]
 8000680:	4b56      	ldr	r3, [pc, #344]	@ (80007dc <os_aes+0x188>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4a55      	ldr	r2, [pc, #340]	@ (80007dc <os_aes+0x188>)
 8000686:	6053      	str	r3, [r2, #4]
 8000688:	4b54      	ldr	r3, [pc, #336]	@ (80007dc <os_aes+0x188>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a53      	ldr	r2, [pc, #332]	@ (80007dc <os_aes+0x188>)
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	f000 bc97 	b.w	8000fc2 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8000694:	4b51      	ldr	r3, [pc, #324]	@ (80007dc <os_aes+0x188>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	061a      	lsls	r2, r3, #24
 800069a:	4b50      	ldr	r3, [pc, #320]	@ (80007dc <os_aes+0x188>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80006a4:	431a      	orrs	r2, r3
 80006a6:	4b4d      	ldr	r3, [pc, #308]	@ (80007dc <os_aes+0x188>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4b4a      	ldr	r3, [pc, #296]	@ (80007dc <os_aes+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	0e1b      	lsrs	r3, r3, #24
 80006b8:	4313      	orrs	r3, r2
 80006ba:	4a48      	ldr	r2, [pc, #288]	@ (80007dc <os_aes+0x188>)
 80006bc:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <os_aes+0x188>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	061a      	lsls	r2, r3, #24
 80006c4:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <os_aes+0x188>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80006ce:	431a      	orrs	r2, r3
 80006d0:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <os_aes+0x188>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80006da:	431a      	orrs	r2, r3
 80006dc:	4b3f      	ldr	r3, [pc, #252]	@ (80007dc <os_aes+0x188>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	0e1b      	lsrs	r3, r3, #24
 80006e2:	4313      	orrs	r3, r2
 80006e4:	4a3d      	ldr	r2, [pc, #244]	@ (80007dc <os_aes+0x188>)
 80006e6:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 80006e8:	4b3c      	ldr	r3, [pc, #240]	@ (80007dc <os_aes+0x188>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	061a      	lsls	r2, r3, #24
 80006ee:	4b3b      	ldr	r3, [pc, #236]	@ (80007dc <os_aes+0x188>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <os_aes+0x188>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	0a1b      	lsrs	r3, r3, #8
 8000700:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000704:	431a      	orrs	r2, r3
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <os_aes+0x188>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	0e1b      	lsrs	r3, r3, #24
 800070c:	4313      	orrs	r3, r2
 800070e:	4a33      	ldr	r2, [pc, #204]	@ (80007dc <os_aes+0x188>)
 8000710:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <os_aes+0x188>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	061a      	lsls	r2, r3, #24
 8000718:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <os_aes+0x188>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000722:	431a      	orrs	r2, r3
 8000724:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <os_aes+0x188>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800072e:	431a      	orrs	r2, r3
 8000730:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <os_aes+0x188>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0e1b      	lsrs	r3, r3, #24
 8000736:	4313      	orrs	r3, r2
 8000738:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <os_aes+0x188>)
 800073a:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 800073c:	f000 bc41 	b.w	8000fc2 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	2b00      	cmp	r3, #0
 8000748:	d109      	bne.n	800075e <os_aes+0x10a>
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	2b00      	cmp	r3, #0
 8000752:	d011      	beq.n	8000778 <os_aes+0x124>
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10c      	bne.n	8000778 <os_aes+0x124>
                a0 = AESAUX[0];
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <os_aes+0x188>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <os_aes+0x188>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <os_aes+0x188>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <os_aes+0x188>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	623b      	str	r3, [r7, #32]
 8000776:	e062      	b.n	800083e <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d016      	beq.n	80007b0 <os_aes+0x15c>
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	2b10      	cmp	r3, #16
 8000786:	d813      	bhi.n	80007b0 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 8000798:	88bb      	ldrh	r3, [r7, #4]
 800079a:	2b10      	cmp	r3, #16
 800079c:	d101      	bne.n	80007a2 <os_aes+0x14e>
 800079e:	2210      	movs	r2, #16
 80007a0:	e000      	b.n	80007a4 <os_aes+0x150>
 80007a2:	2220      	movs	r2, #32
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	e046      	b.n	800083e <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 80007b0:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e026      	b.n	8000806 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	021a      	lsls	r2, r3, #8
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	69f9      	ldr	r1, [r7, #28]
 80007c0:	4299      	cmp	r1, r3
 80007c2:	d204      	bcs.n	80007ce <os_aes+0x17a>
 80007c4:	6839      	ldr	r1, [r7, #0]
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	440b      	add	r3, r1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	e009      	b.n	80007e2 <os_aes+0x18e>
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	69f9      	ldr	r1, [r7, #28]
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d104      	bne.n	80007e0 <os_aes+0x18c>
 80007d6:	2380      	movs	r3, #128	@ 0x80
 80007d8:	e003      	b.n	80007e2 <os_aes+0x18e>
 80007da:	bf00      	nop
 80007dc:	20000070 	.word	0x20000070
 80007e0:	2300      	movs	r3, #0
 80007e2:	4313      	orrs	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d107      	bne.n	8000800 <os_aes+0x1ac>
                        a0 = a1;
 80007f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	3301      	adds	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d9d5      	bls.n	80007b8 <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d013      	beq.n	800083e <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 8000816:	4ba0      	ldr	r3, [pc, #640]	@ (8000a98 <os_aes+0x444>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800081c:	4053      	eors	r3, r2
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 8000820:	4b9d      	ldr	r3, [pc, #628]	@ (8000a98 <os_aes+0x444>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000826:	4053      	eors	r3, r2
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 800082a:	4b9b      	ldr	r3, [pc, #620]	@ (8000a98 <os_aes+0x444>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000830:	4053      	eors	r3, r2
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 8000834:	4b98      	ldr	r3, [pc, #608]	@ (8000a98 <os_aes+0x444>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	6a3a      	ldr	r2, [r7, #32]
 800083a:	4053      	eors	r3, r2
 800083c:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800083e:	4b97      	ldr	r3, [pc, #604]	@ (8000a9c <os_aes+0x448>)
 8000840:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3380      	adds	r3, #128	@ 0x80
 8000846:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800084e:	4053      	eors	r3, r2
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3304      	adds	r3, #4
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800085a:	4053      	eors	r3, r2
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3308      	adds	r3, #8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000866:	4053      	eors	r3, r2
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	330c      	adds	r3, #12
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a3a      	ldr	r2, [r7, #32]
 8000872:	4053      	eors	r3, r2
 8000874:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 800088e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4b82      	ldr	r3, [pc, #520]	@ (8000aa0 <os_aes+0x44c>)
 8000896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4053      	eors	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b7e      	ldr	r3, [pc, #504]	@ (8000aa4 <os_aes+0x450>)
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4053      	eors	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b7a      	ldr	r3, [pc, #488]	@ (8000aa8 <os_aes+0x454>)
 80008be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	4053      	eors	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ca:	0e1b      	lsrs	r3, r3, #24
 80008cc:	4a77      	ldr	r2, [pc, #476]	@ (8000aac <os_aes+0x458>)
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	4053      	eors	r3, r2
 80008d6:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 80008d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	4b70      	ldr	r3, [pc, #448]	@ (8000aa0 <os_aes+0x44c>)
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	4053      	eors	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b6c      	ldr	r3, [pc, #432]	@ (8000aa4 <os_aes+0x450>)
 80008f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	4053      	eors	r3, r2
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	4b68      	ldr	r3, [pc, #416]	@ (8000aa8 <os_aes+0x454>)
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	4053      	eors	r3, r2
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000914:	0e1b      	lsrs	r3, r3, #24
 8000916:	4a65      	ldr	r2, [pc, #404]	@ (8000aac <os_aes+0x458>)
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4053      	eors	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa0 <os_aes+0x44c>)
 800092a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4053      	eors	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	4b59      	ldr	r3, [pc, #356]	@ (8000aa4 <os_aes+0x450>)
 800093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	4053      	eors	r3, r2
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	0c1b      	lsrs	r3, r3, #16
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	4b55      	ldr	r3, [pc, #340]	@ (8000aa8 <os_aes+0x454>)
 8000952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4053      	eors	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095e:	0e1b      	lsrs	r3, r3, #24
 8000960:	4a52      	ldr	r2, [pc, #328]	@ (8000aac <os_aes+0x458>)
 8000962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4053      	eors	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa0 <os_aes+0x44c>)
 8000974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	4053      	eors	r3, r2
 800097c:	61fb      	str	r3, [r7, #28]
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	4b47      	ldr	r3, [pc, #284]	@ (8000aa4 <os_aes+0x450>)
 8000988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4053      	eors	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	0c1b      	lsrs	r3, r3, #16
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	4b43      	ldr	r3, [pc, #268]	@ (8000aa8 <os_aes+0x454>)
 800099c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	4053      	eors	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	0e1b      	lsrs	r3, r3, #24
 80009aa:	4a40      	ldr	r2, [pc, #256]	@ (8000aac <os_aes+0x458>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	4053      	eors	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <os_aes+0x44c>)
 80009d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009dc:	4053      	eors	r3, r2
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <os_aes+0x450>)
 80009ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009f0:	4053      	eors	r3, r2
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <os_aes+0x454>)
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	6a3a      	ldr	r2, [r7, #32]
 8000a04:	4053      	eors	r3, r2
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	0e1b      	lsrs	r3, r3, #24
 8000a0c:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <os_aes+0x458>)
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a14:	4053      	eors	r3, r2
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <os_aes+0x44c>)
 8000a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a26:	4053      	eors	r3, r2
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <os_aes+0x450>)
 8000a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	4053      	eors	r3, r2
 8000a3c:	623b      	str	r3, [r7, #32]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <os_aes+0x454>)
 8000a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a4e:	4053      	eors	r3, r2
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	0e1b      	lsrs	r3, r3, #24
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <os_aes+0x458>)
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a5e:	4053      	eors	r3, r2
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <os_aes+0x44c>)
 8000a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6e:	6a3a      	ldr	r2, [r7, #32]
 8000a70:	4053      	eors	r3, r2
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	0a1b      	lsrs	r3, r3, #8
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <os_aes+0x450>)
 8000a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a84:	4053      	eors	r3, r2
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <os_aes+0x454>)
 8000a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a96:	e00b      	b.n	8000ab0 <os_aes+0x45c>
 8000a98:	20000070 	.word	0x20000070
 8000a9c:	20000080 	.word	0x20000080
 8000aa0:	0800a36c 	.word	0x0800a36c
 8000aa4:	08009f6c 	.word	0x08009f6c
 8000aa8:	08009b6c 	.word	0x08009b6c
 8000aac:	0800976c 	.word	0x0800976c
 8000ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	4aa1      	ldr	r2, [pc, #644]	@ (8000d40 <os_aes+0x6ec>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ac2:	4053      	eors	r3, r2
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b9d      	ldr	r3, [pc, #628]	@ (8000d44 <os_aes+0x6f0>)
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad4:	4053      	eors	r3, r2
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b99      	ldr	r3, [pc, #612]	@ (8000d48 <os_aes+0x6f4>)
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ae8:	4053      	eors	r3, r2
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b95      	ldr	r3, [pc, #596]	@ (8000d4c <os_aes+0x6f8>)
 8000af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000afc:	4053      	eors	r3, r2
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	4a8e      	ldr	r2, [pc, #568]	@ (8000d40 <os_aes+0x6ec>)
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	4053      	eors	r3, r2
 8000b0e:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3320      	adds	r3, #32
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	f4ff aeab 	bcc.w	8000876 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b81      	ldr	r3, [pc, #516]	@ (8000d44 <os_aes+0x6f0>)
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4053      	eors	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b7d      	ldr	r3, [pc, #500]	@ (8000d48 <os_aes+0x6f4>)
 8000b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4053      	eors	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b60:	0c1b      	lsrs	r3, r3, #16
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b79      	ldr	r3, [pc, #484]	@ (8000d4c <os_aes+0x6f8>)
 8000b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	4053      	eors	r3, r2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b74:	0e1b      	lsrs	r3, r3, #24
 8000b76:	4a72      	ldr	r2, [pc, #456]	@ (8000d40 <os_aes+0x6ec>)
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	4053      	eors	r3, r2
 8000b80:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b6e      	ldr	r3, [pc, #440]	@ (8000d44 <os_aes+0x6f0>)
 8000b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4053      	eors	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8000d48 <os_aes+0x6f4>)
 8000b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4053      	eors	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000baa:	0c1b      	lsrs	r3, r3, #16
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b66      	ldr	r3, [pc, #408]	@ (8000d4c <os_aes+0x6f8>)
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	4053      	eors	r3, r2
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bbe:	0e1b      	lsrs	r3, r3, #24
 8000bc0:	4a5f      	ldr	r2, [pc, #380]	@ (8000d40 <os_aes+0x6ec>)
 8000bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4053      	eors	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d44 <os_aes+0x6f0>)
 8000bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	4053      	eors	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b58      	ldr	r3, [pc, #352]	@ (8000d48 <os_aes+0x6f4>)
 8000be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	4053      	eors	r3, r2
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b54      	ldr	r3, [pc, #336]	@ (8000d4c <os_aes+0x6f8>)
 8000bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4053      	eors	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	0e1b      	lsrs	r3, r3, #24
 8000c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8000d40 <os_aes+0x6ec>)
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4053      	eors	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b49      	ldr	r3, [pc, #292]	@ (8000d44 <os_aes+0x6f0>)
 8000c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	4053      	eors	r3, r2
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b45      	ldr	r3, [pc, #276]	@ (8000d48 <os_aes+0x6f4>)
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4053      	eors	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b41      	ldr	r3, [pc, #260]	@ (8000d4c <os_aes+0x6f8>)
 8000c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4053      	eors	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	0e1b      	lsrs	r3, r3, #24
 8000c54:	4a3a      	ldr	r2, [pc, #232]	@ (8000d40 <os_aes+0x6ec>)
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4053      	eors	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	0e1b      	lsrs	r3, r3, #24
 8000c6a:	4a39      	ldr	r2, [pc, #228]	@ (8000d50 <os_aes+0x6fc>)
 8000c6c:	5cd3      	ldrb	r3, [r2, r3]
 8000c6e:	061b      	lsls	r3, r3, #24
 8000c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c72:	4053      	eors	r3, r2
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	0c1b      	lsrs	r3, r3, #16
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b34      	ldr	r3, [pc, #208]	@ (8000d50 <os_aes+0x6fc>)
 8000c80:	5c9b      	ldrb	r3, [r3, r2]
 8000c82:	041b      	lsls	r3, r3, #16
 8000c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c86:	4053      	eors	r3, r2
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <os_aes+0x6fc>)
 8000c94:	5c9b      	ldrb	r3, [r3, r2]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c9a:	4053      	eors	r3, r2
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d50 <os_aes+0x6fc>)
 8000ca6:	5c9b      	ldrb	r3, [r3, r2]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cac:	4053      	eors	r3, r2
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	0e1b      	lsrs	r3, r3, #24
 8000cba:	4a25      	ldr	r2, [pc, #148]	@ (8000d50 <os_aes+0x6fc>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	061b      	lsls	r3, r3, #24
 8000cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cc2:	4053      	eors	r3, r2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <os_aes+0x6fc>)
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cd6:	4053      	eors	r3, r2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <os_aes+0x6fc>)
 8000ce4:	5c9b      	ldrb	r3, [r3, r2]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cea:	4053      	eors	r3, r2
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <os_aes+0x6fc>)
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfc:	4053      	eors	r3, r2
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	0e1b      	lsrs	r3, r3, #24
 8000d0a:	4a11      	ldr	r2, [pc, #68]	@ (8000d50 <os_aes+0x6fc>)
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	061b      	lsls	r3, r3, #24
 8000d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d12:	4053      	eors	r3, r2
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	0c1b      	lsrs	r3, r3, #16
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <os_aes+0x6fc>)
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d26:	4053      	eors	r3, r2
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <os_aes+0x6fc>)
 8000d34:	5c9b      	ldrb	r3, [r3, r2]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d3a:	4053      	eors	r3, r2
 8000d3c:	e00a      	b.n	8000d54 <os_aes+0x700>
 8000d3e:	bf00      	nop
 8000d40:	0800976c 	.word	0x0800976c
 8000d44:	0800a36c 	.word	0x0800a36c
 8000d48:	08009f6c 	.word	0x08009f6c
 8000d4c:	08009b6c 	.word	0x08009b6c
 8000d50:	0800966c 	.word	0x0800966c
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b5f      	ldr	r3, [pc, #380]	@ (8000edc <os_aes+0x888>)
 8000d5e:	5c9b      	ldrb	r3, [r3, r2]
 8000d60:	461a      	mov	r2, r3
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	4053      	eors	r3, r2
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	0e1b      	lsrs	r3, r3, #24
 8000d72:	4a5a      	ldr	r2, [pc, #360]	@ (8000edc <os_aes+0x888>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	061b      	lsls	r3, r3, #24
 8000d78:	6a3a      	ldr	r2, [r7, #32]
 8000d7a:	4053      	eors	r3, r2
 8000d7c:	623b      	str	r3, [r7, #32]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b55      	ldr	r3, [pc, #340]	@ (8000edc <os_aes+0x888>)
 8000d88:	5c9b      	ldrb	r3, [r3, r2]
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	6a3a      	ldr	r2, [r7, #32]
 8000d8e:	4053      	eors	r3, r2
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b50      	ldr	r3, [pc, #320]	@ (8000edc <os_aes+0x888>)
 8000d9c:	5c9b      	ldrb	r3, [r3, r2]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	6a3a      	ldr	r2, [r7, #32]
 8000da2:	4053      	eors	r3, r2
 8000da4:	623b      	str	r3, [r7, #32]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b4b      	ldr	r3, [pc, #300]	@ (8000edc <os_aes+0x888>)
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	461a      	mov	r2, r3
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	4053      	eors	r3, r2
 8000db6:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d056      	beq.n	8000e70 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	111b      	asrs	r3, r3, #4
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d041      	beq.n	8000e56 <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd4:	0fdb      	lsrs	r3, r3, #31
 8000dd6:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dda:	005a      	lsls	r2, r3, #1
 8000ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dde:	0fdb      	lsrs	r3, r3, #31
 8000de0:	4313      	orrs	r3, r2
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de6:	005a      	lsls	r2, r3, #1
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	0fdb      	lsrs	r3, r3, #31
 8000dec:	4313      	orrs	r3, r2
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	005a      	lsls	r2, r3, #1
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	0fdb      	lsrs	r3, r3, #31
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <os_aes+0x7bc>
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8000e0e:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1da      	bne.n	8000dd2 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <os_aes+0x88c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e22:	4053      	eors	r3, r2
 8000e24:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee0 <os_aes+0x88c>)
 8000e26:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <os_aes+0x88c>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2e:	4053      	eors	r3, r2
 8000e30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee0 <os_aes+0x88c>)
 8000e32:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <os_aes+0x88c>)
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3a:	4053      	eors	r3, r2
 8000e3c:	4a28      	ldr	r2, [pc, #160]	@ (8000ee0 <os_aes+0x88c>)
 8000e3e:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <os_aes+0x88c>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	4053      	eors	r3, r2
 8000e48:	4a25      	ldr	r2, [pc, #148]	@ (8000ee0 <os_aes+0x88c>)
 8000e4a:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e52:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000e54:	e4ad      	b.n	80007b2 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000e56:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <os_aes+0x88c>)
 8000e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5a:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8000e5c:	4a20      	ldr	r2, [pc, #128]	@ (8000ee0 <os_aes+0x88c>)
 8000e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e60:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8000e62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <os_aes+0x88c>)
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 8000e68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <os_aes+0x88c>)
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	60d3      	str	r3, [r2, #12]
 8000e6e:	e094      	b.n	8000f9a <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d034      	beq.n	8000ee4 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	2b10      	cmp	r3, #16
 8000e7e:	bf28      	it	cs
 8000e80:	2310      	movcs	r3, #16
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	e01d      	b.n	8000ec8 <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4413      	add	r3, r2
 8000e92:	7819      	ldrb	r1, [r3, #0]
 8000e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e96:	0e1b      	lsrs	r3, r3, #24
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	4403      	add	r3, r0
 8000ea0:	404a      	eors	r2, r1
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8000ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d105      	bne.n	8000ec2 <os_aes+0x86e>
                            a0 = a1;
 8000eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3dd      	bcc.n	8000e8c <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <os_aes+0x88c>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a02      	ldr	r2, [pc, #8]	@ (8000ee0 <os_aes+0x88c>)
 8000ed8:	60d3      	str	r3, [r2, #12]
 8000eda:	e05e      	b.n	8000f9a <os_aes+0x946>
 8000edc:	0800966c 	.word	0x0800966c
 8000ee0:	20000070 	.word	0x20000070
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef0:	0c1a      	lsrs	r2, r3, #16
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efc:	0a1a      	lsrs	r2, r3, #8
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	3302      	adds	r3, #2
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8000f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f12:	0e1a      	lsrs	r2, r3, #24
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3304      	adds	r3, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1e:	0c1a      	lsrs	r2, r3, #16
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3305      	adds	r3, #5
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f2a:	0a1a      	lsrs	r2, r3, #8
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3306      	adds	r3, #6
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	3307      	adds	r3, #7
 8000f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	0e1a      	lsrs	r2, r3, #24
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3308      	adds	r3, #8
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	0c1a      	lsrs	r2, r3, #16
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	3309      	adds	r3, #9
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	0a1a      	lsrs	r2, r3, #8
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	330a      	adds	r3, #10
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	330b      	adds	r3, #11
 8000f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	0e1a      	lsrs	r2, r3, #24
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	330c      	adds	r3, #12
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	0c1a      	lsrs	r2, r3, #16
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	330d      	adds	r3, #13
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	0a1a      	lsrs	r2, r3, #8
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	330e      	adds	r3, #14
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	330f      	adds	r3, #15
 8000f94:	6a3a      	ldr	r2, [r7, #32]
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <os_aes+0x95a>
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <os_aes+0x966>
                buf += 16;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	603b      	str	r3, [r7, #0]
                len -= 16;
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	3b10      	subs	r3, #16
 8000fb8:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f73f abba 	bgt.w	8000740 <os_aes+0xec>
        }
        return AESAUX[0];
 8000fcc:	4b02      	ldr	r3, [pc, #8]	@ (8000fd8 <os_aes+0x984>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3730      	adds	r7, #48	@ 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000070 	.word	0x20000070

08000fdc <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
//    debug_led(0);

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <debug_init+0x10>)
 8000fe2:	f000 f82f 	bl	8001044 <debug_str>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	080094e4 	.word	0x080094e4

08000ff0 <debug_led>:

void debug_led (int val) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2102      	movs	r1, #2
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <debug_led+0x20>)
 8001002:	f004 ffdb 	bl	8005fbc <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	48000400 	.word	0x48000400

08001014 <debug_char>:

void debug_char (char c) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 800101e:	2300      	movs	r3, #0
 8001020:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 8001026:	f107 010c 	add.w	r1, r7, #12
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2201      	movs	r2, #1
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <debug_char+0x2c>)
 8001032:	f007 f9cf 	bl	80083d4 <HAL_UART_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003bc 	.word	0x200003bc

08001044 <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    while(*str) {
 800104c:	e006      	b.n	800105c <debug_str+0x18>
        debug_char(*str++);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffdc 	bl	8001014 <debug_char>
    while(*str) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f4      	bne.n	800104e <debug_str+0xa>
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b11      	cmp	r3, #17
 800107c:	d804      	bhi.n	8001088 <debug_event+0x18>
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <debug_event+0x34>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	e000      	b.n	800108a <debug_event+0x1a>
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <debug_event+0x38>)
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ffda 	bl	8001044 <debug_str>
    debug_char('\r');
 8001090:	200d      	movs	r0, #13
 8001092:	f7ff ffbf 	bl	8001014 <debug_char>
    debug_char('\n');
 8001096:	200a      	movs	r0, #10
 8001098:	f7ff ffbc 	bl	8001014 <debug_char>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	08009528 	.word	0x08009528

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <MX_GPIO_Init+0xdc>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a30      	ldr	r2, [pc, #192]	@ (8001188 <MX_GPIO_Init+0xdc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <MX_GPIO_Init+0xdc>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <MX_GPIO_Init+0xdc>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <MX_GPIO_Init+0xdc>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_GPIO_Init+0xdc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f648 0180 	movw	r1, #34944	@ 0x8880
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f004 ff5e 	bl	8005fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	4821      	ldr	r0, [pc, #132]	@ (800118c <MX_GPIO_Init+0xe0>)
 8001106:	f004 ff59 	bl	8005fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 800110a:	f648 0380 	movw	r3, #34944	@ 0x8880
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001126:	f004 fddf 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_Pin|DIO0_Pin|DIO1_Pin;
 800112a:	23c1      	movs	r3, #193	@ 0xc1
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <MX_GPIO_Init+0xe0>)
 8001140:	f004 fdd2 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001144:	2302      	movs	r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	@ (800118c <MX_GPIO_Init+0xe0>)
 800115c:	f004 fdc4 	bl	8005ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2006      	movs	r0, #6
 8001166:	f004 fd0a 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800116a:	2006      	movs	r0, #6
 800116c:	f004 fd23 	bl	8005bb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2017      	movs	r0, #23
 8001176:	f004 fd02 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800117a:	2017      	movs	r0, #23
 800117c:	f004 fd1b 	bl	8005bb6 <HAL_NVIC_EnableIRQ>

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f004 fef7 	bl	8005fbc <HAL_GPIO_WritePin>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b08c      	sub	sp, #48	@ 0x30
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <hal_pin_rst+0x16>
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d116      	bne.n	800121a <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80011ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011f0:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001204:	f004 fd70 	bl	8005ce8 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	461a      	mov	r2, r3
 800120c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f004 fed2 	bl	8005fbc <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001218:	e00e      	b.n	8001238 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 800121a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800121e:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f004 fd59 	bl	8005ce8 <HAL_GPIO_Init>
    }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	@ 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	2b40      	cmp	r3, #64	@ 0x40
 800124e:	d102      	bne.n	8001256 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001250:	2000      	movs	r0, #0
 8001252:	f004 f80d 	bl	8005270 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	2b80      	cmp	r3, #128	@ 0x80
 800125a:	d102      	bne.n	8001262 <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f004 f807 	bl	8005270 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 8001282:	2300      	movs	r3, #0
 8001284:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001286:	2300      	movs	r3, #0
 8001288:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	f107 010c 	add.w	r1, r7, #12
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <hal_spi+0x38>)
 80012a0:	f006 f8e3 	bl	800746a <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 80012a4:	7a3b      	ldrb	r3, [r7, #8]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000030c 	.word	0x2000030c

080012b4 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <hal_ticks>:

u4_t hal_ticks () {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80012ca:	f000 f8b1 	bl	8001430 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <hal_ticks+0x58>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <hal_ticks+0x5c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 80012dc:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <hal_ticks+0x5c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d10d      	bne.n	8001306 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <hal_ticks+0x5c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d106      	bne.n	8001306 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <hal_ticks+0x5c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	807b      	strh	r3, [r7, #2]
    		t++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001306:	f000 f8a3 	bl	8001450 <hal_enableIRQs>
    return (t<<16)|cnt;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	4313      	orrs	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000130 	.word	0x20000130
 8001320:	20000370 	.word	0x20000370

08001324 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 800132c:	f7ff ffca 	bl	80012c4 <hal_ticks>
 8001330:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dc01      	bgt.n	8001344 <deltaticks+0x20>
 8001340:	2300      	movs	r3, #0
 8001342:	e008      	b.n	8001356 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	141b      	asrs	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <deltaticks+0x2e>
 800134c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001350:	e001      	b.n	8001356 <deltaticks+0x32>
    return (u2_t)d;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b29b      	uxth	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001366:	bf00      	nop
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffdb 	bl	8001324 <deltaticks>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f9      	bne.n	8001368 <hal_waitUntil+0xa>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <hal_checkTimer+0x78>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <hal_checkTimer+0x78>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0202 	bic.w	r2, r2, #2
 8001396:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffc3 	bl	8001324 <deltaticks>
 800139e:	4603      	mov	r3, r0
 80013a0:	81fb      	strh	r3, [r7, #14]
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d809      	bhi.n	80013bc <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <hal_checkTimer+0x78>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <hal_checkTimer+0x78>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0202 	bic.w	r2, r2, #2
 80013b6:	60da      	str	r2, [r3, #12]
        return 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e018      	b.n	80013ee <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <hal_checkTimer+0x78>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80013c2:	89fa      	ldrh	r2, [r7, #14]
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <hal_checkTimer+0x78>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	440a      	add	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 80013cc:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <hal_checkTimer+0x78>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <hal_checkTimer+0x78>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0202 	orr.w	r2, r2, #2
 80013da:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <hal_checkTimer+0x78>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a1a      	ldr	r2, [r3, #32]
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <hal_checkTimer+0x78>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	621a      	str	r2, [r3, #32]
        return 0;
 80013ec:	2300      	movs	r3, #0
    }
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000370 	.word	0x20000370

080013fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d104      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001418:	6053      	str	r3, [r2, #4]
    }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000370 	.word	0x20000370
 800142c:	20000130 	.word	0x20000130

08001430 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <hal_disableIRQs+0x1c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a03      	ldr	r2, [pc, #12]	@ (800144c <hal_disableIRQs+0x1c>)
 8001440:	6013      	str	r3, [r2, #0]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20000130 	.word	0x20000130

08001450 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <hal_enableIRQs+0x24>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <hal_enableIRQs+0x24>)
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <hal_enableIRQs+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001466:	b662      	cpsie	i
}
 8001468:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000130 	.word	0x20000130

08001478 <hal_sleep>:

void hal_sleep () {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 800147c:	bf30      	wfi
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 800148c:	2208      	movs	r2, #8
 800148e:	2100      	movs	r1, #0
 8001490:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <hal_init+0x28>)
 8001492:	f007 ffe0 	bl	8009456 <memset>
    hal_disableIRQs();
 8001496:	f7ff ffcb 	bl	8001430 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 800149a:	f7ff fe79 	bl	8001190 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 800149e:	f7ff fee4 	bl	800126a <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 80014a2:	f7ff ff07 	bl	80012b4 <hal_time_init>
    hal_enableIRQs();
 80014a6:	f7ff ffd3 	bl	8001450 <hal_enableIRQs>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000130 	.word	0x20000130

080014b4 <hal_failed>:

void hal_failed () {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 80014b8:	f7ff ffba 	bl	8001430 <hal_disableIRQs>
    hal_sleep();
 80014bc:	f7ff ffdc 	bl	8001478 <hal_sleep>
    while(1);
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <hal_failed+0xc>

080014c4 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	b29b      	uxth	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	80fb      	strh	r3, [r7, #6]
 8001538:	4613      	mov	r3, r2
 800153a:	717b      	strb	r3, [r7, #5]
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001544:	b21a      	sxth	r2, r3
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	09db      	lsrs	r3, r3, #7
 800156c:	b29b      	uxth	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	6039      	str	r1, [r7, #0]
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001592:	b21a      	sxth	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	6039      	str	r1, [r7, #0]
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b21a      	sxth	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	3301      	adds	r3, #1
 8001606:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <updr2rps+0x20>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	0800a76c 	.word	0x0800a76c

0800161c <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffe5 	bl	80015f8 <updr2rps>
 800162e:	4603      	mov	r3, r0
 8001630:	2101      	movs	r1, #1
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffa3 	bl	800157e <setNocrc>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <decDR+0x2c>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	2bff      	cmp	r3, #255	@ 0xff
 8001656:	d003      	beq.n	8001660 <decDR+0x1c>
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3b01      	subs	r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	e000      	b.n	8001662 <decDR+0x1e>
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	0800a76c 	.word	0x0800a76c

08001674 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	3301      	adds	r3, #1
 8001682:	4a06      	ldr	r2, [pc, #24]	@ (800169c <validDR+0x28>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	2bff      	cmp	r3, #255	@ 0xff
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	0800a76c 	.word	0x0800a76c

080016a0 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	460a      	mov	r2, r1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71bb      	strb	r3, [r7, #6]
 80016b0:	e005      	b.n	80016be <lowerDR+0x1e>
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ffc5 	bl	8001644 <decDR>
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	71ba      	strb	r2, [r7, #6]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <lowerDR+0x12>
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b21a      	sxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	b29b      	uxth	r3, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	4313      	orrs	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3302      	adds	r3, #2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3303      	adds	r3, #3
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	061b      	lsls	r3, r3, #24
 8001728:	4313      	orrs	r3, r2
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3303      	adds	r3, #3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3302      	adds	r3, #2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4313      	orrs	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3301      	adds	r3, #1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	4313      	orrs	r3, r2
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3301      	adds	r3, #1
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	0a1a      	lsrs	r2, r3, #8
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	0c1a      	lsrs	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3302      	adds	r3, #2
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	0e1a      	lsrs	r2, r3, #24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3303      	adds	r3, #3
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3303      	adds	r3, #3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	0a1a      	lsrs	r2, r3, #8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3302      	adds	r3, #2
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	0c1a      	lsrs	r2, r3, #16
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	0e1b      	lsrs	r3, r3, #24
 8001810:	b2da      	uxtb	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8001826:	23ff      	movs	r3, #255	@ 0xff
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8001840:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001844:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e026      	b.n	800189a <os_crc16+0x68>
        remainder ^= data[i] << 8;
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800185c:	4053      	eors	r3, r2
 800185e:	b21b      	sxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001862:	2308      	movs	r3, #8
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e012      	b.n	800188e <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8001868:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da08      	bge.n	8001882 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 8001870:	8afb      	ldrh	r3, [r7, #22]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	b21a      	sxth	r2, r3
 8001876:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800187a:	4053      	eors	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	82fb      	strh	r3, [r7, #22]
 8001880:	e002      	b.n	8001888 <os_crc16+0x56>
            else 
                remainder <<= 1;
 8001882:	8afb      	ldrh	r3, [r7, #22]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	3b01      	subs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e9      	bne.n	8001868 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	3301      	adds	r3, #1
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d3d4      	bcc.n	800184c <os_crc16+0x1a>
        }
    }
    return remainder;
 80018a2:	8afb      	ldrh	r3, [r7, #22]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 80018be:	2210      	movs	r2, #16
 80018c0:	2100      	movs	r1, #0
 80018c2:	4810      	ldr	r0, [pc, #64]	@ (8001904 <micB0+0x54>)
 80018c4:	f007 fdc7 	bl	8009456 <memset>
    AESaux[0]  = 0x49;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <micB0+0x54>)
 80018ca:	2249      	movs	r2, #73	@ 0x49
 80018cc:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <micB0+0x58>)
 80018dc:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <micB0+0x5c>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <micB0+0x60>)
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff57 	bl	800179e <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <micB0+0x64>)
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff52 	bl	800179e <os_wlsbf4>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000070 	.word	0x20000070
 8001908:	20000075 	.word	0x20000075
 800190c:	2000007f 	.word	0x2000007f
 8001910:	20000076 	.word	0x20000076
 8001914:	2000007a 	.word	0x2000007a

08001918 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f7ff ffbf 	bl	80018b0 <micB0>
    os_copyMem(AESkey,key,16);
 8001932:	2210      	movs	r2, #16
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	480d      	ldr	r0, [pc, #52]	@ (800196c <aes_verifyMic+0x54>)
 8001938:	f007 fdba 	bl	80094b0 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	6a39      	ldr	r1, [r7, #32]
 8001944:	2002      	movs	r0, #2
 8001946:	f7fe fe85 	bl	8000654 <os_aes>
 800194a:	4604      	mov	r4, r0
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	6a3a      	ldr	r2, [r7, #32]
 8001950:	4413      	add	r3, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff feef 	bl	8001736 <os_rmsbf4>
 8001958:	4603      	mov	r3, r0
 800195a:	429c      	cmp	r4, r3
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	20000080 	.word	0x20000080

08001970 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f7ff ff93 	bl	80018b0 <micB0>
    os_copyMem(AESkey,key,16);
 800198a:	2210      	movs	r2, #16
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	480b      	ldr	r0, [pc, #44]	@ (80019bc <aes_appendMic+0x4c>)
 8001990:	f007 fd8e 	bl	80094b0 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	6a3a      	ldr	r2, [r7, #32]
 8001998:	18d4      	adds	r4, r2, r3
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	2002      	movs	r0, #2
 80019a4:	f7fe fe56 	bl	8000654 <os_aes>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff ff17 	bl	80017e0 <os_wmsbf4>
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000080 	.word	0x20000080

080019c0 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80019ca:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <aes_appendMic0+0x38>)
 80019cc:	f002 fdea 	bl	80045a4 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	18d4      	adds	r4, r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	200a      	movs	r0, #10
 80019e0:	f7fe fe38 	bl	8000654 <os_aes>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fef9 	bl	80017e0 <os_wmsbf4>
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000080 	.word	0x20000080

080019fc <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <aes_verifyMic0+0x40>)
 8001a08:	f002 fdcc 	bl	80045a4 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	200a      	movs	r0, #10
 8001a16:	f7fe fe1d 	bl	8000654 <os_aes>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fe87 	bl	8001736 <os_rmsbf4>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	429c      	cmp	r4, r3
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	20000080 	.word	0x20000080

08001a40 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001a4a:	4807      	ldr	r0, [pc, #28]	@ (8001a68 <aes_encrypt+0x28>)
 8001a4c:	f002 fdaa 	bl	80045a4 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7fe fdfb 	bl	8000654 <os_aes>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000080 	.word	0x20000080

08001a6c <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dd29      	ble.n	8001ad4 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 8001a80:	2210      	movs	r2, #16
 8001a82:	2100      	movs	r1, #0
 8001a84:	4815      	ldr	r0, [pc, #84]	@ (8001adc <aes_cipher+0x70>)
 8001a86:	f007 fce6 	bl	8009456 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <aes_cipher+0x74>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <aes_cipher+0x70>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <aes_cipher+0x78>)
 8001aa4:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <aes_cipher+0x7c>)
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe77 	bl	800179e <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <aes_cipher+0x80>)
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe72 	bl	800179e <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8001aba:	2210      	movs	r2, #16
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <aes_cipher+0x84>)
 8001ac0:	f007 fcf6 	bl	80094b0 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	2004      	movs	r0, #4
 8001ace:	f7fe fdc1 	bl	8000654 <os_aes>
 8001ad2:	e000      	b.n	8001ad6 <aes_cipher+0x6a>
        return;
 8001ad4:	bf00      	nop
}
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000070 	.word	0x20000070
 8001ae0:	2000007f 	.word	0x2000007f
 8001ae4:	20000075 	.word	0x20000075
 8001ae8:	20000076 	.word	0x20000076
 8001aec:	2000007a 	.word	0x2000007a
 8001af0:	20000080 	.word	0x20000080

08001af4 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4603      	mov	r3, r0
 8001b02:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001b04:	2210      	movs	r2, #16
 8001b06:	2100      	movs	r1, #0
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f007 fca4 	bl	8009456 <memset>
    nwkkey[0] = 0x01;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	2206      	movs	r2, #6
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f007 fcc7 	bl	80094b0 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3307      	adds	r3, #7
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fe20 	bl	8001770 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001b30:	2210      	movs	r2, #16
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	6838      	ldr	r0, [r7, #0]
 8001b36:	f007 fcbb 	bl	80094b0 <memcpy>
    artkey[0] = 0x02;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001b40:	4809      	ldr	r0, [pc, #36]	@ (8001b68 <aes_sessKeys+0x74>)
 8001b42:	f002 fd2f 	bl	80045a4 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001b46:	2210      	movs	r2, #16
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7fe fd82 	bl	8000654 <os_aes>
    os_getDevKey(AESkey);
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <aes_sessKeys+0x74>)
 8001b52:	f002 fd27 	bl	80045a4 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001b56:	2210      	movs	r2, #16
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7fe fd7a 	bl	8000654 <os_aes>
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000080 	.word	0x20000080

08001b6c <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fca3 	bl	80014c4 <getSf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461c      	mov	r4, r3
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fcad 	bl	80014e4 <getBw>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <getSensitivity+0x3c>)
 8001b90:	4623      	mov	r3, r4
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4423      	add	r3, r4
 8001b96:	4413      	add	r3, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	3b8d      	subs	r3, #141	@ 0x8d
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	0800a788 	.word	0x0800a788

08001bac <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	80fb      	strh	r3, [r7, #6]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc90 	bl	80014e4 <getBw>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fc7a 	bl	80014c4 <getSf>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001bde:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd8 <calcAirTime+0x12c>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	1312      	asrs	r2, r2, #12
 8001bee:	17db      	asrs	r3, r3, #31
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	e06d      	b.n	8001cd0 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001bf4:	7abb      	ldrb	r3, [r7, #10]
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001bfe:	7abb      	ldrb	r3, [r7, #10]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d901      	bls.n	8001c08 <calcAirTime+0x5c>
 8001c04:	2308      	movs	r3, #8
 8001c06:	e000      	b.n	8001c0a <calcAirTime+0x5e>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	7dfa      	ldrb	r2, [r7, #23]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001c10:	797b      	ldrb	r3, [r7, #5]
 8001c12:	00da      	lsls	r2, r3, #3
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f103 041c 	add.w	r4, r3, #28
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc9d 	bl	800155e <getNocrc>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <calcAirTime+0x82>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <calcAirTime+0x84>
 8001c2e:	2310      	movs	r3, #16
 8001c30:	441c      	add	r4, r3
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fcb9 	bl	80015ac <getIh>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <calcAirTime+0x98>
 8001c40:	2314      	movs	r3, #20
 8001c42:	e000      	b.n	8001c46 <calcAirTime+0x9a>
 8001c44:	2300      	movs	r3, #0
 8001c46:	1ae3      	subs	r3, r4, r3
 8001c48:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dd15      	ble.n	8001c7c <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8001c50:	7a7a      	ldrb	r2, [r7, #9]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	7a7b      	ldrb	r3, [r7, #9]
 8001c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c5e:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc50 	bl	8001508 <getCr>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	1d5a      	adds	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	3308      	adds	r3, #8
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	e001      	b.n	8001c80 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	3331      	adds	r3, #49	@ 0x31
 8001c86:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8001c88:	7aba      	ldrb	r2, [r7, #10]
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8001c94:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8001c98:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d907      	bls.n	8001cb0 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	fa42 f303 	asr.w	r3, r2, r3
 8001caa:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8001cac:	2304      	movs	r3, #4
 8001cae:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001cbc:	fb03 f202 	mul.w	r2, r3, r2
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0fd9      	lsrs	r1, r3, #31
 8001cc4:	440b      	add	r3, r1
 8001cc6:	105b      	asrs	r3, r3, #1
 8001cc8:	441a      	add	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	14f8b589 	.word	0x14f8b589

08001cdc <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <calcRxWindow+0xa0>)
 8001cf4:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8001cf8:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <calcRxWindow+0xa0>)
 8001cfc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e011      	b.n	8001d28 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <calcRxWindow+0xa0>)
 8001d06:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	11db      	asrs	r3, r3, #7
 8001d14:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <calcRxWindow+0xa0>)
 8001d18:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	11db      	asrs	r3, r3, #7
 8001d26:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8001d28:	2305      	movs	r3, #5
 8001d2a:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <calcRxWindow+0xa0>)
 8001d2e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <calcRxWindow+0xa0>)
 8001d36:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	4a0e      	ldr	r2, [pc, #56]	@ (8001d80 <calcRxWindow+0xa4>)
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3305      	adds	r3, #5
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <calcRxWindow+0xa0>)
 8001d5a:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3b08      	subs	r3, #8
 8001d60:	79ba      	ldrb	r2, [r7, #6]
 8001d62:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <calcRxWindow+0xa4>)
 8001d64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d68:	fb03 f202 	mul.w	r2, r3, r2
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4413      	add	r3, r2
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	20000138 	.word	0x20000138
 8001d80:	0800a7ac 	.word	0x0800a7ac

08001d84 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8001d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d88:	b087      	sub	sp, #28
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	4608      	mov	r0, r1
 8001d90:	4631      	mov	r1, r6
 8001d92:	73f9      	strb	r1, [r7, #15]
 8001d94:	4601      	mov	r1, r0
 8001d96:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8001d98:	7bb9      	ldrb	r1, [r7, #14]
 8001d9a:	2900      	cmp	r1, #0
 8001d9c:	d014      	beq.n	8001dc8 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 8001d9e:	493b      	ldr	r1, [pc, #236]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8001da6:	4939      	ldr	r1, [pc, #228]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 8001dae:	4937      	ldr	r1, [pc, #220]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8001db6:	4935      	ldr	r1, [pc, #212]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001db8:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8001dbc:	f041 010c 	orr.w	r1, r1, #12
 8001dc0:	b2c8      	uxtb	r0, r1
 8001dc2:	4932      	ldr	r1, [pc, #200]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001dc4:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8001dc8:	2142      	movs	r1, #66	@ 0x42
 8001dca:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8001dcc:	7bf9      	ldrb	r1, [r7, #15]
 8001dce:	2000      	movs	r0, #0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	f04f 0a00 	mov.w	sl, #0
 8001ddc:	f04f 0b00 	mov.w	fp, #0
 8001de0:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001de4:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001de8:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001dec:	4650      	mov	r0, sl
 8001dee:	4659      	mov	r1, fp
 8001df0:	1b02      	subs	r2, r0, r4
 8001df2:	eb61 0305 	sbc.w	r3, r1, r5
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e04:	0090      	lsls	r0, r2, #2
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	eb12 0804 	adds.w	r8, r2, r4
 8001e0e:	eb43 0905 	adc.w	r9, r3, r5
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8001e1e:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8001e22:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8001e26:	4690      	mov	r8, r2
 8001e28:	4699      	mov	r9, r3
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001e32:	1851      	adds	r1, r2, r1
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	f143 0300 	adc.w	r3, r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e48:	f7fe f9c0 	bl	80001cc <__aeabi_ldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3305      	adds	r3, #5
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001e5e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001e64:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8001e68:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 8001e6c:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001e6e:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8001e72:	3b08      	subs	r3, #8
 8001e74:	6979      	ldr	r1, [r7, #20]
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a03      	ldr	r2, [pc, #12]	@ (8001e8c <calcBcnRxWindowFromMillis+0x108>)
 8001e7e:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8c:	20000138 	.word	0x20000138

08001e90 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8001e98:	2210      	movs	r2, #16
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	482e      	ldr	r0, [pc, #184]	@ (8001f58 <rxschedInit+0xc8>)
 8001e9e:	f007 fada 	bl	8009456 <memset>
    os_clearMem(LMIC.frame+8,8);
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <rxschedInit+0xcc>)
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f007 fad4 	bl	8009456 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <rxschedInit+0xd0>)
 8001eb0:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	482b      	ldr	r0, [pc, #172]	@ (8001f64 <rxschedInit+0xd4>)
 8001eb8:	f7ff fc71 	bl	800179e <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f68 <rxschedInit+0xd8>)
 8001ebe:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <rxschedInit+0xd0>)
 8001ec0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7ff fc69 	bl	800179e <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8001ecc:	2210      	movs	r2, #16
 8001ece:	4925      	ldr	r1, [pc, #148]	@ (8001f64 <rxschedInit+0xd4>)
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7fe fbbf 	bl	8000654 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8001edc:	4821      	ldr	r0, [pc, #132]	@ (8001f64 <rxschedInit+0xd4>)
 8001ede:	f7ff fbf8 	bl	80016d2 <os_rlsbf2>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	f1c3 0307 	rsb	r3, r3, #7
 8001eec:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001ef0:	fa42 f303 	asr.w	r3, r2, r3
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <rxschedInit+0xd0>)
 8001efa:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 8001efe:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8001f10:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f14:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685c      	ldr	r4, [r3, #4]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3302      	adds	r3, #2
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7ff fecf 	bl	8001cdc <calcRxWindow>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	1ae2      	subs	r2, r4, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <rxschedInit+0xd0>)
 8001f48:	7c1a      	ldrb	r2, [r3, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	70da      	strb	r2, [r3, #3]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000080 	.word	0x20000080
 8001f5c:	20000288 	.word	0x20000288
 8001f60:	20000138 	.word	0x20000138
 8001f64:	20000280 	.word	0x20000280
 8001f68:	20000284 	.word	0x20000284

08001f6c <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db01      	blt.n	8001f86 <rxschedNext+0x1a>
        return 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e03a      	b.n	8001ffc <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	789b      	ldrb	r3, [r3, #2]
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da01      	bge.n	8001f98 <rxschedNext+0x2c>
        return 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e031      	b.n	8001ffc <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	4093      	lsls	r3, r2
 8001fa2:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	4413      	add	r3, r2
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	709a      	strb	r2, [r3, #2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da01      	bge.n	8001fc0 <rxschedNext+0x54>
        return 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e01d      	b.n	8001ffc <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	049b      	lsls	r3, r3, #18
 8001fce:	11db      	asrs	r3, r3, #7
 8001fd0:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3302      	adds	r3, #2
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff fe79 	bl	8001cdc <calcRxWindow>
 8001fea:	4603      	mov	r3, r0
 8001fec:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001ff2:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <rxschedNext+0x98>)
 8001ff4:	7c1a      	ldrb	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	70da      	strb	r2, [r3, #3]
    goto again;
 8001ffa:	e7bc      	b.n	8001f76 <rxschedNext+0xa>
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bd90      	pop	{r4, r7, pc}
 8002004:	20000138 	.word	0x20000138

08002008 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8002012:	f003 f907 	bl	8005224 <radio_rand1>
 8002016:	4603      	mov	r3, r0
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b21c      	sxth	r4, r3
 800201c:	f003 f902 	bl	8005224 <radio_rand1>
 8002020:	4603      	mov	r3, r0
 8002022:	b21b      	sxth	r3, r3
 8002024:	4323      	orrs	r3, r4
 8002026:	b21b      	sxth	r3, r3
 8002028:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 800202a:	897b      	ldrh	r3, [r7, #10]
 800202c:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002034:	dd0b      	ble.n	800204e <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	4a11      	ldr	r2, [pc, #68]	@ (8002080 <rndDelay+0x78>)
 800203a:	fba2 1203 	umull	r1, r2, r2, r3
 800203e:	0ad2      	lsrs	r2, r2, #11
 8002040:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002044:	fb01 f202 	mul.w	r2, r1, r2
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002054:	897b      	ldrh	r3, [r7, #10]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	fbb3 f1f2 	udiv	r1, r3, r2
 800205e:	fb01 f202 	mul.w	r2, r1, r2
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
    return delay;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffb8 	bl	8002008 <rndDelay>
 8002098:	4602      	mov	r2, r0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <txDelay+0x58>)
 80020a2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <txDelay+0x34>
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <txDelay+0x58>)
 80020ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	dd0c      	ble.n	80020d2 <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 80020b8:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <txDelay+0x58>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <txDelay+0x58>)
 80020c2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80020c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <txDelay+0x58>)
 80020ce:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000138 	.word	0x20000138

080020e0 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	460a      	mov	r2, r1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <setDrJoin+0x24>)
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	20000138 	.word	0x20000138

08002108 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	460b      	mov	r3, r1
 8002114:	71bb      	strb	r3, [r7, #6]
 8002116:	4613      	mov	r3, r2
 8002118:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 800211a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800211e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002122:	d003      	beq.n	800212c <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002124:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <setDrTxpow+0x58>)
 8002126:	797b      	ldrb	r3, [r7, #5]
 8002128:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <setDrTxpow+0x58>)
 800212e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002132:	79ba      	ldrb	r2, [r7, #6]
 8002134:	429a      	cmp	r2, r3
 8002136:	d00c      	beq.n	8002152 <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002138:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <setDrTxpow+0x58>)
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002140:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <setDrTxpow+0x58>)
 8002142:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002146:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <setDrTxpow+0x58>)
 800214e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000138 	.word	0x20000138

08002164 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 800216e:	2240      	movs	r2, #64	@ 0x40
 8002170:	2100      	movs	r1, #0
 8002172:	483a      	ldr	r0, [pc, #232]	@ (800225c <initDefaultChannels+0xf8>)
 8002174:	f007 f96f 	bl	8009456 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002178:	2220      	movs	r2, #32
 800217a:	2100      	movs	r1, #0
 800217c:	4838      	ldr	r0, [pc, #224]	@ (8002260 <initDefaultChannels+0xfc>)
 800217e:	f007 f96a 	bl	8009456 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	4837      	ldr	r0, [pc, #220]	@ (8002264 <initDefaultChannels+0x100>)
 8002188:	f007 f965 	bl	8009456 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 800218c:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <initDefaultChannels+0x104>)
 800218e:	223f      	movs	r2, #63	@ 0x3f
 8002190:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <initDefaultChannels+0x3a>
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <initDefaultChannels+0x3c>
 800219e:	2306      	movs	r3, #6
 80021a0:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 80021a2:	2300      	movs	r3, #0
 80021a4:	73bb      	strb	r3, [r7, #14]
 80021a6:	e014      	b.n	80021d2 <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	7bbb      	ldrb	r3, [r7, #14]
 80021ac:	492f      	ldr	r1, [pc, #188]	@ (800226c <initDefaultChannels+0x108>)
 80021ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021b2:	492d      	ldr	r1, [pc, #180]	@ (8002268 <initDefaultChannels+0x104>)
 80021b4:	3310      	adds	r3, #16
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 80021ba:	7bbb      	ldrb	r3, [r7, #14]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <initDefaultChannels+0x104>)
 80021be:	3340      	adds	r3, #64	@ 0x40
 80021c0:	213f      	movs	r1, #63	@ 0x3f
 80021c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3301      	adds	r3, #1
 80021ca:	73bb      	strb	r3, [r7, #14]
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3301      	adds	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d9e7      	bls.n	80021a8 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <initDefaultChannels+0x104>)
 80021da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021de:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 80021e0:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <initDefaultChannels+0x104>)
 80021e2:	220e      	movs	r2, #14
 80021e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80021e8:	f003 f81c 	bl	8005224 <radio_rand1>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <initDefaultChannels+0x104>)
 80021f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <initDefaultChannels+0x104>)
 80021fc:	2264      	movs	r2, #100	@ 0x64
 80021fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <initDefaultChannels+0x104>)
 8002202:	220e      	movs	r2, #14
 8002204:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002208:	f003 f80c 	bl	8005224 <radio_rand1>
 800220c:	4603      	mov	r3, r0
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <initDefaultChannels+0x104>)
 8002216:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 800221a:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <initDefaultChannels+0x104>)
 800221c:	220a      	movs	r2, #10
 800221e:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <initDefaultChannels+0x104>)
 8002222:	221b      	movs	r2, #27
 8002224:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002228:	f002 fffc 	bl	8005224 <radio_rand1>
 800222c:	4603      	mov	r3, r0
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <initDefaultChannels+0x104>)
 8002236:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 800223a:	f002 fac9 	bl	80047d0 <os_getTime>
 800223e:	4603      	mov	r3, r0
 8002240:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <initDefaultChannels+0x104>)
 8002242:	6353      	str	r3, [r2, #52]	@ 0x34
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <initDefaultChannels+0x104>)
 8002246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002248:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <initDefaultChannels+0x104>)
 800224a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <initDefaultChannels+0x104>)
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002250:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <initDefaultChannels+0x104>)
 8002252:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000178 	.word	0x20000178
 8002260:	200001b8 	.word	0x200001b8
 8002264:	20000158 	.word	0x20000158
 8002268:	20000138 	.word	0x20000138
 800226c:	0800a7cc 	.word	0x0800a7cc

08002270 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6039      	str	r1, [r7, #0]
 8002278:	4611      	mov	r1, r2
 800227a:	461a      	mov	r2, r3
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	460b      	mov	r3, r1
 8002282:	80bb      	strh	r3, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d901      	bls.n	8002292 <LMIC_setupChannel+0x22>
        return 0;
 800228e:	2300      	movs	r3, #0
 8002290:	e054      	b.n	800233c <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 8002292:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d121      	bne.n	80022e0 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4a2a      	ldr	r2, [pc, #168]	@ (8002348 <LMIC_setupChannel+0xd8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d908      	bls.n	80022b6 <LMIC_setupChannel+0x46>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4a29      	ldr	r2, [pc, #164]	@ (800234c <LMIC_setupChannel+0xdc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d804      	bhi.n	80022b6 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f043 0302 	orr.w	r3, r3, #2
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	e021      	b.n	80022fa <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	4a25      	ldr	r2, [pc, #148]	@ (8002350 <LMIC_setupChannel+0xe0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d903      	bls.n	80022c6 <LMIC_setupChannel+0x56>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4a24      	ldr	r2, [pc, #144]	@ (8002354 <LMIC_setupChannel+0xe4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d907      	bls.n	80022d6 <LMIC_setupChannel+0x66>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	4a23      	ldr	r2, [pc, #140]	@ (8002358 <LMIC_setupChannel+0xe8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d315      	bcc.n	80022fa <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4a22      	ldr	r2, [pc, #136]	@ (800235c <LMIC_setupChannel+0xec>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d811      	bhi.n	80022fa <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	e00c      	b.n	80022fa <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 80022e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	dd01      	ble.n	80022ec <LMIC_setupChannel+0x7c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	e027      	b.n	800233c <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4918      	ldr	r1, [pc, #96]	@ (8002360 <LMIC_setupChannel+0xf0>)
 80022fe:	3310      	adds	r3, #16
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8002306:	88bb      	ldrh	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <LMIC_setupChannel+0xa0>
 800230c:	88ba      	ldrh	r2, [r7, #4]
 800230e:	e000      	b.n	8002312 <LMIC_setupChannel+0xa2>
 8002310:	223f      	movs	r2, #63	@ 0x3f
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	4912      	ldr	r1, [pc, #72]	@ (8002360 <LMIC_setupChannel+0xf0>)
 8002316:	3340      	adds	r3, #64	@ 0x40
 8002318:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 800231c:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <LMIC_setupChannel+0xf0>)
 800231e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002322:	b21a      	sxth	r2, r3
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	b21b      	sxth	r3, r3
 800232e:	4313      	orrs	r3, r2
 8002330:	b21b      	sxth	r3, r3
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <LMIC_setupChannel+0xf0>)
 8002336:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	33d1fdbf 	.word	0x33d1fdbf
 800234c:	33d5ce50 	.word	0x33d5ce50
 8002350:	33bca0ff 	.word	0x33bca0ff
 8002354:	33c5c8c0 	.word	0x33c5c8c0
 8002358:	33d691a0 	.word	0x33d691a0
 800235c:	33db2580 	.word	0x33db2580
 8002360:	20000138 	.word	0x20000138

08002364 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f9c3 	bl	80016fc <os_rlsbf4>
 8002376:	4603      	mov	r3, r0
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	2264      	movs	r2, #100	@ 0x64
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <convFreq+0x3c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d303      	bcc.n	8002392 <convFreq+0x2e>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <convFreq+0x40>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <convFreq+0x32>
        freq = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
    return freq;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	337055c0 	.word	0x337055c0
 80023a4:	33db2580 	.word	0x33db2580

080023a8 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	460a      	mov	r2, r1
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <mapChannels+0x2c>
 80023be:	88bb      	ldrh	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <mapChannels+0x2c>
 80023c4:	88ba      	ldrh	r2, [r7, #4]
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <mapChannels+0x90>)
 80023c8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <mapChannels+0x30>
        return 0;  // illegal input
 80023d4:	2300      	movs	r3, #0
 80023d6:	e028      	b.n	800242a <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e01d      	b.n	800241a <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 80023de:	88ba      	ldrh	r2, [r7, #4]
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	fa42 f303 	asr.w	r3, r2, r3
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <mapChannels+0x6c>
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <mapChannels+0x90>)
 80023f2:	3310      	adds	r3, #16
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2201      	movs	r2, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	b21b      	sxth	r3, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	b21a      	sxth	r2, r3
 800240a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800240e:	4013      	ands	r3, r2
 8002410:	b21b      	sxth	r3, r3
 8002412:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3301      	adds	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d9de      	bls.n	80023de <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 8002420:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <mapChannels+0x90>)
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000138 	.word	0x20000138

0800243c <updateTx>:


static void updateTx (ostime_t txbeg) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <updateTx+0x90>)
 8002446:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800244a:	4a20      	ldr	r2, [pc, #128]	@ (80024cc <updateTx+0x90>)
 800244c:	3310      	adds	r3, #16
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <updateTx+0x90>)
 8002456:	89db      	ldrh	r3, [r3, #14]
 8002458:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <updateTx+0x90>)
 800245a:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fba3 	bl	8001bac <calcAirTime>
 8002466:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	3304      	adds	r3, #4
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4a16      	ldr	r2, [pc, #88]	@ (80024cc <updateTx+0x90>)
 8002474:	4413      	add	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <updateTx+0x90>)
 8002480:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <updateTx+0x90>)
 800248a:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fb03 f202 	mul.w	r2, r3, r2
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	441a      	add	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <updateTx+0x90>)
 80024a2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <updateTx+0x90>)
 80024ac:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80024b0:	461a      	mov	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	fa03 f202 	lsl.w	r2, r3, r2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a03      	ldr	r2, [pc, #12]	@ (80024cc <updateTx+0x90>)
 80024be:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000138 	.word	0x20000138

080024d0 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 80024d8:	230f      	movs	r3, #15
 80024da:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <nextTx+0x130>)
 80024e0:	4413      	add	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	73bb      	strb	r3, [r7, #14]
 80024ec:	e01d      	b.n	800252a <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 80024ee:	7dfa      	ldrb	r2, [r7, #23]
 80024f0:	7bbb      	ldrb	r3, [r7, #14]
 80024f2:	fa42 f303 	asr.w	r3, r2, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d012      	beq.n	8002524 <nextTx+0x54>
 80024fe:	7bbb      	ldrb	r3, [r7, #14]
 8002500:	4a40      	ldr	r2, [pc, #256]	@ (8002604 <nextTx+0x134>)
 8002502:	3304      	adds	r3, #4
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	dd08      	ble.n	8002524 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 8002512:	7bbb      	ldrb	r3, [r7, #14]
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4a3a      	ldr	r2, [pc, #232]	@ (8002604 <nextTx+0x134>)
 800251a:	3304      	adds	r3, #4
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	3301      	adds	r3, #1
 8002528:	73bb      	strb	r3, [r7, #14]
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d9de      	bls.n	80024ee <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	4a34      	ldr	r2, [pc, #208]	@ (8002604 <nextTx+0x134>)
 8002534:	3304      	adds	r3, #4
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800253e:	2300      	movs	r3, #0
 8002540:	733b      	strb	r3, [r7, #12]
 8002542:	e042      	b.n	80025ca <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	3301      	adds	r3, #1
 8002548:	737b      	strb	r3, [r7, #13]
 800254a:	7b7b      	ldrb	r3, [r7, #13]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d902      	bls.n	8002556 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	3b10      	subs	r3, #16
 8002554:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002556:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <nextTx+0x134>)
 8002558:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800255c:	461a      	mov	r2, r3
 800255e:	7b7b      	ldrb	r3, [r7, #13]
 8002560:	fa42 f303 	asr.w	r3, r2, r3
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02b      	beq.n	80025c4 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800256c:	7b7b      	ldrb	r3, [r7, #13]
 800256e:	4a25      	ldr	r2, [pc, #148]	@ (8002604 <nextTx+0x134>)
 8002570:	3340      	adds	r3, #64	@ 0x40
 8002572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002576:	461a      	mov	r2, r3
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <nextTx+0x134>)
 800257a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	fa42 f303 	asr.w	r3, r2, r3
 8002586:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01a      	beq.n	80025c4 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	7b7b      	ldrb	r3, [r7, #13]
 8002592:	491c      	ldr	r1, [pc, #112]	@ (8002604 <nextTx+0x134>)
 8002594:	3310      	adds	r3, #16
 8002596:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800259a:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800259e:	429a      	cmp	r2, r3
 80025a0:	d110      	bne.n	80025c4 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	4917      	ldr	r1, [pc, #92]	@ (8002604 <nextTx+0x134>)
 80025a6:	1d13      	adds	r3, r2, #4
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	7b79      	ldrb	r1, [r7, #13]
 80025ae:	70d9      	strb	r1, [r3, #3]
 80025b0:	4914      	ldr	r1, [pc, #80]	@ (8002604 <nextTx+0x134>)
 80025b2:	1d13      	adds	r3, r2, #4
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	78da      	ldrb	r2, [r3, #3]
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <nextTx+0x134>)
 80025bc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	e016      	b.n	80025f2 <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80025c4:	7b3b      	ldrb	r3, [r7, #12]
 80025c6:	3301      	adds	r3, #1
 80025c8:	733b      	strb	r3, [r7, #12]
 80025ca:	7b3b      	ldrb	r3, [r7, #12]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d9b9      	bls.n	8002544 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2201      	movs	r2, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	b25a      	sxtb	r2, r3
 80025de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025e2:	4013      	ands	r3, r2
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	75fb      	strb	r3, [r7, #23]
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f af76 	bne.w	80024dc <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 80025f0:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	44aa2000 	.word	0x44aa2000
 8002604:	20000138 	.word	0x20000138

08002608 <setBcnRxParams>:


static void setBcnRxParams (void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <setBcnRxParams+0x48>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8002614:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <setBcnRxParams+0x48>)
 8002616:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 800261a:	4a0d      	ldr	r2, [pc, #52]	@ (8002650 <setBcnRxParams+0x48>)
 800261c:	3310      	adds	r3, #16
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <setBcnRxParams+0x48>)
 8002628:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800262a:	2003      	movs	r0, #3
 800262c:	f7fe fff6 	bl	800161c <dndr2rps>
 8002630:	4603      	mov	r3, r0
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe ffa2 	bl	800157e <setNocrc>
 800263a:	4603      	mov	r3, r0
 800263c:	2111      	movs	r1, #17
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe ffc3 	bl	80015ca <setIh>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b01      	ldr	r3, [pc, #4]	@ (8002650 <setBcnRxParams+0x48>)
 800264a:	81da      	strh	r2, [r3, #14]
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000138 	.word	0x20000138

08002654 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8002654:	b598      	push	{r3, r4, r7, lr}
 8002656:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002658:	f002 fde4 	bl	8005224 <radio_rand1>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <initJoinLoop+0x64>)
 8002662:	fba3 1302 	umull	r1, r3, r3, r2
 8002666:	0899      	lsrs	r1, r3, #2
 8002668:	460b      	mov	r3, r1
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <initJoinLoop+0x68>)
 8002676:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <initJoinLoop+0x68>)
 800267c:	220e      	movs	r2, #14
 800267e:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 8002682:	2105      	movs	r1, #5
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff fd2b 	bl	80020e0 <setDrJoin>
    initDefaultChannels(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff fd6a 	bl	8002164 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8002690:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <initJoinLoop+0x68>)
 8002692:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <initJoinLoop+0x4e>
 800269e:	f7fe ff09 	bl	80014b4 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <initJoinLoop+0x68>)
 80026a4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80026a6:	2008      	movs	r0, #8
 80026a8:	f7ff fcae 	bl	8002008 <rndDelay>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4423      	add	r3, r4
 80026b0:	4a02      	ldr	r2, [pc, #8]	@ (80026bc <initJoinLoop+0x68>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	bd98      	pop	{r3, r4, r7, pc}
 80026b8:	aaaaaaab 	.word	0xaaaaaaab
 80026bc:	20000138 	.word	0x20000138

080026c0 <nextJoinState>:


static ostime_t nextJoinState (void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 80026ca:	4b30      	ldr	r3, [pc, #192]	@ (800278c <nextJoinState+0xcc>)
 80026cc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80026d0:	3301      	adds	r3, #1
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b2d      	ldr	r3, [pc, #180]	@ (800278c <nextJoinState+0xcc>)
 80026d6:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <nextJoinState+0xcc>)
 80026dc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d103      	bne.n	80026ec <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 80026e4:	4b29      	ldr	r3, [pc, #164]	@ (800278c <nextJoinState+0xcc>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <nextJoinState+0xcc>)
 80026ee:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80026f2:	3301      	adds	r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b25      	ldr	r3, [pc, #148]	@ (800278c <nextJoinState+0xcc>)
 80026f8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 80026fc:	4b23      	ldr	r3, [pc, #140]	@ (800278c <nextJoinState+0xcc>)
 80026fe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d112      	bne.n	8002730 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 800270a:	4b20      	ldr	r3, [pc, #128]	@ (800278c <nextJoinState+0xcc>)
 800270c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002714:	2301      	movs	r3, #1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	e00a      	b.n	8002730 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 800271a:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <nextJoinState+0xcc>)
 800271c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe ff8f 	bl	8001644 <decDR>
 8002726:	4603      	mov	r3, r0
 8002728:	4619      	mov	r1, r3
 800272a:	2001      	movs	r0, #1
 800272c:	f7ff fcd8 	bl	80020e0 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <nextJoinState+0xcc>)
 8002732:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002736:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <nextJoinState+0xcc>)
 800273e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8002742:	f002 f845 	bl	80047d0 <os_getTime>
 8002746:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8002748:	4b10      	ldr	r3, [pc, #64]	@ (800278c <nextJoinState+0xcc>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	da02      	bge.n	800275a <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8002754:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <nextJoinState+0xcc>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <nextJoinState+0xcc>)
 800275c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002760:	461a      	mov	r2, r3
 8002762:	23ff      	movs	r3, #255	@ 0xff
 8002764:	4113      	asrs	r3, r2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fc4d 	bl	8002008 <rndDelay>
 800276e:	4603      	mov	r3, r0
 8002770:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8002774:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a03      	ldr	r2, [pc, #12]	@ (800278c <nextJoinState+0xcc>)
 800277e:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8002780:	79fb      	ldrb	r3, [r7, #7]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000138 	.word	0x20000138

08002790 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8002798:	f001 fcb6 	bl	8004108 <engineUpdate>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <reportEvent>:


static void reportEvent (ev_t ev) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 ff47 	bl	8004644 <onEvent>
    engineUpdate();
 80027b6:	f001 fca7 	bl	8004108 <engineUpdate>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <runReset>:


static void runReset (xref2osjob_t osjob) {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 80027ca:	f001 fe67 	bl	800449c <LMIC_reset>
    LMIC_startJoining();
 80027ce:	f001 fa0f 	bl	8003bf0 <LMIC_startJoining>
    reportEvent(EV_RESET);
 80027d2:	200c      	movs	r0, #12
 80027d4:	f7ff ffe6 	bl	80027a4 <reportEvent>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <stateJustJoined>:

static void stateJustJoined (void) {
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 80027e4:	4b2f      	ldr	r3, [pc, #188]	@ (80028a4 <stateJustJoined+0xc4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80027ec:	4b2d      	ldr	r3, [pc, #180]	@ (80028a4 <stateJustJoined+0xc4>)
 80027ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80027f2:	4a2c      	ldr	r2, [pc, #176]	@ (80028a4 <stateJustJoined+0xc4>)
 80027f4:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 80027f8:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <stateJustJoined+0xc4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8002800:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <stateJustJoined+0xc4>)
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8002808:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <stateJustJoined+0xc4>)
 800280a:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 800280e:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <stateJustJoined+0xc4>)
 8002810:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8002814:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <stateJustJoined+0xc4>)
 8002816:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800281a:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <stateJustJoined+0xc4>)
 800281c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8002820:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <stateJustJoined+0xc4>)
 8002822:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8002826:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <stateJustJoined+0xc4>)
 8002828:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <stateJustJoined+0xc4>)
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <stateJustJoined+0xc4>)
 8002836:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 800283a:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <stateJustJoined+0xc4>)
 800283c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8002840:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <stateJustJoined+0xc4>)
 8002842:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <stateJustJoined+0xc4>)
 8002848:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <stateJustJoined+0xc4>)
 800284e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <stateJustJoined+0xc4>)
 8002854:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <stateJustJoined+0xc4>)
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <stateJustJoined+0xc4>)
 8002862:	2200      	movs	r2, #0
 8002864:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <stateJustJoined+0xc4>)
 800286a:	22f4      	movs	r2, #244	@ 0xf4
 800286c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <stateJustJoined+0xc4>)
 8002872:	2200      	movs	r2, #0
 8002874:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <stateJustJoined+0xc4>)
 800287a:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <stateJustJoined+0xc8>)
 800287c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <stateJustJoined+0xc4>)
 8002882:	2205      	movs	r2, #5
 8002884:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <stateJustJoined+0xc4>)
 800288a:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <stateJustJoined+0xc8>)
 800288c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <stateJustJoined+0xc4>)
 8002892:	2203      	movs	r2, #3
 8002894:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000138 	.word	0x20000138
 80028a8:	33d3e608 	.word	0x33d3e608

080028ac <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80028b2:	4b46      	ldr	r3, [pc, #280]	@ (80029cc <decodeBeacon+0x120>)
 80028b4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80028b8:	2b11      	cmp	r3, #17
 80028ba:	d001      	beq.n	80028c0 <decodeBeacon+0x14>
 80028bc:	f7fe fdfa 	bl	80014b4 <hal_failed>
    xref2u1_t d = LMIC.frame;
 80028c0:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <decodeBeacon+0x124>)
 80028c2:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3307      	adds	r3, #7
 80028c8:	781c      	ldrb	r4, [r3, #0]
 80028ca:	2107      	movs	r1, #7
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fe ffb0 	bl	8001832 <os_crc16>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b2db      	uxtb	r3, r3
    if(
 80028d6:	429c      	cmp	r4, r3
 80028d8:	d001      	beq.n	80028de <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 80028da:	2300      	movs	r3, #0
 80028dc:	e071      	b.n	80029c2 <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe ff0c 	bl	80016fc <os_rlsbf4>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028ea:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 80028ec:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <decodeBeacon+0x120>)
 80028ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d002      	beq.n	80028fe <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	e061      	b.n	80029c2 <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 80028fe:	4b33      	ldr	r3, [pc, #204]	@ (80029cc <decodeBeacon+0x120>)
 8002900:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002904:	f023 0303 	bic.w	r3, r3, #3
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b30      	ldr	r3, [pc, #192]	@ (80029cc <decodeBeacon+0x120>)
 800290c:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8002910:	4b2e      	ldr	r3, [pc, #184]	@ (80029cc <decodeBeacon+0x120>)
 8002912:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8002916:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <decodeBeacon+0x120>)
 8002918:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 800291c:	4b2b      	ldr	r3, [pc, #172]	@ (80029cc <decodeBeacon+0x120>)
 800291e:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002922:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <decodeBeacon+0x120>)
 8002924:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8002928:	4b28      	ldr	r3, [pc, #160]	@ (80029cc <decodeBeacon+0x120>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8002930:	3b0c      	subs	r3, #12
 8002932:	4a26      	ldr	r2, [pc, #152]	@ (80029cc <decodeBeacon+0x120>)
 8002934:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3303      	adds	r3, #3
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fedd 	bl	80016fc <os_rlsbf4>
 8002942:	4603      	mov	r3, r0
 8002944:	4a21      	ldr	r2, [pc, #132]	@ (80029cc <decodeBeacon+0x120>)
 8002946:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 800294a:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <decodeBeacon+0x120>)
 800294c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <decodeBeacon+0x120>)
 8002958:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	330f      	adds	r3, #15
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe feb6 	bl	80016d2 <os_rlsbf2>
 8002966:	4603      	mov	r3, r0
 8002968:	461c      	mov	r4, r3
 800296a:	210f      	movs	r1, #15
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe ff60 	bl	8001832 <os_crc16>
 8002972:	4603      	mov	r3, r0
 8002974:	429c      	cmp	r4, r3
 8002976:	d001      	beq.n	800297c <decodeBeacon+0xd0>
        return 1;
 8002978:	2301      	movs	r3, #1
 800297a:	e022      	b.n	80029c2 <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3308      	adds	r3, #8
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe febb 	bl	80016fc <os_rlsbf4>
 8002986:	4603      	mov	r3, r0
 8002988:	121b      	asrs	r3, r3, #8
 800298a:	4a10      	ldr	r2, [pc, #64]	@ (80029cc <decodeBeacon+0x120>)
 800298c:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	330b      	adds	r3, #11
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe feb1 	bl	80016fc <os_rlsbf4>
 800299a:	4603      	mov	r3, r0
 800299c:	121b      	asrs	r3, r3, #8
 800299e:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <decodeBeacon+0x120>)
 80029a0:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7a1a      	ldrb	r2, [r3, #8]
 80029a8:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <decodeBeacon+0x120>)
 80029aa:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 80029ae:	4b07      	ldr	r3, [pc, #28]	@ (80029cc <decodeBeacon+0x120>)
 80029b0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <decodeBeacon+0x120>)
 80029bc:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 80029c0:	2302      	movs	r3, #2
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000138 	.word	0x20000138
 80029d0:	20000280 	.word	0x20000280

080029d4 <decodeFrame>:


static bit_t decodeFrame (void) {
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b09b      	sub	sp, #108	@ 0x6c
 80029d8:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 80029da:	4b98      	ldr	r3, [pc, #608]	@ (8002c3c <decodeFrame+0x268>)
 80029dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 80029de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 80029e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029ea:	f023 031f 	bic.w	r3, r3, #31
 80029ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 80029f2:	4b93      	ldr	r3, [pc, #588]	@ (8002c40 <decodeFrame+0x26c>)
 80029f4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80029f8:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 80029fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fc:	2b0b      	cmp	r3, #11
 80029fe:	dd0d      	ble.n	8002a1c <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002a00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a04:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002a0c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a10:	2b60      	cmp	r3, #96	@ 0x60
 8002a12:	d014      	beq.n	8002a3e <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8002a14:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a18:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a1a:	d010      	beq.n	8002a3e <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8002a1c:	bf00      	nop
 8002a1e:	e008      	b.n	8002a32 <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8002a20:	bf00      	nop
 8002a22:	e006      	b.n	8002a32 <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8002a24:	bf00      	nop
 8002a26:	e004      	b.n	8002a32 <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8002a28:	bf00      	nop
 8002a2a:	e002      	b.n	8002a32 <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002a30:	bf00      	nop
        LMIC.dataLen = 0;
 8002a32:	4b83      	ldr	r3, [pc, #524]	@ (8002c40 <decodeFrame+0x26c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e2f6      	b.n	800302c <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a40:	3305      	adds	r3, #5
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8002a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fe56 	bl	80016fc <os_rlsbf4>
 8002a50:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8002a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a54:	3306      	adds	r3, #6
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fe3b 	bl	80016d2 <os_rlsbf2>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 8002a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	115b      	asrs	r3, r3, #5
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	3308      	adds	r3, #8
 8002a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 8002a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 8002a7e:	4b70      	ldr	r3, [pc, #448]	@ (8002c40 <decodeFrame+0x26c>)
 8002a80:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d1ca      	bne.n	8002a20 <decodeFrame+0x4c>
    if( poff > pend ) {
 8002a8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	dcc8      	bgt.n	8002a24 <decodeFrame+0x50>
    int port = -1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 8002a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dd07      	ble.n	8002ab4 <decodeFrame+0xe0>
        port = d[poff++];
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002ab4:	4b62      	ldr	r3, [pc, #392]	@ (8002c40 <decodeFrame+0x26c>)
 8002ab6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002abc:	b291      	uxth	r1, r2
 8002abe:	4a60      	ldr	r2, [pc, #384]	@ (8002c40 <decodeFrame+0x26c>)
 8002ac0:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	1a8a      	subs	r2, r1, r2
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	4413      	add	r3, r2
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002ace:	4b5c      	ldr	r3, [pc, #368]	@ (8002c40 <decodeFrame+0x26c>)
 8002ad0:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8002ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2301      	movs	r3, #1
 8002ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae0:	4858      	ldr	r0, [pc, #352]	@ (8002c44 <decodeFrame+0x270>)
 8002ae2:	f7fe ff19 	bl	8001918 <aes_verifyMic>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d09d      	beq.n	8002a28 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002aec:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <decodeFrame+0x26c>)
 8002aee:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d219      	bcs.n	8002b2c <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002af8:	4b51      	ldr	r3, [pc, #324]	@ (8002c40 <decodeFrame+0x26c>)
 8002afa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002afe:	461a      	mov	r2, r3
 8002b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b02:	429a      	cmp	r2, r3
 8002b04:	db92      	blt.n	8002a2c <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002b06:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <decodeFrame+0x26c>)
 8002b08:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d18d      	bne.n	8002a30 <decodeFrame+0x5c>
 8002b14:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <decodeFrame+0x26c>)
 8002b16:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d088      	beq.n	8002a30 <decodeFrame+0x5c>
 8002b1e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b22:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b24:	d184      	bne.n	8002a30 <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b2a:	e00e      	b.n	8002b4a <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2e:	3301      	adds	r3, #1
 8002b30:	4a43      	ldr	r2, [pc, #268]	@ (8002c40 <decodeFrame+0x26c>)
 8002b32:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002b36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b3c:	d101      	bne.n	8002b42 <decodeFrame+0x16e>
 8002b3e:	2220      	movs	r2, #32
 8002b40:	e000      	b.n	8002b44 <decodeFrame+0x170>
 8002b42:	2200      	movs	r2, #0
 8002b44:	4b3e      	ldr	r3, [pc, #248]	@ (8002c40 <decodeFrame+0x26c>)
 8002b46:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <decodeFrame+0x26c>)
 8002b4c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <decodeFrame+0x18a>
 8002b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 8002b5e:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <decodeFrame+0x26c>)
 8002b60:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002b64:	f043 0310 	orr.w	r3, r3, #16
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b35      	ldr	r3, [pc, #212]	@ (8002c40 <decodeFrame+0x26c>)
 8002b6c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002b70:	4b33      	ldr	r3, [pc, #204]	@ (8002c40 <decodeFrame+0x26c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8002b78:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <decodeFrame+0x26c>)
 8002b7a:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8002b7e:	4b30      	ldr	r3, [pc, #192]	@ (8002c40 <decodeFrame+0x26c>)
 8002b80:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002b84:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <decodeFrame+0x26c>)
 8002b86:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8002b8a:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002b8e:	d003      	beq.n	8002b98 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002b90:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <decodeFrame+0x26c>)
 8002b92:	22f4      	movs	r2, #244	@ 0xf4
 8002b94:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002b98:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <decodeFrame+0x26c>)
 8002b9a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002b9e:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8002ba2:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <decodeFrame+0x26c>)
 8002ba4:	89db      	ldrh	r3, [r3, #14]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ffe0 	bl	8001b6c <getSensitivity>
 8002bac:	4603      	mov	r3, r0
 8002bae:	1ae3      	subs	r3, r4, r3
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db05      	blt.n	8002bc4 <decodeFrame+0x1f0>
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	2bfe      	cmp	r3, #254	@ 0xfe
 8002bbc:	bfa8      	it	ge
 8002bbe:	23fe      	movge	r3, #254	@ 0xfe
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e000      	b.n	8002bc6 <decodeFrame+0x1f2>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c40 <decodeFrame+0x26c>)
 8002bc8:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bce:	3308      	adds	r3, #8
 8002bd0:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 8002bd6:	e1b5      	b.n	8002f44 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 8002bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bda:	6a3a      	ldr	r2, [r7, #32]
 8002bdc:	4413      	add	r3, r2
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	3b02      	subs	r3, #2
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	f200 81ba 	bhi.w	8002f5c <decodeFrame+0x588>
 8002be8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <decodeFrame+0x21c>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c35 	.word	0x08002c35
 8002bf4:	08002c49 	.word	0x08002c49
 8002bf8:	08002da7 	.word	0x08002da7
 8002bfc:	08002d23 	.word	0x08002d23
 8002c00:	08002d13 	.word	0x08002d13
 8002c04:	08002df5 	.word	0x08002df5
 8002c08:	08002f5d 	.word	0x08002f5d
 8002c0c:	08002f5d 	.word	0x08002f5d
 8002c10:	08002f5d 	.word	0x08002f5d
 8002c14:	08002f5d 	.word	0x08002f5d
 8002c18:	08002f5d 	.word	0x08002f5d
 8002c1c:	08002f5d 	.word	0x08002f5d
 8002c20:	08002f5d 	.word	0x08002f5d
 8002c24:	08002f5d 	.word	0x08002f5d
 8002c28:	08002f5d 	.word	0x08002f5d
 8002c2c:	08002e81 	.word	0x08002e81
 8002c30:	08002ec3 	.word	0x08002ec3
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c36:	3303      	adds	r3, #3
 8002c38:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002c3a:	e183      	b.n	8002f44 <decodeFrame+0x570>
 8002c3c:	20000280 	.word	0x20000280
 8002c40:	20000138 	.word	0x20000138
 8002c44:	2000022c 	.word	0x2000022c
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8002c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8002c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c56:	3302      	adds	r3, #2
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fd38 	bl	80016d2 <os_rlsbf2>
 8002c62:	4603      	mov	r3, r0
 8002c64:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8002c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c68:	3304      	adds	r3, #4
 8002c6a:	6a3a      	ldr	r2, [r7, #32]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f023 030f 	bic.w	r3, r3, #15
 8002c74:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8002c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c78:	3304      	adds	r3, #4
 8002c7a:	6a3a      	ldr	r2, [r7, #32]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 8002c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c88:	3305      	adds	r3, #5
 8002c8a:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8002c8c:	4bb0      	ldr	r3, [pc, #704]	@ (8002f50 <decodeFrame+0x57c>)
 8002c8e:	2287      	movs	r2, #135	@ 0x87
 8002c90:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8002c94:	893a      	ldrh	r2, [r7, #8]
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fb84 	bl	80023a8 <mapChannels>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8002ca6:	4baa      	ldr	r3, [pc, #680]	@ (8002f50 <decodeFrame+0x57c>)
 8002ca8:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8002f50 <decodeFrame+0x57c>)
 8002cb4:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8002cb8:	7abb      	ldrb	r3, [r7, #10]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 8002cbe:	797b      	ldrb	r3, [r7, #5]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fcd7 	bl	8001674 <validDR>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d108      	bne.n	8002cde <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8002ccc:	4ba0      	ldr	r3, [pc, #640]	@ (8002f50 <decodeFrame+0x57c>)
 8002cce:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8002cd2:	f023 0302 	bic.w	r3, r3, #2
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b9d      	ldr	r3, [pc, #628]	@ (8002f50 <decodeFrame+0x57c>)
 8002cda:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8002cde:	4b9c      	ldr	r3, [pc, #624]	@ (8002f50 <decodeFrame+0x57c>)
 8002ce0:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8002ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d10d      	bne.n	8002d08 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8002cec:	4a98      	ldr	r2, [pc, #608]	@ (8002f50 <decodeFrame+0x57c>)
 8002cee:	79bb      	ldrb	r3, [r7, #6]
 8002cf0:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8002cf4:	7abb      	ldrb	r3, [r7, #10]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a96      	ldr	r2, [pc, #600]	@ (8002f54 <decodeFrame+0x580>)
 8002cfc:	56d2      	ldrsb	r2, [r2, r3]
 8002cfe:	797b      	ldrb	r3, [r7, #5]
 8002d00:	4619      	mov	r1, r3
 8002d02:	2004      	movs	r0, #4
 8002d04:	f7ff fa00 	bl	8002108 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8002d08:	4b91      	ldr	r3, [pc, #580]	@ (8002f50 <decodeFrame+0x57c>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 8002d10:	e118      	b.n	8002f44 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8002d12:	4b8f      	ldr	r3, [pc, #572]	@ (8002f50 <decodeFrame+0x57c>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002d20:	e110      	b.n	8002f44 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8002d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d24:	3301      	adds	r3, #1
 8002d26:	6a3a      	ldr	r2, [r7, #32]
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 8002d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d34:	3302      	adds	r3, #2
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	4413      	add	r3, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fb12 	bl	8002364 <convFreq>
 8002d40:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 8002d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d44:	3305      	adds	r3, #5
 8002d46:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8002d48:	4b81      	ldr	r3, [pc, #516]	@ (8002f50 <decodeFrame+0x57c>)
 8002d4a:	2280      	movs	r2, #128	@ 0x80
 8002d4c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 8002d50:	7cbb      	ldrb	r3, [r7, #18]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fc8e 	bl	8001674 <validDR>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8002d5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f50 <decodeFrame+0x57c>)
 8002d60:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b79      	ldr	r3, [pc, #484]	@ (8002f50 <decodeFrame+0x57c>)
 8002d6c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8002d76:	4b76      	ldr	r3, [pc, #472]	@ (8002f50 <decodeFrame+0x57c>)
 8002d78:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b73      	ldr	r3, [pc, #460]	@ (8002f50 <decodeFrame+0x57c>)
 8002d84:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8002d88:	4b71      	ldr	r3, [pc, #452]	@ (8002f50 <decodeFrame+0x57c>)
 8002d8a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002d8e:	2b83      	cmp	r3, #131	@ 0x83
 8002d90:	f040 80d7 	bne.w	8002f42 <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8002d94:	4a6e      	ldr	r2, [pc, #440]	@ (8002f50 <decodeFrame+0x57c>)
 8002d96:	7cbb      	ldrb	r3, [r7, #18]
 8002d98:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 8002d9c:	4a6c      	ldr	r2, [pc, #432]	@ (8002f50 <decodeFrame+0x57c>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8002da4:	e0cd      	b.n	8002f42 <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8002da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da8:	3301      	adds	r3, #1
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 8002db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db4:	3302      	adds	r3, #2
 8002db6:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	2bff      	cmp	r3, #255	@ 0xff
 8002dbc:	d108      	bne.n	8002dd0 <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8002dbe:	4b64      	ldr	r3, [pc, #400]	@ (8002f50 <decodeFrame+0x57c>)
 8002dc0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <decodeFrame+0x57c>)
 8002dcc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8002dd0:	7afb      	ldrb	r3, [r7, #11]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <decodeFrame+0x57c>)
 8002dda:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8002dde:	f001 fcf7 	bl	80047d0 <os_getTime>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f50 <decodeFrame+0x57c>)
 8002de6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8002dea:	4b59      	ldr	r3, [pc, #356]	@ (8002f50 <decodeFrame+0x57c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 8002df2:	e0a7      	b.n	8002f44 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8002df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df6:	3301      	adds	r3, #1
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8002e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e02:	3302      	adds	r3, #2
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	4413      	add	r3, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff faab 	bl	8002364 <convFreq>
 8002e0e:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 8002e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e12:	3305      	adds	r3, #5
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f50 <decodeFrame+0x57c>)
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d026      	beq.n	8002e78 <decodeFrame+0x4a4>
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f1c3 030f 	rsb	r3, r3, #15
 8002e44:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e48:	fa41 f303 	asr.w	r3, r1, r3
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	4013      	ands	r3, r2
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	7ef8      	ldrb	r0, [r7, #27]
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	6979      	ldr	r1, [r7, #20]
 8002e5c:	f7ff fa08 	bl	8002270 <LMIC_setupChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8002e66:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <decodeFrame+0x57c>)
 8002e68:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002e6c:	f043 0303 	orr.w	r3, r3, #3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <decodeFrame+0x57c>)
 8002e74:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 8002e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7a:	3306      	adds	r3, #6
 8002e7c:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002e7e:	e061      	b.n	8002f44 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8002e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e82:	3301      	adds	r3, #1
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	4413      	add	r3, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fa6b 	bl	8002364 <convFreq>
 8002e8e:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 8002e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e92:	3304      	adds	r3, #4
 8002e94:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8002ea2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 8002eae:	4a28      	ldr	r2, [pc, #160]	@ (8002f50 <decodeFrame+0x57c>)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8002eb6:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <decodeFrame+0x57c>)
 8002eb8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ebc:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 8002ec0:	e040      	b.n	8002f44 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8002ec2:	4b23      	ldr	r3, [pc, #140]	@ (8002f50 <decodeFrame+0x57c>)
 8002ec4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d134      	bne.n	8002f3a <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 8002ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ed2:	3303      	adds	r3, #3
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <decodeFrame+0x57c>)
 8002edc:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <decodeFrame+0x57c>)
 8002ee2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <decodeFrame+0x57c>)
 8002eee:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <decodeFrame+0x57c>)
 8002ef4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <decodeFrame+0x52c>
 8002efc:	f7fe fada 	bl	80014b4 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <decodeFrame+0x57c>)
 8002f02:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8002f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f06:	3301      	adds	r3, #1
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fbe0 	bl	80016d2 <os_rlsbf2>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <decodeFrame+0x584>)
 8002f22:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <decodeFrame+0x57c>)
 8002f26:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <decodeFrame+0x57c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8002f32:	2101      	movs	r1, #1
 8002f34:	201e      	movs	r0, #30
 8002f36:	f7fe ff25 	bl	8001d84 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8002f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002f40:	e000      	b.n	8002f44 <decodeFrame+0x570>
            continue;
 8002f42:	bf00      	nop
    while( oidx < olen ) {
 8002f44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f6ff ae45 	blt.w	8002bd8 <decodeFrame+0x204>
 8002f4e:	e006      	b.n	8002f5e <decodeFrame+0x58a>
 8002f50:	20000138 	.word	0x20000138
 8002f54:	0800a778 	.word	0x0800a778
 8002f58:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8002f5c:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8002f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8002f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db1a      	blt.n	8002fa0 <decodeFrame+0x5cc>
 8002f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dd15      	ble.n	8002fa0 <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8002f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dc01      	bgt.n	8002f7e <decodeFrame+0x5aa>
 8002f7a:	482e      	ldr	r0, [pc, #184]	@ (8003034 <decodeFrame+0x660>)
 8002f7c:	e000      	b.n	8002f80 <decodeFrame+0x5ac>
 8002f7e:	482e      	ldr	r0, [pc, #184]	@ (8003038 <decodeFrame+0x664>)
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <decodeFrame+0x668>)
 8002f82:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 8002f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f8a:	4413      	add	r3, r2
 8002f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f90:	1a8a      	subs	r2, r1, r2
 8002f92:	9201      	str	r2, [sp, #4]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2301      	movs	r3, #1
 8002f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	f7fe fd66 	bl	8001a6c <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <decodeFrame+0x668>)
 8002fa6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8002fae:	4b23      	ldr	r3, [pc, #140]	@ (800303c <decodeFrame+0x668>)
 8002fb0:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d002      	beq.n	8002fc2 <decodeFrame+0x5ee>
 8002fbc:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8002fc0:	e000      	b.n	8002fc4 <decodeFrame+0x5f0>
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4b1c      	ldr	r3, [pc, #112]	@ (800303c <decodeFrame+0x668>)
 8002fcc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 8002fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da12      	bge.n	8002ffc <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	@ (800303c <decodeFrame+0x668>)
 8002fd8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b16      	ldr	r3, [pc, #88]	@ (800303c <decodeFrame+0x668>)
 8002fe4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	4b13      	ldr	r3, [pc, #76]	@ (800303c <decodeFrame+0x668>)
 8002fee:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <decodeFrame+0x668>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8002ffa:	e016      	b.n	800302a <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <decodeFrame+0x668>)
 8002ffe:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003002:	f043 0310 	orr.w	r3, r3, #16
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <decodeFrame+0x668>)
 800300a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 800300e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <decodeFrame+0x668>)
 8003014:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800301e:	b2db      	uxtb	r3, r3
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <decodeFrame+0x668>)
 8003026:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3764      	adds	r7, #100	@ 0x64
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}
 8003034:	2000022c 	.word	0x2000022c
 8003038:	2000023c 	.word	0x2000023c
 800303c:	20000138 	.word	0x20000138

08003040 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003044:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <setupRx2+0x3c>)
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <setupRx2+0x3c>)
 800304e:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fae2 	bl	800161c <dndr2rps>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	4b07      	ldr	r3, [pc, #28]	@ (800307c <setupRx2+0x3c>)
 800305e:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <setupRx2+0x3c>)
 8003062:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003066:	4a05      	ldr	r2, [pc, #20]	@ (800307c <setupRx2+0x3c>)
 8003068:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 800306a:	4b04      	ldr	r3, [pc, #16]	@ (800307c <setupRx2+0x3c>)
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 8003072:	2002      	movs	r0, #2
 8003074:	f002 f9d2 	bl	800541c <os_radio>
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000138 	.word	0x20000138

08003080 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <schedRx2+0x44>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	18d1      	adds	r1, r2, r3
 8003092:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <schedRx2+0x44>)
 8003094:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003098:	461a      	mov	r2, r3
 800309a:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <schedRx2+0x48>)
 800309c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	4a06      	ldr	r2, [pc, #24]	@ (80030c4 <schedRx2+0x44>)
 80030aa:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <schedRx2+0x44>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	3b40      	subs	r3, #64	@ 0x40
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	4805      	ldr	r0, [pc, #20]	@ (80030cc <schedRx2+0x4c>)
 80030b8:	f001 fbf4 	bl	80048a4 <os_setTimedCallback>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000138 	.word	0x20000138
 80030c8:	0800a7ac 	.word	0x0800a7ac
 80030cc:	2000014c 	.word	0x2000014c

080030d0 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 80030d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <setupRx1+0x40>)
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <setupRx1+0x40>)
 80030e2:	89db      	ldrh	r3, [r3, #14]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fa49 	bl	800157e <setNocrc>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <setupRx1+0x40>)
 80030f2:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <setupRx1+0x40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 80030fc:	4a04      	ldr	r2, [pc, #16]	@ (8003110 <setupRx1+0x40>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003102:	2002      	movs	r0, #2
 8003104:	f002 f98a 	bl	800541c <os_radio>
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000138 	.word	0x20000138

08003114 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800311e:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <txDone+0x94>)
 8003120:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003124:	461a      	mov	r2, r3
 8003126:	f240 6302 	movw	r3, #1538	@ 0x602
 800312a:	4013      	ands	r3, r2
 800312c:	f240 4202 	movw	r2, #1026	@ 0x402
 8003130:	4293      	cmp	r3, r2
 8003132:	d10b      	bne.n	800314c <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003134:	481d      	ldr	r0, [pc, #116]	@ (80031ac <txDone+0x98>)
 8003136:	f7fe feab 	bl	8001e90 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <txDone+0x94>)
 800313c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <txDone+0x94>)
 8003148:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 800314c:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <txDone+0x94>)
 800314e:	7c1b      	ldrb	r3, [r3, #16]
 8003150:	2b07      	cmp	r3, #7
 8003152:	d10a      	bne.n	800316a <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003154:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <txDone+0x94>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3b05      	subs	r3, #5
 800315e:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <txDone+0x94>)
 8003160:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <txDone+0x94>)
 8003164:	2208      	movs	r2, #8
 8003166:	741a      	strb	r2, [r3, #16]
 8003168:	e012      	b.n	8003190 <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 800316a:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <txDone+0x94>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	18d1      	adds	r1, r2, r3
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <txDone+0x94>)
 8003174:	7c5b      	ldrb	r3, [r3, #17]
 8003176:	461a      	mov	r2, r3
 8003178:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <txDone+0x9c>)
 800317a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	440b      	add	r3, r1
 8003186:	4a08      	ldr	r2, [pc, #32]	@ (80031a8 <txDone+0x94>)
 8003188:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <txDone+0x94>)
 800318c:	2205      	movs	r2, #5
 800318e:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <txDone+0x94>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	3b40      	subs	r3, #64	@ 0x40
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	4806      	ldr	r0, [pc, #24]	@ (80031b4 <txDone+0xa0>)
 800319c:	f001 fb82 	bl	80048a4 <os_setTimedCallback>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000138 	.word	0x20000138
 80031ac:	2000026c 	.word	0x2000026c
 80031b0:	0800a7ac 	.word	0x0800a7ac
 80031b4:	2000014c 	.word	0x2000014c

080031b8 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 80031c0:	2008      	movs	r0, #8
 80031c2:	f7ff faef 	bl	80027a4 <reportEvent>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 80031d6:	4b99      	ldr	r3, [pc, #612]	@ (800343c <processJoinAccept+0x26c>)
 80031d8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <processJoinAccept+0x1e>
 80031e0:	4b96      	ldr	r3, [pc, #600]	@ (800343c <processJoinAccept+0x26c>)
 80031e2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <processJoinAccept+0x1e>
 80031ea:	f7fe f963 	bl	80014b4 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 80031ee:	4b93      	ldr	r3, [pc, #588]	@ (800343c <processJoinAccept+0x26c>)
 80031f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <processJoinAccept+0x30>
 80031fc:	f7fe f95a 	bl	80014b4 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003200:	4b8e      	ldr	r3, [pc, #568]	@ (800343c <processJoinAccept+0x26c>)
 8003202:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003206:	2b00      	cmp	r3, #0
 8003208:	d14c      	bne.n	80032a4 <processJoinAccept+0xd4>
      nojoinframe:
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800320e:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003210:	4b8a      	ldr	r3, [pc, #552]	@ (800343c <processJoinAccept+0x26c>)
 8003212:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d123      	bne.n	8003266 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800321e:	4b87      	ldr	r3, [pc, #540]	@ (800343c <processJoinAccept+0x26c>)
 8003220:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <processJoinAccept+0x60>
 800322c:	f7fe f942 	bl	80014b4 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003230:	4b82      	ldr	r3, [pc, #520]	@ (800343c <processJoinAccept+0x26c>)
 8003232:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003236:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800323a:	b29a      	uxth	r2, r3
 800323c:	4b7f      	ldr	r3, [pc, #508]	@ (800343c <processJoinAccept+0x26c>)
 800323e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 8003242:	4b7e      	ldr	r3, [pc, #504]	@ (800343c <processJoinAccept+0x26c>)
 8003244:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003248:	2b09      	cmp	r3, #9
 800324a:	d807      	bhi.n	800325c <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 800324c:	4b7b      	ldr	r3, [pc, #492]	@ (800343c <processJoinAccept+0x26c>)
 800324e:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003252:	3301      	adds	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b79      	ldr	r3, [pc, #484]	@ (800343c <processJoinAccept+0x26c>)
 8003258:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 800325c:	2009      	movs	r0, #9
 800325e:	f7ff faa1 	bl	80027a4 <reportEvent>
            return 1;
 8003262:	2301      	movs	r3, #1
 8003264:	e0e6      	b.n	8003434 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003266:	4b75      	ldr	r3, [pc, #468]	@ (800343c <processJoinAccept+0x26c>)
 8003268:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800326c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003270:	b29a      	uxth	r2, r3
 8003272:	4b72      	ldr	r3, [pc, #456]	@ (800343c <processJoinAccept+0x26c>)
 8003274:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8003278:	f7ff fa22 	bl	80026c0 <nextJoinState>
 800327c:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800327e:	f001 faa7 	bl	80047d0 <os_getTime>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <processJoinAccept+0xc6>
 8003292:	4b6b      	ldr	r3, [pc, #428]	@ (8003440 <processJoinAccept+0x270>)
 8003294:	e000      	b.n	8003298 <processJoinAccept+0xc8>
 8003296:	4b6b      	ldr	r3, [pc, #428]	@ (8003444 <processJoinAccept+0x274>)
 8003298:	461a      	mov	r2, r3
 800329a:	486b      	ldr	r0, [pc, #428]	@ (8003448 <processJoinAccept+0x278>)
 800329c:	f001 fb02 	bl	80048a4 <os_setTimedCallback>
        return 1;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0c7      	b.n	8003434 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 80032a4:	4b65      	ldr	r3, [pc, #404]	@ (800343c <processJoinAccept+0x26c>)
 80032a6:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80032aa:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 80032ac:	4b63      	ldr	r3, [pc, #396]	@ (800343c <processJoinAccept+0x26c>)
 80032ae:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80032b2:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	3b04      	subs	r3, #4
 80032b8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80032bc:	4a5f      	ldr	r2, [pc, #380]	@ (800343c <processJoinAccept+0x26c>)
 80032be:	4413      	add	r3, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fa1b 	bl	80016fc <os_rlsbf4>
 80032c6:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b11      	cmp	r3, #17
 80032cc:	d002      	beq.n	80032d4 <processJoinAccept+0x104>
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b21      	cmp	r3, #33	@ 0x21
 80032d2:	d104      	bne.n	80032de <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 80032d4:	7d7b      	ldrb	r3, [r7, #21]
 80032d6:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d00b      	beq.n	80032f6 <processJoinAccept+0x126>
      badframe:
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 80032e2:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80032e4:	4b55      	ldr	r3, [pc, #340]	@ (800343c <processJoinAccept+0x26c>)
 80032e6:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d08d      	beq.n	800320e <processJoinAccept+0x3e>
            return 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e09e      	b.n	8003434 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 80032f6:	4a55      	ldr	r2, [pc, #340]	@ (800344c <processJoinAccept+0x27c>)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7fe fb9e 	bl	8001a40 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	3b04      	subs	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4851      	ldr	r0, [pc, #324]	@ (8003450 <processJoinAccept+0x280>)
 800330c:	f7fe fb76 	bl	80019fc <aes_verifyMic0>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0e5      	beq.n	80032e2 <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003316:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <processJoinAccept+0x284>)
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe f9ef 	bl	80016fc <os_rlsbf4>
 800331e:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 8003320:	4a46      	ldr	r2, [pc, #280]	@ (800343c <processJoinAccept+0x26c>)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003328:	484b      	ldr	r0, [pc, #300]	@ (8003458 <processJoinAccept+0x288>)
 800332a:	f7fe f9e7 	bl	80016fc <os_rlsbf4>
 800332e:	4603      	mov	r3, r0
 8003330:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003334:	4a41      	ldr	r2, [pc, #260]	@ (800343c <processJoinAccept+0x26c>)
 8003336:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fe ff12 	bl	8002164 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b11      	cmp	r3, #17
 8003344:	d920      	bls.n	8003388 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003346:	230d      	movs	r3, #13
 8003348:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800334a:	2303      	movs	r3, #3
 800334c:	75bb      	strb	r3, [r7, #22]
 800334e:	e018      	b.n	8003382 <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003356:	4a39      	ldr	r2, [pc, #228]	@ (800343c <processJoinAccept+0x26c>)
 8003358:	4413      	add	r3, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f802 	bl	8002364 <convFreq>
 8003360:	60b8      	str	r0, [r7, #8]
            if( freq )
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003368:	7db8      	ldrb	r0, [r7, #22]
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	2200      	movs	r2, #0
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	f7fe ff7d 	bl	8002270 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003376:	7dbb      	ldrb	r3, [r7, #22]
 8003378:	3301      	adds	r3, #1
 800337a:	75bb      	strb	r3, [r7, #22]
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	3303      	adds	r3, #3
 8003380:	75fb      	strb	r3, [r7, #23]
 8003382:	7dbb      	ldrb	r3, [r7, #22]
 8003384:	2b07      	cmp	r3, #7
 8003386:	d9e3      	bls.n	8003350 <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003388:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <processJoinAccept+0x26c>)
 800338a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800338e:	3b01      	subs	r3, #1
 8003390:	b298      	uxth	r0, r3
 8003392:	4b32      	ldr	r3, [pc, #200]	@ (800345c <processJoinAccept+0x28c>)
 8003394:	4a32      	ldr	r2, [pc, #200]	@ (8003460 <processJoinAccept+0x290>)
 8003396:	492d      	ldr	r1, [pc, #180]	@ (800344c <processJoinAccept+0x27c>)
 8003398:	f7fe fbac 	bl	8001af4 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 800339c:	4b27      	ldr	r3, [pc, #156]	@ (800343c <processJoinAccept+0x26c>)
 800339e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80033a2:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <processJoinAccept+0x1de>
 80033aa:	f7fe f883 	bl	80014b4 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80033ae:	4b23      	ldr	r3, [pc, #140]	@ (800343c <processJoinAccept+0x26c>)
 80033b0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80033bc:	4b1f      	ldr	r3, [pc, #124]	@ (800343c <processJoinAccept+0x26c>)
 80033be:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80033c2:	4a1e      	ldr	r2, [pc, #120]	@ (800343c <processJoinAccept+0x26c>)
 80033c4:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f968 	bl	80016a0 <lowerDR>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <processJoinAccept+0x26c>)
 80033d6:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80033da:	4b18      	ldr	r3, [pc, #96]	@ (800343c <processJoinAccept+0x26c>)
 80033dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80033e0:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b14      	ldr	r3, [pc, #80]	@ (800343c <processJoinAccept+0x26c>)
 80033ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 80033f0:	4b12      	ldr	r3, [pc, #72]	@ (800343c <processJoinAccept+0x26c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 80033f8:	f7ff f9f2 	bl	80027e0 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <processJoinAccept+0x26c>)
 80033fe:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <processJoinAccept+0x26c>)
 800340a:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800340e:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <processJoinAccept+0x26c>)
 8003410:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8003414:	4b09      	ldr	r3, [pc, #36]	@ (800343c <processJoinAccept+0x26c>)
 8003416:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800341a:	4b08      	ldr	r3, [pc, #32]	@ (800343c <processJoinAccept+0x26c>)
 800341c:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <processJoinAccept+0x25c>
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <processJoinAccept+0x26c>)
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 800342c:	2006      	movs	r0, #6
 800342e:	f7ff f9b9 	bl	80027a4 <reportEvent>
    return 1;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000138 	.word	0x20000138
 8003440:	080031b9 	.word	0x080031b9
 8003444:	08002791 	.word	0x08002791
 8003448:	2000014c 	.word	0x2000014c
 800344c:	20000281 	.word	0x20000281
 8003450:	20000280 	.word	0x20000280
 8003454:	20000287 	.word	0x20000287
 8003458:	20000284 	.word	0x20000284
 800345c:	2000023c 	.word	0x2000023c
 8003460:	2000022c 	.word	0x2000022c

08003464 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 800346c:	4b07      	ldr	r3, [pc, #28]	@ (800348c <processRx2Jacc+0x28>)
 800346e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <processRx2Jacc+0x28>)
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 800347e:	f7ff fea7 	bl	80031d0 <processJoinAccept>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000138 	.word	0x20000138

08003490 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <setupRx2Jacc+0x1c>)
 800349a:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <setupRx2Jacc+0x20>)
 800349c:	61da      	str	r2, [r3, #28]
    setupRx2();
 800349e:	f7ff fdcf 	bl	8003040 <setupRx2>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000138 	.word	0x20000138
 80034b0:	08003465 	.word	0x08003465

080034b4 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <processRx1Jacc+0x2c>)
 80034be:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <processRx1Jacc+0x1c>
 80034c6:	f7ff fe83 	bl	80031d0 <processJoinAccept>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 80034d0:	4904      	ldr	r1, [pc, #16]	@ (80034e4 <processRx1Jacc+0x30>)
 80034d2:	4805      	ldr	r0, [pc, #20]	@ (80034e8 <processRx1Jacc+0x34>)
 80034d4:	f7ff fdd4 	bl	8003080 <schedRx2>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000138 	.word	0x20000138
 80034e4:	08003491 	.word	0x08003491
 80034e8:	0002ee00 	.word	0x0002ee00

080034ec <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 80034f4:	4803      	ldr	r0, [pc, #12]	@ (8003504 <setupRx1Jacc+0x18>)
 80034f6:	f7ff fdeb 	bl	80030d0 <setupRx1>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	080034b5 	.word	0x080034b5

08003508 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8003510:	4903      	ldr	r1, [pc, #12]	@ (8003520 <jreqDone+0x18>)
 8003512:	4804      	ldr	r0, [pc, #16]	@ (8003524 <jreqDone+0x1c>)
 8003514:	f7ff fdfe 	bl	8003114 <txDone>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	080034ed 	.word	0x080034ed
 8003524:	00027100 	.word	0x00027100

08003528 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
    processDnData();
 8003530:	f000 fbc6 	bl	8003cc0 <processDnData>
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <processRx2DnData+0x48>)
 8003546:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <processRx2DnData+0x48>)
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003556:	f001 f93b 	bl	80047d0 <os_getTime>
 800355a:	4603      	mov	r3, r0
 800355c:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8003560:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8003564:	2002      	movs	r0, #2
 8003566:	f7fe fd4f 	bl	8002008 <rndDelay>
 800356a:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 800356c:	4423      	add	r3, r4
 800356e:	4a06      	ldr	r2, [pc, #24]	@ (8003588 <processRx2DnData+0x4c>)
 8003570:	4619      	mov	r1, r3
 8003572:	4806      	ldr	r0, [pc, #24]	@ (800358c <processRx2DnData+0x50>)
 8003574:	f001 f996 	bl	80048a4 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003578:	e001      	b.n	800357e <processRx2DnData+0x42>
    }
    processDnData();
 800357a:	f000 fba1 	bl	8003cc0 <processDnData>
}
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}
 8003584:	20000138 	.word	0x20000138
 8003588:	08003529 	.word	0x08003529
 800358c:	2000014c 	.word	0x2000014c

08003590 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <setupRx2DnData+0x1c>)
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <setupRx2DnData+0x20>)
 800359c:	61da      	str	r2, [r3, #28]
    setupRx2();
 800359e:	f7ff fd4f 	bl	8003040 <setupRx2>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000138 	.word	0x20000138
 80035b0:	0800353d 	.word	0x0800353d

080035b4 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80035bc:	4b0d      	ldr	r3, [pc, #52]	@ (80035f4 <processRx1DnData+0x40>)
 80035be:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <processRx1DnData+0x1c>
 80035c6:	f000 fb7b 	bl	8003cc0 <processDnData>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10c      	bne.n	80035ea <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 80035d0:	4b08      	ldr	r3, [pc, #32]	@ (80035f4 <processRx1DnData+0x40>)
 80035d2:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 80035d6:	3301      	adds	r3, #1
 80035d8:	461a      	mov	r2, r3
 80035da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	4905      	ldr	r1, [pc, #20]	@ (80035f8 <processRx1DnData+0x44>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fd4b 	bl	8003080 <schedRx2>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000138 	.word	0x20000138
 80035f8:	08003591 	.word	0x08003591

080035fc <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8003604:	4803      	ldr	r0, [pc, #12]	@ (8003614 <setupRx1DnData+0x18>)
 8003606:	f7ff fd63 	bl	80030d0 <setupRx1>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	080035b5 	.word	0x080035b5

08003618 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <updataDone+0x28>)
 8003622:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	4904      	ldr	r1, [pc, #16]	@ (8003644 <updataDone+0x2c>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fd6e 	bl	8003114 <txDone>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000138 	.word	0x20000138
 8003644:	080035fd 	.word	0x080035fd

08003648 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b087      	sub	sp, #28
 800364c:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800364e:	4ba3      	ldr	r3, [pc, #652]	@ (80038dc <buildDataFrame+0x294>)
 8003650:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003654:	f003 0318 	and.w	r3, r3, #24
 8003658:	2b10      	cmp	r3, #16
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <buildDataFrame+0x2a>
 800366a:	4b9c      	ldr	r3, [pc, #624]	@ (80038dc <buildDataFrame+0x294>)
 800366c:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8003670:	e000      	b.n	8003674 <buildDataFrame+0x2c>
 8003672:	2300      	movs	r3, #0
 8003674:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003676:	2308      	movs	r3, #8
 8003678:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 800367a:	4b98      	ldr	r3, [pc, #608]	@ (80038dc <buildDataFrame+0x294>)
 800367c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003680:	461a      	mov	r2, r3
 8003682:	f240 4302 	movw	r3, #1026	@ 0x402
 8003686:	4013      	ands	r3, r2
 8003688:	f240 4202 	movw	r2, #1026	@ 0x402
 800368c:	4293      	cmp	r3, r2
 800368e:	d11c      	bne.n	80036ca <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 8003690:	4a92      	ldr	r2, [pc, #584]	@ (80038dc <buildDataFrame+0x294>)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800369a:	2210      	movs	r2, #16
 800369c:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 800369e:	4b8f      	ldr	r3, [pc, #572]	@ (80038dc <buildDataFrame+0x294>)
 80036a0:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80036a4:	b25a      	sxtb	r2, r3
 80036a6:	4b8d      	ldr	r3, [pc, #564]	@ (80038dc <buildDataFrame+0x294>)
 80036a8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b25a      	sxtb	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3301      	adds	r3, #1
 80036b8:	b2d1      	uxtb	r1, r2
 80036ba:	4a88      	ldr	r2, [pc, #544]	@ (80038dc <buildDataFrame+0x294>)
 80036bc:	4413      	add	r3, r2
 80036be:	460a      	mov	r2, r1
 80036c0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3302      	adds	r3, #2
 80036c8:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80036ca:	4b84      	ldr	r3, [pc, #528]	@ (80038dc <buildDataFrame+0x294>)
 80036cc:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 80036d4:	4a81      	ldr	r2, [pc, #516]	@ (80038dc <buildDataFrame+0x294>)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80036de:	2204      	movs	r2, #4
 80036e0:	701a      	strb	r2, [r3, #0]
        end += 1;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 80036e8:	4b7c      	ldr	r3, [pc, #496]	@ (80038dc <buildDataFrame+0x294>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 80036f0:	4b7a      	ldr	r3, [pc, #488]	@ (80038dc <buildDataFrame+0x294>)
 80036f2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01a      	beq.n	8003730 <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 80036fa:	4a78      	ldr	r2, [pc, #480]	@ (80038dc <buildDataFrame+0x294>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003704:	2205      	movs	r2, #5
 8003706:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003708:	4b74      	ldr	r3, [pc, #464]	@ (80038dc <buildDataFrame+0x294>)
 800370a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	f002 0203 	and.w	r2, r2, #3
 8003716:	b2d1      	uxtb	r1, r2
 8003718:	4a70      	ldr	r2, [pc, #448]	@ (80038dc <buildDataFrame+0x294>)
 800371a:	4413      	add	r3, r2
 800371c:	460a      	mov	r2, r1
 800371e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3302      	adds	r3, #2
 8003726:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8003728:	4b6c      	ldr	r3, [pc, #432]	@ (80038dc <buildDataFrame+0x294>)
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 8003730:	4b6a      	ldr	r3, [pc, #424]	@ (80038dc <buildDataFrame+0x294>)
 8003732:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 800373a:	4a68      	ldr	r2, [pc, #416]	@ (80038dc <buildDataFrame+0x294>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4413      	add	r3, r2
 8003740:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003744:	2206      	movs	r2, #6
 8003746:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1c5c      	adds	r4, r3, #1
 800374c:	f7fe f869 	bl	8001822 <os_getBattLevel>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	4b61      	ldr	r3, [pc, #388]	@ (80038dc <buildDataFrame+0x294>)
 8003756:	4423      	add	r3, r4
 8003758:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	3302      	adds	r3, #2
 8003760:	4a5e      	ldr	r2, [pc, #376]	@ (80038dc <buildDataFrame+0x294>)
 8003762:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8003766:	4a5d      	ldr	r2, [pc, #372]	@ (80038dc <buildDataFrame+0x294>)
 8003768:	4413      	add	r3, r2
 800376a:	460a      	mov	r2, r1
 800376c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3303      	adds	r3, #3
 8003774:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003776:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <buildDataFrame+0x294>)
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800377e:	4b57      	ldr	r3, [pc, #348]	@ (80038dc <buildDataFrame+0x294>)
 8003780:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01a      	beq.n	80037be <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 8003788:	4a54      	ldr	r2, [pc, #336]	@ (80038dc <buildDataFrame+0x294>)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4413      	add	r3, r2
 800378e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003792:	2203      	movs	r2, #3
 8003794:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8003796:	4b51      	ldr	r3, [pc, #324]	@ (80038dc <buildDataFrame+0x294>)
 8003798:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3301      	adds	r3, #1
 80037a0:	f002 0207 	and.w	r2, r2, #7
 80037a4:	b2d1      	uxtb	r1, r2
 80037a6:	4a4d      	ldr	r2, [pc, #308]	@ (80038dc <buildDataFrame+0x294>)
 80037a8:	4413      	add	r3, r2
 80037aa:	460a      	mov	r2, r1
 80037ac:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3302      	adds	r3, #2
 80037b4:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80037b6:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <buildDataFrame+0x294>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <buildDataFrame+0x294>)
 80037c0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80037c8:	4a44      	ldr	r2, [pc, #272]	@ (80038dc <buildDataFrame+0x294>)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80037d2:	2212      	movs	r2, #18
 80037d4:	701a      	strb	r2, [r3, #0]
        end += 1;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3301      	adds	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 80037dc:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <buildDataFrame+0x294>)
 80037de:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 80037e6:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <buildDataFrame+0x294>)
 80037e8:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da03      	bge.n	80037f8 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 80037f0:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <buildDataFrame+0x294>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 80037f8:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <buildDataFrame+0x294>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <buildDataFrame+0x294>)
 8003802:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01a      	beq.n	8003840 <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 800380a:	4a34      	ldr	r2, [pc, #208]	@ (80038dc <buildDataFrame+0x294>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4413      	add	r3, r2
 8003810:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003814:	2211      	movs	r2, #17
 8003816:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003818:	4b30      	ldr	r3, [pc, #192]	@ (80038dc <buildDataFrame+0x294>)
 800381a:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3301      	adds	r3, #1
 8003822:	f002 0201 	and.w	r2, r2, #1
 8003826:	b2d1      	uxtb	r1, r2
 8003828:	4a2c      	ldr	r2, [pc, #176]	@ (80038dc <buildDataFrame+0x294>)
 800382a:	4413      	add	r3, r2
 800382c:	460a      	mov	r2, r1
 800382e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3302      	adds	r3, #2
 8003836:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8003838:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <buildDataFrame+0x294>)
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <buildDataFrame+0x294>)
 8003842:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01a      	beq.n	8003880 <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 800384a:	4a24      	ldr	r2, [pc, #144]	@ (80038dc <buildDataFrame+0x294>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4413      	add	r3, r2
 8003850:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003854:	2207      	movs	r2, #7
 8003856:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003858:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <buildDataFrame+0x294>)
 800385a:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3301      	adds	r3, #1
 8003862:	f002 0203 	and.w	r2, r2, #3
 8003866:	b2d1      	uxtb	r1, r2
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <buildDataFrame+0x294>)
 800386a:	4413      	add	r3, r2
 800386c:	460a      	mov	r2, r1
 800386e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3302      	adds	r3, #2
 8003876:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8003878:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <buildDataFrame+0x294>)
 800387a:	2200      	movs	r2, #0
 800387c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b18      	cmp	r3, #24
 8003884:	dd01      	ble.n	800388a <buildDataFrame+0x242>
 8003886:	f7fd fe15 	bl	80014b4 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <buildDataFrame+0x250>
 8003890:	79bb      	ldrb	r3, [r7, #6]
 8003892:	3305      	adds	r3, #5
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e000      	b.n	800389a <buildDataFrame+0x252>
 8003898:	2304      	movs	r3, #4
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4413      	add	r3, r2
 80038a0:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d905      	bls.n	80038b4 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3304      	adds	r3, #4
 80038b2:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <buildDataFrame+0x294>)
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80038bc:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <buildDataFrame+0x294>)
 80038be:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <buildDataFrame+0x294>)
 80038c4:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	4a03      	ldr	r2, [pc, #12]	@ (80038dc <buildDataFrame+0x294>)
 80038d0:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	db03      	blt.n	80038e0 <buildDataFrame+0x298>
 80038d8:	2240      	movs	r2, #64	@ 0x40
 80038da:	e002      	b.n	80038e2 <buildDataFrame+0x29a>
 80038dc:	20000138 	.word	0x20000138
 80038e0:	2200      	movs	r2, #0
 80038e2:	4313      	orrs	r3, r2
 80038e4:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3b08      	subs	r3, #8
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	4313      	orrs	r3, r2
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80038f6:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <buildDataFrame+0x3b0>)
 80038f8:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 80038fc:	4a3f      	ldr	r2, [pc, #252]	@ (80039fc <buildDataFrame+0x3b4>)
 80038fe:	4b3e      	ldr	r3, [pc, #248]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003900:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7fd ff49 	bl	800179e <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 800390c:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <buildDataFrame+0x3b0>)
 800390e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8003916:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003918:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800391c:	3301      	adds	r3, #1
 800391e:	4a36      	ldr	r2, [pc, #216]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003920:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8003924:	4a36      	ldr	r2, [pc, #216]	@ (8003a00 <buildDataFrame+0x3b8>)
 8003926:	4b34      	ldr	r3, [pc, #208]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003928:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fd ff1b 	bl	8001770 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 800393a:	4b2f      	ldr	r3, [pc, #188]	@ (80039f8 <buildDataFrame+0x3b0>)
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03e      	beq.n	80039c6 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8003948:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <buildDataFrame+0x3b0>)
 800394a:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003954:	2280      	movs	r2, #128	@ 0x80
 8003956:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800395a:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <buildDataFrame+0x3b0>)
 800395c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <buildDataFrame+0x324>
 8003964:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 800396c:	4b22      	ldr	r3, [pc, #136]	@ (80039f8 <buildDataFrame+0x3b0>)
 800396e:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8003972:	4a21      	ldr	r2, [pc, #132]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4413      	add	r3, r2
 8003978:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800397c:	460a      	mov	r2, r1
 800397e:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	3301      	adds	r3, #1
 8003984:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <buildDataFrame+0x3bc>)
 8003986:	4413      	add	r3, r2
 8003988:	79ba      	ldrb	r2, [r7, #6]
 800398a:	491f      	ldr	r1, [pc, #124]	@ (8003a08 <buildDataFrame+0x3c0>)
 800398c:	4618      	mov	r0, r3
 800398e:	f005 fd8f 	bl	80094b0 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003992:	4b19      	ldr	r3, [pc, #100]	@ (80039f8 <buildDataFrame+0x3b0>)
 8003994:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <buildDataFrame+0x358>
 800399c:	481b      	ldr	r0, [pc, #108]	@ (8003a0c <buildDataFrame+0x3c4>)
 800399e:	e000      	b.n	80039a2 <buildDataFrame+0x35a>
 80039a0:	481b      	ldr	r0, [pc, #108]	@ (8003a10 <buildDataFrame+0x3c8>)
 80039a2:	4b15      	ldr	r3, [pc, #84]	@ (80039f8 <buildDataFrame+0x3b0>)
 80039a4:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <buildDataFrame+0x3b0>)
 80039aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039ae:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039b4:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <buildDataFrame+0x3bc>)
 80039b6:	4413      	add	r3, r2
 80039b8:	79ba      	ldrb	r2, [r7, #6]
 80039ba:	9201      	str	r2, [sp, #4]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	4622      	mov	r2, r4
 80039c2:	f7fe f853 	bl	8001a6c <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80039c6:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <buildDataFrame+0x3b0>)
 80039c8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80039cc:	4b0a      	ldr	r3, [pc, #40]	@ (80039f8 <buildDataFrame+0x3b0>)
 80039ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	3b04      	subs	r3, #4
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <buildDataFrame+0x3bc>)
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	480a      	ldr	r0, [pc, #40]	@ (8003a0c <buildDataFrame+0x3c4>)
 80039e2:	f7fd ffc5 	bl	8001970 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 80039e6:	4a04      	ldr	r2, [pc, #16]	@ (80039f8 <buildDataFrame+0x3b0>)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000138 	.word	0x20000138
 80039fc:	20000281 	.word	0x20000281
 8003a00:	20000286 	.word	0x20000286
 8003a04:	20000280 	.word	0x20000280
 8003a08:	200001f5 	.word	0x200001f5
 8003a0c:	2000022c 	.word	0x2000022c
 8003a10:	2000023c 	.word	0x2000023c

08003a14 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f001 fcfd 	bl	800541c <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003a22:	4823      	ldr	r0, [pc, #140]	@ (8003ab0 <onBcnRx+0x9c>)
 8003a24:	f000 fefa 	bl	800481c <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003a28:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a2a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003a32:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a34:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a40:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003a44:	2001      	movs	r0, #1
 8003a46:	f7fe fead 	bl	80027a4 <reportEvent>
        return;
 8003a4a:	e02d      	b.n	8003aa8 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003a4c:	f7fe ff2e 	bl	80028ac <decodeBeacon>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	dc0f      	bgt.n	8003a76 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003a56:	4b17      	ldr	r3, [pc, #92]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 8003a5e:	2003      	movs	r0, #3
 8003a60:	f001 fcdc 	bl	800541c <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003a64:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a66:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <onBcnRx+0xa4>)
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4810      	ldr	r0, [pc, #64]	@ (8003ab0 <onBcnRx+0x9c>)
 8003a70:	f000 ff18 	bl	80048a4 <os_setTimedCallback>
        return;
 8003a74:	e018      	b.n	8003aa8 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003a76:	2101      	movs	r1, #1
 8003a78:	200d      	movs	r0, #13
 8003a7a:	f7fe f983 	bl	8001d84 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a80:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a8c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003a90:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a92:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003a96:	f043 0302 	orr.w	r3, r3, #2
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <onBcnRx+0xa0>)
 8003a9e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f7fe fe7e 	bl	80027a4 <reportEvent>
}
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000014c 	.word	0x2000014c
 8003ab4:	20000138 	.word	0x20000138
 8003ab8:	08003a15 	.word	0x08003a15

08003abc <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003ac0:	4b27      	ldr	r3, [pc, #156]	@ (8003b60 <startScan+0xa4>)
 8003ac2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <startScan+0x1c>
 8003aca:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <startScan+0xa4>)
 8003acc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <startScan+0x20>
 8003ad8:	f7fd fcec 	bl	80014b4 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003adc:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <startScan+0xa4>)
 8003ade:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d137      	bne.n	8003b5a <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003aea:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <startScan+0xa4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8003af2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <startScan+0xa4>)
 8003af4:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <startScan+0xa4>)
 8003afa:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8003afe:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <startScan+0xa4>)
 8003b00:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <startScan+0xa4>)
 8003b06:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <startScan+0xa4>)
 8003b0c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <startScan+0xa4>)
 8003b1e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 8003b22:	f7fe fd71 	bl	8002608 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003b26:	f000 fe53 	bl	80047d0 <os_getTime>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8003b30:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 8003b34:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <startScan+0xa4>)
 8003b36:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8003b3a:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <startScan+0xa4>)
 8003b3c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003b40:	4a07      	ldr	r2, [pc, #28]	@ (8003b60 <startScan+0xa4>)
 8003b42:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <startScan+0xa4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <startScan+0xa8>)
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4806      	ldr	r0, [pc, #24]	@ (8003b68 <startScan+0xac>)
 8003b4e:	f000 fea9 	bl	80048a4 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003b52:	2003      	movs	r0, #3
 8003b54:	f001 fc62 	bl	800541c <os_radio>
 8003b58:	e000      	b.n	8003b5c <startScan+0xa0>
        return;
 8003b5a:	bf00      	nop
}
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000138 	.word	0x20000138
 8003b64:	08003a15 	.word	0x08003a15
 8003b68:	2000014c 	.word	0x2000014c

08003b6c <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003b76:	4b16      	ldr	r3, [pc, #88]	@ (8003bd0 <buildJoinRequest+0x64>)
 8003b78:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	79fa      	ldrb	r2, [r7, #7]
 8003b7e:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fce5 	bl	8004554 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3309      	adds	r3, #9
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fcf4 	bl	800457c <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3311      	adds	r3, #17
 8003b98:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd4 <buildJoinRequest+0x68>)
 8003b9a:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd fde5 	bl	8001770 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003ba6:	2113      	movs	r1, #19
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7fd ff09 	bl	80019c0 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <buildJoinRequest+0x68>)
 8003bb0:	2217      	movs	r2, #23
 8003bb2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 8003bb6:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <buildJoinRequest+0x68>)
 8003bb8:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <buildJoinRequest+0x68>)
 8003bc2:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000280 	.word	0x20000280
 8003bd4:	20000138 	.word	0x20000138

08003bd8 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003be0:	2005      	movs	r0, #5
 8003be2:	f7fe fddf 	bl	80027a4 <reportEvent>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003bf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d138      	bne.n	8003c70 <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c04:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <LMIC_startJoining+0x20>
 8003c0c:	f7fd fc52 	bl	80014b4 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003c18:	4b17      	ldr	r3, [pc, #92]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c1a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c1e:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c2a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c38:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c3e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c44:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c4a:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 8003c4e:	f7fe fd01 	bl	8002654 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <LMIC_startJoining+0x88>)
 8003c60:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8003c64:	4905      	ldr	r1, [pc, #20]	@ (8003c7c <LMIC_startJoining+0x8c>)
 8003c66:	4806      	ldr	r0, [pc, #24]	@ (8003c80 <LMIC_startJoining+0x90>)
 8003c68:	f000 fdf6 	bl	8004858 <os_setCallback>
        return 1;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000138 	.word	0x20000138
 8003c7c:	08003bd9 	.word	0x08003bd9
 8003c80:	2000014c 	.word	0x2000014c

08003c84 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <processPingRx+0x38>)
 8003c8e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <processPingRx+0x38>)
 8003c98:	2204      	movs	r2, #4
 8003c9a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 8003c9e:	f7fe fe99 	bl	80029d4 <decodeFrame>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8003ca8:	200d      	movs	r0, #13
 8003caa:	f7fe fd7b 	bl	80027a4 <reportEvent>
            return;
 8003cae:	e001      	b.n	8003cb4 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8003cb0:	f000 fa2a 	bl	8004108 <engineUpdate>
}
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000138 	.word	0x20000138

08003cc0 <processDnData>:


static bit_t processDnData (void) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003cc4:	4b76      	ldr	r3, [pc, #472]	@ (8003ea0 <processDnData+0x1e0>)
 8003cc6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <processDnData+0x16>
 8003cd2:	f7fd fbef 	bl	80014b4 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003cd6:	4b72      	ldr	r3, [pc, #456]	@ (8003ea0 <processDnData+0x1e0>)
 8003cd8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 80ce 	bne.w	8003e7e <processDnData+0x1be>
      norx:
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8003ce6:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8003ce8:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea0 <processDnData+0x1e0>)
 8003cea:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d038      	beq.n	8003d64 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8003cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea0 <processDnData+0x1e0>)
 8003cf4:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003cf8:	2b07      	cmp	r3, #7
 8003cfa:	d82e      	bhi.n	8003d5a <processDnData+0x9a>
                LMIC.txCnt += 1;
 8003cfc:	4b68      	ldr	r3, [pc, #416]	@ (8003ea0 <processDnData+0x1e0>)
 8003cfe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003d02:	3301      	adds	r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <processDnData+0x1e0>)
 8003d08:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8003d0c:	4b64      	ldr	r3, [pc, #400]	@ (8003ea0 <processDnData+0x1e0>)
 8003d0e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003d12:	4a63      	ldr	r2, [pc, #396]	@ (8003ea0 <processDnData+0x1e0>)
 8003d14:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4a62      	ldr	r2, [pc, #392]	@ (8003ea4 <processDnData+0x1e4>)
 8003d1c:	5c52      	ldrb	r2, [r2, r1]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fcbd 	bl	80016a0 <lowerDR>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7fe f9ea 	bl	8002108 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8003d34:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea0 <processDnData+0x1e0>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2103      	movs	r1, #3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe f9a2 	bl	8002084 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8003d40:	4b57      	ldr	r3, [pc, #348]	@ (8003ea0 <processDnData+0x1e0>)
 8003d42:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	4b54      	ldr	r3, [pc, #336]	@ (8003ea0 <processDnData+0x1e0>)
 8003d4e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 8003d52:	f000 f9d9 	bl	8004108 <engineUpdate>
                return 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e09f      	b.n	8003e9a <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8003d5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ea0 <processDnData+0x1e0>)
 8003d5c:	2260      	movs	r2, #96	@ 0x60
 8003d5e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8003d62:	e003      	b.n	8003d6c <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8003d64:	4b4e      	ldr	r3, [pc, #312]	@ (8003ea0 <processDnData+0x1e0>)
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea0 <processDnData+0x1e0>)
 8003d6e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003d72:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8003d76:	d009      	beq.n	8003d8c <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8003d78:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <processDnData+0x1e0>)
 8003d7a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	4b46      	ldr	r3, [pc, #280]	@ (8003ea0 <processDnData+0x1e0>)
 8003d88:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8003d8c:	4b44      	ldr	r3, [pc, #272]	@ (8003ea0 <processDnData+0x1e0>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003d94:	4b42      	ldr	r3, [pc, #264]	@ (8003ea0 <processDnData+0x1e0>)
 8003d96:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8003d9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ea0 <processDnData+0x1e0>)
 8003d9c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8003da0:	e000      	b.n	8003da4 <processDnData+0xe4>
    }
    goto txcomplete;
 8003da2:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8003da4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea0 <processDnData+0x1e0>)
 8003da6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003daa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea0 <processDnData+0x1e0>)
 8003db2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8003db6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea0 <processDnData+0x1e0>)
 8003db8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d012      	beq.n	8003dea <processDnData+0x12a>
 8003dc4:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <processDnData+0x1e0>)
 8003dc6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8003dd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ea0 <processDnData+0x1e0>)
 8003dd4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	4b30      	ldr	r3, [pc, #192]	@ (8003ea0 <processDnData+0x1e0>)
 8003de0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 8003de4:	200f      	movs	r0, #15
 8003de6:	f7fe fcdd 	bl	80027a4 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8003dea:	200a      	movs	r0, #10
 8003dec:	f7fe fcda 	bl	80027a4 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <processDnData+0x1e0>)
 8003df2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003df6:	2b18      	cmp	r3, #24
 8003df8:	dd1c      	ble.n	8003e34 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8003dfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ea0 <processDnData+0x1e0>)
 8003dfc:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fc1f 	bl	8001644 <decDR>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	2003      	movs	r0, #3
 8003e10:	f7fe f97a 	bl	8002108 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8003e14:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <processDnData+0x1e0>)
 8003e16:	220c      	movs	r2, #12
 8003e18:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8003e1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <processDnData+0x1e0>)
 8003e1e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e22:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <processDnData+0x1e0>)
 8003e2a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 8003e2e:	200e      	movs	r0, #14
 8003e30:	f7fe fcb8 	bl	80027a4 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <processDnData+0x1e0>)
 8003e36:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01d      	beq.n	8003e7a <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8003e3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <processDnData+0x1e0>)
 8003e40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	f7fe fca9 	bl	80027a4 <reportEvent>
                LMIC.bcninfoTries = 0;
 8003e52:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <processDnData+0x1e0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8003e5a:	e00e      	b.n	8003e7a <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8003e5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <processDnData+0x1e0>)
 8003e5e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <processDnData+0x1e0>)
 8003e68:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <processDnData+0x1e0>)
 8003e6e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8003e76:	f7ff fe21 	bl	8003abc <startScan>
        return 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e00d      	b.n	8003e9a <processDnData+0x1da>
    if( !decodeFrame() ) {
 8003e7e:	f7fe fda9 	bl	80029d4 <decodeFrame>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d18c      	bne.n	8003da2 <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003e88:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <processDnData+0x1e0>)
 8003e8a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f43f af27 	beq.w	8003ce6 <processDnData+0x26>
            return 0;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000138 	.word	0x20000138
 8003ea4:	0800a7a0 	.word	0x0800a7a0

08003ea8 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8003eb0:	4b81      	ldr	r3, [pc, #516]	@ (80040b8 <processBeacon+0x210>)
 8003eb2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003eb6:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8003eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80040b8 <processBeacon+0x210>)
 8003eba:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003ebe:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80040b8 <processBeacon+0x210>)
 8003ec2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8087 	beq.w	8003fda <processBeacon+0x132>
 8003ecc:	f7fe fcee 	bl	80028ac <decodeBeacon>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f340 8081 	ble.w	8003fda <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8003edc:	7afb      	ldrb	r3, [r7, #11]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	200d      	movs	r0, #13
 8003eea:	f7fd ff4b 	bl	8001d84 <calcBcnRxWindowFromMillis>
            goto rev;
 8003eee:	e0d2      	b.n	8004096 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	4b70      	ldr	r3, [pc, #448]	@ (80040b8 <processBeacon+0x210>)
 8003ef6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8003f08:	4b6b      	ldr	r3, [pc, #428]	@ (80040b8 <processBeacon+0x210>)
 8003f0a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d013      	beq.n	8003f3a <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8003f12:	4b69      	ldr	r3, [pc, #420]	@ (80040b8 <processBeacon+0x210>)
 8003f14:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f1e:	4966      	ldr	r1, [pc, #408]	@ (80040b8 <processBeacon+0x210>)
 8003f20:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8003f24:	1a59      	subs	r1, r3, r1
 8003f26:	4b64      	ldr	r3, [pc, #400]	@ (80040b8 <processBeacon+0x210>)
 8003f28:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	fb91 f3f3 	sdiv	r3, r1, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8003f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80040b8 <processBeacon+0x210>)
 8003f3c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d127      	bne.n	8003f98 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8003f48:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <processBeacon+0x210>)
 8003f4a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	8abb      	ldrh	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8003f58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da03      	bge.n	8003f68 <processBeacon+0xc0>
 8003f60:	8a7b      	ldrh	r3, [r7, #18]
 8003f62:	425b      	negs	r3, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8003f68:	4a53      	ldr	r2, [pc, #332]	@ (80040b8 <processBeacon+0x210>)
 8003f6a:	8a7b      	ldrh	r3, [r7, #18]
 8003f6c:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 8003f70:	4b51      	ldr	r3, [pc, #324]	@ (80040b8 <processBeacon+0x210>)
 8003f72:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8003f76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	dd03      	ble.n	8003f86 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8003f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80040b8 <processBeacon+0x210>)
 8003f80:	8a7b      	ldrh	r3, [r7, #18]
 8003f82:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8003f86:	4b4c      	ldr	r3, [pc, #304]	@ (80040b8 <processBeacon+0x210>)
 8003f88:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003f8c:	f023 0308 	bic.w	r3, r3, #8
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b49      	ldr	r3, [pc, #292]	@ (80040b8 <processBeacon+0x210>)
 8003f94:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 8003f98:	4a47      	ldr	r2, [pc, #284]	@ (80040b8 <processBeacon+0x210>)
 8003f9a:	8abb      	ldrh	r3, [r7, #20]
 8003f9c:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8003fa0:	4b45      	ldr	r3, [pc, #276]	@ (80040b8 <processBeacon+0x210>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8003fa8:	4b43      	ldr	r3, [pc, #268]	@ (80040b8 <processBeacon+0x210>)
 8003faa:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8003fae:	4b42      	ldr	r3, [pc, #264]	@ (80040b8 <processBeacon+0x210>)
 8003fb0:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8003fb4:	4b40      	ldr	r3, [pc, #256]	@ (80040b8 <processBeacon+0x210>)
 8003fb6:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <processBeacon+0x210>)
 8003fc2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80040b8 <processBeacon+0x210>)
 8003fc8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d14c      	bne.n	800406e <processBeacon+0x1c6>
 8003fd4:	f7fd fa6e 	bl	80014b4 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003fd8:	e049      	b.n	800406e <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8003fde:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <processBeacon+0x210>)
 8003fe0:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8003fe4:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <processBeacon+0x210>)
 8003fe6:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8003fea:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a31      	ldr	r2, [pc, #196]	@ (80040b8 <processBeacon+0x210>)
 8003ff2:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8003ff6:	4b30      	ldr	r3, [pc, #192]	@ (80040b8 <processBeacon+0x210>)
 8003ff8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8003ffc:	3380      	adds	r3, #128	@ 0x80
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80040b8 <processBeacon+0x210>)
 8004000:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 8004004:	4b2c      	ldr	r3, [pc, #176]	@ (80040b8 <processBeacon+0x210>)
 8004006:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800400a:	3301      	adds	r3, #1
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <processBeacon+0x210>)
 8004010:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004014:	4b28      	ldr	r3, [pc, #160]	@ (80040b8 <processBeacon+0x210>)
 8004016:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800401a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800401e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004022:	2104      	movs	r1, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe f82d 	bl	8002084 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 800402a:	4b23      	ldr	r3, [pc, #140]	@ (80040b8 <processBeacon+0x210>)
 800402c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004030:	2b14      	cmp	r3, #20
 8004032:	d908      	bls.n	8004046 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004034:	4b20      	ldr	r3, [pc, #128]	@ (80040b8 <processBeacon+0x210>)
 8004036:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800403a:	f043 0320 	orr.w	r3, r3, #32
 800403e:	b29a      	uxth	r2, r3
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <processBeacon+0x210>)
 8004042:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004046:	4b1c      	ldr	r3, [pc, #112]	@ (80040b8 <processBeacon+0x210>)
 8004048:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800404c:	2b64      	cmp	r3, #100	@ 0x64
 800404e:	d90f      	bls.n	8004070 <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004050:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <processBeacon+0x210>)
 8004052:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004056:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 800405a:	f023 0302 	bic.w	r3, r3, #2
 800405e:	b29a      	uxth	r2, r3
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <processBeacon+0x210>)
 8004062:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004066:	200b      	movs	r0, #11
 8004068:	f7fe fb9c 	bl	80027a4 <reportEvent>
            return;
 800406c:	e021      	b.n	80040b2 <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800406e:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004070:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <processBeacon+0x210>)
 8004072:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004076:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 800407a:	2103      	movs	r1, #3
 800407c:	2000      	movs	r0, #0
 800407e:	f7fd fe2d 	bl	8001cdc <calcRxWindow>
 8004082:	4603      	mov	r3, r0
 8004084:	1ae3      	subs	r3, r4, r3
 8004086:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <processBeacon+0x210>)
 8004088:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <processBeacon+0x210>)
 800408e:	7c1a      	ldrb	r2, [r3, #16]
 8004090:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <processBeacon+0x210>)
 8004092:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004096:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <processBeacon+0x210>)
 8004098:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800409c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 80040a4:	4805      	ldr	r0, [pc, #20]	@ (80040bc <processBeacon+0x214>)
 80040a6:	f7fd fef3 	bl	8001e90 <rxschedInit>
    reportEvent(ev);
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fb79 	bl	80027a4 <reportEvent>
}
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd90      	pop	{r4, r7, pc}
 80040b8:	20000138 	.word	0x20000138
 80040bc:	2000026c 	.word	0x2000026c

080040c0 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <startRxBcn+0x1c>)
 80040ca:	4a05      	ldr	r2, [pc, #20]	@ (80040e0 <startRxBcn+0x20>)
 80040cc:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040ce:	2002      	movs	r0, #2
 80040d0:	f001 f9a4 	bl	800541c <os_radio>
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000138 	.word	0x20000138
 80040e0:	08003ea9 	.word	0x08003ea9

080040e4 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80040ec:	4b04      	ldr	r3, [pc, #16]	@ (8004100 <startRxPing+0x1c>)
 80040ee:	4a05      	ldr	r2, [pc, #20]	@ (8004104 <startRxPing+0x20>)
 80040f0:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040f2:	2002      	movs	r0, #2
 80040f4:	f001 f992 	bl	800541c <os_radio>
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000138 	.word	0x20000138
 8004104:	08003c85 	.word	0x08003c85

08004108 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 800410e:	4b90      	ldr	r3, [pc, #576]	@ (8004350 <engineUpdate+0x248>)
 8004110:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004114:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 81ab 	bne.w	8004474 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 800411e:	4b8c      	ldr	r3, [pc, #560]	@ (8004350 <engineUpdate+0x248>)
 8004120:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <engineUpdate+0x34>
 8004128:	4b89      	ldr	r3, [pc, #548]	@ (8004350 <engineUpdate+0x248>)
 800412a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <engineUpdate+0x34>
        LMIC_startJoining();
 8004136:	f7ff fd5b 	bl	8003bf0 <LMIC_startJoining>
        return;
 800413a:	e19e      	b.n	800447a <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 800413c:	f000 fb48 	bl	80047d0 <os_getTime>
 8004140:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800414a:	4b81      	ldr	r3, [pc, #516]	@ (8004350 <engineUpdate+0x248>)
 800414c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800415e:	4b7c      	ldr	r3, [pc, #496]	@ (8004350 <engineUpdate+0x248>)
 8004160:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	dd01      	ble.n	800416e <engineUpdate+0x66>
 800416a:	f7fd f9a3 	bl	80014b4 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800416e:	4b78      	ldr	r3, [pc, #480]	@ (8004350 <engineUpdate+0x248>)
 8004170:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004174:	3b40      	subs	r3, #64	@ 0x40
 8004176:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004178:	4b75      	ldr	r3, [pc, #468]	@ (8004350 <engineUpdate+0x248>)
 800417a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800417e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80f2 	beq.w	800436c <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004188:	4b71      	ldr	r3, [pc, #452]	@ (8004350 <engineUpdate+0x248>)
 800418a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800418e:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 800419e:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <engineUpdate+0x248>)
 80041a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80041a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 80041ac:	68b8      	ldr	r0, [r7, #8]
 80041ae:	f7fe f98f 	bl	80024d0 <nextTx>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a66      	ldr	r2, [pc, #408]	@ (8004350 <engineUpdate+0x248>)
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b65      	ldr	r3, [pc, #404]	@ (8004350 <engineUpdate+0x248>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 80041be:	4b64      	ldr	r3, [pc, #400]	@ (8004350 <engineUpdate+0x248>)
 80041c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80041c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	4b61      	ldr	r3, [pc, #388]	@ (8004350 <engineUpdate+0x248>)
 80041cc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80041d0:	e002      	b.n	80041d8 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 80041d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004350 <engineUpdate+0x248>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 80041d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004350 <engineUpdate+0x248>)
 80041da:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <engineUpdate+0xe8>
 80041e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004350 <engineUpdate+0x248>)
 80041e4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <engineUpdate+0xfe>
 80041f0:	4b57      	ldr	r3, [pc, #348]	@ (8004350 <engineUpdate+0x248>)
 80041f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	da03      	bge.n	8004206 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 80041fe:	4b54      	ldr	r3, [pc, #336]	@ (8004350 <engineUpdate+0x248>)
 8004200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004204:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004206:	4b52      	ldr	r3, [pc, #328]	@ (8004350 <engineUpdate+0x248>)
 8004208:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <engineUpdate+0x116>
 800421a:	4a4e      	ldr	r2, [pc, #312]	@ (8004354 <engineUpdate+0x24c>)
 800421c:	e000      	b.n	8004220 <engineUpdate+0x118>
 800421e:	4a4e      	ldr	r2, [pc, #312]	@ (8004358 <engineUpdate+0x250>)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	441a      	add	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004228:	2b00      	cmp	r3, #0
 800422a:	dd0b      	ble.n	8004244 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004232:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004236:	2110      	movs	r1, #16
 8004238:	4618      	mov	r0, r3
 800423a:	f7fd ff23 	bl	8002084 <txDelay>
            txbeg = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004242:	e09b      	b.n	800437c <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3340      	adds	r3, #64	@ 0x40
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	da70      	bge.n	8004332 <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004254:	4b3e      	ldr	r3, [pc, #248]	@ (8004350 <engineUpdate+0x248>)
 8004256:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800425a:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01d      	beq.n	800429e <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004262:	4b3b      	ldr	r3, [pc, #236]	@ (8004350 <engineUpdate+0x248>)
 8004264:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004270:	4b37      	ldr	r3, [pc, #220]	@ (8004350 <engineUpdate+0x248>)
 8004272:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fa10 	bl	80016a0 <lowerDR>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004284:	23c0      	movs	r3, #192	@ 0xc0
 8004286:	73bb      	strb	r3, [r7, #14]
 8004288:	e001      	b.n	800428e <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 800428a:	2300      	movs	r3, #0
 800428c:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 800428e:	7bbb      	ldrb	r3, [r7, #14]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fc6b 	bl	8003b6c <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004296:	4b2e      	ldr	r3, [pc, #184]	@ (8004350 <engineUpdate+0x248>)
 8004298:	4a30      	ldr	r2, [pc, #192]	@ (800435c <engineUpdate+0x254>)
 800429a:	61da      	str	r2, [r3, #28]
 800429c:	e01d      	b.n	80042da <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 800429e:	4b2c      	ldr	r3, [pc, #176]	@ (8004350 <engineUpdate+0x248>)
 80042a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80042a4:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 80042a8:	d907      	bls.n	80042ba <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 80042ae:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80042b0:	492b      	ldr	r1, [pc, #172]	@ (8004360 <engineUpdate+0x258>)
 80042b2:	482c      	ldr	r0, [pc, #176]	@ (8004364 <engineUpdate+0x25c>)
 80042b4:	f000 fad0 	bl	8004858 <os_setCallback>
                    return;
 80042b8:	e0df      	b.n	800447a <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80042ba:	4b25      	ldr	r3, [pc, #148]	@ (8004350 <engineUpdate+0x248>)
 80042bc:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <engineUpdate+0x1c8>
 80042c4:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <engineUpdate+0x248>)
 80042c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d0ee      	beq.n	80042ae <engineUpdate+0x1a6>
                }
                buildDataFrame();
 80042d0:	f7ff f9ba 	bl	8003648 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80042d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <engineUpdate+0x248>)
 80042d6:	4a24      	ldr	r2, [pc, #144]	@ (8004368 <engineUpdate+0x260>)
 80042d8:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fd f98b 	bl	80015f8 <updr2rps>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <engineUpdate+0x248>)
 80042e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f7fd f91c 	bl	800152c <setCr>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <engineUpdate+0x248>)
 80042fa:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <engineUpdate+0x248>)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8004302:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <engineUpdate+0x248>)
 8004304:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004308:	b21b      	sxth	r3, r3
 800430a:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 800430e:	b21b      	sxth	r3, r3
 8004310:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8004314:	b21b      	sxth	r3, r3
 8004316:	b29a      	uxth	r2, r3
 8004318:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <engineUpdate+0x248>)
 800431a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 800431e:	6938      	ldr	r0, [r7, #16]
 8004320:	f7fe f88c 	bl	800243c <updateTx>
            reportEvent(EV_TXSTART);
 8004324:	2011      	movs	r0, #17
 8004326:	f7fe fa3d 	bl	80027a4 <reportEvent>
            os_radio(RADIO_TX);
 800432a:	2001      	movs	r0, #1
 800432c:	f001 f876 	bl	800541c <os_radio>
            return;
 8004330:	e0a3      	b.n	800447a <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <engineUpdate+0x248>)
 8004334:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 808c 	beq.w	800445a <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d119      	bne.n	800437c <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	3301      	adds	r3, #1
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	e015      	b.n	800437c <engineUpdate+0x274>
 8004350:	20000138 	.word	0x20000138
 8004354:	00046500 	.word	0x00046500
 8004358:	0002ee00 	.word	0x0002ee00
 800435c:	08003509 	.word	0x08003509
 8004360:	080027c3 	.word	0x080027c3
 8004364:	2000014c 	.word	0x2000014c
 8004368:	08003619 	.word	0x08003619
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800436c:	4b44      	ldr	r3, [pc, #272]	@ (8004480 <engineUpdate+0x378>)
 800436e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07e      	beq.n	8004478 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 800437a:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 800437c:	4b40      	ldr	r3, [pc, #256]	@ (8004480 <engineUpdate+0x378>)
 800437e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004386:	2b00      	cmp	r3, #0
 8004388:	d041      	beq.n	800440e <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3340      	adds	r3, #64	@ 0x40
 800438e:	4619      	mov	r1, r3
 8004390:	483c      	ldr	r0, [pc, #240]	@ (8004484 <engineUpdate+0x37c>)
 8004392:	f7fd fdeb 	bl	8001f6c <rxschedNext>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d038      	beq.n	800440e <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <engineUpdate+0x2a8>
 80043a2:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <engineUpdate+0x378>)
 80043a4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db56      	blt.n	800445e <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80043b0:	4b33      	ldr	r3, [pc, #204]	@ (8004480 <engineUpdate+0x378>)
 80043b2:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 80043b6:	4b32      	ldr	r3, [pc, #200]	@ (8004480 <engineUpdate+0x378>)
 80043b8:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80043ba:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <engineUpdate+0x378>)
 80043bc:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80043c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004480 <engineUpdate+0x378>)
 80043c2:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80043c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004480 <engineUpdate+0x378>)
 80043c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004480 <engineUpdate+0x378>)
 80043cc:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80043ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004480 <engineUpdate+0x378>)
 80043d0:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd f921 	bl	800161c <dndr2rps>
 80043da:	4603      	mov	r3, r0
 80043dc:	461a      	mov	r2, r3
 80043de:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <engineUpdate+0x378>)
 80043e0:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 80043e2:	4b27      	ldr	r3, [pc, #156]	@ (8004480 <engineUpdate+0x378>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80043ea:	4b25      	ldr	r3, [pc, #148]	@ (8004480 <engineUpdate+0x378>)
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 80043f6:	da01      	bge.n	80043fc <engineUpdate+0x2f4>
 80043f8:	f7fd f85c 	bl	80014b4 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 80043fc:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <engineUpdate+0x378>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	3b40      	subs	r3, #64	@ 0x40
 8004402:	4a21      	ldr	r2, [pc, #132]	@ (8004488 <engineUpdate+0x380>)
 8004404:	4619      	mov	r1, r3
 8004406:	4821      	ldr	r0, [pc, #132]	@ (800448c <engineUpdate+0x384>)
 8004408:	f000 fa4c 	bl	80048a4 <os_setTimedCallback>
            return;
 800440c:	e035      	b.n	800447a <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <engineUpdate+0x316>
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	db21      	blt.n	8004462 <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 800441e:	f7fe f8f3 	bl	8002608 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8004422:	4b17      	ldr	r3, [pc, #92]	@ (8004480 <engineUpdate+0x378>)
 8004424:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8004428:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <engineUpdate+0x378>)
 800442a:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 800442c:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <engineUpdate+0x378>)
 800442e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004432:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <engineUpdate+0x378>)
 8004434:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	db06      	blt.n	800444e <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004440:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <engineUpdate+0x378>)
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <engineUpdate+0x388>)
 8004444:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004446:	2002      	movs	r0, #2
 8004448:	f000 ffe8 	bl	800541c <os_radio>
        return;
 800444c:	e015      	b.n	800447a <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800444e:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <engineUpdate+0x38c>)
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	480e      	ldr	r0, [pc, #56]	@ (800448c <engineUpdate+0x384>)
 8004454:	f000 fa26 	bl	80048a4 <os_setTimedCallback>
    return;
 8004458:	e00f      	b.n	800447a <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <engineUpdate+0x35c>
                goto txdelay;
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <engineUpdate+0x35c>
        goto txdelay;
 8004462:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	3b40      	subs	r3, #64	@ 0x40
 8004468:	4a0b      	ldr	r2, [pc, #44]	@ (8004498 <engineUpdate+0x390>)
 800446a:	4619      	mov	r1, r3
 800446c:	4807      	ldr	r0, [pc, #28]	@ (800448c <engineUpdate+0x384>)
 800446e:	f000 fa19 	bl	80048a4 <os_setTimedCallback>
 8004472:	e002      	b.n	800447a <engineUpdate+0x372>
        return;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <engineUpdate+0x372>
            return;
 8004478:	bf00      	nop
}
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000138 	.word	0x20000138
 8004484:	2000026c 	.word	0x2000026c
 8004488:	080040e5 	.word	0x080040e5
 800448c:	2000014c 	.word	0x2000014c
 8004490:	08003ea9 	.word	0x08003ea9
 8004494:	080040c1 	.word	0x080040c1
 8004498:	08002791 	.word	0x08002791

0800449c <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 800449c:	b598      	push	{r3, r4, r7, lr}
 800449e:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f000 ffbb 	bl	800541c <os_radio>
    os_clearCallback(&LMIC.osjob);
 80044a6:	4821      	ldr	r0, [pc, #132]	@ (800452c <LMIC_reset+0x90>)
 80044a8:	f000 f9b8 	bl	800481c <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80044ac:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80044b0:	2100      	movs	r1, #0
 80044b2:	481f      	ldr	r0, [pc, #124]	@ (8004530 <LMIC_reset+0x94>)
 80044b4:	f004 ffcf 	bl	8009456 <memset>
    LMIC.devaddr      =  0;
 80044b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004530 <LMIC_reset+0x94>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 80044c0:	f000 feb0 	bl	8005224 <radio_rand1>
 80044c4:	4603      	mov	r3, r0
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	b21c      	sxth	r4, r3
 80044ca:	f000 feab 	bl	8005224 <radio_rand1>
 80044ce:	4603      	mov	r3, r0
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	4323      	orrs	r3, r4
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <LMIC_reset+0x94>)
 80044da:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <LMIC_reset+0x94>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <LMIC_reset+0x94>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <LMIC_reset+0x94>)
 80044f0:	2280      	movs	r2, #128	@ 0x80
 80044f2:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <LMIC_reset+0x94>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 80044fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <LMIC_reset+0x94>)
 8004500:	4a0c      	ldr	r2, [pc, #48]	@ (8004534 <LMIC_reset+0x98>)
 8004502:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <LMIC_reset+0x94>)
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <LMIC_reset+0x94>)
 8004510:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <LMIC_reset+0x98>)
 8004512:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <LMIC_reset+0x94>)
 8004518:	2203      	movs	r2, #3
 800451a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 800451e:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <LMIC_reset+0x94>)
 8004520:	22ff      	movs	r2, #255	@ 0xff
 8004522:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004526:	bf00      	nop
 8004528:	bd98      	pop	{r3, r4, r7, pc}
 800452a:	bf00      	nop
 800452c:	2000014c 	.word	0x2000014c
 8004530:	20000138 	.word	0x20000138
 8004534:	33d3e608 	.word	0x33d3e608

08004538 <LMIC_init>:


void LMIC_init (void) {
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 800453c:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <LMIC_init+0x18>)
 800453e:	2240      	movs	r2, #64	@ 0x40
 8004540:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000138 	.word	0x20000138

08004554 <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4906      	ldr	r1, [pc, #24]	@ (8004578 <os_getArtEui+0x24>)
 8004560:	461a      	mov	r2, r3
 8004562:	460b      	mov	r3, r1
 8004564:	cb03      	ldmia	r3!, {r0, r1}
 8004566:	6010      	str	r0, [r2, #0]
 8004568:	6051      	str	r1, [r2, #4]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	0800a7fc 	.word	0x0800a7fc

0800457c <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4906      	ldr	r1, [pc, #24]	@ (80045a0 <os_getDevEui+0x24>)
 8004588:	461a      	mov	r2, r3
 800458a:	460b      	mov	r3, r1
 800458c:	cb03      	ldmia	r3!, {r0, r1}
 800458e:	6010      	str	r0, [r2, #0]
 8004590:	6051      	str	r1, [r2, #4]
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	0800a804 	.word	0x0800a804

080045a4 <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 80045a4:	b4b0      	push	{r4, r5, r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a06      	ldr	r2, [pc, #24]	@ (80045c8 <os_getDevKey+0x24>)
 80045b0:	461c      	mov	r4, r3
 80045b2:	4615      	mov	r5, r2
 80045b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b6:	6020      	str	r0, [r4, #0]
 80045b8:	6061      	str	r1, [r4, #4]
 80045ba:	60a2      	str	r2, [r4, #8]
 80045bc:	60e3      	str	r3, [r4, #12]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bcb0      	pop	{r4, r5, r7}
 80045c6:	4770      	bx	lr
 80045c8:	0800a80c 	.word	0x0800a80c

080045cc <initsensor>:
void initsensor(){
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
// Here you init your sensors
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <initfunc>:

void initfunc (osjob_t* j) {
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 80045e2:	f7ff fff3 	bl	80045cc <initsensor>
	// reset MAC state
	LMIC_reset();
 80045e6:	f7ff ff59 	bl	800449c <LMIC_reset>
	// start joining
	LMIC_startJoining();
 80045ea:	f7ff fb01 	bl	8003bf0 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <blinkfunc>:


// blinker
static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc (osjob_t* j) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	// toggle led
	ledstate = !ledstate;
 8004600:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <blinkfunc+0x44>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <blinkfunc+0x44>)
 8004612:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 8004614:	4b09      	ldr	r3, [pc, #36]	@ (800463c <blinkfunc+0x44>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fc fce9 	bl	8000ff0 <debug_led>
	// reschedule
	os_setTimedCallback(j, os_getTime()+ms2osticks(100), blinkfunc);
 800461e:	f000 f8d7 	bl	80047d0 <os_getTime>
 8004622:	4603      	mov	r3, r0
 8004624:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8004628:	4a05      	ldr	r2, [pc, #20]	@ (8004640 <blinkfunc+0x48>)
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f939 	bl	80048a4 <os_setTimedCallback>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200002f0 	.word	0x200002f0
 8004640:	080045f9 	.word	0x080045f9

08004644 <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fc fd0d 	bl	8001070 <debug_event>
	switch(ev) {
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d002      	beq.n	8004662 <onEvent+0x1e>
 800465c:	2b06      	cmp	r3, #6
 800465e:	d007      	beq.n	8004670 <onEvent+0x2c>
 8004660:	e00d      	b.n	800467e <onEvent+0x3a>
	// network joined, session established
		case EV_JOINING:
			debug_str("try joining\r\n");
 8004662:	480b      	ldr	r0, [pc, #44]	@ (8004690 <onEvent+0x4c>)
 8004664:	f7fc fcee 	bl	8001044 <debug_str>
			blinkfunc(&blinkjob);
 8004668:	480a      	ldr	r0, [pc, #40]	@ (8004694 <onEvent+0x50>)
 800466a:	f7ff ffc5 	bl	80045f8 <blinkfunc>
			break;
 800466e:	e00a      	b.n	8004686 <onEvent+0x42>

		case EV_JOINED:
			// kick-off periodic sensor job
			os_clearCallback(&blinkjob);
 8004670:	4808      	ldr	r0, [pc, #32]	@ (8004694 <onEvent+0x50>)
 8004672:	f000 f8d3 	bl	800481c <os_clearCallback>
			debug_led(1);
 8004676:	2001      	movs	r0, #1
 8004678:	f7fc fcba 	bl	8000ff0 <debug_led>
//			reportfunc(&reportjob);
			break;
 800467c:	e003      	b.n	8004686 <onEvent+0x42>
//			break;
//		case EV_LINK_ALIVE:
//			debug_str("EV_LINK_ALIVE\r\n");
//			break;
		default:
			debug_str("Unknown event\r\n");
 800467e:	4806      	ldr	r0, [pc, #24]	@ (8004698 <onEvent+0x54>)
 8004680:	f7fc fce0 	bl	8001044 <debug_str>
			break;
 8004684:	bf00      	nop
	}
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	08009624 	.word	0x08009624
 8004694:	200002e4 	.word	0x200002e4
 8004698:	08009634 	.word	0x08009634

0800469c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046a2:	f001 f91c 	bl	80058de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046a6:	f000 f829 	bl	80046fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046aa:	f7fc fcff 	bl	80010ac <MX_GPIO_Init>
  MX_SPI3_Init();
 80046ae:	f000 fee1 	bl	8005474 <MX_SPI3_Init>
  MX_TIM7_Init();
 80046b2:	f000 fffd 	bl	80056b0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80046b6:	f001 f859 	bl	800576c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 80046ba:	480d      	ldr	r0, [pc, #52]	@ (80046f0 <main+0x54>)
 80046bc:	f003 fbc4 	bl	8007e48 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 80046c0:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <main+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <main+0x58>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ce:	601a      	str	r2, [r3, #0]
  osjob_t initjob;
  // initialize runtime env
  os_init();
 80046d0:	f000 f86c 	bl	80047ac <os_init>
  // initialize debug library
  debug_init();
 80046d4:	f7fc fc82 	bl	8000fdc <debug_init>
  // setup initial job
  os_setCallback(&initjob, initfunc);
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	4907      	ldr	r1, [pc, #28]	@ (80046f8 <main+0x5c>)
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f8bb 	bl	8004858 <os_setCallback>
//  os_setCallback(&hellojob, hellofunc);
  // execute scheduled jobs and events
  os_runloop();
 80046e2:	f000 f915 	bl	8004910 <os_runloop>
  // (not reached)
  return 0;
 80046e6:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000370 	.word	0x20000370
 80046f4:	2000030c 	.word	0x2000030c
 80046f8:	080045db 	.word	0x080045db

080046fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b096      	sub	sp, #88	@ 0x58
 8004700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004702:	f107 0314 	add.w	r3, r7, #20
 8004706:	2244      	movs	r2, #68	@ 0x44
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f004 fea3 	bl	8009456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004710:	463b      	mov	r3, r7
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800471e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004722:	f001 fc89 	bl	8006038 <HAL_PWREx_ControlVoltageScaling>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800472c:	f000 f838 	bl	80047a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004730:	2310      	movs	r3, #16
 8004732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004734:	2301      	movs	r3, #1
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800473c:	2360      	movs	r3, #96	@ 0x60
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004740:	2302      	movs	r3, #2
 8004742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004744:	2301      	movs	r3, #1
 8004746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004748:	2301      	movs	r3, #1
 800474a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800474c:	2328      	movs	r3, #40	@ 0x28
 800474e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004750:	2307      	movs	r3, #7
 8004752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004754:	2302      	movs	r3, #2
 8004756:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004758:	2302      	movs	r3, #2
 800475a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fcbf 	bl	80060e4 <HAL_RCC_OscConfig>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800476c:	f000 f818 	bl	80047a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004770:	230f      	movs	r3, #15
 8004772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004774:	2303      	movs	r3, #3
 8004776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004784:	463b      	mov	r3, r7
 8004786:	2104      	movs	r1, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f002 f8bf 	bl	800690c <HAL_RCC_ClockConfig>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004794:	f000 f804 	bl	80047a0 <Error_Handler>
  }
}
 8004798:	bf00      	nop
 800479a:	3758      	adds	r7, #88	@ 0x58
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80047a4:	b672      	cpsid	i
}
 80047a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <Error_Handler+0x8>

080047ac <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 80047b0:	2208      	movs	r2, #8
 80047b2:	2100      	movs	r1, #0
 80047b4:	4805      	ldr	r0, [pc, #20]	@ (80047cc <os_init+0x20>)
 80047b6:	f004 fe4e 	bl	8009456 <memset>
    hal_init();
 80047ba:	f7fc fe65 	bl	8001488 <hal_init>
    radio_init();
 80047be:	f000 fcbd 	bl	800513c <radio_init>
    LMIC_init();
 80047c2:	f7ff feb9 	bl	8004538 <LMIC_init>
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200002f4 	.word	0x200002f4

080047d0 <os_getTime>:

ostime_t os_getTime () {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
    return hal_ticks();
 80047d4:	f7fc fd76 	bl	80012c4 <hal_ticks>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	bd80      	pop	{r7, pc}

080047de <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 80047e8:	e00d      	b.n	8004806 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d105      	bne.n	8004800 <unlinkjob+0x22>
            *pnext = job->next;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
            return 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e007      	b.n	8004810 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ed      	bne.n	80047ea <unlinkjob+0xc>
        }
    }
    return 0;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004824:	f7fc fe04 	bl	8001430 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4809      	ldr	r0, [pc, #36]	@ (8004850 <os_clearCallback+0x34>)
 800482c:	f7ff ffd7 	bl	80047de <unlinkjob>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <os_clearCallback+0x26>
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4806      	ldr	r0, [pc, #24]	@ (8004854 <os_clearCallback+0x38>)
 800483a:	f7ff ffd0 	bl	80047de <unlinkjob>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004842:	f7fc fe05 	bl	8001450 <hal_enableIRQs>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200002f4 	.word	0x200002f4
 8004854:	200002f8 	.word	0x200002f8

08004858 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004862:	f7fc fde5 	bl	8001430 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	480d      	ldr	r0, [pc, #52]	@ (80048a0 <os_setCallback+0x48>)
 800486a:	f7ff ffb8 	bl	80047de <unlinkjob>
    // fill-in job
    job->func = cb;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <os_setCallback+0x48>)
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e002      	b.n	8004886 <os_setCallback+0x2e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f8      	bne.n	8004880 <os_setCallback+0x28>
    *pnext = job;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004894:	f7fc fddc 	bl	8001450 <hal_enableIRQs>
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	200002f8 	.word	0x200002f8

080048a4 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 80048b0:	f7fc fdbe 	bl	8001430 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	4815      	ldr	r0, [pc, #84]	@ (800490c <os_setTimedCallback+0x68>)
 80048b8:	f7ff ff91 	bl	80047de <unlinkjob>
    // fill-in job
    job->deadline = time;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	605a      	str	r2, [r3, #4]
    job->func = cb;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80048ce:	4b0f      	ldr	r3, [pc, #60]	@ (800490c <os_setTimedCallback+0x68>)
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e00e      	b.n	80048f2 <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd04      	ble.n	80048ec <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]
            break;
 80048ea:	e006      	b.n	80048fa <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ec      	bne.n	80048d4 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004900:	f7fc fda6 	bl	8001450 <hal_enableIRQs>
}
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200002f4 	.word	0x200002f4

08004910 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 800491a:	f7fc fd89 	bl	8001430 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 800491e:	4b16      	ldr	r3, [pc, #88]	@ (8004978 <os_runloop+0x68>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <os_runloop+0x26>
            j = OS.runnablejobs;
 8004926:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <os_runloop+0x68>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a11      	ldr	r2, [pc, #68]	@ (8004978 <os_runloop+0x68>)
 8004932:	6053      	str	r3, [r2, #4]
 8004934:	e016      	b.n	8004964 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004936:	4b10      	ldr	r3, [pc, #64]	@ (8004978 <os_runloop+0x68>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d010      	beq.n	8004960 <os_runloop+0x50>
 800493e:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <os_runloop+0x68>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4618      	mov	r0, r3
 8004946:	f7fc fd1b 	bl	8001380 <hal_checkTimer>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004950:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <os_runloop+0x68>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a07      	ldr	r2, [pc, #28]	@ (8004978 <os_runloop+0x68>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e001      	b.n	8004964 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004960:	f7fc fd8a 	bl	8001478 <hal_sleep>
        }
        hal_enableIRQs();
 8004964:	f7fc fd74 	bl	8001450 <hal_enableIRQs>
        if(j) { // run job callback
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0d3      	beq.n	8004916 <os_runloop+0x6>
            j->func(j);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
    while(1) {
 8004976:	e7ce      	b.n	8004916 <os_runloop+0x6>
 8004978:	200002f4 	.word	0x200002f4

0800497c <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	460a      	mov	r2, r1
 8004986:	71fb      	strb	r3, [r7, #7]
 8004988:	4613      	mov	r3, r2
 800498a:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800498c:	2000      	movs	r0, #0
 800498e:	f7fc fc11 	bl	80011b4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc fc6c 	bl	8001278 <hal_spi>
    hal_spi(data);
 80049a0:	79bb      	ldrb	r3, [r7, #6]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc fc68 	bl	8001278 <hal_spi>
    hal_pin_nss(1);
 80049a8:	2001      	movs	r0, #1
 80049aa:	f7fc fc03 	bl	80011b4 <hal_pin_nss>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <readReg>:

static u1_t readReg (u1_t addr) {
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	4603      	mov	r3, r0
 80049be:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 80049c0:	2000      	movs	r0, #0
 80049c2:	f7fc fbf7 	bl	80011b4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fc fc52 	bl	8001278 <hal_spi>
    u1_t val = hal_spi(0x00);
 80049d4:	2000      	movs	r0, #0
 80049d6:	f7fc fc4f 	bl	8001278 <hal_spi>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 80049de:	2001      	movs	r0, #1
 80049e0:	f7fc fbe8 	bl	80011b4 <hal_pin_nss>
    return val;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	6039      	str	r1, [r7, #0]
 80049f8:	71fb      	strb	r3, [r7, #7]
 80049fa:	4613      	mov	r3, r2
 80049fc:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7fc fbd8 	bl	80011b4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fc fc33 	bl	8001278 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
 8004a16:	e009      	b.n	8004a2c <writeBuf+0x3e>
        hal_spi(buf[i]);
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fc fc29 	bl	8001278 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	79bb      	ldrb	r3, [r7, #6]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d3f1      	bcc.n	8004a18 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8004a34:	2001      	movs	r0, #1
 8004a36:	f7fc fbbd 	bl	80011b4 <hal_pin_nss>
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004a42:	b590      	push	{r4, r7, lr}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6039      	str	r1, [r7, #0]
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004a52:	2000      	movs	r0, #0
 8004a54:	f7fc fbae 	bl	80011b4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fc09 	bl	8001278 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e00a      	b.n	8004a82 <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	18d4      	adds	r4, r2, r3
 8004a72:	2000      	movs	r0, #0
 8004a74:	f7fc fc00 	bl	8001278 <hal_spi>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	79bb      	ldrb	r3, [r7, #6]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3f0      	bcc.n	8004a6c <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f7fc fb92 	bl	80011b4 <hal_pin_nss>
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}

08004a98 <opmode>:

static void opmode (u1_t mode) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	f7ff ff87 	bl	80049b6 <readReg>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	b25a      	sxtb	r2, r3
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4619      	mov	r1, r3
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f7ff ff5c 	bl	800497c <writeReg>
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <opmodeLora>:

static void opmodeLora() {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f7ff ff4a 	bl	800497c <writeReg>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <opmodeFSK>:

static void opmodeFSK() {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
    u1_t u = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	f043 0308 	orr.w	r3, r3, #8
 8004b00:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	4619      	mov	r1, r3
 8004b06:	2001      	movs	r0, #1
 8004b08:	f7ff ff38 	bl	800497c <writeReg>
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 8004b1a:	4b54      	ldr	r3, [pc, #336]	@ (8004c6c <configLoraModem+0x158>)
 8004b1c:	89db      	ldrh	r3, [r3, #14]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fcd0 	bl	80014c4 <getSf>
 8004b24:	4603      	mov	r3, r0
 8004b26:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	71fb      	strb	r3, [r7, #7]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	71bb      	strb	r3, [r7, #6]
 8004b30:	2300      	movs	r3, #0
 8004b32:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8004b34:	4b4d      	ldr	r3, [pc, #308]	@ (8004c6c <configLoraModem+0x158>)
 8004b36:	89db      	ldrh	r3, [r3, #14]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fc fcd3 	bl	80014e4 <getBw>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d010      	beq.n	8004b66 <configLoraModem+0x52>
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	dc13      	bgt.n	8004b70 <configLoraModem+0x5c>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <configLoraModem+0x3e>
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d005      	beq.n	8004b5c <configLoraModem+0x48>
 8004b50:	e00e      	b.n	8004b70 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8004b58:	71fb      	strb	r3, [r7, #7]
 8004b5a:	e00b      	b.n	8004b74 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b62:	71fb      	strb	r3, [r7, #7]
 8004b64:	e006      	b.n	8004b74 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8004b6c:	71fb      	strb	r3, [r7, #7]
 8004b6e:	e001      	b.n	8004b74 <configLoraModem+0x60>
        default:
            ASSERT(0);
 8004b70:	f7fc fca0 	bl	80014b4 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8004b74:	4b3d      	ldr	r3, [pc, #244]	@ (8004c6c <configLoraModem+0x158>)
 8004b76:	89db      	ldrh	r3, [r3, #14]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fc fcc5 	bl	8001508 <getCr>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d81f      	bhi.n	8004bc4 <configLoraModem+0xb0>
 8004b84:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <configLoraModem+0x78>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004ba7 	.word	0x08004ba7
 8004b94:	08004bb1 	.word	0x08004bb1
 8004b98:	08004bbb 	.word	0x08004bbb
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	f043 0302 	orr.w	r3, r3, #2
 8004ba2:	71fb      	strb	r3, [r7, #7]
 8004ba4:	e010      	b.n	8004bc8 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	71fb      	strb	r3, [r7, #7]
 8004bae:	e00b      	b.n	8004bc8 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	f043 0306 	orr.w	r3, r3, #6
 8004bb6:	71fb      	strb	r3, [r7, #7]
 8004bb8:	e006      	b.n	8004bc8 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f043 0308 	orr.w	r3, r3, #8
 8004bc0:	71fb      	strb	r3, [r7, #7]
 8004bc2:	e001      	b.n	8004bc8 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8004bc4:	f7fc fc76 	bl	80014b4 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8004bc8:	4b28      	ldr	r3, [pc, #160]	@ (8004c6c <configLoraModem+0x158>)
 8004bca:	89db      	ldrh	r3, [r3, #14]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fc fced 	bl	80015ac <getIh>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8004be0:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <configLoraModem+0x158>)
 8004be2:	89db      	ldrh	r3, [r3, #14]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fc fce1 	bl	80015ac <getIh>
 8004bea:	4603      	mov	r3, r0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4619      	mov	r1, r3
 8004bf0:	2022      	movs	r0, #34	@ 0x22
 8004bf2:	f7ff fec3 	bl	800497c <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	201d      	movs	r0, #29
 8004bfc:	f7ff febe 	bl	800497c <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8004c00:	793b      	ldrb	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	3370      	adds	r3, #112	@ 0x70
 8004c0c:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 8004c0e:	4b17      	ldr	r3, [pc, #92]	@ (8004c6c <configLoraModem+0x158>)
 8004c10:	89db      	ldrh	r3, [r3, #14]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc fca3 	bl	800155e <getNocrc>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8004c1e:	79bb      	ldrb	r3, [r7, #6]
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 8004c26:	79bb      	ldrb	r3, [r7, #6]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	201e      	movs	r0, #30
 8004c2c:	f7ff fea6 	bl	800497c <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8004c30:	2304      	movs	r3, #4
 8004c32:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8004c34:	793b      	ldrb	r3, [r7, #4]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d002      	beq.n	8004c40 <configLoraModem+0x12c>
 8004c3a:	793b      	ldrb	r3, [r7, #4]
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d10b      	bne.n	8004c58 <configLoraModem+0x144>
 8004c40:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <configLoraModem+0x158>)
 8004c42:	89db      	ldrh	r3, [r3, #14]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fc fc4d 	bl	80014e4 <getBw>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8004c50:	797b      	ldrb	r3, [r7, #5]
 8004c52:	f043 0308 	orr.w	r3, r3, #8
 8004c56:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8004c58:	797b      	ldrb	r3, [r7, #5]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	2026      	movs	r0, #38	@ 0x26
 8004c5e:	f7ff fe8d 	bl	800497c <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000138 	.word	0x20000138

08004c70 <configChannel>:

static void configChannel () {
 8004c70:	b5b0      	push	{r4, r5, r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8004c76:	4c1b      	ldr	r4, [pc, #108]	@ (8004ce4 <configChannel+0x74>)
 8004c78:	68a4      	ldr	r4, [r4, #8]
 8004c7a:	2500      	movs	r5, #0
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	462b      	mov	r3, r5
 8004c80:	0b51      	lsrs	r1, r2, #13
 8004c82:	04d0      	lsls	r0, r2, #19
 8004c84:	4a18      	ldr	r2, [pc, #96]	@ (8004ce8 <configChannel+0x78>)
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	f7fb faef 	bl	800026c <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8004c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	0c02      	lsrs	r2, r0, #16
 8004ca4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ca8:	0c0b      	lsrs	r3, r1, #16
 8004caa:	b2d3      	uxtb	r3, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	2006      	movs	r0, #6
 8004cb0:	f7ff fe64 	bl	800497c <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8004cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	0a02      	lsrs	r2, r0, #8
 8004cc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004cc6:	0a0b      	lsrs	r3, r1, #8
 8004cc8:	b2d3      	uxtb	r3, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	2007      	movs	r0, #7
 8004cce:	f7ff fe55 	bl	800497c <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8004cd2:	783b      	ldrb	r3, [r7, #0]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	2008      	movs	r0, #8
 8004cd8:	f7ff fe50 	bl	800497c <writeReg>
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ce4:	20000138 	.word	0x20000138
 8004ce8:	01e84800 	.word	0x01e84800

08004cec <configPower>:



static void configPower () {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <configPower+0x5c>)
 8004cf4:	7c9b      	ldrb	r3, [r3, #18]
 8004cf6:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8004cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	dd02      	ble.n	8004d06 <configPower+0x1a>
        pw = 15;
 8004d00:	230f      	movs	r3, #15
 8004d02:	71fb      	strb	r3, [r7, #7]
 8004d04:	e005      	b.n	8004d12 <configPower+0x26>
    } else if(pw < 2) {
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	dc01      	bgt.n	8004d12 <configPower+0x26>
        pw = 2;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	2009      	movs	r0, #9
 8004d26:	f7ff fe29 	bl	800497c <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 8004d2a:	205a      	movs	r0, #90	@ 0x5a
 8004d2c:	f7ff fe43 	bl	80049b6 <readReg>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	205a      	movs	r0, #90	@ 0x5a
 8004d3c:	f7ff fe1e 	bl	800497c <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000138 	.word	0x20000138

08004d4c <txfsk>:

static void txfsk () {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8004d50:	2110      	movs	r1, #16
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7ff fe12 	bl	800497c <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7ff fe2c 	bl	80049b6 <readReg>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d001      	beq.n	8004d68 <txfsk+0x1c>
 8004d64:	f7fc fba6 	bl	80014b4 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7ff fe95 	bl	8004a98 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8004d6e:	2102      	movs	r1, #2
 8004d70:	2002      	movs	r0, #2
 8004d72:	f7ff fe03 	bl	800497c <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8004d76:	2180      	movs	r1, #128	@ 0x80
 8004d78:	2003      	movs	r0, #3
 8004d7a:	f7ff fdff 	bl	800497c <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8004d7e:	2101      	movs	r1, #1
 8004d80:	2004      	movs	r0, #4
 8004d82:	f7ff fdfb 	bl	800497c <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8004d86:	2199      	movs	r1, #153	@ 0x99
 8004d88:	2005      	movs	r0, #5
 8004d8a:	f7ff fdf7 	bl	800497c <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2025      	movs	r0, #37	@ 0x25
 8004d92:	f7ff fdf3 	bl	800497c <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8004d96:	2105      	movs	r1, #5
 8004d98:	2026      	movs	r0, #38	@ 0x26
 8004d9a:	f7ff fdef 	bl	800497c <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8004d9e:	2112      	movs	r1, #18
 8004da0:	2027      	movs	r0, #39	@ 0x27
 8004da2:	f7ff fdeb 	bl	800497c <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8004da6:	21d0      	movs	r1, #208	@ 0xd0
 8004da8:	2030      	movs	r0, #48	@ 0x30
 8004daa:	f7ff fde7 	bl	800497c <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8004dae:	2140      	movs	r1, #64	@ 0x40
 8004db0:	2031      	movs	r0, #49	@ 0x31
 8004db2:	f7ff fde3 	bl	800497c <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8004db6:	21c1      	movs	r1, #193	@ 0xc1
 8004db8:	2028      	movs	r0, #40	@ 0x28
 8004dba:	f7ff fddf 	bl	800497c <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8004dbe:	2194      	movs	r1, #148	@ 0x94
 8004dc0:	2029      	movs	r0, #41	@ 0x29
 8004dc2:	f7ff fddb 	bl	800497c <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8004dc6:	21c1      	movs	r1, #193	@ 0xc1
 8004dc8:	202a      	movs	r0, #42	@ 0x2a
 8004dca:	f7ff fdd7 	bl	800497c <writeReg>
    // configure frequency
    configChannel();
 8004dce:	f7ff ff4f 	bl	8004c70 <configChannel>
    // configure output power
    configPower();
 8004dd2:	f7ff ff8b 	bl	8004cec <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8004dd6:	2134      	movs	r1, #52	@ 0x34
 8004dd8:	2040      	movs	r0, #64	@ 0x40
 8004dda:	f7ff fdcf 	bl	800497c <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <txfsk+0xd4>)
 8004de0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004de4:	3301      	adds	r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	2032      	movs	r0, #50	@ 0x32
 8004dec:	f7ff fdc6 	bl	800497c <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <txfsk+0xd4>)
 8004df2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004df6:	4619      	mov	r1, r3
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f7ff fdbf 	bl	800497c <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <txfsk+0xd4>)
 8004e00:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004e04:	461a      	mov	r2, r3
 8004e06:	4907      	ldr	r1, [pc, #28]	@ (8004e24 <txfsk+0xd8>)
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7ff fdf0 	bl	80049ee <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fc f9c5 	bl	800119e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8004e14:	2003      	movs	r0, #3
 8004e16:	f7ff fe3f 	bl	8004a98 <opmode>
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000138 	.word	0x20000138
 8004e24:	20000280 	.word	0x20000280

08004e28 <txlora>:

static void txlora () {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8004e2c:	f7ff fe4e 	bl	8004acc <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f7ff fdc0 	bl	80049b6 <readReg>
 8004e36:	4603      	mov	r3, r0
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	db01      	blt.n	8004e42 <txlora+0x1a>
 8004e3e:	f7fc fb39 	bl	80014b4 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8004e42:	2001      	movs	r0, #1
 8004e44:	f7ff fe28 	bl	8004a98 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8004e48:	f7ff fe64 	bl	8004b14 <configLoraModem>
    // configure frequency
    configChannel();
 8004e4c:	f7ff ff10 	bl	8004c70 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8004e50:	200a      	movs	r0, #10
 8004e52:	f7ff fdb0 	bl	80049b6 <readReg>
 8004e56:	4603      	mov	r3, r0
 8004e58:	b25b      	sxtb	r3, r3
 8004e5a:	f023 030f 	bic.w	r3, r3, #15
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	f043 0308 	orr.w	r3, r3, #8
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	200a      	movs	r0, #10
 8004e6c:	f7ff fd86 	bl	800497c <writeReg>
    configPower();
 8004e70:	f7ff ff3c 	bl	8004cec <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8004e74:	2134      	movs	r1, #52	@ 0x34
 8004e76:	2039      	movs	r0, #57	@ 0x39
 8004e78:	f7ff fd80 	bl	800497c <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8004e7c:	21f0      	movs	r1, #240	@ 0xf0
 8004e7e:	2040      	movs	r0, #64	@ 0x40
 8004e80:	f7ff fd7c 	bl	800497c <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8004e84:	21ff      	movs	r1, #255	@ 0xff
 8004e86:	2012      	movs	r0, #18
 8004e88:	f7ff fd78 	bl	800497c <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8004e8c:	21f7      	movs	r1, #247	@ 0xf7
 8004e8e:	2011      	movs	r0, #17
 8004e90:	f7ff fd74 	bl	800497c <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8004e94:	2100      	movs	r1, #0
 8004e96:	200e      	movs	r0, #14
 8004e98:	f7ff fd70 	bl	800497c <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	200d      	movs	r0, #13
 8004ea0:	f7ff fd6c 	bl	800497c <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <txlora+0xac>)
 8004ea6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004eaa:	4619      	mov	r1, r3
 8004eac:	2022      	movs	r0, #34	@ 0x22
 8004eae:	f7ff fd65 	bl	800497c <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <txlora+0xac>)
 8004eb4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4907      	ldr	r1, [pc, #28]	@ (8004ed8 <txlora+0xb0>)
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7ff fd96 	bl	80049ee <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f7fc f96b 	bl	800119e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8004ec8:	2003      	movs	r0, #3
 8004eca:	f7ff fde5 	bl	8004a98 <opmode>
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000138 	.word	0x20000138
 8004ed8:	20000280 	.word	0x20000280

08004edc <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	f7ff fd68 	bl	80049b6 <readReg>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <starttx+0x18>
 8004ef0:	f7fc fae0 	bl	80014b4 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8004ef4:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <starttx+0x38>)
 8004ef6:	89db      	ldrh	r3, [r3, #14]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc fae3 	bl	80014c4 <getSf>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <starttx+0x2e>
        txfsk();
 8004f04:	f7ff ff22 	bl	8004d4c <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8004f08:	e001      	b.n	8004f0e <starttx+0x32>
        txlora();
 8004f0a:	f7ff ff8d 	bl	8004e28 <txlora>
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000138 	.word	0x20000138

08004f18 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8004f22:	f7ff fdd3 	bl	8004acc <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7ff fd45 	bl	80049b6 <readReg>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	b25b      	sxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	db01      	blt.n	8004f38 <rxlora+0x20>
 8004f34:	f7fc fabe 	bl	80014b4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7ff fdad 	bl	8004a98 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d108      	bne.n	8004f56 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8004f44:	210a      	movs	r1, #10
 8004f46:	201d      	movs	r0, #29
 8004f48:	f7ff fd18 	bl	800497c <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8004f4c:	2170      	movs	r1, #112	@ 0x70
 8004f4e:	201e      	movs	r0, #30
 8004f50:	f7ff fd14 	bl	800497c <writeReg>
 8004f54:	e003      	b.n	8004f5e <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8004f56:	f7ff fddd 	bl	8004b14 <configLoraModem>
        // configure frequency
        configChannel();
 8004f5a:	f7ff fe89 	bl	8004c70 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8004f5e:	2121      	movs	r1, #33	@ 0x21
 8004f60:	200c      	movs	r0, #12
 8004f62:	f7ff fd0b 	bl	800497c <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8004f66:	2140      	movs	r1, #64	@ 0x40
 8004f68:	2023      	movs	r0, #35	@ 0x23
 8004f6a:	f7ff fd07 	bl	800497c <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8004f6e:	4b26      	ldr	r3, [pc, #152]	@ (8005008 <rxlora+0xf0>)
 8004f70:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8004f78:	2033      	movs	r0, #51	@ 0x33
 8004f7a:	f7ff fd1c 	bl	80049b6 <readReg>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4619      	mov	r1, r3
 8004f88:	2033      	movs	r0, #51	@ 0x33
 8004f8a:	f7ff fcf7 	bl	800497c <writeReg>
 8004f8e:	e00a      	b.n	8004fa6 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8004f90:	2033      	movs	r0, #51	@ 0x33
 8004f92:	f7ff fd10 	bl	80049b6 <readReg>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	2033      	movs	r0, #51	@ 0x33
 8004fa2:	f7ff fceb 	bl	800497c <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8004fa6:	4b18      	ldr	r3, [pc, #96]	@ (8005008 <rxlora+0xf0>)
 8004fa8:	7c1b      	ldrb	r3, [r3, #16]
 8004faa:	4619      	mov	r1, r3
 8004fac:	201f      	movs	r0, #31
 8004fae:	f7ff fce5 	bl	800497c <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8004fb2:	2134      	movs	r1, #52	@ 0x34
 8004fb4:	2039      	movs	r0, #57	@ 0x39
 8004fb6:	f7ff fce1 	bl	800497c <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8004fba:	21c0      	movs	r1, #192	@ 0xc0
 8004fbc:	2040      	movs	r0, #64	@ 0x40
 8004fbe:	f7ff fcdd 	bl	800497c <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8004fc2:	21ff      	movs	r1, #255	@ 0xff
 8004fc4:	2012      	movs	r0, #18
 8004fc6:	f7ff fcd9 	bl	800497c <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800500c <rxlora+0xf4>)
 8004fce:	5cd3      	ldrb	r3, [r2, r3]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2011      	movs	r0, #17
 8004fd8:	f7ff fcd0 	bl	800497c <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7fc f8de 	bl	800119e <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d108      	bne.n	8004ffa <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8004fe8:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <rxlora+0xf0>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fc f9b6 	bl	800135e <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8004ff2:	2006      	movs	r0, #6
 8004ff4:	f7ff fd50 	bl	8004a98 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8004ff8:	e002      	b.n	8005000 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 8004ffa:	2005      	movs	r0, #5
 8004ffc:	f7ff fd4c 	bl	8004a98 <opmode>
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000138 	.word	0x20000138
 800500c:	0800a81c 	.word	0x0800a81c

08005010 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <rxfsk+0x14>
 8005020:	f7fc fa48 	bl	80014b4 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005024:	f7ff fd64 	bl	8004af0 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005028:	2001      	movs	r0, #1
 800502a:	f7ff fcc4 	bl	80049b6 <readReg>
 800502e:	4603      	mov	r3, r0
 8005030:	b25b      	sxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	da01      	bge.n	800503a <rxfsk+0x2a>
 8005036:	f7fc fa3d 	bl	80014b4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 800503a:	2001      	movs	r0, #1
 800503c:	f7ff fd2c 	bl	8004a98 <opmode>
    // configure frequency
    configChannel();
 8005040:	f7ff fe16 	bl	8004c70 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8005044:	2121      	movs	r1, #33	@ 0x21
 8005046:	200c      	movs	r0, #12
 8005048:	f7ff fc98 	bl	800497c <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 800504c:	211e      	movs	r1, #30
 800504e:	200d      	movs	r0, #13
 8005050:	f7ff fc94 	bl	800497c <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8005054:	210b      	movs	r1, #11
 8005056:	2012      	movs	r0, #18
 8005058:	f7ff fc90 	bl	800497c <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 800505c:	2112      	movs	r1, #18
 800505e:	2013      	movs	r0, #19
 8005060:	f7ff fc8c 	bl	800497c <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005064:	21aa      	movs	r1, #170	@ 0xaa
 8005066:	201f      	movs	r0, #31
 8005068:	f7ff fc88 	bl	800497c <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 800506c:	2112      	movs	r1, #18
 800506e:	2027      	movs	r0, #39	@ 0x27
 8005070:	f7ff fc84 	bl	800497c <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005074:	21d8      	movs	r1, #216	@ 0xd8
 8005076:	2030      	movs	r0, #48	@ 0x30
 8005078:	f7ff fc80 	bl	800497c <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 800507c:	2140      	movs	r1, #64	@ 0x40
 800507e:	2031      	movs	r0, #49	@ 0x31
 8005080:	f7ff fc7c 	bl	800497c <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005084:	21c1      	movs	r1, #193	@ 0xc1
 8005086:	2028      	movs	r0, #40	@ 0x28
 8005088:	f7ff fc78 	bl	800497c <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800508c:	2194      	movs	r1, #148	@ 0x94
 800508e:	2029      	movs	r0, #41	@ 0x29
 8005090:	f7ff fc74 	bl	800497c <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005094:	21c1      	movs	r1, #193	@ 0xc1
 8005096:	202a      	movs	r0, #42	@ 0x2a
 8005098:	f7ff fc70 	bl	800497c <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 800509c:	21ff      	movs	r1, #255	@ 0xff
 800509e:	2021      	movs	r0, #33	@ 0x21
 80050a0:	f7ff fc6c 	bl	800497c <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80050a4:	2102      	movs	r1, #2
 80050a6:	2002      	movs	r0, #2
 80050a8:	f7ff fc68 	bl	800497c <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 80050ac:	2180      	movs	r1, #128	@ 0x80
 80050ae:	2003      	movs	r0, #3
 80050b0:	f7ff fc64 	bl	800497c <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 80050b4:	2101      	movs	r1, #1
 80050b6:	2004      	movs	r0, #4
 80050b8:	f7ff fc60 	bl	800497c <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 80050bc:	2199      	movs	r1, #153	@ 0x99
 80050be:	2005      	movs	r0, #5
 80050c0:	f7ff fc5c 	bl	800497c <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 80050c4:	2138      	movs	r1, #56	@ 0x38
 80050c6:	2040      	movs	r0, #64	@ 0x40
 80050c8:	f7ff fc58 	bl	800497c <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fc f866 	bl	800119e <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80050d2:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <rxfsk+0xdc>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc f941 	bl	800135e <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 80050dc:	2005      	movs	r0, #5
 80050de:	f7ff fcdb 	bl	8004a98 <opmode>
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000138 	.word	0x20000138

080050f0 <startrx>:

static void startrx (u1_t rxmode) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7ff fc5b 	bl	80049b6 <readReg>
 8005100:	4603      	mov	r3, r0
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <startrx+0x1e>
 800510a:	f7fc f9d3 	bl	80014b4 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 800510e:	4b0a      	ldr	r3, [pc, #40]	@ (8005138 <startrx+0x48>)
 8005110:	89db      	ldrh	r3, [r3, #14]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fc f9d6 	bl	80014c4 <getSf>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <startrx+0x38>
        rxfsk(rxmode);
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff75 	bl	8005010 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 8005126:	e003      	b.n	8005130 <startrx+0x40>
        rxlora(rxmode);
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fef4 	bl	8004f18 <rxlora>
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000138 	.word	0x20000138

0800513c <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8005142:	f7fc f975 	bl	8001430 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 8005146:	2000      	movs	r0, #0
 8005148:	f7fc f845 	bl	80011d6 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 800514c:	f7ff fb40 	bl	80047d0 <os_getTime>
 8005150:	4603      	mov	r3, r0
 8005152:	3320      	adds	r3, #32
 8005154:	4618      	mov	r0, r3
 8005156:	f7fc f902 	bl	800135e <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 800515a:	2002      	movs	r0, #2
 800515c:	f7fc f83b 	bl	80011d6 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8005160:	f7ff fb36 	bl	80047d0 <os_getTime>
 8005164:	4603      	mov	r3, r0
 8005166:	33a0      	adds	r3, #160	@ 0xa0
 8005168:	4618      	mov	r0, r3
 800516a:	f7fc f8f8 	bl	800135e <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 800516e:	2000      	movs	r0, #0
 8005170:	f7ff fc92 	bl	8004a98 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8005174:	2042      	movs	r0, #66	@ 0x42
 8005176:	f7ff fc1e 	bl	80049b6 <readReg>
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2b12      	cmp	r3, #18
 8005182:	d001      	beq.n	8005188 <radio_init+0x4c>
 8005184:	f7fc f996 	bl	80014b4 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8005188:	2002      	movs	r0, #2
 800518a:	f7ff fec5 	bl	8004f18 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 800518e:	bf00      	nop
 8005190:	2001      	movs	r0, #1
 8005192:	f7ff fc10 	bl	80049b6 <readReg>
 8005196:	4603      	mov	r3, r0
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	2b05      	cmp	r3, #5
 800519e:	d1f7      	bne.n	8005190 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 80051a0:	2301      	movs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e02c      	b.n	8005200 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	e023      	b.n	80051f4 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 80051ac:	bf00      	nop
 80051ae:	202c      	movs	r0, #44	@ 0x2c
 80051b0:	f7ff fc01 	bl	80049b6 <readReg>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	71bb      	strb	r3, [r7, #6]
 80051bc:	79bc      	ldrb	r4, [r7, #6]
 80051be:	202c      	movs	r0, #44	@ 0x2c
 80051c0:	f7ff fbf9 	bl	80049b6 <readReg>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	429c      	cmp	r4, r3
 80051cc:	d0ef      	beq.n	80051ae <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 80051ce:	4a14      	ldr	r2, [pc, #80]	@ (8005220 <radio_init+0xe4>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	b25a      	sxtb	r2, r3
 80051da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051de:	4313      	orrs	r3, r2
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	b2d9      	uxtb	r1, r3
 80051e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005220 <radio_init+0xe4>)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	460a      	mov	r2, r1
 80051ec:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b07      	cmp	r3, #7
 80051f8:	ddd8      	ble.n	80051ac <radio_init+0x70>
    for(int i=1; i<16; i++) {
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b0f      	cmp	r3, #15
 8005204:	ddcf      	ble.n	80051a6 <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <radio_init+0xe4>)
 8005208:	2210      	movs	r2, #16
 800520a:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 800520c:	2000      	movs	r0, #0
 800520e:	f7ff fc43 	bl	8004a98 <opmode>

    hal_enableIRQs();
 8005212:	f7fc f91d 	bl	8001450 <hal_enableIRQs>
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bd90      	pop	{r4, r7, pc}
 800521e:	bf00      	nop
 8005220:	200002fc 	.word	0x200002fc

08005224 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 800522a:	4b10      	ldr	r3, [pc, #64]	@ (800526c <radio_rand1+0x48>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <radio_rand1+0x16>
 8005236:	f7fc f93d 	bl	80014b4 <hal_failed>
    if( i==16 ) {
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	2b10      	cmp	r3, #16
 800523e:	d106      	bne.n	800524e <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8005240:	2210      	movs	r2, #16
 8005242:	490a      	ldr	r1, [pc, #40]	@ (800526c <radio_rand1+0x48>)
 8005244:	2000      	movs	r0, #0
 8005246:	f7fb fa05 	bl	8000654 <os_aes>
        i = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	71fa      	strb	r2, [r7, #7]
 8005254:	461a      	mov	r2, r3
 8005256:	4b05      	ldr	r3, [pc, #20]	@ (800526c <radio_rand1+0x48>)
 8005258:	5c9b      	ldrb	r3, [r3, r2]
 800525a:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 800525c:	4a03      	ldr	r2, [pc, #12]	@ (800526c <radio_rand1+0x48>)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	7013      	strb	r3, [r2, #0]
    return v;
 8005262:	79bb      	ldrb	r3, [r7, #6]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200002fc 	.word	0x200002fc

08005270 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 800527a:	f7ff faa9 	bl	80047d0 <os_getTime>
 800527e:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005280:	2001      	movs	r0, #1
 8005282:	f7ff fb98 	bl	80049b6 <readReg>
 8005286:	4603      	mov	r3, r0
 8005288:	b25b      	sxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	da74      	bge.n	8005378 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 800528e:	2012      	movs	r0, #18
 8005290:	f7ff fb91 	bl	80049b6 <readReg>
 8005294:	4603      	mov	r3, r0
 8005296:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8005298:	7a7b      	ldrb	r3, [r7, #9]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	4a59      	ldr	r2, [pc, #356]	@ (800540c <radio_irq_handler+0x19c>)
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e05c      	b.n	8005366 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 80052ac:	7a7b      	ldrb	r3, [r7, #9]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04f      	beq.n	8005356 <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 80052b6:	4b55      	ldr	r3, [pc, #340]	@ (800540c <radio_irq_handler+0x19c>)
 80052b8:	89db      	ldrh	r3, [r3, #14]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fc f912 	bl	80014e4 <getBw>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10d      	bne.n	80052e2 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 80052c6:	4b51      	ldr	r3, [pc, #324]	@ (800540c <radio_irq_handler+0x19c>)
 80052c8:	89db      	ldrh	r3, [r3, #14]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fc f8fa 	bl	80014c4 <getSf>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b4e      	ldr	r3, [pc, #312]	@ (8005410 <radio_irq_handler+0x1a0>)
 80052d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 80052e2:	4a4a      	ldr	r2, [pc, #296]	@ (800540c <radio_irq_handler+0x19c>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 80052e8:	201d      	movs	r0, #29
 80052ea:	f7ff fb64 	bl	80049b6 <readReg>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 80052f8:	2022      	movs	r0, #34	@ 0x22
 80052fa:	f7ff fb5c 	bl	80049b6 <readReg>
 80052fe:	4603      	mov	r3, r0
 8005300:	461a      	mov	r2, r3
 8005302:	e004      	b.n	800530e <radio_irq_handler+0x9e>
 8005304:	2013      	movs	r0, #19
 8005306:	f7ff fb56 	bl	80049b6 <readReg>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 800530e:	4b3f      	ldr	r3, [pc, #252]	@ (800540c <radio_irq_handler+0x19c>)
 8005310:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8005314:	2010      	movs	r0, #16
 8005316:	f7ff fb4e 	bl	80049b6 <readReg>
 800531a:	4603      	mov	r3, r0
 800531c:	4619      	mov	r1, r3
 800531e:	200d      	movs	r0, #13
 8005320:	f7ff fb2c 	bl	800497c <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005324:	4b39      	ldr	r3, [pc, #228]	@ (800540c <radio_irq_handler+0x19c>)
 8005326:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800532a:	461a      	mov	r2, r3
 800532c:	4939      	ldr	r1, [pc, #228]	@ (8005414 <radio_irq_handler+0x1a4>)
 800532e:	2000      	movs	r0, #0
 8005330:	f7ff fb87 	bl	8004a42 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8005334:	2019      	movs	r0, #25
 8005336:	f7ff fb3e 	bl	80049b6 <readReg>
 800533a:	4603      	mov	r3, r0
 800533c:	b25a      	sxtb	r2, r3
 800533e:	4b33      	ldr	r3, [pc, #204]	@ (800540c <radio_irq_handler+0x19c>)
 8005340:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8005342:	201a      	movs	r0, #26
 8005344:	f7ff fb37 	bl	80049b6 <readReg>
 8005348:	4603      	mov	r3, r0
 800534a:	3b3d      	subs	r3, #61	@ 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	b25a      	sxtb	r2, r3
 8005350:	4b2e      	ldr	r3, [pc, #184]	@ (800540c <radio_irq_handler+0x19c>)
 8005352:	731a      	strb	r2, [r3, #12]
 8005354:	e007      	b.n	8005366 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 8005356:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800535a:	2b00      	cmp	r3, #0
 800535c:	da03      	bge.n	8005366 <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 800535e:	4b2b      	ldr	r3, [pc, #172]	@ (800540c <radio_irq_handler+0x19c>)
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8005366:	21ff      	movs	r1, #255	@ 0xff
 8005368:	2011      	movs	r0, #17
 800536a:	f7ff fb07 	bl	800497c <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 800536e:	21ff      	movs	r1, #255	@ 0xff
 8005370:	2012      	movs	r0, #18
 8005372:	f7ff fb03 	bl	800497c <writeReg>
 8005376:	e03c      	b.n	80053f2 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8005378:	203e      	movs	r0, #62	@ 0x3e
 800537a:	f7ff fb1c 	bl	80049b6 <readReg>
 800537e:	4603      	mov	r3, r0
 8005380:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005382:	203f      	movs	r0, #63	@ 0x3f
 8005384:	f7ff fb17 	bl	80049b6 <readReg>
 8005388:	4603      	mov	r3, r0
 800538a:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 800538c:	7abb      	ldrb	r3, [r7, #10]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005396:	4a1d      	ldr	r2, [pc, #116]	@ (800540c <radio_irq_handler+0x19c>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e029      	b.n	80053f2 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 800539e:	7abb      	ldrb	r3, [r7, #10]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d019      	beq.n	80053dc <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 80053a8:	4a18      	ldr	r2, [pc, #96]	@ (800540c <radio_irq_handler+0x19c>)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 80053ae:	2032      	movs	r0, #50	@ 0x32
 80053b0:	f7ff fb01 	bl	80049b6 <readReg>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	4b14      	ldr	r3, [pc, #80]	@ (800540c <radio_irq_handler+0x19c>)
 80053ba:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80053be:	4b13      	ldr	r3, [pc, #76]	@ (800540c <radio_irq_handler+0x19c>)
 80053c0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80053c4:	461a      	mov	r2, r3
 80053c6:	4913      	ldr	r1, [pc, #76]	@ (8005414 <radio_irq_handler+0x1a4>)
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7ff fb3a 	bl	8004a42 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 80053ce:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <radio_irq_handler+0x19c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 80053d4:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <radio_irq_handler+0x19c>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	731a      	strb	r2, [r3, #12]
 80053da:	e00a      	b.n	80053f2 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 80053e6:	4b09      	ldr	r3, [pc, #36]	@ (800540c <radio_irq_handler+0x19c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80053ee:	e000      	b.n	80053f2 <radio_irq_handler+0x182>
        } else {
            while(1);
 80053f0:	e7fe      	b.n	80053f0 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 80053f2:	2000      	movs	r0, #0
 80053f4:	f7ff fb50 	bl	8004a98 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 80053f8:	4b04      	ldr	r3, [pc, #16]	@ (800540c <radio_irq_handler+0x19c>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4619      	mov	r1, r3
 80053fe:	4806      	ldr	r0, [pc, #24]	@ (8005418 <radio_irq_handler+0x1a8>)
 8005400:	f7ff fa2a 	bl	8004858 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000138 	.word	0x20000138
 8005410:	0800a820 	.word	0x0800a820
 8005414:	20000280 	.word	0x20000280
 8005418:	2000014c 	.word	0x2000014c

0800541c <os_radio>:

void os_radio (u1_t mode) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 8005426:	f7fc f803 	bl	8001430 <hal_disableIRQs>
    switch (mode) {
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d81a      	bhi.n	8005466 <os_radio+0x4a>
 8005430:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <os_radio+0x1c>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005449 	.word	0x08005449
 800543c:	08005451 	.word	0x08005451
 8005440:	08005457 	.word	0x08005457
 8005444:	0800545f 	.word	0x0800545f
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8005448:	2000      	movs	r0, #0
 800544a:	f7ff fb25 	bl	8004a98 <opmode>
        break;
 800544e:	e00a      	b.n	8005466 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8005450:	f7ff fd44 	bl	8004edc <starttx>
        break;
 8005454:	e007      	b.n	8005466 <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8005456:	2000      	movs	r0, #0
 8005458:	f7ff fe4a 	bl	80050f0 <startrx>
        break;
 800545c:	e003      	b.n	8005466 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 800545e:	2001      	movs	r0, #1
 8005460:	f7ff fe46 	bl	80050f0 <startrx>
        break;
 8005464:	bf00      	nop
    }
    hal_enableIRQs();
 8005466:	f7fb fff3 	bl	8001450 <hal_enableIRQs>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop

08005474 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005478:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <MX_SPI3_Init+0x74>)
 800547a:	4a1c      	ldr	r2, [pc, #112]	@ (80054ec <MX_SPI3_Init+0x78>)
 800547c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800547e:	4b1a      	ldr	r3, [pc, #104]	@ (80054e8 <MX_SPI3_Init+0x74>)
 8005480:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005484:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005486:	4b18      	ldr	r3, [pc, #96]	@ (80054e8 <MX_SPI3_Init+0x74>)
 8005488:	2200      	movs	r2, #0
 800548a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800548c:	4b16      	ldr	r3, [pc, #88]	@ (80054e8 <MX_SPI3_Init+0x74>)
 800548e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005492:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005494:	4b14      	ldr	r3, [pc, #80]	@ (80054e8 <MX_SPI3_Init+0x74>)
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800549a:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <MX_SPI3_Init+0x74>)
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80054a0:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80054a8:	4b0f      	ldr	r3, [pc, #60]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054aa:	2228      	movs	r2, #40	@ 0x28
 80054ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054ae:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80054b4:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ba:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054bc:	2200      	movs	r2, #0
 80054be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80054c0:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054c2:	2207      	movs	r2, #7
 80054c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80054c6:	4b08      	ldr	r3, [pc, #32]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054ce:	2208      	movs	r2, #8
 80054d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80054d2:	4805      	ldr	r0, [pc, #20]	@ (80054e8 <MX_SPI3_Init+0x74>)
 80054d4:	f001 ff26 	bl	8007324 <HAL_SPI_Init>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80054de:	f7ff f95f 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80054e2:	bf00      	nop
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	2000030c 	.word	0x2000030c
 80054ec:	40003c00 	.word	0x40003c00

080054f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	@ 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_SPI_MspInit+0x8c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d12f      	bne.n	8005572 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005512:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <HAL_SPI_MspInit+0x90>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	4a1a      	ldr	r2, [pc, #104]	@ (8005580 <HAL_SPI_MspInit+0x90>)
 8005518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551c:	6593      	str	r3, [r2, #88]	@ 0x58
 800551e:	4b18      	ldr	r3, [pc, #96]	@ (8005580 <HAL_SPI_MspInit+0x90>)
 8005520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552a:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <HAL_SPI_MspInit+0x90>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	4a14      	ldr	r2, [pc, #80]	@ (8005580 <HAL_SPI_MspInit+0x90>)
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005536:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <HAL_SPI_MspInit+0x90>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005542:	2338      	movs	r3, #56	@ 0x38
 8005544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005546:	2302      	movs	r3, #2
 8005548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554e:	2303      	movs	r3, #3
 8005550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005552:	2306      	movs	r3, #6
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005556:	f107 0314 	add.w	r3, r7, #20
 800555a:	4619      	mov	r1, r3
 800555c:	4809      	ldr	r0, [pc, #36]	@ (8005584 <HAL_SPI_MspInit+0x94>)
 800555e:	f000 fbc3 	bl	8005ce8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	2033      	movs	r0, #51	@ 0x33
 8005568:	f000 fb09 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800556c:	2033      	movs	r0, #51	@ 0x33
 800556e:	f000 fb22 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005572:	bf00      	nop
 8005574:	3728      	adds	r7, #40	@ 0x28
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40003c00 	.word	0x40003c00
 8005580:	40021000 	.word	0x40021000
 8005584:	48000400 	.word	0x48000400

08005588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558e:	4b0f      	ldr	r3, [pc, #60]	@ (80055cc <HAL_MspInit+0x44>)
 8005590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005592:	4a0e      	ldr	r2, [pc, #56]	@ (80055cc <HAL_MspInit+0x44>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6613      	str	r3, [r2, #96]	@ 0x60
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <HAL_MspInit+0x44>)
 800559c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055a6:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <HAL_MspInit+0x44>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	4a08      	ldr	r2, [pc, #32]	@ (80055cc <HAL_MspInit+0x44>)
 80055ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_MspInit+0x44>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000

080055d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <NMI_Handler+0x4>

080055d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <HardFault_Handler+0x4>

080055e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <MemManage_Handler+0x4>

080055e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ec:	bf00      	nop
 80055ee:	e7fd      	b.n	80055ec <BusFault_Handler+0x4>

080055f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <UsageFault_Handler+0x4>

080055f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005626:	f000 f9af 	bl	8005988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}

0800562e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_Pin);
 8005632:	2001      	movs	r0, #1
 8005634:	f000 fcda 	bl	8005fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}

0800563c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8005640:	2040      	movs	r0, #64	@ 0x40
 8005642:	f000 fcd3 	bl	8005fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8005646:	2080      	movs	r0, #128	@ 0x80
 8005648:	f000 fcd0 	bl	8005fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800564c:	bf00      	nop
 800564e:	bd80      	pop	{r7, pc}

08005650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005654:	4802      	ldr	r0, [pc, #8]	@ (8005660 <USART1_IRQHandler+0x10>)
 8005656:	f002 ff47 	bl	80084e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200003bc 	.word	0x200003bc

08005664 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005668:	4802      	ldr	r0, [pc, #8]	@ (8005674 <SPI3_IRQHandler+0x10>)
 800566a:	f002 f91d 	bl	80078a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2000030c 	.word	0x2000030c

08005678 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800567c:	4802      	ldr	r0, [pc, #8]	@ (8005688 <TIM7_IRQHandler+0x10>)
 800567e:	f002 fc37 	bl	8007ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000370 	.word	0x20000370

0800568c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <SystemInit+0x20>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	4a05      	ldr	r2, [pc, #20]	@ (80056ac <SystemInit+0x20>)
 8005698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800569c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80056c0:	4b15      	ldr	r3, [pc, #84]	@ (8005718 <MX_TIM7_Init+0x68>)
 80056c2:	4a16      	ldr	r2, [pc, #88]	@ (800571c <MX_TIM7_Init+0x6c>)
 80056c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 80056c6:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <MX_TIM7_Init+0x68>)
 80056c8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80056cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ce:	4b12      	ldr	r3, [pc, #72]	@ (8005718 <MX_TIM7_Init+0x68>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80056d4:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <MX_TIM7_Init+0x68>)
 80056d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005718 <MX_TIM7_Init+0x68>)
 80056de:	2200      	movs	r2, #0
 80056e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80056e2:	480d      	ldr	r0, [pc, #52]	@ (8005718 <MX_TIM7_Init+0x68>)
 80056e4:	f002 fb58 	bl	8007d98 <HAL_TIM_Base_Init>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80056ee:	f7ff f857 	bl	80047a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4806      	ldr	r0, [pc, #24]	@ (8005718 <MX_TIM7_Init+0x68>)
 8005700:	f002 fd96 	bl	8008230 <HAL_TIMEx_MasterConfigSynchronization>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800570a:	f7ff f849 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000370 	.word	0x20000370
 800571c:	40001400 	.word	0x40001400

08005720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a0d      	ldr	r2, [pc, #52]	@ (8005764 <HAL_TIM_Base_MspInit+0x44>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d113      	bne.n	800575a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <HAL_TIM_Base_MspInit+0x48>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	4a0c      	ldr	r2, [pc, #48]	@ (8005768 <HAL_TIM_Base_MspInit+0x48>)
 8005738:	f043 0320 	orr.w	r3, r3, #32
 800573c:	6593      	str	r3, [r2, #88]	@ 0x58
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <HAL_TIM_Base_MspInit+0x48>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800574a:	2200      	movs	r2, #0
 800574c:	2100      	movs	r1, #0
 800574e:	2037      	movs	r0, #55	@ 0x37
 8005750:	f000 fa15 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005754:	2037      	movs	r0, #55	@ 0x37
 8005756:	f000 fa2e 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40001400 	.word	0x40001400
 8005768:	40021000 	.word	0x40021000

0800576c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005770:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005772:	4a15      	ldr	r2, [pc, #84]	@ (80057c8 <MX_USART1_UART_Init+0x5c>)
 8005774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005776:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800577c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b0f      	ldr	r3, [pc, #60]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800578a:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057a2:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057ae:	4805      	ldr	r0, [pc, #20]	@ (80057c4 <MX_USART1_UART_Init+0x58>)
 80057b0:	f002 fdc2 	bl	8008338 <HAL_UART_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80057ba:	f7fe fff1 	bl	80047a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200003bc 	.word	0x200003bc
 80057c8:	40013800 	.word	0x40013800

080057cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b09e      	sub	sp, #120	@ 0x78
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	2254      	movs	r2, #84	@ 0x54
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f003 fe32 	bl	8009456 <memset>
  if(uartHandle->Instance==USART1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a23      	ldr	r2, [pc, #140]	@ (8005884 <HAL_UART_MspInit+0xb8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d13f      	bne.n	800587c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80057fc:	2301      	movs	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005800:	2300      	movs	r3, #0
 8005802:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005804:	f107 0310 	add.w	r3, r7, #16
 8005808:	4618      	mov	r0, r3
 800580a:	f001 faa3 	bl	8006d54 <HAL_RCCEx_PeriphCLKConfig>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005814:	f7fe ffc4 	bl	80047a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005818:	4b1b      	ldr	r3, [pc, #108]	@ (8005888 <HAL_UART_MspInit+0xbc>)
 800581a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581c:	4a1a      	ldr	r2, [pc, #104]	@ (8005888 <HAL_UART_MspInit+0xbc>)
 800581e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005822:	6613      	str	r3, [r2, #96]	@ 0x60
 8005824:	4b18      	ldr	r3, [pc, #96]	@ (8005888 <HAL_UART_MspInit+0xbc>)
 8005826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005830:	4b15      	ldr	r3, [pc, #84]	@ (8005888 <HAL_UART_MspInit+0xbc>)
 8005832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005834:	4a14      	ldr	r2, [pc, #80]	@ (8005888 <HAL_UART_MspInit+0xbc>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <HAL_UART_MspInit+0xbc>)
 800583e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005848:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800584c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584e:	2302      	movs	r3, #2
 8005850:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005852:	2300      	movs	r3, #0
 8005854:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005856:	2303      	movs	r3, #3
 8005858:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800585a:	2307      	movs	r3, #7
 800585c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005868:	f000 fa3e 	bl	8005ce8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800586c:	2200      	movs	r2, #0
 800586e:	2100      	movs	r1, #0
 8005870:	2025      	movs	r0, #37	@ 0x25
 8005872:	f000 f984 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005876:	2025      	movs	r0, #37	@ 0x25
 8005878:	f000 f99d 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800587c:	bf00      	nop
 800587e:	3778      	adds	r7, #120	@ 0x78
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40013800 	.word	0x40013800
 8005888:	40021000 	.word	0x40021000

0800588c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800588c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005890:	f7ff fefc 	bl	800568c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005894:	480c      	ldr	r0, [pc, #48]	@ (80058c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005896:	490d      	ldr	r1, [pc, #52]	@ (80058cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005898:	4a0d      	ldr	r2, [pc, #52]	@ (80058d0 <LoopForever+0xe>)
  movs r3, #0
 800589a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800589c:	e002      	b.n	80058a4 <LoopCopyDataInit>

0800589e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800589e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058a2:	3304      	adds	r3, #4

080058a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058a8:	d3f9      	bcc.n	800589e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058aa:	4a0a      	ldr	r2, [pc, #40]	@ (80058d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058ac:	4c0a      	ldr	r4, [pc, #40]	@ (80058d8 <LoopForever+0x16>)
  movs r3, #0
 80058ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b0:	e001      	b.n	80058b6 <LoopFillZerobss>

080058b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058b4:	3204      	adds	r2, #4

080058b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058b8:	d3fb      	bcc.n	80058b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058ba:	f003 fdd5 	bl	8009468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058be:	f7fe feed 	bl	800469c <main>

080058c2 <LoopForever>:

LoopForever:
    b LoopForever
 80058c2:	e7fe      	b.n	80058c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80058c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80058c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058cc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80058d0:	0800a888 	.word	0x0800a888
  ldr r2, =_sbss
 80058d4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80058d8:	20000448 	.word	0x20000448

080058dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058dc:	e7fe      	b.n	80058dc <ADC1_IRQHandler>

080058de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058e8:	2003      	movs	r0, #3
 80058ea:	f000 f93d 	bl	8005b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058ee:	200f      	movs	r0, #15
 80058f0:	f000 f80e 	bl	8005910 <HAL_InitTick>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	71fb      	strb	r3, [r7, #7]
 80058fe:	e001      	b.n	8005904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005900:	f7ff fe42 	bl	8005588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005904:	79fb      	ldrb	r3, [r7, #7]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800591c:	4b17      	ldr	r3, [pc, #92]	@ (800597c <HAL_InitTick+0x6c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d023      	beq.n	800596c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005924:	4b16      	ldr	r3, [pc, #88]	@ (8005980 <HAL_InitTick+0x70>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b14      	ldr	r3, [pc, #80]	@ (800597c <HAL_InitTick+0x6c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005932:	fbb3 f3f1 	udiv	r3, r3, r1
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f949 	bl	8005bd2 <HAL_SYSTICK_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b0f      	cmp	r3, #15
 800594a:	d809      	bhi.n	8005960 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800594c:	2200      	movs	r2, #0
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	f000 f913 	bl	8005b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005958:	4a0a      	ldr	r2, [pc, #40]	@ (8005984 <HAL_InitTick+0x74>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e007      	b.n	8005970 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e004      	b.n	8005970 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
 800596a:	e001      	b.n	8005970 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000050 	.word	0x20000050
 8005980:	20000048 	.word	0x20000048
 8005984:	2000004c 	.word	0x2000004c

08005988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_IncTick+0x20>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <HAL_IncTick+0x24>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4413      	add	r3, r2
 8005998:	4a04      	ldr	r2, [pc, #16]	@ (80059ac <HAL_IncTick+0x24>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000050 	.word	0x20000050
 80059ac:	20000444 	.word	0x20000444

080059b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return uwTick;
 80059b4:	4b03      	ldr	r3, [pc, #12]	@ (80059c4 <HAL_GetTick+0x14>)
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000444 	.word	0x20000444

080059c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <__NVIC_SetPriorityGrouping+0x44>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059e4:	4013      	ands	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059fa:	4a04      	ldr	r2, [pc, #16]	@ (8005a0c <__NVIC_SetPriorityGrouping+0x44>)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	60d3      	str	r3, [r2, #12]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a14:	4b04      	ldr	r3, [pc, #16]	@ (8005a28 <__NVIC_GetPriorityGrouping+0x18>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	f003 0307 	and.w	r3, r3, #7
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	db0b      	blt.n	8005a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	f003 021f 	and.w	r2, r3, #31
 8005a44:	4907      	ldr	r1, [pc, #28]	@ (8005a64 <__NVIC_EnableIRQ+0x38>)
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000e100 	.word	0xe000e100

08005a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6039      	str	r1, [r7, #0]
 8005a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	db0a      	blt.n	8005a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	490c      	ldr	r1, [pc, #48]	@ (8005ab4 <__NVIC_SetPriority+0x4c>)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	0112      	lsls	r2, r2, #4
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a90:	e00a      	b.n	8005aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4908      	ldr	r1, [pc, #32]	@ (8005ab8 <__NVIC_SetPriority+0x50>)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	0112      	lsls	r2, r2, #4
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	761a      	strb	r2, [r3, #24]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	e000e100 	.word	0xe000e100
 8005ab8:	e000ed00 	.word	0xe000ed00

08005abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	@ 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f1c3 0307 	rsb	r3, r3, #7
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	bf28      	it	cs
 8005ada:	2304      	movcs	r3, #4
 8005adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d902      	bls.n	8005aec <NVIC_EncodePriority+0x30>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3b03      	subs	r3, #3
 8005aea:	e000      	b.n	8005aee <NVIC_EncodePriority+0x32>
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43da      	mvns	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	401a      	ands	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b04:	f04f 31ff 	mov.w	r1, #4294967295
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	43d9      	mvns	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b14:	4313      	orrs	r3, r2
         );
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3724      	adds	r7, #36	@ 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b34:	d301      	bcc.n	8005b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b36:	2301      	movs	r3, #1
 8005b38:	e00f      	b.n	8005b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b64 <SysTick_Config+0x40>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b42:	210f      	movs	r1, #15
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	f7ff ff8e 	bl	8005a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b4c:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <SysTick_Config+0x40>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b52:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <SysTick_Config+0x40>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	e000e010 	.word	0xe000e010

08005b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ff29 	bl	80059c8 <__NVIC_SetPriorityGrouping>
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	4603      	mov	r3, r0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b90:	f7ff ff3e 	bl	8005a10 <__NVIC_GetPriorityGrouping>
 8005b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7ff ff8e 	bl	8005abc <NVIC_EncodePriority>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ff5d 	bl	8005a68 <__NVIC_SetPriority>
}
 8005bae:	bf00      	nop
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff ff31 	bl	8005a2c <__NVIC_EnableIRQ>
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff ffa2 	bl	8005b24 <SysTick_Config>
 8005be0:	4603      	mov	r3, r0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d008      	beq.n	8005c14 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2204      	movs	r2, #4
 8005c06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e022      	b.n	8005c5a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 020e 	bic.w	r2, r2, #14
 8005c22:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c38:	f003 021c 	and.w	r2, r3, #28
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	2101      	movs	r1, #1
 8005c42:	fa01 f202 	lsl.w	r2, r1, r2
 8005c46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d005      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e029      	b.n	8005cde <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 020e 	bic.w	r2, r2, #14
 8005c98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cae:	f003 021c 	and.w	r2, r3, #28
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
    }
  }
  return status;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf6:	e148      	b.n	8005f8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 813a 	beq.w	8005f84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d005      	beq.n	8005d28 <HAL_GPIO_Init+0x40>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d130      	bne.n	8005d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	2203      	movs	r2, #3
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d5e:	2201      	movs	r2, #1
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0201 	and.w	r2, r3, #1
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d017      	beq.n	8005dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	2203      	movs	r2, #3
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4013      	ands	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d123      	bne.n	8005e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	08da      	lsrs	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3208      	adds	r2, #8
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	220f      	movs	r2, #15
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43db      	mvns	r3, r3
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	08da      	lsrs	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3208      	adds	r2, #8
 8005e14:	6939      	ldr	r1, [r7, #16]
 8005e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	2203      	movs	r2, #3
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 0203 	and.w	r2, r3, #3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8094 	beq.w	8005f84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e5c:	4b52      	ldr	r3, [pc, #328]	@ (8005fa8 <HAL_GPIO_Init+0x2c0>)
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e60:	4a51      	ldr	r2, [pc, #324]	@ (8005fa8 <HAL_GPIO_Init+0x2c0>)
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e68:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <HAL_GPIO_Init+0x2c0>)
 8005e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e74:	4a4d      	ldr	r2, [pc, #308]	@ (8005fac <HAL_GPIO_Init+0x2c4>)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	220f      	movs	r2, #15
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4013      	ands	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e9e:	d00d      	beq.n	8005ebc <HAL_GPIO_Init+0x1d4>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a43      	ldr	r2, [pc, #268]	@ (8005fb0 <HAL_GPIO_Init+0x2c8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <HAL_GPIO_Init+0x1d0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a42      	ldr	r2, [pc, #264]	@ (8005fb4 <HAL_GPIO_Init+0x2cc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <HAL_GPIO_Init+0x1cc>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e004      	b.n	8005ebe <HAL_GPIO_Init+0x1d6>
 8005eb4:	2307      	movs	r3, #7
 8005eb6:	e002      	b.n	8005ebe <HAL_GPIO_Init+0x1d6>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_GPIO_Init+0x1d6>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	f002 0203 	and.w	r2, r2, #3
 8005ec4:	0092      	lsls	r2, r2, #2
 8005ec6:	4093      	lsls	r3, r2
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ece:	4937      	ldr	r1, [pc, #220]	@ (8005fac <HAL_GPIO_Init+0x2c4>)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005edc:	4b36      	ldr	r3, [pc, #216]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f00:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f06:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4013      	ands	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f2a:	4a23      	ldr	r2, [pc, #140]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f30:	4b21      	ldr	r3, [pc, #132]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f54:	4a18      	ldr	r2, [pc, #96]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f5a:	4b17      	ldr	r3, [pc, #92]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4013      	ands	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005fb8 <HAL_GPIO_Init+0x2d0>)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3301      	adds	r3, #1
 8005f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f47f aeaf 	bne.w	8005cf8 <HAL_GPIO_Init+0x10>
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	48000400 	.word	0x48000400
 8005fb4:	48000800 	.word	0x48000800
 8005fb8:	40010400 	.word	0x40010400

08005fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fcc:	787b      	ldrb	r3, [r7, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fd8:	e002      	b.n	8005fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fda:	887a      	ldrh	r2, [r7, #2]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ff6:	4b08      	ldr	r3, [pc, #32]	@ (8006018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d006      	beq.n	8006010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006002:	4a05      	ldr	r2, [pc, #20]	@ (8006018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fb f918 	bl	8001240 <HAL_GPIO_EXTI_Callback>
  }
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40010400 	.word	0x40010400

0800601c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006020:	4b04      	ldr	r3, [pc, #16]	@ (8006034 <HAL_PWREx_GetVoltageRange+0x18>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40007000 	.word	0x40007000

08006038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006046:	d130      	bne.n	80060aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006048:	4b23      	ldr	r3, [pc, #140]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006054:	d038      	beq.n	80060c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006056:	4b20      	ldr	r3, [pc, #128]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800605e:	4a1e      	ldr	r2, [pc, #120]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006060:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006066:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2232      	movs	r2, #50	@ 0x32
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	4a1b      	ldr	r2, [pc, #108]	@ (80060e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	0c9b      	lsrs	r3, r3, #18
 8006078:	3301      	adds	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800607c:	e002      	b.n	8006084 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3b01      	subs	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006084:	4b14      	ldr	r3, [pc, #80]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800608c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006090:	d102      	bne.n	8006098 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f2      	bne.n	800607e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006098:	4b0f      	ldr	r3, [pc, #60]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a4:	d110      	bne.n	80060c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e00f      	b.n	80060ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80060aa:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b6:	d007      	beq.n	80060c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060b8:	4b07      	ldr	r3, [pc, #28]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060c0:	4a05      	ldr	r2, [pc, #20]	@ (80060d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40007000 	.word	0x40007000
 80060dc:	20000048 	.word	0x20000048
 80060e0:	431bde83 	.word	0x431bde83

080060e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f000 bc02 	b.w	80068fc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f8:	4b96      	ldr	r3, [pc, #600]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 030c 	and.w	r3, r3, #12
 8006100:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006102:	4b94      	ldr	r3, [pc, #592]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80e4 	beq.w	80062e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <HAL_RCC_OscConfig+0x4c>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0c      	cmp	r3, #12
 8006124:	f040 808b 	bne.w	800623e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b01      	cmp	r3, #1
 800612c:	f040 8087 	bne.w	800623e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006130:	4b88      	ldr	r3, [pc, #544]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_OscConfig+0x64>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e3d9      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	4b81      	ldr	r3, [pc, #516]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <HAL_RCC_OscConfig+0x7e>
 8006158:	4b7e      	ldr	r3, [pc, #504]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006160:	e005      	b.n	800616e <HAL_RCC_OscConfig+0x8a>
 8006162:	4b7c      	ldr	r3, [pc, #496]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800616e:	4293      	cmp	r3, r2
 8006170:	d223      	bcs.n	80061ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fd8c 	bl	8006c94 <RCC_SetFlashLatencyFromMSIRange>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e3ba      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006186:	4b73      	ldr	r3, [pc, #460]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a72      	ldr	r2, [pc, #456]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800618c:	f043 0308 	orr.w	r3, r3, #8
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	4b70      	ldr	r3, [pc, #448]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	496d      	ldr	r1, [pc, #436]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	4968      	ldr	r1, [pc, #416]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	604b      	str	r3, [r1, #4]
 80061b8:	e025      	b.n	8006206 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061ba:	4b66      	ldr	r3, [pc, #408]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a65      	ldr	r2, [pc, #404]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061c0:	f043 0308 	orr.w	r3, r3, #8
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b63      	ldr	r3, [pc, #396]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	4960      	ldr	r1, [pc, #384]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	495b      	ldr	r1, [pc, #364]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fd4c 	bl	8006c94 <RCC_SetFlashLatencyFromMSIRange>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e37a      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006206:	f000 fc81 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 800620a:	4602      	mov	r2, r0
 800620c:	4b51      	ldr	r3, [pc, #324]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	4950      	ldr	r1, [pc, #320]	@ (8006358 <HAL_RCC_OscConfig+0x274>)
 8006218:	5ccb      	ldrb	r3, [r1, r3]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	4a4e      	ldr	r2, [pc, #312]	@ (800635c <HAL_RCC_OscConfig+0x278>)
 8006224:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006226:	4b4e      	ldr	r3, [pc, #312]	@ (8006360 <HAL_RCC_OscConfig+0x27c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fb70 	bl	8005910 <HAL_InitTick>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d052      	beq.n	80062e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	e35e      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d032      	beq.n	80062ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006246:	4b43      	ldr	r3, [pc, #268]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a42      	ldr	r2, [pc, #264]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006252:	f7ff fbad 	bl	80059b0 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800625a:	f7ff fba9 	bl	80059b0 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e347      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006278:	4b36      	ldr	r3, [pc, #216]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a35      	ldr	r2, [pc, #212]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800627e:	f043 0308 	orr.w	r3, r3, #8
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	4b33      	ldr	r3, [pc, #204]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4930      	ldr	r1, [pc, #192]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006292:	4313      	orrs	r3, r2
 8006294:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006296:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	492b      	ldr	r1, [pc, #172]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	604b      	str	r3, [r1, #4]
 80062aa:	e01a      	b.n	80062e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062ac:	4b29      	ldr	r3, [pc, #164]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a28      	ldr	r2, [pc, #160]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062b8:	f7ff fb7a 	bl	80059b0 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062c0:	f7ff fb76 	bl	80059b0 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e314      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062d2:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x1dc>
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d073      	beq.n	80063d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_OscConfig+0x21c>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d10e      	bne.n	8006318 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d10b      	bne.n	8006318 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006300:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d063      	beq.n	80063d4 <HAL_RCC_OscConfig+0x2f0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d15f      	bne.n	80063d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e2f1      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006320:	d106      	bne.n	8006330 <HAL_RCC_OscConfig+0x24c>
 8006322:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0b      	ldr	r2, [pc, #44]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e025      	b.n	800637c <HAL_RCC_OscConfig+0x298>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006338:	d114      	bne.n	8006364 <HAL_RCC_OscConfig+0x280>
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a05      	ldr	r2, [pc, #20]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b03      	ldr	r3, [pc, #12]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a02      	ldr	r2, [pc, #8]	@ (8006354 <HAL_RCC_OscConfig+0x270>)
 800634c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e013      	b.n	800637c <HAL_RCC_OscConfig+0x298>
 8006354:	40021000 	.word	0x40021000
 8006358:	0800a830 	.word	0x0800a830
 800635c:	20000048 	.word	0x20000048
 8006360:	2000004c 	.word	0x2000004c
 8006364:	4ba0      	ldr	r3, [pc, #640]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a9f      	ldr	r2, [pc, #636]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800636a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4b9d      	ldr	r3, [pc, #628]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a9c      	ldr	r2, [pc, #624]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800637a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7ff fb14 	bl	80059b0 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800638c:	f7ff fb10 	bl	80059b0 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	@ 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e2ae      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800639e:	4b92      	ldr	r3, [pc, #584]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x2a8>
 80063aa:	e014      	b.n	80063d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7ff fb00 	bl	80059b0 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b4:	f7ff fafc 	bl	80059b0 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	@ 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e29a      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063c6:	4b88      	ldr	r3, [pc, #544]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x2d0>
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d060      	beq.n	80064a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x310>
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d119      	bne.n	8006422 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d116      	bne.n	8006422 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f4:	4b7c      	ldr	r3, [pc, #496]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_OscConfig+0x328>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e277      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640c:	4b76      	ldr	r3, [pc, #472]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	061b      	lsls	r3, r3, #24
 800641a:	4973      	ldr	r1, [pc, #460]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800641c:	4313      	orrs	r3, r2
 800641e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006420:	e040      	b.n	80064a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d023      	beq.n	8006472 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800642a:	4b6f      	ldr	r3, [pc, #444]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6e      	ldr	r2, [pc, #440]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006436:	f7ff fabb 	bl	80059b0 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800643e:	f7ff fab7 	bl	80059b0 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e255      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006450:	4b65      	ldr	r3, [pc, #404]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645c:	4b62      	ldr	r3, [pc, #392]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	061b      	lsls	r3, r3, #24
 800646a:	495f      	ldr	r1, [pc, #380]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800646c:	4313      	orrs	r3, r2
 800646e:	604b      	str	r3, [r1, #4]
 8006470:	e018      	b.n	80064a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006472:	4b5d      	ldr	r3, [pc, #372]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a5c      	ldr	r2, [pc, #368]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800647c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7ff fa97 	bl	80059b0 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006486:	f7ff fa93 	bl	80059b0 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e231      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006498:	4b53      	ldr	r3, [pc, #332]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d03c      	beq.n	800652a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01c      	beq.n	80064f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b8:	4b4b      	ldr	r3, [pc, #300]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80064ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064be:	4a4a      	ldr	r2, [pc, #296]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7ff fa72 	bl	80059b0 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d0:	f7ff fa6e 	bl	80059b0 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e20c      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064e2:	4b41      	ldr	r3, [pc, #260]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80064e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0ef      	beq.n	80064d0 <HAL_RCC_OscConfig+0x3ec>
 80064f0:	e01b      	b.n	800652a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064f2:	4b3d      	ldr	r3, [pc, #244]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80064f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064f8:	4a3b      	ldr	r2, [pc, #236]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7ff fa55 	bl	80059b0 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650a:	f7ff fa51 	bl	80059b0 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e1ef      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800651c:	4b32      	ldr	r3, [pc, #200]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1ef      	bne.n	800650a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a6 	beq.w	8006684 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006538:	2300      	movs	r3, #0
 800653a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800653c:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10d      	bne.n	8006564 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006548:	4b27      	ldr	r3, [pc, #156]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800654a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654c:	4a26      	ldr	r2, [pc, #152]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 800654e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006552:	6593      	str	r3, [r2, #88]	@ 0x58
 8006554:	4b24      	ldr	r3, [pc, #144]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 8006556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006560:	2301      	movs	r3, #1
 8006562:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006564:	4b21      	ldr	r3, [pc, #132]	@ (80065ec <HAL_RCC_OscConfig+0x508>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d118      	bne.n	80065a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006570:	4b1e      	ldr	r3, [pc, #120]	@ (80065ec <HAL_RCC_OscConfig+0x508>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <HAL_RCC_OscConfig+0x508>)
 8006576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800657a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800657c:	f7ff fa18 	bl	80059b0 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006584:	f7ff fa14 	bl	80059b0 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e1b2      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006596:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <HAL_RCC_OscConfig+0x508>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d108      	bne.n	80065bc <HAL_RCC_OscConfig+0x4d8>
 80065aa:	4b0f      	ldr	r3, [pc, #60]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b0:	4a0d      	ldr	r2, [pc, #52]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065ba:	e029      	b.n	8006610 <HAL_RCC_OscConfig+0x52c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b05      	cmp	r3, #5
 80065c2:	d115      	bne.n	80065f0 <HAL_RCC_OscConfig+0x50c>
 80065c4:	4b08      	ldr	r3, [pc, #32]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ca:	4a07      	ldr	r2, [pc, #28]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80065cc:	f043 0304 	orr.w	r3, r3, #4
 80065d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065d4:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065da:	4a03      	ldr	r2, [pc, #12]	@ (80065e8 <HAL_RCC_OscConfig+0x504>)
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065e4:	e014      	b.n	8006610 <HAL_RCC_OscConfig+0x52c>
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40007000 	.word	0x40007000
 80065f0:	4b9a      	ldr	r3, [pc, #616]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f6:	4a99      	ldr	r2, [pc, #612]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006600:	4b96      	ldr	r3, [pc, #600]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006606:	4a95      	ldr	r2, [pc, #596]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006608:	f023 0304 	bic.w	r3, r3, #4
 800660c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d016      	beq.n	8006646 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7ff f9ca 	bl	80059b0 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800661e:	e00a      	b.n	8006636 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006620:	f7ff f9c6 	bl	80059b0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e162      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006636:	4b89      	ldr	r3, [pc, #548]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0ed      	beq.n	8006620 <HAL_RCC_OscConfig+0x53c>
 8006644:	e015      	b.n	8006672 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7ff f9b3 	bl	80059b0 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800664c:	e00a      	b.n	8006664 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7ff f9af 	bl	80059b0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e14b      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006664:	4b7d      	ldr	r3, [pc, #500]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ed      	bne.n	800664e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006672:	7ffb      	ldrb	r3, [r7, #31]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006678:	4b78      	ldr	r3, [pc, #480]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667c:	4a77      	ldr	r2, [pc, #476]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800667e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006682:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d03c      	beq.n	800670a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01c      	beq.n	80066d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006698:	4b70      	ldr	r3, [pc, #448]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800669a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800669e:	4a6f      	ldr	r2, [pc, #444]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7ff f982 	bl	80059b0 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066b0:	f7ff f97e 	bl	80059b0 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e11c      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066c2:	4b66      	ldr	r3, [pc, #408]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80066c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ef      	beq.n	80066b0 <HAL_RCC_OscConfig+0x5cc>
 80066d0:	e01b      	b.n	800670a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066d2:	4b62      	ldr	r3, [pc, #392]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80066d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066d8:	4a60      	ldr	r2, [pc, #384]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7ff f965 	bl	80059b0 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ea:	f7ff f961 	bl	80059b0 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0ff      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066fc:	4b57      	ldr	r3, [pc, #348]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80066fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ef      	bne.n	80066ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80f3 	beq.w	80068fa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	2b02      	cmp	r3, #2
 800671a:	f040 80c9 	bne.w	80068b0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800671e:	4b4f      	ldr	r3, [pc, #316]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f003 0203 	and.w	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672e:	429a      	cmp	r2, r3
 8006730:	d12c      	bne.n	800678c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673c:	3b01      	subs	r3, #1
 800673e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d123      	bne.n	800678c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006750:	429a      	cmp	r2, r3
 8006752:	d11b      	bne.n	800678c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d113      	bne.n	800678c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	3b01      	subs	r3, #1
 8006772:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006774:	429a      	cmp	r2, r3
 8006776:	d109      	bne.n	800678c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	3b01      	subs	r3, #1
 8006786:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d06b      	beq.n	8006864 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b0c      	cmp	r3, #12
 8006790:	d062      	beq.n	8006858 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006792:	4b32      	ldr	r3, [pc, #200]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0ac      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067a2:	4b2e      	ldr	r3, [pc, #184]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2d      	ldr	r2, [pc, #180]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80067a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067ae:	f7ff f8ff 	bl	80059b0 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b6:	f7ff f8fb 	bl	80059b0 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e099      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c8:	4b24      	ldr	r3, [pc, #144]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f0      	bne.n	80067b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067d4:	4b21      	ldr	r3, [pc, #132]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	4b21      	ldr	r3, [pc, #132]	@ (8006860 <HAL_RCC_OscConfig+0x77c>)
 80067da:	4013      	ands	r3, r2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067e4:	3a01      	subs	r2, #1
 80067e6:	0112      	lsls	r2, r2, #4
 80067e8:	4311      	orrs	r1, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067ee:	0212      	lsls	r2, r2, #8
 80067f0:	4311      	orrs	r1, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067f6:	0852      	lsrs	r2, r2, #1
 80067f8:	3a01      	subs	r2, #1
 80067fa:	0552      	lsls	r2, r2, #21
 80067fc:	4311      	orrs	r1, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006802:	0852      	lsrs	r2, r2, #1
 8006804:	3a01      	subs	r2, #1
 8006806:	0652      	lsls	r2, r2, #25
 8006808:	4311      	orrs	r1, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800680e:	06d2      	lsls	r2, r2, #27
 8006810:	430a      	orrs	r2, r1
 8006812:	4912      	ldr	r1, [pc, #72]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006814:	4313      	orrs	r3, r2
 8006816:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006818:	4b10      	ldr	r3, [pc, #64]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0f      	ldr	r2, [pc, #60]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800681e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006822:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006824:	4b0d      	ldr	r3, [pc, #52]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a0c      	ldr	r2, [pc, #48]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800682a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800682e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006830:	f7ff f8be 	bl	80059b0 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006838:	f7ff f8ba 	bl	80059b0 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e058      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800684a:	4b04      	ldr	r3, [pc, #16]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0f0      	beq.n	8006838 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006856:	e050      	b.n	80068fa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e04f      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
 800685c:	40021000 	.word	0x40021000
 8006860:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d144      	bne.n	80068fa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006870:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a23      	ldr	r2, [pc, #140]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 8006876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800687a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800687c:	4b21      	ldr	r3, [pc, #132]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4a20      	ldr	r2, [pc, #128]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 8006882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006888:	f7ff f892 	bl	80059b0 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006890:	f7ff f88e 	bl	80059b0 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e02c      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068a2:	4b18      	ldr	r3, [pc, #96]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x7ac>
 80068ae:	e024      	b.n	80068fa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d01f      	beq.n	80068f6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b6:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a12      	ldr	r2, [pc, #72]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 80068bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c2:	f7ff f875 	bl	80059b0 <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ca:	f7ff f871 	bl	80059b0 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e00f      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068dc:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f0      	bne.n	80068ca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80068e8:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	4905      	ldr	r1, [pc, #20]	@ (8006904 <HAL_RCC_OscConfig+0x820>)
 80068ee:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <HAL_RCC_OscConfig+0x824>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60cb      	str	r3, [r1, #12]
 80068f4:	e001      	b.n	80068fa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40021000 	.word	0x40021000
 8006908:	feeefffc 	.word	0xfeeefffc

0800690c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0e7      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006920:	4b75      	ldr	r3, [pc, #468]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d910      	bls.n	8006950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b72      	ldr	r3, [pc, #456]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 0207 	bic.w	r2, r3, #7
 8006936:	4970      	ldr	r1, [pc, #448]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800693e:	4b6e      	ldr	r3, [pc, #440]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d001      	beq.n	8006950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0cf      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	4b66      	ldr	r3, [pc, #408]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006968:	429a      	cmp	r2, r3
 800696a:	d908      	bls.n	800697e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800696c:	4b63      	ldr	r3, [pc, #396]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4960      	ldr	r1, [pc, #384]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 800697a:	4313      	orrs	r3, r2
 800697c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d04c      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b03      	cmp	r3, #3
 8006990:	d107      	bne.n	80069a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006992:	4b5a      	ldr	r3, [pc, #360]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d121      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e0a6      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069aa:	4b54      	ldr	r3, [pc, #336]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d115      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e09a      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d107      	bne.n	80069d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069c2:	4b4e      	ldr	r3, [pc, #312]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e08e      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069d2:	4b4a      	ldr	r3, [pc, #296]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e086      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069e2:	4b46      	ldr	r3, [pc, #280]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 0203 	bic.w	r2, r3, #3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	4943      	ldr	r1, [pc, #268]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f4:	f7fe ffdc 	bl	80059b0 <HAL_GetTick>
 80069f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069fc:	f7fe ffd8 	bl	80059b0 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e06e      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a12:	4b3a      	ldr	r3, [pc, #232]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 020c 	and.w	r2, r3, #12
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d1eb      	bne.n	80069fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	4b31      	ldr	r3, [pc, #196]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d208      	bcs.n	8006a52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a40:	4b2e      	ldr	r3, [pc, #184]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	492b      	ldr	r1, [pc, #172]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a52:	4b29      	ldr	r3, [pc, #164]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d210      	bcs.n	8006a82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a60:	4b25      	ldr	r3, [pc, #148]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f023 0207 	bic.w	r2, r3, #7
 8006a68:	4923      	ldr	r1, [pc, #140]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a70:	4b21      	ldr	r3, [pc, #132]	@ (8006af8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d001      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e036      	b.n	8006af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	4918      	ldr	r1, [pc, #96]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aac:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4910      	ldr	r1, [pc, #64]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ac0:	f000 f824 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <HAL_RCC_ClockConfig+0x1f0>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	490b      	ldr	r1, [pc, #44]	@ (8006b00 <HAL_RCC_ClockConfig+0x1f4>)
 8006ad2:	5ccb      	ldrb	r3, [r1, r3]
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	4a09      	ldr	r2, [pc, #36]	@ (8006b04 <HAL_RCC_ClockConfig+0x1f8>)
 8006ade:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ae0:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <HAL_RCC_ClockConfig+0x1fc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe ff13 	bl	8005910 <HAL_InitTick>
 8006aea:	4603      	mov	r3, r0
 8006aec:	72fb      	strb	r3, [r7, #11]

  return status;
 8006aee:	7afb      	ldrb	r3, [r7, #11]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40022000 	.word	0x40022000
 8006afc:	40021000 	.word	0x40021000
 8006b00:	0800a830 	.word	0x0800a830
 8006b04:	20000048 	.word	0x20000048
 8006b08:	2000004c 	.word	0x2000004c

08006b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b089      	sub	sp, #36	@ 0x24
 8006b10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b24:	4b3b      	ldr	r3, [pc, #236]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_GetSysClockFreq+0x34>
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b0c      	cmp	r3, #12
 8006b38:	d121      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d11e      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b40:	4b34      	ldr	r3, [pc, #208]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b4c:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e005      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	091b      	lsrs	r3, r3, #4
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b68:	4a2b      	ldr	r2, [pc, #172]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b7c:	e00a      	b.n	8006b94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d102      	bne.n	8006b8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b84:	4b25      	ldr	r3, [pc, #148]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	e004      	b.n	8006b94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d101      	bne.n	8006b94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b90:	4b23      	ldr	r3, [pc, #140]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b0c      	cmp	r3, #12
 8006b98:	d134      	bne.n	8006c04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d003      	beq.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xac>
 8006bb0:	e005      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8006bb4:	617b      	str	r3, [r7, #20]
      break;
 8006bb6:	e005      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006bb8:	4b19      	ldr	r3, [pc, #100]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8006bba:	617b      	str	r3, [r7, #20]
      break;
 8006bbc:	e002      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	617b      	str	r3, [r7, #20]
      break;
 8006bc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bc4:	4b13      	ldr	r3, [pc, #76]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	3301      	adds	r3, #1
 8006bd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006bd2:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	fb03 f202 	mul.w	r2, r3, r2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bea:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	0e5b      	lsrs	r3, r3, #25
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c04:	69bb      	ldr	r3, [r7, #24]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3724      	adds	r7, #36	@ 0x24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40021000 	.word	0x40021000
 8006c18:	0800a848 	.word	0x0800a848
 8006c1c:	00f42400 	.word	0x00f42400
 8006c20:	007a1200 	.word	0x007a1200

08006c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c28:	4b03      	ldr	r3, [pc, #12]	@ (8006c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000048 	.word	0x20000048

08006c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c40:	f7ff fff0 	bl	8006c24 <HAL_RCC_GetHCLKFreq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	4904      	ldr	r1, [pc, #16]	@ (8006c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c52:	5ccb      	ldrb	r3, [r1, r3]
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40021000 	.word	0x40021000
 8006c64:	0800a840 	.word	0x0800a840

08006c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c6c:	f7ff ffda 	bl	8006c24 <HAL_RCC_GetHCLKFreq>
 8006c70:	4602      	mov	r2, r0
 8006c72:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	0adb      	lsrs	r3, r3, #11
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	4904      	ldr	r1, [pc, #16]	@ (8006c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c7e:	5ccb      	ldrb	r3, [r1, r3]
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	0800a840 	.word	0x0800a840

08006c94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006cac:	f7ff f9b6 	bl	800601c <HAL_PWREx_GetVoltageRange>
 8006cb0:	6178      	str	r0, [r7, #20]
 8006cb2:	e014      	b.n	8006cde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cb4:	4b25      	ldr	r3, [pc, #148]	@ (8006d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb8:	4a24      	ldr	r2, [pc, #144]	@ (8006d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cc0:	4b22      	ldr	r3, [pc, #136]	@ (8006d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ccc:	f7ff f9a6 	bl	800601c <HAL_PWREx_GetVoltageRange>
 8006cd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce4:	d10b      	bne.n	8006cfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b80      	cmp	r3, #128	@ 0x80
 8006cea:	d919      	bls.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2ba0      	cmp	r3, #160	@ 0xa0
 8006cf0:	d902      	bls.n	8006cf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e013      	b.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	e010      	b.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b80      	cmp	r3, #128	@ 0x80
 8006d02:	d902      	bls.n	8006d0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d04:	2303      	movs	r3, #3
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	e00a      	b.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b80      	cmp	r3, #128	@ 0x80
 8006d0e:	d102      	bne.n	8006d16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d10:	2302      	movs	r3, #2
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	e004      	b.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b70      	cmp	r3, #112	@ 0x70
 8006d1a:	d101      	bne.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d20:	4b0b      	ldr	r3, [pc, #44]	@ (8006d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 0207 	bic.w	r2, r3, #7
 8006d28:	4909      	ldr	r1, [pc, #36]	@ (8006d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d30:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d001      	beq.n	8006d42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	40022000 	.word	0x40022000

08006d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d60:	2300      	movs	r3, #0
 8006d62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d031      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d78:	d01a      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006d7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d7e:	d814      	bhi.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d88:	d10f      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d96:	e00c      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f9ce 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006da8:	e003      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	74fb      	strb	r3, [r7, #19]
      break;
 8006dae:	e000      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006db8:	4b51      	ldr	r3, [pc, #324]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc6:	494e      	ldr	r1, [pc, #312]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006dce:	e001      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd0:	7cfb      	ldrb	r3, [r7, #19]
 8006dd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 809e 	beq.w	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006de2:	2300      	movs	r3, #0
 8006de4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006de6:	4b46      	ldr	r3, [pc, #280]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfc:	4b40      	ldr	r3, [pc, #256]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e00:	4a3f      	ldr	r2, [pc, #252]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e08:	4b3d      	ldr	r3, [pc, #244]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e14:	2301      	movs	r3, #1
 8006e16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e18:	4b3a      	ldr	r3, [pc, #232]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a39      	ldr	r2, [pc, #228]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e24:	f7fe fdc4 	bl	80059b0 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e2a:	e009      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2c:	f7fe fdc0 	bl	80059b0 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d902      	bls.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	74fb      	strb	r3, [r7, #19]
        break;
 8006e3e:	e005      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e40:	4b30      	ldr	r3, [pc, #192]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0ef      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006e4c:	7cfb      	ldrb	r3, [r7, #19]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d15a      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e52:	4b2b      	ldr	r3, [pc, #172]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01e      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d019      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e6e:	4b24      	ldr	r3, [pc, #144]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e7a:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e80:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e90:	4a1b      	ldr	r2, [pc, #108]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e9a:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d016      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fe fd80 	bl	80059b0 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb2:	e00b      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb4:	f7fe fd7c 	bl	80059b0 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d902      	bls.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	74fb      	strb	r3, [r7, #19]
            break;
 8006eca:	e006      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0ec      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006eda:	7cfb      	ldrb	r3, [r7, #19]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10b      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ee0:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eee:	4904      	ldr	r1, [pc, #16]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ef6:	e009      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ef8:	7cfb      	ldrb	r3, [r7, #19]
 8006efa:	74bb      	strb	r3, [r7, #18]
 8006efc:	e006      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006efe:	bf00      	nop
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	7cfb      	ldrb	r3, [r7, #19]
 8006f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f0c:	7c7b      	ldrb	r3, [r7, #17]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d105      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f12:	4b8a      	ldr	r3, [pc, #552]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	4a89      	ldr	r2, [pc, #548]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f2a:	4b84      	ldr	r3, [pc, #528]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f30:	f023 0203 	bic.w	r2, r3, #3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	4980      	ldr	r1, [pc, #512]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f52:	f023 020c 	bic.w	r2, r3, #12
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	4978      	ldr	r1, [pc, #480]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f6e:	4b73      	ldr	r3, [pc, #460]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7c:	496f      	ldr	r1, [pc, #444]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f90:	4b6a      	ldr	r3, [pc, #424]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f96:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	4967      	ldr	r1, [pc, #412]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fb2:	4b62      	ldr	r3, [pc, #392]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc0:	495e      	ldr	r1, [pc, #376]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fd4:	4b59      	ldr	r3, [pc, #356]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	4956      	ldr	r1, [pc, #344]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ff6:	4b51      	ldr	r3, [pc, #324]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	494d      	ldr	r1, [pc, #308]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d028      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007018:	4b48      	ldr	r3, [pc, #288]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	4945      	ldr	r1, [pc, #276]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007036:	d106      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007038:	4b40      	ldr	r3, [pc, #256]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4a3f      	ldr	r2, [pc, #252]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800703e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007042:	60d3      	str	r3, [r2, #12]
 8007044:	e011      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800704e:	d10c      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3304      	adds	r3, #4
 8007054:	2101      	movs	r1, #1
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f872 	bl	8007140 <RCCEx_PLLSAI1_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007060:	7cfb      	ldrb	r3, [r7, #19]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d028      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007076:	4b31      	ldr	r3, [pc, #196]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007084:	492d      	ldr	r1, [pc, #180]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007094:	d106      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007096:	4b29      	ldr	r3, [pc, #164]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4a28      	ldr	r2, [pc, #160]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800709c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070a0:	60d3      	str	r3, [r2, #12]
 80070a2:	e011      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	2101      	movs	r1, #1
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 f843 	bl	8007140 <RCCEx_PLLSAI1_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070be:	7cfb      	ldrb	r3, [r7, #19]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80070c4:	7cfb      	ldrb	r3, [r7, #19]
 80070c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01c      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070d4:	4b19      	ldr	r3, [pc, #100]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e2:	4916      	ldr	r1, [pc, #88]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070f2:	d10c      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	2102      	movs	r1, #2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f820 	bl	8007140 <RCCEx_PLLSAI1_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007104:	7cfb      	ldrb	r3, [r7, #19]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800711a:	4b08      	ldr	r3, [pc, #32]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007120:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007128:	4904      	ldr	r1, [pc, #16]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007130:	7cbb      	ldrb	r3, [r7, #18]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000

08007140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800714e:	4b74      	ldr	r3, [pc, #464]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800715a:	4b71      	ldr	r3, [pc, #452]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0203 	and.w	r2, r3, #3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d10d      	bne.n	8007186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
       ||
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007172:	4b6b      	ldr	r3, [pc, #428]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	091b      	lsrs	r3, r3, #4
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
       ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d047      	beq.n	8007216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
 800718a:	e044      	b.n	8007216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d018      	beq.n	80071c6 <RCCEx_PLLSAI1_Config+0x86>
 8007194:	2b03      	cmp	r3, #3
 8007196:	d825      	bhi.n	80071e4 <RCCEx_PLLSAI1_Config+0xa4>
 8007198:	2b01      	cmp	r3, #1
 800719a:	d002      	beq.n	80071a2 <RCCEx_PLLSAI1_Config+0x62>
 800719c:	2b02      	cmp	r3, #2
 800719e:	d009      	beq.n	80071b4 <RCCEx_PLLSAI1_Config+0x74>
 80071a0:	e020      	b.n	80071e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071a2:	4b5f      	ldr	r3, [pc, #380]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d11d      	bne.n	80071ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071b2:	e01a      	b.n	80071ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071b4:	4b5a      	ldr	r3, [pc, #360]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d116      	bne.n	80071ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071c4:	e013      	b.n	80071ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071c6:	4b56      	ldr	r3, [pc, #344]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10f      	bne.n	80071f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071d2:	4b53      	ldr	r3, [pc, #332]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071e2:	e006      	b.n	80071f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
      break;
 80071e8:	e004      	b.n	80071f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071ea:	bf00      	nop
 80071ec:	e002      	b.n	80071f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071ee:	bf00      	nop
 80071f0:	e000      	b.n	80071f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10d      	bne.n	8007216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80071fa:	4b49      	ldr	r3, [pc, #292]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6819      	ldr	r1, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	3b01      	subs	r3, #1
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	430b      	orrs	r3, r1
 8007210:	4943      	ldr	r1, [pc, #268]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007212:	4313      	orrs	r3, r2
 8007214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d17c      	bne.n	8007316 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800721c:	4b40      	ldr	r3, [pc, #256]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a3f      	ldr	r2, [pc, #252]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007228:	f7fe fbc2 	bl	80059b0 <HAL_GetTick>
 800722c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800722e:	e009      	b.n	8007244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007230:	f7fe fbbe 	bl	80059b0 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d902      	bls.n	8007244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	73fb      	strb	r3, [r7, #15]
        break;
 8007242:	e005      	b.n	8007250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007244:	4b36      	ldr	r3, [pc, #216]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1ef      	bne.n	8007230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d15f      	bne.n	8007316 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d110      	bne.n	800727e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800725c:	4b30      	ldr	r3, [pc, #192]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007264:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6892      	ldr	r2, [r2, #8]
 800726c:	0211      	lsls	r1, r2, #8
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68d2      	ldr	r2, [r2, #12]
 8007272:	06d2      	lsls	r2, r2, #27
 8007274:	430a      	orrs	r2, r1
 8007276:	492a      	ldr	r1, [pc, #168]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007278:	4313      	orrs	r3, r2
 800727a:	610b      	str	r3, [r1, #16]
 800727c:	e027      	b.n	80072ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d112      	bne.n	80072aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007284:	4b26      	ldr	r3, [pc, #152]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800728c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6892      	ldr	r2, [r2, #8]
 8007294:	0211      	lsls	r1, r2, #8
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6912      	ldr	r2, [r2, #16]
 800729a:	0852      	lsrs	r2, r2, #1
 800729c:	3a01      	subs	r2, #1
 800729e:	0552      	lsls	r2, r2, #21
 80072a0:	430a      	orrs	r2, r1
 80072a2:	491f      	ldr	r1, [pc, #124]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
 80072a8:	e011      	b.n	80072ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80072b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6892      	ldr	r2, [r2, #8]
 80072ba:	0211      	lsls	r1, r2, #8
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6952      	ldr	r2, [r2, #20]
 80072c0:	0852      	lsrs	r2, r2, #1
 80072c2:	3a01      	subs	r2, #1
 80072c4:	0652      	lsls	r2, r2, #25
 80072c6:	430a      	orrs	r2, r1
 80072c8:	4915      	ldr	r1, [pc, #84]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072ce:	4b14      	ldr	r3, [pc, #80]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a13      	ldr	r2, [pc, #76]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072da:	f7fe fb69 	bl	80059b0 <HAL_GetTick>
 80072de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072e0:	e009      	b.n	80072f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072e2:	f7fe fb65 	bl	80059b0 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d902      	bls.n	80072f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	73fb      	strb	r3, [r7, #15]
          break;
 80072f4:	e005      	b.n	8007302 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0ef      	beq.n	80072e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	4903      	ldr	r1, [pc, #12]	@ (8007320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007312:	4313      	orrs	r3, r2
 8007314:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40021000 	.word	0x40021000

08007324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e095      	b.n	8007462 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007346:	d009      	beq.n	800735c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	61da      	str	r2, [r3, #28]
 800734e:	e005      	b.n	800735c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fe f8ba 	bl	80054f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800739c:	d902      	bls.n	80073a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e002      	b.n	80073aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80073b2:	d007      	beq.n	80073c4 <HAL_SPI_Init+0xa0>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073bc:	d002      	beq.n	80073c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	ea42 0103 	orr.w	r1, r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	f003 0204 	and.w	r2, r3, #4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007440:	ea42 0103 	orr.w	r1, r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b08a      	sub	sp, #40	@ 0x28
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007478:	2301      	movs	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800747c:	f7fe fa98 	bl	80059b0 <HAL_GetTick>
 8007480:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007488:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007490:	887b      	ldrh	r3, [r7, #2]
 8007492:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007494:	887b      	ldrh	r3, [r7, #2]
 8007496:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d00c      	beq.n	80074b8 <HAL_SPI_TransmitReceive+0x4e>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074a4:	d106      	bne.n	80074b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <HAL_SPI_TransmitReceive+0x4a>
 80074ae:	7ffb      	ldrb	r3, [r7, #31]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d001      	beq.n	80074b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
 80074b6:	e1f3      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x60>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x60>
 80074c4:	887b      	ldrh	r3, [r7, #2]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e1e8      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x72>
 80074d8:	2302      	movs	r3, #2
 80074da:	e1e1      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d003      	beq.n	80074f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2205      	movs	r2, #5
 80074f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	887a      	ldrh	r2, [r7, #2]
 8007510:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	887a      	ldrh	r2, [r7, #2]
 800751e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800753a:	d802      	bhi.n	8007542 <HAL_SPI_TransmitReceive+0xd8>
 800753c:	8abb      	ldrh	r3, [r7, #20]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d908      	bls.n	8007554 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	e007      	b.n	8007564 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756e:	2b40      	cmp	r3, #64	@ 0x40
 8007570:	d007      	beq.n	8007582 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800758a:	f240 8083 	bls.w	8007694 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_SPI_TransmitReceive+0x132>
 8007596:	8afb      	ldrh	r3, [r7, #22]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d16f      	bne.n	800767c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	881a      	ldrh	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	1c9a      	adds	r2, r3, #2
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075c0:	e05c      	b.n	800767c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d11b      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x19e>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x19e>
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d113      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e4:	881a      	ldrh	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	1c9a      	adds	r2, r3, #2
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b01      	cmp	r3, #1
 8007614:	d11c      	bne.n	8007650 <HAL_SPI_TransmitReceive+0x1e6>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d016      	beq.n	8007650 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762c:	b292      	uxth	r2, r2
 800762e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007634:	1c9a      	adds	r2, r3, #2
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800764c:	2301      	movs	r3, #1
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007650:	f7fe f9ae 	bl	80059b0 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765c:	429a      	cmp	r2, r3
 800765e:	d80d      	bhi.n	800767c <HAL_SPI_TransmitReceive+0x212>
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d009      	beq.n	800767c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e111      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d19d      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x158>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d197      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x158>
 8007692:	e0e5      	b.n	8007860 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_SPI_TransmitReceive+0x23a>
 800769c:	8afb      	ldrh	r3, [r7, #22]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	f040 80d1 	bne.w	8007846 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d912      	bls.n	80076d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	881a      	ldrh	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	1c9a      	adds	r2, r3, #2
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b02      	subs	r3, #2
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076d2:	e0b8      	b.n	8007846 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	330c      	adds	r3, #12
 80076de:	7812      	ldrb	r2, [r2, #0]
 80076e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fa:	e0a4      	b.n	8007846 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b02      	cmp	r3, #2
 8007708:	d134      	bne.n	8007774 <HAL_SPI_TransmitReceive+0x30a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02f      	beq.n	8007774 <HAL_SPI_TransmitReceive+0x30a>
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	2b01      	cmp	r3, #1
 8007718:	d12c      	bne.n	8007774 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d912      	bls.n	800774a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007728:	881a      	ldrh	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	1c9a      	adds	r2, r3, #2
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b02      	subs	r3, #2
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007748:	e012      	b.n	8007770 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	330c      	adds	r3, #12
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b01      	cmp	r3, #1
 8007780:	d148      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x3aa>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d042      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b01      	cmp	r3, #1
 8007798:	d923      	bls.n	80077e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a4:	b292      	uxth	r2, r2
 80077a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b02      	subs	r3, #2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d81f      	bhi.n	8007810 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077de:	605a      	str	r2, [r3, #4]
 80077e0:	e016      	b.n	8007810 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f103 020c 	add.w	r2, r3, #12
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	7812      	ldrb	r2, [r2, #0]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007810:	2301      	movs	r3, #1
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007814:	f7fe f8cc 	bl	80059b0 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	429a      	cmp	r2, r3
 8007822:	d803      	bhi.n	800782c <HAL_SPI_TransmitReceive+0x3c2>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d102      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x3c8>
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e02c      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	f47f af55 	bne.w	80076fc <HAL_SPI_TransmitReceive+0x292>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	f47f af4e 	bne.w	80076fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007860:	6a3a      	ldr	r2, [r7, #32]
 8007862:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fa51 	bl	8007d0c <SPI_EndRxTxTransaction>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e00e      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800789e:	2300      	movs	r3, #0
  }
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3728      	adds	r7, #40	@ 0x28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10e      	bne.n	80078e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
    return;
 80078e6:	e0ce      	b.n	8007a86 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d009      	beq.n	8007906 <HAL_SPI_IRQHandler+0x5e>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
    return;
 8007904:	e0bf      	b.n	8007a86 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <HAL_SPI_IRQHandler+0x7e>
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d105      	bne.n	8007926 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80b0 	beq.w	8007a86 <HAL_SPI_IRQHandler+0x1de>
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 80aa 	beq.w	8007a86 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d023      	beq.n	8007984 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b03      	cmp	r3, #3
 8007946:	d011      	beq.n	800796c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800794c:	f043 0204 	orr.w	r2, r3, #4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	e00b      	b.n	8007984 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	693b      	ldr	r3, [r7, #16]
        return;
 8007982:	e080      	b.n	8007a86 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d014      	beq.n	80079b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007992:	f043 0201 	orr.w	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00c      	beq.n	80079dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c6:	f043 0208 	orr.w	r2, r3, #8
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d04f      	beq.n	8007a84 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_SPI_IRQHandler+0x168>
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d034      	beq.n	8007a7a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0203 	bic.w	r2, r2, #3
 8007a1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d011      	beq.n	8007a4c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2c:	4a17      	ldr	r2, [pc, #92]	@ (8007a8c <HAL_SPI_IRQHandler+0x1e4>)
 8007a2e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe f916 	bl	8005c66 <HAL_DMA_Abort_IT>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d016      	beq.n	8007a82 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <HAL_SPI_IRQHandler+0x1e4>)
 8007a5a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fe f900 	bl	8005c66 <HAL_DMA_Abort_IT>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007a78:	e003      	b.n	8007a82 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f808 	bl	8007a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a80:	e000      	b.n	8007a84 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007a82:	bf00      	nop
    return;
 8007a84:	bf00      	nop
  }
}
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08007aa5 	.word	0x08007aa5

08007a90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff ffe5 	bl	8007a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ae0:	f7fd ff66 	bl	80059b0 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007af0:	f7fd ff5e 	bl	80059b0 <HAL_GetTick>
 8007af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007af6:	4b39      	ldr	r3, [pc, #228]	@ (8007bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	015b      	lsls	r3, r3, #5
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b06:	e054      	b.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d050      	beq.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b10:	f7fd ff4e 	bl	80059b0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d902      	bls.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d13d      	bne.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b3e:	d111      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b48:	d004      	beq.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b52:	d107      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6c:	d10f      	bne.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e017      	b.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	2300      	movne	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d19b      	bne.n	8007b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3720      	adds	r7, #32
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000048 	.word	0x20000048

08007be0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08a      	sub	sp, #40	@ 0x28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bf2:	f7fd fedd 	bl	80059b0 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	4413      	add	r3, r2
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007c02:	f7fd fed5 	bl	80059b0 <HAL_GetTick>
 8007c06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c10:	4b3d      	ldr	r3, [pc, #244]	@ (8007d08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	00da      	lsls	r2, r3, #3
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	0d1b      	lsrs	r3, r3, #20
 8007c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c22:	fb02 f303 	mul.w	r3, r2, r3
 8007c26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c28:	e060      	b.n	8007cec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c30:	d107      	bne.n	8007c42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d050      	beq.n	8007cec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c4a:	f7fd feb1 	bl	80059b0 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d902      	bls.n	8007c60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d13d      	bne.n	8007cdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c78:	d111      	bne.n	8007c9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c82:	d004      	beq.n	8007c8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8c:	d107      	bne.n	8007c9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca6:	d10f      	bne.n	8007cc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e010      	b.n	8007cfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d196      	bne.n	8007c2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	@ 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000048 	.word	0x20000048

08007d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f7ff ff5b 	bl	8007be0 <SPI_WaitFifoStateUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d34:	f043 0220 	orr.w	r2, r3, #32
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e027      	b.n	8007d90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	2180      	movs	r1, #128	@ 0x80
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff fec0 	bl	8007ad0 <SPI_WaitFlagStateUntilTimeout>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d5a:	f043 0220 	orr.w	r2, r3, #32
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e014      	b.n	8007d90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff ff34 	bl	8007be0 <SPI_WaitFifoStateUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d82:	f043 0220 	orr.w	r2, r3, #32
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e000      	b.n	8007d90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e049      	b.n	8007e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fd fcae 	bl	8005720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f000 f9ba 	bl	8008150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d001      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e03b      	b.n	8007ed8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a19      	ldr	r2, [pc, #100]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d009      	beq.n	8007e96 <HAL_TIM_Base_Start_IT+0x4e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8a:	d004      	beq.n	8007e96 <HAL_TIM_Base_Start_IT+0x4e>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d115      	bne.n	8007ec2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	4b13      	ldr	r3, [pc, #76]	@ (8007eec <HAL_TIM_Base_Start_IT+0xa4>)
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b06      	cmp	r3, #6
 8007ea6:	d015      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x8c>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eae:	d011      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec0:	e008      	b.n	8007ed4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	e000      	b.n	8007ed6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40014000 	.word	0x40014000
 8007eec:	00010007 	.word	0x00010007

08007ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d020      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01b      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0202 	mvn.w	r2, #2
 8007f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f8e9 	bl	8008112 <HAL_TIM_IC_CaptureCallback>
 8007f40:	e005      	b.n	8007f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8db 	bl	80080fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f8ec 	bl	8008126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d020      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01b      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0204 	mvn.w	r2, #4
 8007f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8c3 	bl	8008112 <HAL_TIM_IC_CaptureCallback>
 8007f8c:	e005      	b.n	8007f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f8b5 	bl	80080fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8c6 	bl	8008126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d020      	beq.n	8007fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01b      	beq.n	8007fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0208 	mvn.w	r2, #8
 8007fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f89d 	bl	8008112 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e005      	b.n	8007fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f88f 	bl	80080fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8a0 	bl	8008126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d020      	beq.n	8008038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01b      	beq.n	8008038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0210 	mvn.w	r2, #16
 8008008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2208      	movs	r2, #8
 800800e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f877 	bl	8008112 <HAL_TIM_IC_CaptureCallback>
 8008024:	e005      	b.n	8008032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f869 	bl	80080fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f87a 	bl	8008126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00c      	beq.n	800805c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0201 	mvn.w	r2, #1
 8008054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7f9 f9d0 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00c      	beq.n	800808a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f943 	bl	8008310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f93b 	bl	8008324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f834 	bl	800813a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f06f 0220 	mvn.w	r2, #32
 80080ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f903 	bl	80082fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a30      	ldr	r2, [pc, #192]	@ (8008224 <TIM_Base_SetConfig+0xd4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_Base_SetConfig+0x20>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816e:	d108      	bne.n	8008182 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a27      	ldr	r2, [pc, #156]	@ (8008224 <TIM_Base_SetConfig+0xd4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00b      	beq.n	80081a2 <TIM_Base_SetConfig+0x52>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008190:	d007      	beq.n	80081a2 <TIM_Base_SetConfig+0x52>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a24      	ldr	r2, [pc, #144]	@ (8008228 <TIM_Base_SetConfig+0xd8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_Base_SetConfig+0x52>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a23      	ldr	r2, [pc, #140]	@ (800822c <TIM_Base_SetConfig+0xdc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d108      	bne.n	80081b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a12      	ldr	r2, [pc, #72]	@ (8008224 <TIM_Base_SetConfig+0xd4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d007      	beq.n	80081f0 <TIM_Base_SetConfig+0xa0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a11      	ldr	r2, [pc, #68]	@ (8008228 <TIM_Base_SetConfig+0xd8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <TIM_Base_SetConfig+0xa0>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a10      	ldr	r2, [pc, #64]	@ (800822c <TIM_Base_SetConfig+0xdc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d103      	bne.n	80081f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b01      	cmp	r3, #1
 8008208:	d105      	bne.n	8008216 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f023 0201 	bic.w	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	611a      	str	r2, [r3, #16]
  }
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400

08008230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008244:	2302      	movs	r3, #2
 8008246:	e04f      	b.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a21      	ldr	r2, [pc, #132]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d108      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a14      	ldr	r2, [pc, #80]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d009      	beq.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b0:	d004      	beq.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a10      	ldr	r2, [pc, #64]	@ (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d10c      	bne.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40014000 	.word	0x40014000

080082fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e040      	b.n	80083cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fd fa36 	bl	80057cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2224      	movs	r2, #36	@ 0x24
 8008364:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0201 	bic.w	r2, r2, #1
 8008374:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fe04 	bl	8008f8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fbd5 	bl	8008b34 <UART_SetConfig>
 800838a:	4603      	mov	r3, r0
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e01b      	b.n	80083cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0201 	orr.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fe83 	bl	80090d0 <UART_CheckIdleState>
 80083ca:	4603      	mov	r3, r0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	@ 0x28
 80083d8:	af02      	add	r7, sp, #8
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d177      	bne.n	80084dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_UART_Transmit+0x24>
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e070      	b.n	80084de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2221      	movs	r2, #33	@ 0x21
 8008408:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800840a:	f7fd fad1 	bl	80059b0 <HAL_GetTick>
 800840e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	88fa      	ldrh	r2, [r7, #6]
 8008414:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	88fa      	ldrh	r2, [r7, #6]
 800841c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008428:	d108      	bne.n	800843c <HAL_UART_Transmit+0x68>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008432:	2300      	movs	r3, #0
 8008434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	e003      	b.n	8008444 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008444:	e02f      	b.n	80084a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2200      	movs	r2, #0
 800844e:	2180      	movs	r1, #128	@ 0x80
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 fee5 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e03b      	b.n	80084de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10b      	bne.n	8008484 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	881a      	ldrh	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008478:	b292      	uxth	r2, r2
 800847a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	3302      	adds	r3, #2
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	e007      	b.n	8008494 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	3301      	adds	r3, #1
 8008492:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1c9      	bne.n	8008446 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2200      	movs	r2, #0
 80084ba:	2140      	movs	r1, #64	@ 0x40
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 feaf 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e005      	b.n	80084de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e000      	b.n	80084de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b0ba      	sub	sp, #232	@ 0xe8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800850e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008512:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008516:	4013      	ands	r3, r2
 8008518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800851c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d115      	bne.n	8008550 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00f      	beq.n	8008550 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 82ca 	beq.w	8008ada <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
      }
      return;
 800854e:	e2c4      	b.n	8008ada <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8117 	beq.w	8008788 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800855a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800856a:	4b85      	ldr	r3, [pc, #532]	@ (8008780 <HAL_UART_IRQHandler+0x298>)
 800856c:	4013      	ands	r3, r2
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 810a 	beq.w	8008788 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d011      	beq.n	80085a4 <HAL_UART_IRQHandler+0xbc>
 8008580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2201      	movs	r2, #1
 8008592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800859a:	f043 0201 	orr.w	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_UART_IRQHandler+0xec>
 80085b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2202      	movs	r2, #2
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ca:	f043 0204 	orr.w	r2, r3, #4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d011      	beq.n	8008604 <HAL_UART_IRQHandler+0x11c>
 80085e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2204      	movs	r2, #4
 80085f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085fa:	f043 0202 	orr.w	r2, r3, #2
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d017      	beq.n	8008640 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d105      	bne.n	8008628 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800861c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008620:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2208      	movs	r2, #8
 800862e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008636:	f043 0208 	orr.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008648:	2b00      	cmp	r3, #0
 800864a:	d012      	beq.n	8008672 <HAL_UART_IRQHandler+0x18a>
 800864c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008668:	f043 0220 	orr.w	r2, r3, #32
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 8230 	beq.w	8008ade <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b40      	cmp	r3, #64	@ 0x40
 80086bc:	d005      	beq.n	80086ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d04f      	beq.n	800876a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fe15 	bl	80092fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d141      	bne.n	8008762 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800870a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800870e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1d9      	bne.n	80086de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872e:	2b00      	cmp	r3, #0
 8008730:	d013      	beq.n	800875a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008736:	4a13      	ldr	r2, [pc, #76]	@ (8008784 <HAL_UART_IRQHandler+0x29c>)
 8008738:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fa91 	bl	8005c66 <HAL_DMA_Abort_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d017      	beq.n	800877a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	e00f      	b.n	800877a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9d4 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	e00b      	b.n	800877a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f9d0 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008768:	e007      	b.n	800877a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9cc 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008778:	e1b1      	b.n	8008ade <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877a:	bf00      	nop
    return;
 800877c:	e1af      	b.n	8008ade <HAL_UART_IRQHandler+0x5f6>
 800877e:	bf00      	nop
 8008780:	04000120 	.word	0x04000120
 8008784:	080093c3 	.word	0x080093c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878c:	2b01      	cmp	r3, #1
 800878e:	f040 816a 	bne.w	8008a66 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8163 	beq.w	8008a66 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 0310 	and.w	r3, r3, #16
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 815c 	beq.w	8008a66 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2210      	movs	r2, #16
 80087b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c0:	2b40      	cmp	r3, #64	@ 0x40
 80087c2:	f040 80d4 	bne.w	800896e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80ad 	beq.w	8008936 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087e6:	429a      	cmp	r2, r3
 80087e8:	f080 80a5 	bcs.w	8008936 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	f040 8086 	bne.w	8008914 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800881c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008832:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008836:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800883e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800884a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1da      	bne.n	8008808 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008864:	f023 0301 	bic.w	r3, r3, #1
 8008868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3308      	adds	r3, #8
 8008872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008876:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800887a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800887e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e1      	bne.n	8008852 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800889e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3308      	adds	r3, #8
 80088ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e3      	bne.n	800888e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088e4:	f023 0310 	bic.w	r3, r3, #16
 80088e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e4      	bne.n	80088d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890e:	4618      	mov	r0, r3
 8008910:	f7fd f96b 	bl	8005bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008926:	b29b      	uxth	r3, r3
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	b29b      	uxth	r3, r3
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f8f4 	bl	8008b1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008934:	e0d5      	b.n	8008ae2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800893c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008940:	429a      	cmp	r2, r3
 8008942:	f040 80ce 	bne.w	8008ae2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b20      	cmp	r3, #32
 8008954:	f040 80c5 	bne.w	8008ae2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8d8 	bl	8008b1c <HAL_UARTEx_RxEventCallback>
      return;
 800896c:	e0b9      	b.n	8008ae2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800897a:	b29b      	uxth	r3, r3
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 80ab 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80a6 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80089be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e4      	bne.n	800899a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3308      	adds	r3, #8
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	623b      	str	r3, [r7, #32]
   return(result);
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3308      	adds	r3, #8
 80089f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80089f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e3      	bne.n	80089d0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f023 0310 	bic.w	r3, r3, #16
 8008a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	69b9      	ldr	r1, [r7, #24]
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e4      	bne.n	8008a1c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f85c 	bl	8008b1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a64:	e03f      	b.n	8008ae6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <HAL_UART_IRQHandler+0x5a8>
 8008a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d008      	beq.n	8008a90 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fcda 	bl	8009442 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a8e:	e02d      	b.n	8008aec <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00e      	beq.n	8008aba <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d008      	beq.n	8008aba <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01c      	beq.n	8008aea <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	4798      	blx	r3
    }
    return;
 8008ab8:	e017      	b.n	8008aea <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d012      	beq.n	8008aec <HAL_UART_IRQHandler+0x604>
 8008ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc8b 	bl	80093ee <UART_EndTransmit_IT>
    return;
 8008ad8:	e008      	b.n	8008aec <HAL_UART_IRQHandler+0x604>
      return;
 8008ada:	bf00      	nop
 8008adc:	e006      	b.n	8008aec <HAL_UART_IRQHandler+0x604>
    return;
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <HAL_UART_IRQHandler+0x604>
      return;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <HAL_UART_IRQHandler+0x604>
      return;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <HAL_UART_IRQHandler+0x604>
    return;
 8008aea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008aec:	37e8      	adds	r7, #232	@ 0xe8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop

08008af4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b38:	b08a      	sub	sp, #40	@ 0x28
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4bb4      	ldr	r3, [pc, #720]	@ (8008e34 <UART_SetConfig+0x300>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4aa9      	ldr	r2, [pc, #676]	@ (8008e38 <UART_SetConfig+0x304>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d004      	beq.n	8008ba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4aa0      	ldr	r2, [pc, #640]	@ (8008e3c <UART_SetConfig+0x308>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d126      	bne.n	8008c0c <UART_SetConfig+0xd8>
 8008bbe:	4ba0      	ldr	r3, [pc, #640]	@ (8008e40 <UART_SetConfig+0x30c>)
 8008bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d81b      	bhi.n	8008c04 <UART_SetConfig+0xd0>
 8008bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd4 <UART_SetConfig+0xa0>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008be5 	.word	0x08008be5
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bed 	.word	0x08008bed
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bea:	e080      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008bec:	2302      	movs	r3, #2
 8008bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bf2:	e07c      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bfa:	e078      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c02:	e074      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c0a:	e070      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a8c      	ldr	r2, [pc, #560]	@ (8008e44 <UART_SetConfig+0x310>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d138      	bne.n	8008c88 <UART_SetConfig+0x154>
 8008c16:	4b8a      	ldr	r3, [pc, #552]	@ (8008e40 <UART_SetConfig+0x30c>)
 8008c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c1c:	f003 030c 	and.w	r3, r3, #12
 8008c20:	2b0c      	cmp	r3, #12
 8008c22:	d82d      	bhi.n	8008c80 <UART_SetConfig+0x14c>
 8008c24:	a201      	add	r2, pc, #4	@ (adr r2, 8008c2c <UART_SetConfig+0xf8>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008c61 	.word	0x08008c61
 8008c30:	08008c81 	.word	0x08008c81
 8008c34:	08008c81 	.word	0x08008c81
 8008c38:	08008c81 	.word	0x08008c81
 8008c3c:	08008c71 	.word	0x08008c71
 8008c40:	08008c81 	.word	0x08008c81
 8008c44:	08008c81 	.word	0x08008c81
 8008c48:	08008c81 	.word	0x08008c81
 8008c4c:	08008c69 	.word	0x08008c69
 8008c50:	08008c81 	.word	0x08008c81
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c79 	.word	0x08008c79
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c66:	e042      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c6e:	e03e      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c70:	2304      	movs	r3, #4
 8008c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c76:	e03a      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c78:	2308      	movs	r3, #8
 8008c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c7e:	e036      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c80:	2310      	movs	r3, #16
 8008c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c86:	e032      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8008e38 <UART_SetConfig+0x304>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d12a      	bne.n	8008ce8 <UART_SetConfig+0x1b4>
 8008c92:	4b6b      	ldr	r3, [pc, #428]	@ (8008e40 <UART_SetConfig+0x30c>)
 8008c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ca0:	d01a      	beq.n	8008cd8 <UART_SetConfig+0x1a4>
 8008ca2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ca6:	d81b      	bhi.n	8008ce0 <UART_SetConfig+0x1ac>
 8008ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cac:	d00c      	beq.n	8008cc8 <UART_SetConfig+0x194>
 8008cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cb2:	d815      	bhi.n	8008ce0 <UART_SetConfig+0x1ac>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <UART_SetConfig+0x18c>
 8008cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cbc:	d008      	beq.n	8008cd0 <UART_SetConfig+0x19c>
 8008cbe:	e00f      	b.n	8008ce0 <UART_SetConfig+0x1ac>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cc6:	e012      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cce:	e00e      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008cd0:	2304      	movs	r3, #4
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cd6:	e00a      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008cd8:	2308      	movs	r3, #8
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cde:	e006      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce6:	e002      	b.n	8008cee <UART_SetConfig+0x1ba>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a51      	ldr	r2, [pc, #324]	@ (8008e38 <UART_SetConfig+0x304>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d17a      	bne.n	8008dee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d824      	bhi.n	8008d4a <UART_SetConfig+0x216>
 8008d00:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x1d4>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d4b 	.word	0x08008d4b
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d4b 	.word	0x08008d4b
 8008d18:	08008d3b 	.word	0x08008d3b
 8008d1c:	08008d4b 	.word	0x08008d4b
 8008d20:	08008d4b 	.word	0x08008d4b
 8008d24:	08008d4b 	.word	0x08008d4b
 8008d28:	08008d43 	.word	0x08008d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d2c:	f7fd ff86 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8008d30:	61f8      	str	r0, [r7, #28]
        break;
 8008d32:	e010      	b.n	8008d56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d34:	4b44      	ldr	r3, [pc, #272]	@ (8008e48 <UART_SetConfig+0x314>)
 8008d36:	61fb      	str	r3, [r7, #28]
        break;
 8008d38:	e00d      	b.n	8008d56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d3a:	f7fd fee7 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8008d3e:	61f8      	str	r0, [r7, #28]
        break;
 8008d40:	e009      	b.n	8008d56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d46:	61fb      	str	r3, [r7, #28]
        break;
 8008d48:	e005      	b.n	8008d56 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 8107 	beq.w	8008f6c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4413      	add	r3, r2
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d305      	bcc.n	8008d7a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d903      	bls.n	8008d82 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008d80:	e0f4      	b.n	8008f6c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	2200      	movs	r2, #0
 8008d86:	461c      	mov	r4, r3
 8008d88:	4615      	mov	r5, r2
 8008d8a:	f04f 0200 	mov.w	r2, #0
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	022b      	lsls	r3, r5, #8
 8008d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008d98:	0222      	lsls	r2, r4, #8
 8008d9a:	68f9      	ldr	r1, [r7, #12]
 8008d9c:	6849      	ldr	r1, [r1, #4]
 8008d9e:	0849      	lsrs	r1, r1, #1
 8008da0:	2000      	movs	r0, #0
 8008da2:	4688      	mov	r8, r1
 8008da4:	4681      	mov	r9, r0
 8008da6:	eb12 0a08 	adds.w	sl, r2, r8
 8008daa:	eb43 0b09 	adc.w	fp, r3, r9
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	f7f7 fa54 	bl	800026c <__aeabi_uldivmod>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4613      	mov	r3, r2
 8008dca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dd2:	d308      	bcc.n	8008de6 <UART_SetConfig+0x2b2>
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dda:	d204      	bcs.n	8008de6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	60da      	str	r2, [r3, #12]
 8008de4:	e0c2      	b.n	8008f6c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008dec:	e0be      	b.n	8008f6c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008df6:	d16a      	bne.n	8008ece <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008df8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d834      	bhi.n	8008e6a <UART_SetConfig+0x336>
 8008e00:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <UART_SetConfig+0x2d4>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e4d 	.word	0x08008e4d
 8008e10:	08008e55 	.word	0x08008e55
 8008e14:	08008e6b 	.word	0x08008e6b
 8008e18:	08008e5b 	.word	0x08008e5b
 8008e1c:	08008e6b 	.word	0x08008e6b
 8008e20:	08008e6b 	.word	0x08008e6b
 8008e24:	08008e6b 	.word	0x08008e6b
 8008e28:	08008e63 	.word	0x08008e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e2c:	f7fd ff06 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8008e30:	61f8      	str	r0, [r7, #28]
        break;
 8008e32:	e020      	b.n	8008e76 <UART_SetConfig+0x342>
 8008e34:	efff69f3 	.word	0xefff69f3
 8008e38:	40008000 	.word	0x40008000
 8008e3c:	40013800 	.word	0x40013800
 8008e40:	40021000 	.word	0x40021000
 8008e44:	40004400 	.word	0x40004400
 8008e48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e4c:	f7fd ff0c 	bl	8006c68 <HAL_RCC_GetPCLK2Freq>
 8008e50:	61f8      	str	r0, [r7, #28]
        break;
 8008e52:	e010      	b.n	8008e76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e54:	4b4c      	ldr	r3, [pc, #304]	@ (8008f88 <UART_SetConfig+0x454>)
 8008e56:	61fb      	str	r3, [r7, #28]
        break;
 8008e58:	e00d      	b.n	8008e76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e5a:	f7fd fe57 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8008e5e:	61f8      	str	r0, [r7, #28]
        break;
 8008e60:	e009      	b.n	8008e76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e66:	61fb      	str	r3, [r7, #28]
        break;
 8008e68:	e005      	b.n	8008e76 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d077      	beq.n	8008f6c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	005a      	lsls	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	441a      	add	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b0f      	cmp	r3, #15
 8008e96:	d916      	bls.n	8008ec6 <UART_SetConfig+0x392>
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e9e:	d212      	bcs.n	8008ec6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	f023 030f 	bic.w	r3, r3, #15
 8008ea8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	085b      	lsrs	r3, r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	8afb      	ldrh	r3, [r7, #22]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	8afa      	ldrh	r2, [r7, #22]
 8008ec2:	60da      	str	r2, [r3, #12]
 8008ec4:	e052      	b.n	8008f6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ecc:	e04e      	b.n	8008f6c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ece:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ed2:	2b08      	cmp	r3, #8
 8008ed4:	d827      	bhi.n	8008f26 <UART_SetConfig+0x3f2>
 8008ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <UART_SetConfig+0x3a8>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f01 	.word	0x08008f01
 8008ee0:	08008f09 	.word	0x08008f09
 8008ee4:	08008f11 	.word	0x08008f11
 8008ee8:	08008f27 	.word	0x08008f27
 8008eec:	08008f17 	.word	0x08008f17
 8008ef0:	08008f27 	.word	0x08008f27
 8008ef4:	08008f27 	.word	0x08008f27
 8008ef8:	08008f27 	.word	0x08008f27
 8008efc:	08008f1f 	.word	0x08008f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f00:	f7fd fe9c 	bl	8006c3c <HAL_RCC_GetPCLK1Freq>
 8008f04:	61f8      	str	r0, [r7, #28]
        break;
 8008f06:	e014      	b.n	8008f32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f08:	f7fd feae 	bl	8006c68 <HAL_RCC_GetPCLK2Freq>
 8008f0c:	61f8      	str	r0, [r7, #28]
        break;
 8008f0e:	e010      	b.n	8008f32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f10:	4b1d      	ldr	r3, [pc, #116]	@ (8008f88 <UART_SetConfig+0x454>)
 8008f12:	61fb      	str	r3, [r7, #28]
        break;
 8008f14:	e00d      	b.n	8008f32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f16:	f7fd fdf9 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8008f1a:	61f8      	str	r0, [r7, #28]
        break;
 8008f1c:	e009      	b.n	8008f32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f22:	61fb      	str	r3, [r7, #28]
        break;
 8008f24:	e005      	b.n	8008f32 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f30:	bf00      	nop
    }

    if (pclk != 0U)
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d019      	beq.n	8008f6c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	085a      	lsrs	r2, r3, #1
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	441a      	add	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b0f      	cmp	r3, #15
 8008f50:	d909      	bls.n	8008f66 <UART_SetConfig+0x432>
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f58:	d205      	bcs.n	8008f66 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60da      	str	r2, [r3, #12]
 8008f64:	e002      	b.n	8008f6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3728      	adds	r7, #40	@ 0x28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f86:	bf00      	nop
 8008f88:	00f42400 	.word	0x00f42400

08008f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01a      	beq.n	80090a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800908a:	d10a      	bne.n	80090a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	605a      	str	r2, [r3, #4]
  }
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b098      	sub	sp, #96	@ 0x60
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090e0:	f7fc fc66 	bl	80059b0 <HAL_GetTick>
 80090e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0308 	and.w	r3, r3, #8
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d12e      	bne.n	8009152 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090fc:	2200      	movs	r2, #0
 80090fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f88c 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d021      	beq.n	8009152 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800911c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009122:	653b      	str	r3, [r7, #80]	@ 0x50
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800912c:	647b      	str	r3, [r7, #68]	@ 0x44
 800912e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800913a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e6      	bne.n	800910e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e062      	b.n	8009218 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b04      	cmp	r3, #4
 800915e:	d149      	bne.n	80091f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009168:	2200      	movs	r2, #0
 800916a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f856 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d03c      	beq.n	80091f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	623b      	str	r3, [r7, #32]
   return(result);
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800918e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009198:	633b      	str	r3, [r7, #48]	@ 0x30
 800919a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800919e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e6      	bne.n	800917a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3308      	adds	r3, #8
 80091b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0301 	bic.w	r3, r3, #1
 80091c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091cc:	61fa      	str	r2, [r7, #28]
 80091ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	69b9      	ldr	r1, [r7, #24]
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	617b      	str	r3, [r7, #20]
   return(result);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e5      	bne.n	80091ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e011      	b.n	8009218 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3758      	adds	r7, #88	@ 0x58
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009230:	e04f      	b.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009238:	d04b      	beq.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923a:	f7fc fbb9 	bl	80059b0 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <UART_WaitOnFlagUntilTimeout+0x30>
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e04e      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d037      	beq.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b80      	cmp	r3, #128	@ 0x80
 8009266:	d034      	beq.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b40      	cmp	r3, #64	@ 0x40
 800926c:	d031      	beq.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b08      	cmp	r3, #8
 800927a:	d110      	bne.n	800929e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f838 	bl	80092fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2208      	movs	r2, #8
 800928e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e029      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092ac:	d111      	bne.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f81e 	bl	80092fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e00f      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69da      	ldr	r2, [r3, #28]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4013      	ands	r3, r2
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	429a      	cmp	r2, r3
 80092e0:	bf0c      	ite	eq
 80092e2:	2301      	moveq	r3, #1
 80092e4:	2300      	movne	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d0a0      	beq.n	8009232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b095      	sub	sp, #84	@ 0x54
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009320:	643b      	str	r3, [r7, #64]	@ 0x40
 8009322:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3308      	adds	r3, #8
 800933a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	61fb      	str	r3, [r7, #28]
   return(result);
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f023 0301 	bic.w	r3, r3, #1
 800934a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800935a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e5      	bne.n	8009334 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800936c:	2b01      	cmp	r3, #1
 800936e:	d118      	bne.n	80093a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	60bb      	str	r3, [r7, #8]
   return(result);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f023 0310 	bic.w	r3, r3, #16
 8009384:	647b      	str	r3, [r7, #68]	@ 0x44
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800938e:	61bb      	str	r3, [r7, #24]
 8009390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	613b      	str	r3, [r7, #16]
   return(result);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80093b6:	bf00      	nop
 80093b8:	3754      	adds	r7, #84	@ 0x54
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff fb91 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b088      	sub	sp, #32
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	60bb      	str	r3, [r7, #8]
   return(result);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	613b      	str	r3, [r7, #16]
   return(result);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fb5d 	bl	8008af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800943a:	bf00      	nop
 800943c:	3720      	adds	r7, #32
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <memset>:
 8009456:	4402      	add	r2, r0
 8009458:	4603      	mov	r3, r0
 800945a:	4293      	cmp	r3, r2
 800945c:	d100      	bne.n	8009460 <memset+0xa>
 800945e:	4770      	bx	lr
 8009460:	f803 1b01 	strb.w	r1, [r3], #1
 8009464:	e7f9      	b.n	800945a <memset+0x4>
	...

08009468 <__libc_init_array>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	4d0d      	ldr	r5, [pc, #52]	@ (80094a0 <__libc_init_array+0x38>)
 800946c:	4c0d      	ldr	r4, [pc, #52]	@ (80094a4 <__libc_init_array+0x3c>)
 800946e:	1b64      	subs	r4, r4, r5
 8009470:	10a4      	asrs	r4, r4, #2
 8009472:	2600      	movs	r6, #0
 8009474:	42a6      	cmp	r6, r4
 8009476:	d109      	bne.n	800948c <__libc_init_array+0x24>
 8009478:	4d0b      	ldr	r5, [pc, #44]	@ (80094a8 <__libc_init_array+0x40>)
 800947a:	4c0c      	ldr	r4, [pc, #48]	@ (80094ac <__libc_init_array+0x44>)
 800947c:	f000 f826 	bl	80094cc <_init>
 8009480:	1b64      	subs	r4, r4, r5
 8009482:	10a4      	asrs	r4, r4, #2
 8009484:	2600      	movs	r6, #0
 8009486:	42a6      	cmp	r6, r4
 8009488:	d105      	bne.n	8009496 <__libc_init_array+0x2e>
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009490:	4798      	blx	r3
 8009492:	3601      	adds	r6, #1
 8009494:	e7ee      	b.n	8009474 <__libc_init_array+0xc>
 8009496:	f855 3b04 	ldr.w	r3, [r5], #4
 800949a:	4798      	blx	r3
 800949c:	3601      	adds	r6, #1
 800949e:	e7f2      	b.n	8009486 <__libc_init_array+0x1e>
 80094a0:	0800a880 	.word	0x0800a880
 80094a4:	0800a880 	.word	0x0800a880
 80094a8:	0800a880 	.word	0x0800a880
 80094ac:	0800a884 	.word	0x0800a884

080094b0 <memcpy>:
 80094b0:	440a      	add	r2, r1
 80094b2:	4291      	cmp	r1, r2
 80094b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094b8:	d100      	bne.n	80094bc <memcpy+0xc>
 80094ba:	4770      	bx	lr
 80094bc:	b510      	push	{r4, lr}
 80094be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094c6:	4291      	cmp	r1, r2
 80094c8:	d1f9      	bne.n	80094be <memcpy+0xe>
 80094ca:	bd10      	pop	{r4, pc}

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
