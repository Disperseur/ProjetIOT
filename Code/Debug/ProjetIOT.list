
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d54  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000122c  08009ee0  08009ee0  0000aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b10c  0800b10c  0000d00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b10c  0800b10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b114  0800b114  0000d00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b114  0800b114  0000c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b118  0800b118  0000c118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800b11c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  2000000c  0800b128  0000d00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800b128  0000d47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2aa  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404e  00000000  00000000  000292e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  0002d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001501  00000000  00000000  0002ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ac4  00000000  00000000  00030341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020359  00000000  00000000  00054e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df1b1  00000000  00000000  0007515e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015430f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007310  00000000  00000000  00154354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009ec8 	.word	0x08009ec8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08009ec8 	.word	0x08009ec8

080001cc <__aeabi_ldivmod>:
 80001cc:	b97b      	cbnz	r3, 80001ee <__aeabi_ldivmod+0x22>
 80001ce:	b972      	cbnz	r2, 80001ee <__aeabi_ldivmod+0x22>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bfbe      	ittt	lt
 80001d4:	2000      	movlt	r0, #0
 80001d6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001da:	e006      	blt.n	80001ea <__aeabi_ldivmod+0x1e>
 80001dc:	bf08      	it	eq
 80001de:	2800      	cmpeq	r0, #0
 80001e0:	bf1c      	itt	ne
 80001e2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e6:	f04f 30ff 	movne.w	r0, #4294967295
 80001ea:	f000 b9b5 	b.w	8000558 <__aeabi_idiv0>
 80001ee:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f6:	2900      	cmp	r1, #0
 80001f8:	db09      	blt.n	800020e <__aeabi_ldivmod+0x42>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db1a      	blt.n	8000234 <__aeabi_ldivmod+0x68>
 80001fe:	f000 f84d 	bl	800029c <__udivmoddi4>
 8000202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020a:	b004      	add	sp, #16
 800020c:	4770      	bx	lr
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	2b00      	cmp	r3, #0
 8000216:	db1b      	blt.n	8000250 <__aeabi_ldivmod+0x84>
 8000218:	f000 f840 	bl	800029c <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	4252      	negs	r2, r2
 800022e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f82f 	bl	800029c <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4240      	negs	r0, r0
 800024a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024e:	4770      	bx	lr
 8000250:	4252      	negs	r2, r2
 8000252:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000256:	f000 f821 	bl	800029c <__udivmoddi4>
 800025a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000262:	b004      	add	sp, #16
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	4770      	bx	lr

0800026c <__aeabi_uldivmod>:
 800026c:	b953      	cbnz	r3, 8000284 <__aeabi_uldivmod+0x18>
 800026e:	b94a      	cbnz	r2, 8000284 <__aeabi_uldivmod+0x18>
 8000270:	2900      	cmp	r1, #0
 8000272:	bf08      	it	eq
 8000274:	2800      	cmpeq	r0, #0
 8000276:	bf1c      	itt	ne
 8000278:	f04f 31ff 	movne.w	r1, #4294967295
 800027c:	f04f 30ff 	movne.w	r0, #4294967295
 8000280:	f000 b96a 	b.w	8000558 <__aeabi_idiv0>
 8000284:	f1ad 0c08 	sub.w	ip, sp, #8
 8000288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800028c:	f000 f806 	bl	800029c <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4770      	bx	lr

0800029c <__udivmoddi4>:
 800029c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a0:	9d08      	ldr	r5, [sp, #32]
 80002a2:	460c      	mov	r4, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14e      	bne.n	8000346 <__udivmoddi4+0xaa>
 80002a8:	4694      	mov	ip, r2
 80002aa:	458c      	cmp	ip, r1
 80002ac:	4686      	mov	lr, r0
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	d962      	bls.n	800037a <__udivmoddi4+0xde>
 80002b4:	b14a      	cbz	r2, 80002ca <__udivmoddi4+0x2e>
 80002b6:	f1c2 0320 	rsb	r3, r2, #32
 80002ba:	4091      	lsls	r1, r2
 80002bc:	fa20 f303 	lsr.w	r3, r0, r3
 80002c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ce:	fa1f f68c 	uxth.w	r6, ip
 80002d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002da:	fb07 1114 	mls	r1, r7, r4, r1
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	fb04 f106 	mul.w	r1, r4, r6
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x64>
 80002ea:	eb1c 0303 	adds.w	r3, ip, r3
 80002ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f2:	f080 8112 	bcs.w	800051a <__udivmoddi4+0x27e>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 810f 	bls.w	800051a <__udivmoddi4+0x27e>
 80002fc:	3c02      	subs	r4, #2
 80002fe:	4463      	add	r3, ip
 8000300:	1a59      	subs	r1, r3, r1
 8000302:	fa1f f38e 	uxth.w	r3, lr
 8000306:	fbb1 f0f7 	udiv	r0, r1, r7
 800030a:	fb07 1110 	mls	r1, r7, r0, r1
 800030e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000312:	fb00 f606 	mul.w	r6, r0, r6
 8000316:	429e      	cmp	r6, r3
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x94>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000322:	f080 80fc 	bcs.w	800051e <__udivmoddi4+0x282>
 8000326:	429e      	cmp	r6, r3
 8000328:	f240 80f9 	bls.w	800051e <__udivmoddi4+0x282>
 800032c:	4463      	add	r3, ip
 800032e:	3802      	subs	r0, #2
 8000330:	1b9b      	subs	r3, r3, r6
 8000332:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa6>
 800033a:	40d3      	lsrs	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xba>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb4>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa6>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x150>
 800035e:	42a3      	cmp	r3, r4
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xcc>
 8000362:	4290      	cmp	r0, r2
 8000364:	f0c0 80f0 	bcc.w	8000548 <__udivmoddi4+0x2ac>
 8000368:	1a86      	subs	r6, r0, r2
 800036a:	eb64 0303 	sbc.w	r3, r4, r3
 800036e:	2001      	movs	r0, #1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e6      	beq.n	8000342 <__udivmoddi4+0xa6>
 8000374:	e9c5 6300 	strd	r6, r3, [r5]
 8000378:	e7e3      	b.n	8000342 <__udivmoddi4+0xa6>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f040 8090 	bne.w	80004a0 <__udivmoddi4+0x204>
 8000380:	eba1 040c 	sub.w	r4, r1, ip
 8000384:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000388:	fa1f f78c 	uxth.w	r7, ip
 800038c:	2101      	movs	r1, #1
 800038e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb08 4416 	mls	r4, r8, r6, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb07 f006 	mul.w	r0, r7, r6
 80003a2:	4298      	cmp	r0, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x11c>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x11a>
 80003b0:	4298      	cmp	r0, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2b4>
 80003b6:	4626      	mov	r6, r4
 80003b8:	1a1c      	subs	r4, r3, r0
 80003ba:	fa1f f38e 	uxth.w	r3, lr
 80003be:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c2:	fb08 4410 	mls	r4, r8, r0, r4
 80003c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ca:	fb00 f707 	mul.w	r7, r0, r7
 80003ce:	429f      	cmp	r7, r3
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x148>
 80003d2:	eb1c 0303 	adds.w	r3, ip, r3
 80003d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x146>
 80003dc:	429f      	cmp	r7, r3
 80003de:	f200 80b0 	bhi.w	8000542 <__udivmoddi4+0x2a6>
 80003e2:	4620      	mov	r0, r4
 80003e4:	1bdb      	subs	r3, r3, r7
 80003e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x9c>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000400:	ea43 030c 	orr.w	r3, r3, ip
 8000404:	40f4      	lsrs	r4, r6
 8000406:	fa00 f801 	lsl.w	r8, r0, r1
 800040a:	0c38      	lsrs	r0, r7, #16
 800040c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000410:	fbb4 fef0 	udiv	lr, r4, r0
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fb00 441e 	mls	r4, r0, lr, r4
 800041c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a1      	cmp	r9, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x1a6>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000432:	f080 8084 	bcs.w	800053e <__udivmoddi4+0x2a2>
 8000436:	45a1      	cmp	r9, r4
 8000438:	f240 8081 	bls.w	800053e <__udivmoddi4+0x2a2>
 800043c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000440:	443c      	add	r4, r7
 8000442:	eba4 0409 	sub.w	r4, r4, r9
 8000446:	fa1f f983 	uxth.w	r9, r3
 800044a:	fbb4 f3f0 	udiv	r3, r4, r0
 800044e:	fb00 4413 	mls	r4, r0, r3, r4
 8000452:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	45a4      	cmp	ip, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x1d2>
 800045e:	193c      	adds	r4, r7, r4
 8000460:	f103 30ff 	add.w	r0, r3, #4294967295
 8000464:	d267      	bcs.n	8000536 <__udivmoddi4+0x29a>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d965      	bls.n	8000536 <__udivmoddi4+0x29a>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000472:	fba0 9302 	umull	r9, r3, r0, r2
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	429c      	cmp	r4, r3
 800047c:	46ce      	mov	lr, r9
 800047e:	469c      	mov	ip, r3
 8000480:	d351      	bcc.n	8000526 <__udivmoddi4+0x28a>
 8000482:	d04e      	beq.n	8000522 <__udivmoddi4+0x286>
 8000484:	b155      	cbz	r5, 800049c <__udivmoddi4+0x200>
 8000486:	ebb8 030e 	subs.w	r3, r8, lr
 800048a:	eb64 040c 	sbc.w	r4, r4, ip
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431e      	orrs	r6, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	e9c5 6400 	strd	r6, r4, [r5]
 800049c:	2100      	movs	r1, #0
 800049e:	e750      	b.n	8000342 <__udivmoddi4+0xa6>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f103 	lsr.w	r1, r0, r3
 80004a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ac:	fa24 f303 	lsr.w	r3, r4, r3
 80004b0:	4094      	lsls	r4, r2
 80004b2:	430c      	orrs	r4, r1
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c4:	fb08 3110 	mls	r1, r8, r0, r3
 80004c8:	0c23      	lsrs	r3, r4, #16
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb00 f107 	mul.w	r1, r0, r7
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x24c>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 36ff 	add.w	r6, r0, #4294967295
 80004de:	d22c      	bcs.n	800053a <__udivmoddi4+0x29e>
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d92a      	bls.n	800053a <__udivmoddi4+0x29e>
 80004e4:	3802      	subs	r0, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f0:	fb08 3311 	mls	r3, r8, r1, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb01 f307 	mul.w	r3, r1, r7
 80004fc:	42a3      	cmp	r3, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x276>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f101 36ff 	add.w	r6, r1, #4294967295
 8000508:	d213      	bcs.n	8000532 <__udivmoddi4+0x296>
 800050a:	42a3      	cmp	r3, r4
 800050c:	d911      	bls.n	8000532 <__udivmoddi4+0x296>
 800050e:	3902      	subs	r1, #2
 8000510:	4464      	add	r4, ip
 8000512:	1ae4      	subs	r4, r4, r3
 8000514:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000518:	e739      	b.n	800038e <__udivmoddi4+0xf2>
 800051a:	4604      	mov	r4, r0
 800051c:	e6f0      	b.n	8000300 <__udivmoddi4+0x64>
 800051e:	4608      	mov	r0, r1
 8000520:	e706      	b.n	8000330 <__udivmoddi4+0x94>
 8000522:	45c8      	cmp	r8, r9
 8000524:	d2ae      	bcs.n	8000484 <__udivmoddi4+0x1e8>
 8000526:	ebb9 0e02 	subs.w	lr, r9, r2
 800052a:	eb63 0c07 	sbc.w	ip, r3, r7
 800052e:	3801      	subs	r0, #1
 8000530:	e7a8      	b.n	8000484 <__udivmoddi4+0x1e8>
 8000532:	4631      	mov	r1, r6
 8000534:	e7ed      	b.n	8000512 <__udivmoddi4+0x276>
 8000536:	4603      	mov	r3, r0
 8000538:	e799      	b.n	800046e <__udivmoddi4+0x1d2>
 800053a:	4630      	mov	r0, r6
 800053c:	e7d4      	b.n	80004e8 <__udivmoddi4+0x24c>
 800053e:	46d6      	mov	lr, sl
 8000540:	e77f      	b.n	8000442 <__udivmoddi4+0x1a6>
 8000542:	4463      	add	r3, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e74d      	b.n	80003e4 <__udivmoddi4+0x148>
 8000548:	4606      	mov	r6, r0
 800054a:	4623      	mov	r3, r4
 800054c:	4608      	mov	r0, r1
 800054e:	e70f      	b.n	8000370 <__udivmoddi4+0xd4>
 8000550:	3e02      	subs	r6, #2
 8000552:	4463      	add	r3, ip
 8000554:	e730      	b.n	80003b8 <__udivmoddi4+0x11c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <MX_ADC1_Init+0xc0>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000578:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000584:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000590:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000592:	2204      	movs	r2, #4
 8000594:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000596:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005d4:	f005 fd78 	bl	80060c8 <HAL_ADC_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005de:	f004 fa97 	bl	8004b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <MX_ADC1_Init+0xc4>)
 80005e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e6:	2306      	movs	r3, #6
 80005e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ea:	2307      	movs	r3, #7
 80005ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	@ 0x7f
 80005f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f2:	2304      	movs	r3, #4
 80005f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000600:	f006 f92e 	bl	8006860 <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800060a:	f004 fa81 	bl	8004b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028
 800061c:	50040000 	.word	0x50040000
 8000620:	3ef08000 	.word	0x3ef08000

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09e      	sub	sp, #120	@ 0x78
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2254      	movs	r2, #84	@ 0x54
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f009 fc05 	bl	8009e54 <memset>
  if(adcHandle->Instance==ADC1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <HAL_ADC_MspInit+0xd0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d14a      	bne.n	80006ea <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000658:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800065a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800065e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800067c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f008 f8f4 	bl	8008870 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800068e:	f004 fa3f 	bl	8004b10 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 8000698:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	2301      	movs	r3, #1
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006c6:	230b      	movs	r3, #11
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006d2:	4619      	mov	r1, r3
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <HAL_ADC_MspInit+0xd8>)
 80006d6:	f006 ff9b 	bl	8007610 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2012      	movs	r0, #18
 80006e0:	f006 ff1f 	bl	8007522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006e4:	2012      	movs	r0, #18
 80006e6:	f006 ff38 	bl	800755a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	3778      	adds	r7, #120	@ 0x78
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	50040000 	.word	0x50040000
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400

08000700 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e021      	b.n	8000750 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 800070c:	4a37      	ldr	r2, [pc, #220]	@ (80007ec <aesroundkeys+0xec>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	061a      	lsls	r2, r3, #24
 8000716:	4935      	ldr	r1, [pc, #212]	@ (80007ec <aesroundkeys+0xec>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000724:	431a      	orrs	r2, r3
 8000726:	4931      	ldr	r1, [pc, #196]	@ (80007ec <aesroundkeys+0xec>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000734:	431a      	orrs	r2, r3
 8000736:	492d      	ldr	r1, [pc, #180]	@ (80007ec <aesroundkeys+0xec>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073e:	0e1b      	lsrs	r3, r3, #24
 8000740:	431a      	orrs	r2, r3
 8000742:	492a      	ldr	r1, [pc, #168]	@ (80007ec <aesroundkeys+0xec>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	ddda      	ble.n	800070c <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <aesroundkeys+0xec>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800075c:	e03c      	b.n	80007d8 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f003 0303 	and.w	r3, r3, #3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d127      	bne.n	80007b8 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <aesroundkeys+0xf0>)
 8000772:	5c9b      	ldrb	r3, [r3, r2]
 8000774:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <aesroundkeys+0xf0>)
 8000780:	5c5b      	ldrb	r3, [r3, r1]
 8000782:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000784:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <aesroundkeys+0xf0>)
 800078e:	5c5b      	ldrb	r3, [r3, r1]
 8000790:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8000792:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	0e12      	lsrs	r2, r2, #24
 8000798:	4915      	ldr	r1, [pc, #84]	@ (80007f0 <aesroundkeys+0xf0>)
 800079a:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 800079c:	4053      	eors	r3, r2
 800079e:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b04      	subs	r3, #4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	da00      	bge.n	80007aa <aesroundkeys+0xaa>
 80007a8:	3303      	adds	r3, #3
 80007aa:	109b      	asrs	r3, r3, #2
 80007ac:	4619      	mov	r1, r3
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <aesroundkeys+0xf4>)
 80007b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80007b4:	4053      	eors	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b04      	subs	r3, #4
 80007bc:	4a0b      	ldr	r2, [pc, #44]	@ (80007ec <aesroundkeys+0xec>)
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4053      	eors	r3, r2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4908      	ldr	r1, [pc, #32]	@ (80007ec <aesroundkeys+0xec>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b2b      	cmp	r3, #43	@ 0x2b
 80007dc:	ddbf      	ble.n	800075e <aesroundkeys+0x5e>
    }
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	2000009c 	.word	0x2000009c
 80007f0:	08009f08 	.word	0x08009f08
 80007f4:	08009ee0 	.word	0x08009ee0

080007f8 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000808:	f7ff ff7a 	bl	8000700 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d010      	beq.n	8000838 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <os_aes+0x188>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	4b58      	ldr	r3, [pc, #352]	@ (8000980 <os_aes+0x188>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a57      	ldr	r2, [pc, #348]	@ (8000980 <os_aes+0x188>)
 8000822:	6093      	str	r3, [r2, #8]
 8000824:	4b56      	ldr	r3, [pc, #344]	@ (8000980 <os_aes+0x188>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a55      	ldr	r2, [pc, #340]	@ (8000980 <os_aes+0x188>)
 800082a:	6053      	str	r3, [r2, #4]
 800082c:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <os_aes+0x188>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <os_aes+0x188>)
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	f000 bc97 	b.w	8001166 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <os_aes+0x188>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	061a      	lsls	r2, r3, #24
 800083e:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <os_aes+0x188>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000848:	431a      	orrs	r2, r3
 800084a:	4b4d      	ldr	r3, [pc, #308]	@ (8000980 <os_aes+0x188>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000854:	431a      	orrs	r2, r3
 8000856:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <os_aes+0x188>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	4313      	orrs	r3, r2
 800085e:	4a48      	ldr	r2, [pc, #288]	@ (8000980 <os_aes+0x188>)
 8000860:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 8000862:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <os_aes+0x188>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	061a      	lsls	r2, r3, #24
 8000868:	4b45      	ldr	r3, [pc, #276]	@ (8000980 <os_aes+0x188>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000872:	431a      	orrs	r2, r3
 8000874:	4b42      	ldr	r3, [pc, #264]	@ (8000980 <os_aes+0x188>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800087e:	431a      	orrs	r2, r3
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <os_aes+0x188>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	4313      	orrs	r3, r2
 8000888:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <os_aes+0x188>)
 800088a:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800088c:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <os_aes+0x188>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	061a      	lsls	r2, r3, #24
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <os_aes+0x188>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800089c:	431a      	orrs	r2, r3
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <os_aes+0x188>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80008a8:	431a      	orrs	r2, r3
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <os_aes+0x188>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	0e1b      	lsrs	r3, r3, #24
 80008b0:	4313      	orrs	r3, r2
 80008b2:	4a33      	ldr	r2, [pc, #204]	@ (8000980 <os_aes+0x188>)
 80008b4:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <os_aes+0x188>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	061a      	lsls	r2, r3, #24
 80008bc:	4b30      	ldr	r3, [pc, #192]	@ (8000980 <os_aes+0x188>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80008c6:	431a      	orrs	r2, r3
 80008c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <os_aes+0x188>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80008d2:	431a      	orrs	r2, r3
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <os_aes+0x188>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	4313      	orrs	r3, r2
 80008dc:	4a28      	ldr	r2, [pc, #160]	@ (8000980 <os_aes+0x188>)
 80008de:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 80008e0:	f000 bc41 	b.w	8001166 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <os_aes+0x10a>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d011      	beq.n	800091c <os_aes+0x124>
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10c      	bne.n	800091c <os_aes+0x124>
                a0 = AESAUX[0];
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <os_aes+0x188>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <os_aes+0x188>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <os_aes+0x188>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <os_aes+0x188>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	e062      	b.n	80009e2 <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d016      	beq.n	8000954 <os_aes+0x15c>
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	2b10      	cmp	r3, #16
 800092a:	d813      	bhi.n	8000954 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
 8000934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d101      	bne.n	8000946 <os_aes+0x14e>
 8000942:	2210      	movs	r2, #16
 8000944:	e000      	b.n	8000948 <os_aes+0x150>
 8000946:	2220      	movs	r2, #32
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4313      	orrs	r3, r2
 800094e:	b25b      	sxtb	r3, r3
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e046      	b.n	80009e2 <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 8000954:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	e026      	b.n	80009aa <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	021a      	lsls	r2, r3, #8
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	69f9      	ldr	r1, [r7, #28]
 8000964:	4299      	cmp	r1, r3
 8000966:	d204      	bcs.n	8000972 <os_aes+0x17a>
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	440b      	add	r3, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	e009      	b.n	8000986 <os_aes+0x18e>
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	69f9      	ldr	r1, [r7, #28]
 8000976:	4299      	cmp	r1, r3
 8000978:	d104      	bne.n	8000984 <os_aes+0x18c>
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	e003      	b.n	8000986 <os_aes+0x18e>
 800097e:	bf00      	nop
 8000980:	2000008c 	.word	0x2000008c
 8000984:	2300      	movs	r3, #0
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b03      	cmp	r3, #3
 8000992:	d107      	bne.n	80009a4 <os_aes+0x1ac>
                        a0 = a1;
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d9d5      	bls.n	800095c <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d013      	beq.n	80009e2 <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 80009ba:	4ba0      	ldr	r3, [pc, #640]	@ (8000c3c <os_aes+0x444>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009c0:	4053      	eors	r3, r2
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 80009c4:	4b9d      	ldr	r3, [pc, #628]	@ (8000c3c <os_aes+0x444>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ca:	4053      	eors	r3, r2
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 80009ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000c3c <os_aes+0x444>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d4:	4053      	eors	r3, r2
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 80009d8:	4b98      	ldr	r3, [pc, #608]	@ (8000c3c <os_aes+0x444>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	6a3a      	ldr	r2, [r7, #32]
 80009de:	4053      	eors	r3, r2
 80009e0:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 80009e2:	4b97      	ldr	r3, [pc, #604]	@ (8000c40 <os_aes+0x448>)
 80009e4:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3380      	adds	r3, #128	@ 0x80
 80009ea:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009f2:	4053      	eors	r3, r2
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3304      	adds	r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009fe:	4053      	eors	r3, r2
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3308      	adds	r3, #8
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a0a:	4053      	eors	r3, r2
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	330c      	adds	r3, #12
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6a3a      	ldr	r2, [r7, #32]
 8000a16:	4053      	eors	r3, r2
 8000a18:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8000a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b82      	ldr	r3, [pc, #520]	@ (8000c44 <os_aes+0x44c>)
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4053      	eors	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8000c48 <os_aes+0x450>)
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4053      	eors	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b7a      	ldr	r3, [pc, #488]	@ (8000c4c <os_aes+0x454>)
 8000a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	4053      	eors	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a6e:	0e1b      	lsrs	r3, r3, #24
 8000a70:	4a77      	ldr	r2, [pc, #476]	@ (8000c50 <os_aes+0x458>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	4053      	eors	r3, r2
 8000a7a:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 8000a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b70      	ldr	r3, [pc, #448]	@ (8000c44 <os_aes+0x44c>)
 8000a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b6c      	ldr	r3, [pc, #432]	@ (8000c48 <os_aes+0x450>)
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b68      	ldr	r3, [pc, #416]	@ (8000c4c <os_aes+0x454>)
 8000aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	4a65      	ldr	r2, [pc, #404]	@ (8000c50 <os_aes+0x458>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4053      	eors	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b5d      	ldr	r3, [pc, #372]	@ (8000c44 <os_aes+0x44c>)
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	4053      	eors	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b59      	ldr	r3, [pc, #356]	@ (8000c48 <os_aes+0x450>)
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	4053      	eors	r3, r2
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b55      	ldr	r3, [pc, #340]	@ (8000c4c <os_aes+0x454>)
 8000af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4053      	eors	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	4a52      	ldr	r2, [pc, #328]	@ (8000c50 <os_aes+0x458>)
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4053      	eors	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b4b      	ldr	r3, [pc, #300]	@ (8000c44 <os_aes+0x44c>)
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	69fa      	ldr	r2, [r7, #28]
 8000b1e:	4053      	eors	r3, r2
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <os_aes+0x450>)
 8000b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4053      	eors	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b43      	ldr	r3, [pc, #268]	@ (8000c4c <os_aes+0x454>)
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4053      	eors	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <os_aes+0x458>)
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	4053      	eors	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <os_aes+0x44c>)
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b80:	4053      	eors	r3, r2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <os_aes+0x450>)
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b94:	4053      	eors	r3, r2
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <os_aes+0x454>)
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	6a3a      	ldr	r2, [r7, #32]
 8000ba8:	4053      	eors	r3, r2
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	0e1b      	lsrs	r3, r3, #24
 8000bb0:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <os_aes+0x458>)
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bb8:	4053      	eors	r3, r2
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <os_aes+0x44c>)
 8000bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bca:	4053      	eors	r3, r2
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <os_aes+0x450>)
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	6a3a      	ldr	r2, [r7, #32]
 8000bde:	4053      	eors	r3, r2
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	0c1b      	lsrs	r3, r3, #16
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <os_aes+0x454>)
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	0e1b      	lsrs	r3, r3, #24
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <os_aes+0x458>)
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c02:	4053      	eors	r3, r2
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <os_aes+0x44c>)
 8000c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	4053      	eors	r3, r2
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <os_aes+0x450>)
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c28:	4053      	eors	r3, r2
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <os_aes+0x454>)
 8000c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3a:	e00b      	b.n	8000c54 <os_aes+0x45c>
 8000c3c:	2000008c 	.word	0x2000008c
 8000c40:	2000009c 	.word	0x2000009c
 8000c44:	0800ac08 	.word	0x0800ac08
 8000c48:	0800a808 	.word	0x0800a808
 8000c4c:	0800a408 	.word	0x0800a408
 8000c50:	0800a008 	.word	0x0800a008
 8000c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c56:	4053      	eors	r3, r2
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	0e1b      	lsrs	r3, r3, #24
 8000c5e:	4aa1      	ldr	r2, [pc, #644]	@ (8000ee4 <os_aes+0x6ec>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c66:	4053      	eors	r3, r2
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b9d      	ldr	r3, [pc, #628]	@ (8000ee8 <os_aes+0x6f0>)
 8000c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c78:	4053      	eors	r3, r2
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b99      	ldr	r3, [pc, #612]	@ (8000eec <os_aes+0x6f4>)
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b95      	ldr	r3, [pc, #596]	@ (8000ef0 <os_aes+0x6f8>)
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	0e1b      	lsrs	r3, r3, #24
 8000ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8000ee4 <os_aes+0x6ec>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	6a3a      	ldr	r2, [r7, #32]
 8000cb0:	4053      	eors	r3, r2
 8000cb2:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3320      	adds	r3, #32
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	f4ff aeab 	bcc.w	8000a1a <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b81      	ldr	r3, [pc, #516]	@ (8000ee8 <os_aes+0x6f0>)
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4053      	eors	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8000eec <os_aes+0x6f4>)
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4053      	eors	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b79      	ldr	r3, [pc, #484]	@ (8000ef0 <os_aes+0x6f8>)
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	4053      	eors	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d18:	0e1b      	lsrs	r3, r3, #24
 8000d1a:	4a72      	ldr	r2, [pc, #456]	@ (8000ee4 <os_aes+0x6ec>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	4053      	eors	r3, r2
 8000d24:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee8 <os_aes+0x6f0>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4053      	eors	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b6a      	ldr	r3, [pc, #424]	@ (8000eec <os_aes+0x6f4>)
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4053      	eors	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b66      	ldr	r3, [pc, #408]	@ (8000ef0 <os_aes+0x6f8>)
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4053      	eors	r3, r2
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d62:	0e1b      	lsrs	r3, r3, #24
 8000d64:	4a5f      	ldr	r2, [pc, #380]	@ (8000ee4 <os_aes+0x6ec>)
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4053      	eors	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b5c      	ldr	r3, [pc, #368]	@ (8000ee8 <os_aes+0x6f0>)
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	4053      	eors	r3, r2
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b58      	ldr	r3, [pc, #352]	@ (8000eec <os_aes+0x6f4>)
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	4053      	eors	r3, r2
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	0c1b      	lsrs	r3, r3, #16
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b54      	ldr	r3, [pc, #336]	@ (8000ef0 <os_aes+0x6f8>)
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4053      	eors	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	0e1b      	lsrs	r3, r3, #24
 8000dae:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee4 <os_aes+0x6ec>)
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4053      	eors	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b49      	ldr	r3, [pc, #292]	@ (8000ee8 <os_aes+0x6f0>)
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4053      	eors	r3, r2
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <os_aes+0x6f4>)
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b41      	ldr	r3, [pc, #260]	@ (8000ef0 <os_aes+0x6f8>)
 8000dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4053      	eors	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	0e1b      	lsrs	r3, r3, #24
 8000df8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee4 <os_aes+0x6ec>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4053      	eors	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	0e1b      	lsrs	r3, r3, #24
 8000e0e:	4a39      	ldr	r2, [pc, #228]	@ (8000ef4 <os_aes+0x6fc>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	061b      	lsls	r3, r3, #24
 8000e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e16:	4053      	eors	r3, r2
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <os_aes+0x6fc>)
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e2a:	4053      	eors	r3, r2
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <os_aes+0x6fc>)
 8000e38:	5c9b      	ldrb	r3, [r3, r2]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e3e:	4053      	eors	r3, r2
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <os_aes+0x6fc>)
 8000e4a:	5c9b      	ldrb	r3, [r3, r2]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	4053      	eors	r3, r2
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	0e1b      	lsrs	r3, r3, #24
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <os_aes+0x6fc>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	061b      	lsls	r3, r3, #24
 8000e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e66:	4053      	eors	r3, r2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	0c1b      	lsrs	r3, r3, #16
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <os_aes+0x6fc>)
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7a:	4053      	eors	r3, r2
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <os_aes+0x6fc>)
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e8e:	4053      	eors	r3, r2
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <os_aes+0x6fc>)
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea0:	4053      	eors	r3, r2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0e1b      	lsrs	r3, r3, #24
 8000eae:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <os_aes+0x6fc>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	061b      	lsls	r3, r3, #24
 8000eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb6:	4053      	eors	r3, r2
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0c1b      	lsrs	r3, r3, #16
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <os_aes+0x6fc>)
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eca:	4053      	eors	r3, r2
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <os_aes+0x6fc>)
 8000ed8:	5c9b      	ldrb	r3, [r3, r2]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ede:	4053      	eors	r3, r2
 8000ee0:	e00a      	b.n	8000ef8 <os_aes+0x700>
 8000ee2:	bf00      	nop
 8000ee4:	0800a008 	.word	0x0800a008
 8000ee8:	0800ac08 	.word	0x0800ac08
 8000eec:	0800a808 	.word	0x0800a808
 8000ef0:	0800a408 	.word	0x0800a408
 8000ef4:	08009f08 	.word	0x08009f08
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <os_aes+0x888>)
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	461a      	mov	r2, r3
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	4053      	eors	r3, r2
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	4a5a      	ldr	r2, [pc, #360]	@ (8001080 <os_aes+0x888>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	6a3a      	ldr	r2, [r7, #32]
 8000f1e:	4053      	eors	r3, r2
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b55      	ldr	r3, [pc, #340]	@ (8001080 <os_aes+0x888>)
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	4053      	eors	r3, r2
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b50      	ldr	r3, [pc, #320]	@ (8001080 <os_aes+0x888>)
 8000f40:	5c9b      	ldrb	r3, [r3, r2]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	4053      	eors	r3, r2
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b4b      	ldr	r3, [pc, #300]	@ (8001080 <os_aes+0x888>)
 8000f52:	5c9b      	ldrb	r3, [r3, r2]
 8000f54:	461a      	mov	r2, r3
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d056      	beq.n	8001014 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	111b      	asrs	r3, r3, #4
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d041      	beq.n	8000ffa <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	0fdb      	lsrs	r3, r3, #31
 8000f7a:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	005a      	lsls	r2, r3, #1
 8000f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f82:	0fdb      	lsrs	r3, r3, #31
 8000f84:	4313      	orrs	r3, r2
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	005a      	lsls	r2, r3, #1
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	4313      	orrs	r3, r2
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	0fdb      	lsrs	r3, r3, #31
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <os_aes+0x7bc>
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8000fb2:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1da      	bne.n	8000f76 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <os_aes+0x88c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001084 <os_aes+0x88c>)
 8000fca:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <os_aes+0x88c>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <os_aes+0x88c>)
 8000fd6:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <os_aes+0x88c>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	4053      	eors	r3, r2
 8000fe0:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <os_aes+0x88c>)
 8000fe2:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <os_aes+0x88c>)
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	4053      	eors	r3, r2
 8000fec:	4a25      	ldr	r2, [pc, #148]	@ (8001084 <os_aes+0x88c>)
 8000fee:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ff6:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000ff8:	e4ad      	b.n	8000956 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000ffa:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <os_aes+0x88c>)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8001000:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <os_aes+0x88c>)
 8001002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001004:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8001006:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <os_aes+0x88c>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 800100c:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <os_aes+0x88c>)
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	60d3      	str	r3, [r2, #12]
 8001012:	e094      	b.n	800113e <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d034      	beq.n	8001088 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	2b10      	cmp	r3, #16
 8001022:	bf28      	it	cs
 8001024:	2310      	movcs	r3, #16
 8001026:	b29b      	uxth	r3, r3
 8001028:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e01d      	b.n	800106c <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4413      	add	r3, r2
 8001036:	7819      	ldrb	r1, [r3, #0]
 8001038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103a:	0e1b      	lsrs	r3, r3, #24
 800103c:	b2da      	uxtb	r2, r3
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4403      	add	r3, r0
 8001044:	404a      	eors	r2, r1
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d105      	bne.n	8001066 <os_aes+0x86e>
                            a0 = a1;
 800105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3dd      	bcc.n	8001030 <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <os_aes+0x88c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	4a02      	ldr	r2, [pc, #8]	@ (8001084 <os_aes+0x88c>)
 800107c:	60d3      	str	r3, [r2, #12]
 800107e:	e05e      	b.n	800113e <os_aes+0x946>
 8001080:	08009f08 	.word	0x08009f08
 8001084:	2000008c 	.word	0x2000008c
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8001088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108a:	0e1b      	lsrs	r3, r3, #24
 800108c:	b2da      	uxtb	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a0:	0a1a      	lsrs	r2, r3, #8
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3303      	adds	r3, #3
 80010ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 80010b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b6:	0e1a      	lsrs	r2, r3, #24
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3304      	adds	r3, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c2:	0c1a      	lsrs	r2, r3, #16
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3305      	adds	r3, #5
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ce:	0a1a      	lsrs	r2, r3, #8
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3306      	adds	r3, #6
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3307      	adds	r3, #7
 80010dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	0e1a      	lsrs	r2, r3, #24
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3308      	adds	r3, #8
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	0c1a      	lsrs	r2, r3, #16
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3309      	adds	r3, #9
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	0a1a      	lsrs	r2, r3, #8
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	330a      	adds	r3, #10
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	330b      	adds	r3, #11
 800110a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	0e1a      	lsrs	r2, r3, #24
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	330c      	adds	r3, #12
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	0c1a      	lsrs	r2, r3, #16
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	330d      	adds	r3, #13
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	0a1a      	lsrs	r2, r3, #8
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	330e      	adds	r3, #14
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	330f      	adds	r3, #15
 8001138:	6a3a      	ldr	r2, [r7, #32]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <os_aes+0x95a>
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <os_aes+0x966>
                buf += 16;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3310      	adds	r3, #16
 8001156:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	3b10      	subs	r3, #16
 800115c:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f73f abba 	bgt.w	80008e4 <os_aes+0xec>
        }
        return AESAUX[0];
 8001170:	4b02      	ldr	r3, [pc, #8]	@ (800117c <os_aes+0x984>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	@ 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000008c 	.word	0x2000008c

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <MX_GPIO_Init+0xe4>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <MX_GPIO_Init+0xe4>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <MX_GPIO_Init+0xe4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f648 0180 	movw	r1, #34944	@ 0x8880
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e8:	f006 fb7c 	bl	80078e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	481d      	ldr	r0, [pc, #116]	@ (8001268 <MX_GPIO_Init+0xe8>)
 80011f2:	f006 fb77 	bl	80078e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 80011f6:	f648 0380 	movw	r3, #34944	@ 0x8880
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f006 f9fd 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001216:	2302      	movs	r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	480e      	ldr	r0, [pc, #56]	@ (8001268 <MX_GPIO_Init+0xe8>)
 800122e:	f006 f9ef 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001232:	23c0      	movs	r3, #192	@ 0xc0
 8001234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001236:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4808      	ldr	r0, [pc, #32]	@ (8001268 <MX_GPIO_Init+0xe8>)
 8001248:	f006 f9e2 	bl	8007610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2017      	movs	r0, #23
 8001252:	f006 f966 	bl	8007522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001256:	2017      	movs	r0, #23
 8001258:	f006 f97f 	bl	800755a <HAL_NVIC_EnableIRQ>

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	48000400 	.word	0x48000400

0800126c <hal_io_init>:


// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	461a      	mov	r2, r3
 800129e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a6:	f006 fb1d 	bl	80078e4 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b08c      	sub	sp, #48	@ 0x30
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <hal_pin_rst+0x16>
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d116      	bne.n	80012f6 <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80012c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012cc:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e0:	f006 f996 	bl	8007610 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	461a      	mov	r2, r3
 80012e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f0:	f006 faf8 	bl	80078e4 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 80012f4:	e00e      	b.n	8001314 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80012f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012fa:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f006 f97f 	bl	8007610 <HAL_GPIO_Init>
    }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	@ 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2b40      	cmp	r3, #64	@ 0x40
 800132a:	d102      	bne.n	8001332 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 800132c:	2000      	movs	r0, #0
 800132e:	f004 f957 	bl	80055e0 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	2b80      	cmp	r3, #128	@ 0x80
 8001336:	d102      	bne.n	800133e <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f004 f951 	bl	80055e0 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 800135e:	2300      	movs	r3, #0
 8001360:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001362:	2300      	movs	r3, #0
 8001364:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	f107 010c 	add.w	r1, r7, #12
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	4804      	ldr	r0, [pc, #16]	@ (800138c <hal_spi+0x38>)
 800137c:	f007 fe03 	bl	8008f86 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001380:	7a3b      	ldrb	r3, [r7, #8]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000037c 	.word	0x2000037c

08001390 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <hal_ticks>:

u4_t hal_ticks () {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80013a6:	f000 f8b9 	bl	800151c <hal_disableIRQs>
    u4_t t = HAL.ticks;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <hal_ticks+0x58>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <hal_ticks+0x5c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <hal_ticks+0x5c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d10d      	bne.n	80013e2 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <hal_ticks+0x5c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d106      	bne.n	80013e2 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <hal_ticks+0x5c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	807b      	strh	r3, [r7, #2]
    		t++;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 80013e2:	f000 f8ab 	bl	800153c <hal_enableIRQs>
    return (t<<16)|cnt;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	4313      	orrs	r3, r2
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000014c 	.word	0x2000014c
 80013fc:	2000042c 	.word	0x2000042c

08001400 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001408:	f7ff ffca 	bl	80013a0 <hal_ticks>
 800140c:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dc01      	bgt.n	8001420 <deltaticks+0x20>
 800141c:	2300      	movs	r3, #0
 800141e:	e008      	b.n	8001432 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	141b      	asrs	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <deltaticks+0x2e>
 8001428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800142c:	e001      	b.n	8001432 <deltaticks+0x32>
    return (u2_t)d;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	b29b      	uxth	r3, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001442:	bf00      	nop
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffdb 	bl	8001400 <deltaticks>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f9      	bne.n	8001444 <hal_waitUntil+0xa>
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <hal_checkTimer+0x78>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <hal_checkTimer+0x78>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0202 	bic.w	r2, r2, #2
 8001472:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ffc3 	bl	8001400 <deltaticks>
 800147a:	4603      	mov	r3, r0
 800147c:	81fb      	strh	r3, [r7, #14]
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d809      	bhi.n	8001498 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <hal_checkTimer+0x78>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <hal_checkTimer+0x78>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0202 	bic.w	r2, r2, #2
 8001492:	60da      	str	r2, [r3, #12]
        return 1;
 8001494:	2301      	movs	r3, #1
 8001496:	e018      	b.n	80014ca <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <hal_checkTimer+0x78>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800149e:	89fa      	ldrh	r2, [r7, #14]
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <hal_checkTimer+0x78>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	440a      	add	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <hal_checkTimer+0x78>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <hal_checkTimer+0x78>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0202 	orr.w	r2, r2, #2
 80014b6:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <hal_checkTimer+0x78>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <hal_checkTimer+0x78>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	621a      	str	r2, [r3, #32]
        return 0;
 80014c8:	2300      	movs	r3, #0
    }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000042c 	.word	0x2000042c

080014d8 <HAL_TIM_PeriodElapsedCallback>:

//Callback deja renseigne dans le main.c
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d104      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014f4:	6053      	str	r3, [r2, #4]
    }

	if(htim == &htim6) HAL_ADC_Start_IT(&hadc1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d102      	bne.n	8001504 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80014fe:	4806      	ldr	r0, [pc, #24]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001500:	f004 ff24 	bl	800634c <HAL_ADC_Start_IT>

}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000042c 	.word	0x2000042c
 8001510:	2000014c 	.word	0x2000014c
 8001514:	200003e0 	.word	0x200003e0
 8001518:	20000028 	.word	0x20000028

0800151c <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <hal_disableIRQs+0x1c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a03      	ldr	r2, [pc, #12]	@ (8001538 <hal_disableIRQs+0x1c>)
 800152c:	6013      	str	r3, [r2, #0]
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	2000014c 	.word	0x2000014c

0800153c <hal_enableIRQs>:

void hal_enableIRQs () {
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <hal_enableIRQs+0x24>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <hal_enableIRQs+0x24>)
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <hal_enableIRQs+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001552:	b662      	cpsie	i
}
 8001554:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	2000014c 	.word	0x2000014c

08001564 <hal_sleep>:

void hal_sleep () {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001568:	bf30      	wfi
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001578:	2208      	movs	r2, #8
 800157a:	2100      	movs	r1, #0
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <hal_init+0x28>)
 800157e:	f008 fc69 	bl	8009e54 <memset>
    hal_disableIRQs();
 8001582:	f7ff ffcb 	bl	800151c <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 8001586:	f7ff fe71 	bl	800126c <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 800158a:	f7ff fedc 	bl	8001346 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 800158e:	f7ff feff 	bl	8001390 <hal_time_init>
    hal_enableIRQs();
 8001592:	f7ff ffd3 	bl	800153c <hal_enableIRQs>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000014c 	.word	0x2000014c

080015a0 <hal_failed>:

void hal_failed () {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 80015a4:	f7ff ffba 	bl	800151c <hal_disableIRQs>
    hal_sleep();
 80015a8:	f7ff ffdc 	bl	8001564 <hal_sleep>
    while(1);
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <hal_failed+0xc>

080015b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <MX_I2C1_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015bc:	4a1b      	ldr	r2, [pc, #108]	@ (800162c <MX_I2C1_Init+0x7c>)
 80015be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c6:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ea:	480e      	ldr	r0, [pc, #56]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015ec:	f006 f9aa 	bl	8007944 <HAL_I2C_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015f6:	f003 fa8b 	bl	8004b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <MX_I2C1_Init+0x74>)
 80015fe:	f006 fa3c 	bl	8007a7a <HAL_I2CEx_ConfigAnalogFilter>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001608:	f003 fa82 	bl	8004b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_I2C1_Init+0x74>)
 8001610:	f006 fa7e 	bl	8007b10 <HAL_I2CEx_ConfigDigitalFilter>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800161a:	f003 fa79 	bl	8004b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000154 	.word	0x20000154
 8001628:	40005400 	.word	0x40005400
 800162c:	10d19ce4 	.word	0x10d19ce4

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09e      	sub	sp, #120	@ 0x78
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	2254      	movs	r2, #84	@ 0x54
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f008 fbff 	bl	8009e54 <memset>
  if(i2cHandle->Instance==I2C1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_I2C_MspInit+0xa8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d137      	bne.n	80016d0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001660:	2340      	movs	r3, #64	@ 0x40
 8001662:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4618      	mov	r0, r3
 800166e:	f007 f8ff 	bl	8008870 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001678:	f003 fa4a 	bl	8004b10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_I2C_MspInit+0xac>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <HAL_I2C_MspInit+0xac>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_I2C_MspInit+0xac>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001694:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001698:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169a:	2312      	movs	r3, #18
 800169c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a6:	2304      	movs	r3, #4
 80016a8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f005 ffac 	bl	8007610 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_I2C_MspInit+0xac>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_I2C_MspInit+0xac>)
 80016be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_I2C_MspInit+0xac>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016d0:	bf00      	nop
 80016d2:	3778      	adds	r7, #120	@ 0x78
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40005400 	.word	0x40005400
 80016dc:	40021000 	.word	0x40021000

080016e0 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	b29b      	uxth	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b29b      	uxth	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	4613      	mov	r3, r2
 8001756:	717b      	strb	r3, [r7, #5]
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001760:	b21a      	sxth	r2, r3
 8001762:	797b      	ldrb	r3, [r7, #5]
 8001764:	015b      	lsls	r3, r3, #5
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	80fb      	strh	r3, [r7, #6]
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	09db      	lsrs	r3, r3, #7
 8001788:	b29b      	uxth	r3, r3
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	6039      	str	r1, [r7, #0]
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	6039      	str	r1, [r7, #0]
 80017f0:	80fb      	strh	r3, [r7, #6]
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b21b      	sxth	r3, r3
 8001804:	b29b      	uxth	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3301      	adds	r3, #1
 8001822:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <updr2rps+0x20>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	0800b008 	.word	0x0800b008

08001838 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ffe5 	bl	8001814 <updr2rps>
 800184a:	4603      	mov	r3, r0
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffa3 	bl	800179a <setNocrc>
 8001854:	4603      	mov	r3, r0
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <decDR+0x2c>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	2bff      	cmp	r3, #255	@ 0xff
 8001872:	d003      	beq.n	800187c <decDR+0x1c>
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	3b01      	subs	r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e000      	b.n	800187e <decDR+0x1e>
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	0800b008 	.word	0x0800b008

08001890 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	3301      	adds	r3, #1
 800189e:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <validDR+0x28>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	2bff      	cmp	r3, #255	@ 0xff
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	0800b008 	.word	0x0800b008

080018bc <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
 80018cc:	e005      	b.n	80018da <lowerDR+0x1e>
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ffc5 	bl	8001860 <decDR>
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	71ba      	strb	r2, [r7, #6]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f4      	bne.n	80018ce <lowerDR+0x12>
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3301      	adds	r3, #1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21b      	sxth	r3, r3
 800190a:	b29b      	uxth	r3, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3301      	adds	r3, #1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	4313      	orrs	r3, r2
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3302      	adds	r3, #2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3303      	adds	r3, #3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	061b      	lsls	r3, r3, #24
 8001944:	4313      	orrs	r3, r2
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3303      	adds	r3, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3302      	adds	r3, #2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	4313      	orrs	r3, r2
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3301      	adds	r3, #1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	4313      	orrs	r3, r2
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	0a1a      	lsrs	r2, r3, #8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	0c1a      	lsrs	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3302      	adds	r3, #2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	0e1a      	lsrs	r2, r3, #24
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3303      	adds	r3, #3
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	0a1a      	lsrs	r2, r3, #8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3302      	adds	r3, #2
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	0c1a      	lsrs	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	0e1b      	lsrs	r3, r3, #24
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	701a      	strb	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8001a42:	23ff      	movs	r3, #255	@ 0xff
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001a4e:	b480      	push	{r7}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8001a5c:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001a60:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	e026      	b.n	8001ab6 <os_crc16+0x68>
        remainder ^= data[i] << 8;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a78:	4053      	eors	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001a7e:	2308      	movs	r3, #8
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e012      	b.n	8001aaa <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8001a84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da08      	bge.n	8001a9e <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 8001a8c:	8afb      	ldrh	r3, [r7, #22]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a96:	4053      	eors	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	82fb      	strh	r3, [r7, #22]
 8001a9c:	e002      	b.n	8001aa4 <os_crc16+0x56>
            else 
                remainder <<= 1;
 8001a9e:	8afb      	ldrh	r3, [r7, #22]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e9      	bne.n	8001a84 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3d4      	bcc.n	8001a68 <os_crc16+0x1a>
        }
    }
    return remainder;
 8001abe:	8afb      	ldrh	r3, [r7, #22]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 8001ada:	2210      	movs	r2, #16
 8001adc:	2100      	movs	r1, #0
 8001ade:	4810      	ldr	r0, [pc, #64]	@ (8001b20 <micB0+0x54>)
 8001ae0:	f008 f9b8 	bl	8009e54 <memset>
    AESaux[0]  = 0x49;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <micB0+0x54>)
 8001ae6:	2249      	movs	r2, #73	@ 0x49
 8001ae8:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <micB0+0x58>)
 8001af8:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <micB0+0x5c>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <micB0+0x60>)
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff57 	bl	80019ba <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <micB0+0x64>)
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff52 	bl	80019ba <os_wlsbf4>
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000008c 	.word	0x2000008c
 8001b24:	20000091 	.word	0x20000091
 8001b28:	2000009b 	.word	0x2000009b
 8001b2c:	20000092 	.word	0x20000092
 8001b30:	20000096 	.word	0x20000096

08001b34 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f7ff ffbf 	bl	8001acc <micB0>
    os_copyMem(AESkey,key,16);
 8001b4e:	2210      	movs	r2, #16
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <aes_verifyMic+0x54>)
 8001b54:	f008 f9aa 	bl	8009eac <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	2002      	movs	r0, #2
 8001b62:	f7fe fe49 	bl	80007f8 <os_aes>
 8001b66:	4604      	mov	r4, r0
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	6a3a      	ldr	r2, [r7, #32]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff feef 	bl	8001952 <os_rmsbf4>
 8001b74:	4603      	mov	r3, r0
 8001b76:	429c      	cmp	r4, r3
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	2000009c 	.word	0x2000009c

08001b8c <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	68b8      	ldr	r0, [r7, #8]
 8001ba2:	f7ff ff93 	bl	8001acc <micB0>
    os_copyMem(AESkey,key,16);
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	480b      	ldr	r0, [pc, #44]	@ (8001bd8 <aes_appendMic+0x4c>)
 8001bac:	f008 f97e 	bl	8009eac <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	6a3a      	ldr	r2, [r7, #32]
 8001bb4:	18d4      	adds	r4, r2, r3
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fe1a 	bl	80007f8 <os_aes>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ff17 	bl	80019fc <os_wmsbf4>
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000009c 	.word	0x2000009c

08001bdc <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001be6:	480b      	ldr	r0, [pc, #44]	@ (8001c14 <aes_appendMic0+0x38>)
 8001be8:	f002 fe38 	bl	800485c <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	18d4      	adds	r4, r2, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	200a      	movs	r0, #10
 8001bfc:	f7fe fdfc 	bl	80007f8 <os_aes>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4619      	mov	r1, r3
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fef9 	bl	80019fc <os_wmsbf4>
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000009c 	.word	0x2000009c

08001c18 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001c22:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <aes_verifyMic0+0x40>)
 8001c24:	f002 fe1a 	bl	800485c <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7fe fde1 	bl	80007f8 <os_aes>
 8001c36:	4604      	mov	r4, r0
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe87 	bl	8001952 <os_rmsbf4>
 8001c44:	4603      	mov	r3, r0
 8001c46:	429c      	cmp	r4, r3
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	2000009c 	.word	0x2000009c

08001c5c <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <aes_encrypt+0x28>)
 8001c68:	f002 fdf8 	bl	800485c <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7fe fdbf 	bl	80007f8 <os_aes>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000009c 	.word	0x2000009c

08001c88 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dd29      	ble.n	8001cf0 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4815      	ldr	r0, [pc, #84]	@ (8001cf8 <aes_cipher+0x70>)
 8001ca2:	f008 f8d7 	bl	8009e54 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <aes_cipher+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <aes_cipher+0x70>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <aes_cipher+0x78>)
 8001cc0:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <aes_cipher+0x7c>)
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe77 	bl	80019ba <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <aes_cipher+0x80>)
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fe72 	bl	80019ba <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <aes_cipher+0x84>)
 8001cdc:	f008 f8e6 	bl	8009eac <memcpy>
    os_aes(AES_CTR, payload, len);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	2004      	movs	r0, #4
 8001cea:	f7fe fd85 	bl	80007f8 <os_aes>
 8001cee:	e000      	b.n	8001cf2 <aes_cipher+0x6a>
        return;
 8001cf0:	bf00      	nop
}
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2000008c 	.word	0x2000008c
 8001cfc:	2000009b 	.word	0x2000009b
 8001d00:	20000091 	.word	0x20000091
 8001d04:	20000092 	.word	0x20000092
 8001d08:	20000096 	.word	0x20000096
 8001d0c:	2000009c 	.word	0x2000009c

08001d10 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001d20:	2210      	movs	r2, #16
 8001d22:	2100      	movs	r1, #0
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f008 f895 	bl	8009e54 <memset>
    nwkkey[0] = 0x01;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	2206      	movs	r2, #6
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f008 f8b7 	bl	8009eac <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3307      	adds	r3, #7
 8001d42:	89fa      	ldrh	r2, [r7, #14]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fe20 	bl	800198c <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f008 f8ab 	bl	8009eac <memcpy>
    artkey[0] = 0x02;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001d5c:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <aes_sessKeys+0x74>)
 8001d5e:	f002 fd7d 	bl	800485c <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001d62:	2210      	movs	r2, #16
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7fe fd46 	bl	80007f8 <os_aes>
    os_getDevKey(AESkey);
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <aes_sessKeys+0x74>)
 8001d6e:	f002 fd75 	bl	800485c <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001d72:	2210      	movs	r2, #16
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7fe fd3e 	bl	80007f8 <os_aes>
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000009c 	.word	0x2000009c

08001d88 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fca3 	bl	80016e0 <getSf>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461c      	mov	r4, r3
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fcad 	bl	8001700 <getBw>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <getSensitivity+0x3c>)
 8001dac:	4623      	mov	r3, r4
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4423      	add	r3, r4
 8001db2:	4413      	add	r3, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3b8d      	subs	r3, #141	@ 0x8d
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	0800b024 	.word	0x0800b024

08001dc8 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	80fb      	strh	r3, [r7, #6]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fc90 	bl	8001700 <getBw>
 8001de0:	4603      	mov	r3, r0
 8001de2:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc7a 	bl	80016e0 <getSf>
 8001dec:	4603      	mov	r3, r0
 8001dee:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001df6:	797b      	ldrb	r3, [r7, #5]
 8001df8:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001dfa:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	4a3c      	ldr	r2, [pc, #240]	@ (8001ef4 <calcAirTime+0x12c>)
 8001e04:	fb82 1203 	smull	r1, r2, r2, r3
 8001e08:	1312      	asrs	r2, r2, #12
 8001e0a:	17db      	asrs	r3, r3, #31
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	e06d      	b.n	8001eec <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001e10:	7abb      	ldrb	r3, [r7, #10]
 8001e12:	3306      	adds	r3, #6
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001e1a:	7abb      	ldrb	r3, [r7, #10]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d901      	bls.n	8001e24 <calcAirTime+0x5c>
 8001e20:	2308      	movs	r3, #8
 8001e22:	e000      	b.n	8001e26 <calcAirTime+0x5e>
 8001e24:	2300      	movs	r3, #0
 8001e26:	7dfa      	ldrb	r2, [r7, #23]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001e2c:	797b      	ldrb	r3, [r7, #5]
 8001e2e:	00da      	lsls	r2, r3, #3
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f103 041c 	add.w	r4, r3, #28
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fc9d 	bl	800177a <getNocrc>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <calcAirTime+0x82>
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <calcAirTime+0x84>
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	441c      	add	r4, r3
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fcb9 	bl	80017c8 <getIh>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <calcAirTime+0x98>
 8001e5c:	2314      	movs	r3, #20
 8001e5e:	e000      	b.n	8001e62 <calcAirTime+0x9a>
 8001e60:	2300      	movs	r3, #0
 8001e62:	1ae3      	subs	r3, r4, r3
 8001e64:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd15      	ble.n	8001e98 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8001e6c:	7a7a      	ldrb	r2, [r7, #9]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	7a7b      	ldrb	r3, [r7, #9]
 8001e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e7a:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fc50 	bl	8001724 <getCr>
 8001e84:	4603      	mov	r3, r0
 8001e86:	1d5a      	adds	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	3308      	adds	r3, #8
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e001      	b.n	8001e9c <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3331      	adds	r3, #49	@ 0x31
 8001ea2:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8001ea4:	7aba      	ldrb	r2, [r7, #10]
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8001eb0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8001eb4:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d907      	bls.n	8001ecc <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	fa42 f303 	asr.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ed8:	fb03 f202 	mul.w	r2, r3, r2
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	0fd9      	lsrs	r1, r3, #31
 8001ee0:	440b      	add	r3, r1
 8001ee2:	105b      	asrs	r3, r3, #1
 8001ee4:	441a      	add	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	14f8b589 	.word	0x14f8b589

08001ef8 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	460a      	mov	r2, r1
 8001f02:	71fb      	strb	r3, [r7, #7]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f10:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8001f14:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f18:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e011      	b.n	8001f44 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f22:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8001f26:	461a      	mov	r2, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	11db      	asrs	r3, r3, #7
 8001f30:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f34:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	11db      	asrs	r3, r3, #7
 8001f42:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8001f44:	2305      	movs	r3, #5
 8001f46:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f4a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f52:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	@ (8001f9c <calcRxWindow+0xa4>)
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3305      	adds	r3, #5
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <calcRxWindow+0xa0>)
 8001f76:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	3b08      	subs	r3, #8
 8001f7c:	79ba      	ldrb	r2, [r7, #6]
 8001f7e:	4907      	ldr	r1, [pc, #28]	@ (8001f9c <calcRxWindow+0xa4>)
 8001f80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f84:	fb03 f202 	mul.w	r2, r3, r2
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	4413      	add	r3, r2
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	200001a8 	.word	0x200001a8
 8001f9c:	0800b048 	.word	0x0800b048

08001fa0 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4606      	mov	r6, r0
 8001faa:	4608      	mov	r0, r1
 8001fac:	4631      	mov	r1, r6
 8001fae:	73f9      	strb	r1, [r7, #15]
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8001fb4:	7bb9      	ldrb	r1, [r7, #14]
 8001fb6:	2900      	cmp	r1, #0
 8001fb8:	d014      	beq.n	8001fe4 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 8001fba:	493b      	ldr	r1, [pc, #236]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8001fc2:	4939      	ldr	r1, [pc, #228]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 8001fca:	4937      	ldr	r1, [pc, #220]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8001fd2:	4935      	ldr	r1, [pc, #212]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 8001fd4:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8001fd8:	f041 010c 	orr.w	r1, r1, #12
 8001fdc:	b2c8      	uxtb	r0, r1
 8001fde:	4932      	ldr	r1, [pc, #200]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 8001fe0:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8001fe4:	2142      	movs	r1, #66	@ 0x42
 8001fe6:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8001fe8:	7bf9      	ldrb	r1, [r7, #15]
 8001fea:	2000      	movs	r0, #0
 8001fec:	460c      	mov	r4, r1
 8001fee:	4605      	mov	r5, r0
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f04f 0a00 	mov.w	sl, #0
 8001ff8:	f04f 0b00 	mov.w	fp, #0
 8001ffc:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002000:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002004:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002008:	4650      	mov	r0, sl
 800200a:	4659      	mov	r1, fp
 800200c:	1b02      	subs	r2, r0, r4
 800200e:	eb61 0305 	sbc.w	r3, r1, r5
 8002012:	f04f 0000 	mov.w	r0, #0
 8002016:	f04f 0100 	mov.w	r1, #0
 800201a:	0099      	lsls	r1, r3, #2
 800201c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002020:	0090      	lsls	r0, r2, #2
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	eb12 0804 	adds.w	r8, r2, r4
 800202a:	eb43 0905 	adc.w	r9, r3, r5
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800203a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800203e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	4642      	mov	r2, r8
 8002048:	464b      	mov	r3, r9
 800204a:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800204e:	1851      	adds	r1, r2, r1
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	f143 0300 	adc.w	r3, r3, #0
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002064:	f7fe f8b2 	bl	80001cc <__aeabi_ldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3305      	adds	r3, #5
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 800207a:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 8002080:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002084:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 8002088:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 800208a:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800208e:	3b08      	subs	r3, #8
 8002090:	6979      	ldr	r1, [r7, #20]
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a03      	ldr	r2, [pc, #12]	@ (80020a8 <calcBcnRxWindowFromMillis+0x108>)
 800209a:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a8:	200001a8 	.word	0x200001a8

080020ac <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 80020b4:	2210      	movs	r2, #16
 80020b6:	2100      	movs	r1, #0
 80020b8:	482e      	ldr	r0, [pc, #184]	@ (8002174 <rxschedInit+0xc8>)
 80020ba:	f007 fecb 	bl	8009e54 <memset>
    os_clearMem(LMIC.frame+8,8);
 80020be:	4b2e      	ldr	r3, [pc, #184]	@ (8002178 <rxschedInit+0xcc>)
 80020c0:	2208      	movs	r2, #8
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f007 fec5 	bl	8009e54 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 80020ca:	4b2c      	ldr	r3, [pc, #176]	@ (800217c <rxschedInit+0xd0>)
 80020cc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80020d0:	4619      	mov	r1, r3
 80020d2:	482b      	ldr	r0, [pc, #172]	@ (8002180 <rxschedInit+0xd4>)
 80020d4:	f7ff fc71 	bl	80019ba <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <rxschedInit+0xd8>)
 80020da:	4b28      	ldr	r3, [pc, #160]	@ (800217c <rxschedInit+0xd0>)
 80020dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80020e0:	4619      	mov	r1, r3
 80020e2:	4610      	mov	r0, r2
 80020e4:	f7ff fc69 	bl	80019ba <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 80020e8:	2210      	movs	r2, #16
 80020ea:	4925      	ldr	r1, [pc, #148]	@ (8002180 <rxschedInit+0xd4>)
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe fb83 	bl	80007f8 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 80020f8:	4821      	ldr	r0, [pc, #132]	@ (8002180 <rxschedInit+0xd4>)
 80020fa:	f7ff fbf8 	bl	80018ee <os_rlsbf2>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	f1c3 0307 	rsb	r3, r3, #7
 8002108:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800210c:	fa42 f303 	asr.w	r3, r2, r3
 8002110:	400b      	ands	r3, r1
 8002112:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <rxschedInit+0xd0>)
 8002116:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 800211a:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8002126:	440b      	add	r3, r1
 8002128:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800212c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002130:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685c      	ldr	r4, [r3, #4]
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2201      	movs	r2, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3302      	adds	r3, #2
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f7ff fecf 	bl	8001ef8 <calcRxWindow>
 800215a:	4603      	mov	r3, r0
 800215c:	1ae2      	subs	r2, r4, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <rxschedInit+0xd0>)
 8002164:	7c1a      	ldrb	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	70da      	strb	r2, [r3, #3]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}
 8002172:	bf00      	nop
 8002174:	2000009c 	.word	0x2000009c
 8002178:	200002f8 	.word	0x200002f8
 800217c:	200001a8 	.word	0x200001a8
 8002180:	200002f0 	.word	0x200002f0
 8002184:	200002f4 	.word	0x200002f4

08002188 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	db01      	blt.n	80021a2 <rxschedNext+0x1a>
        return 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	e03a      	b.n	8002218 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	789b      	ldrb	r3, [r3, #2]
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da01      	bge.n	80021b4 <rxschedNext+0x2c>
        return 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e031      	b.n	8002218 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	461a      	mov	r2, r3
 80021ba:	2301      	movs	r3, #1
 80021bc:	4093      	lsls	r3, r2
 80021be:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	4413      	add	r3, r2
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	709a      	strb	r2, [r3, #2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	789b      	ldrb	r3, [r3, #2]
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da01      	bge.n	80021dc <rxschedNext+0x54>
        return 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	e01d      	b.n	8002218 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	049b      	lsls	r3, r3, #18
 80021ea:	11db      	asrs	r3, r3, #7
 80021ec:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	4413      	add	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3302      	adds	r3, #2
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f7ff fe79 	bl	8001ef8 <calcRxWindow>
 8002206:	4603      	mov	r3, r0
 8002208:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <rxschedNext+0x98>)
 8002210:	7c1a      	ldrb	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	70da      	strb	r2, [r3, #3]
    goto again;
 8002216:	e7bc      	b.n	8002192 <rxschedNext+0xa>
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	200001a8 	.word	0x200001a8

08002224 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 800222e:	f003 f9b1 	bl	8005594 <radio_rand1>
 8002232:	4603      	mov	r3, r0
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	b21c      	sxth	r4, r3
 8002238:	f003 f9ac 	bl	8005594 <radio_rand1>
 800223c:	4603      	mov	r3, r0
 800223e:	b21b      	sxth	r3, r3
 8002240:	4323      	orrs	r3, r4
 8002242:	b21b      	sxth	r3, r3
 8002244:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002250:	dd0b      	ble.n	800226a <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	4a11      	ldr	r2, [pc, #68]	@ (800229c <rndDelay+0x78>)
 8002256:	fba2 1203 	umull	r1, r2, r2, r3
 800225a:	0ad2      	lsrs	r2, r2, #11
 800225c:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002260:	fb01 f202 	mul.w	r2, r1, r2
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	fbb3 f1f2 	udiv	r1, r3, r2
 800227a:	fb01 f202 	mul.w	r2, r1, r2
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    return delay;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	10624dd3 	.word	0x10624dd3

080022a0 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ffb8 	bl	8002224 <rndDelay>
 80022b4:	4602      	mov	r2, r0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <txDelay+0x58>)
 80022be:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <txDelay+0x34>
 80022c6:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <txDelay+0x58>)
 80022c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	dd0c      	ble.n	80022ee <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 80022d4:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <txDelay+0x58>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <txDelay+0x58>)
 80022de:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80022e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <txDelay+0x58>)
 80022ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200001a8 	.word	0x200001a8

080022fc <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 800230c:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <setDrJoin+0x24>)
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	200001a8 	.word	0x200001a8

08002324 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	460b      	mov	r3, r1
 8002330:	71bb      	strb	r3, [r7, #6]
 8002332:	4613      	mov	r3, r2
 8002334:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002336:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800233a:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800233e:	d003      	beq.n	8002348 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002340:	4a0e      	ldr	r2, [pc, #56]	@ (800237c <setDrTxpow+0x58>)
 8002342:	797b      	ldrb	r3, [r7, #5]
 8002344:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <setDrTxpow+0x58>)
 800234a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800234e:	79ba      	ldrb	r2, [r7, #6]
 8002350:	429a      	cmp	r2, r3
 8002352:	d00c      	beq.n	800236e <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002354:	4a09      	ldr	r2, [pc, #36]	@ (800237c <setDrTxpow+0x58>)
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <setDrTxpow+0x58>)
 800235e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002362:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b04      	ldr	r3, [pc, #16]	@ (800237c <setDrTxpow+0x58>)
 800236a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200001a8 	.word	0x200001a8

08002380 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 800238a:	2240      	movs	r2, #64	@ 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	483a      	ldr	r0, [pc, #232]	@ (8002478 <initDefaultChannels+0xf8>)
 8002390:	f007 fd60 	bl	8009e54 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002394:	2220      	movs	r2, #32
 8002396:	2100      	movs	r1, #0
 8002398:	4838      	ldr	r0, [pc, #224]	@ (800247c <initDefaultChannels+0xfc>)
 800239a:	f007 fd5b 	bl	8009e54 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800239e:	2220      	movs	r2, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	4837      	ldr	r0, [pc, #220]	@ (8002480 <initDefaultChannels+0x100>)
 80023a4:	f007 fd56 	bl	8009e54 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <initDefaultChannels+0x104>)
 80023aa:	223f      	movs	r2, #63	@ 0x3f
 80023ac:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <initDefaultChannels+0x3a>
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <initDefaultChannels+0x3c>
 80023ba:	2306      	movs	r3, #6
 80023bc:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 80023be:	2300      	movs	r3, #0
 80023c0:	73bb      	strb	r3, [r7, #14]
 80023c2:	e014      	b.n	80023ee <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	492f      	ldr	r1, [pc, #188]	@ (8002488 <initDefaultChannels+0x108>)
 80023ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80023ce:	492d      	ldr	r1, [pc, #180]	@ (8002484 <initDefaultChannels+0x104>)
 80023d0:	3310      	adds	r3, #16
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <initDefaultChannels+0x104>)
 80023da:	3340      	adds	r3, #64	@ 0x40
 80023dc:	213f      	movs	r1, #63	@ 0x3f
 80023de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73bb      	strb	r3, [r7, #14]
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	3301      	adds	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d9e7      	bls.n	80023c4 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <initDefaultChannels+0x104>)
 80023f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023fa:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <initDefaultChannels+0x104>)
 80023fe:	220e      	movs	r2, #14
 8002400:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002404:	f003 f8c6 	bl	8005594 <radio_rand1>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <initDefaultChannels+0x104>)
 8002412:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 8002416:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <initDefaultChannels+0x104>)
 8002418:	2264      	movs	r2, #100	@ 0x64
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <initDefaultChannels+0x104>)
 800241e:	220e      	movs	r2, #14
 8002420:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002424:	f003 f8b6 	bl	8005594 <radio_rand1>
 8002428:	4603      	mov	r3, r0
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <initDefaultChannels+0x104>)
 8002432:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 8002436:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <initDefaultChannels+0x104>)
 8002438:	220a      	movs	r2, #10
 800243a:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <initDefaultChannels+0x104>)
 800243e:	221b      	movs	r2, #27
 8002440:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002444:	f003 f8a6 	bl	8005594 <radio_rand1>
 8002448:	4603      	mov	r3, r0
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <initDefaultChannels+0x104>)
 8002452:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 8002456:	f002 fb73 	bl	8004b40 <os_getTime>
 800245a:	4603      	mov	r3, r0
 800245c:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <initDefaultChannels+0x104>)
 800245e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <initDefaultChannels+0x104>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <initDefaultChannels+0x104>)
 8002466:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <initDefaultChannels+0x104>)
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 800246c:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <initDefaultChannels+0x104>)
 800246e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200001e8 	.word	0x200001e8
 800247c:	20000228 	.word	0x20000228
 8002480:	200001c8 	.word	0x200001c8
 8002484:	200001a8 	.word	0x200001a8
 8002488:	0800b068 	.word	0x0800b068

0800248c <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6039      	str	r1, [r7, #0]
 8002494:	4611      	mov	r1, r2
 8002496:	461a      	mov	r2, r3
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	460b      	mov	r3, r1
 800249e:	80bb      	strh	r3, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	d901      	bls.n	80024ae <LMIC_setupChannel+0x22>
        return 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e054      	b.n	8002558 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 80024ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d121      	bne.n	80024fc <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002564 <LMIC_setupChannel+0xd8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d908      	bls.n	80024d2 <LMIC_setupChannel+0x46>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4a29      	ldr	r2, [pc, #164]	@ (8002568 <LMIC_setupChannel+0xdc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d804      	bhi.n	80024d2 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	e021      	b.n	8002516 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4a25      	ldr	r2, [pc, #148]	@ (800256c <LMIC_setupChannel+0xe0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d903      	bls.n	80024e2 <LMIC_setupChannel+0x56>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	4a24      	ldr	r2, [pc, #144]	@ (8002570 <LMIC_setupChannel+0xe4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d907      	bls.n	80024f2 <LMIC_setupChannel+0x66>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	4a23      	ldr	r2, [pc, #140]	@ (8002574 <LMIC_setupChannel+0xe8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d315      	bcc.n	8002516 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	4a22      	ldr	r2, [pc, #136]	@ (8002578 <LMIC_setupChannel+0xec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d811      	bhi.n	8002516 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	e00c      	b.n	8002516 <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 80024fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002500:	2b03      	cmp	r3, #3
 8002502:	dd01      	ble.n	8002508 <LMIC_setupChannel+0x7c>
 8002504:	2300      	movs	r3, #0
 8002506:	e027      	b.n	8002558 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002512:	4313      	orrs	r3, r2
 8002514:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4918      	ldr	r1, [pc, #96]	@ (800257c <LMIC_setupChannel+0xf0>)
 800251a:	3310      	adds	r3, #16
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8002522:	88bb      	ldrh	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <LMIC_setupChannel+0xa0>
 8002528:	88ba      	ldrh	r2, [r7, #4]
 800252a:	e000      	b.n	800252e <LMIC_setupChannel+0xa2>
 800252c:	223f      	movs	r2, #63	@ 0x3f
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4912      	ldr	r1, [pc, #72]	@ (800257c <LMIC_setupChannel+0xf0>)
 8002532:	3340      	adds	r3, #64	@ 0x40
 8002534:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <LMIC_setupChannel+0xf0>)
 800253a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800253e:	b21a      	sxth	r2, r3
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	b21b      	sxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b21b      	sxth	r3, r3
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <LMIC_setupChannel+0xf0>)
 8002552:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	33d1fdbf 	.word	0x33d1fdbf
 8002568:	33d5ce50 	.word	0x33d5ce50
 800256c:	33bca0ff 	.word	0x33bca0ff
 8002570:	33c5c8c0 	.word	0x33c5c8c0
 8002574:	33d691a0 	.word	0x33d691a0
 8002578:	33db2580 	.word	0x33db2580
 800257c:	200001a8 	.word	0x200001a8

08002580 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f9c3 	bl	8001918 <os_rlsbf4>
 8002592:	4603      	mov	r3, r0
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	2264      	movs	r2, #100	@ 0x64
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a06      	ldr	r2, [pc, #24]	@ (80025bc <convFreq+0x3c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d303      	bcc.n	80025ae <convFreq+0x2e>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <convFreq+0x40>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <convFreq+0x32>
        freq = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
    return freq;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	337055c0 	.word	0x337055c0
 80025c0:	33db2580 	.word	0x33db2580

080025c4 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	460a      	mov	r2, r1
 80025ce:	71fb      	strb	r3, [r7, #7]
 80025d0:	4613      	mov	r3, r2
 80025d2:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <mapChannels+0x2c>
 80025da:	88bb      	ldrh	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <mapChannels+0x2c>
 80025e0:	88ba      	ldrh	r2, [r7, #4]
 80025e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <mapChannels+0x90>)
 80025e4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <mapChannels+0x30>
        return 0;  // illegal input
 80025f0:	2300      	movs	r3, #0
 80025f2:	e028      	b.n	8002646 <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	e01d      	b.n	8002636 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 80025fa:	88ba      	ldrh	r2, [r7, #4]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	fa42 f303 	asr.w	r3, r2, r3
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <mapChannels+0x6c>
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <mapChannels+0x90>)
 800260e:	3310      	adds	r3, #16
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2201      	movs	r2, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	b21b      	sxth	r3, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	b21a      	sxth	r2, r3
 8002626:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800262a:	4013      	ands	r3, r2
 800262c:	b21b      	sxth	r3, r3
 800262e:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	3301      	adds	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b0f      	cmp	r3, #15
 800263a:	d9de      	bls.n	80025fa <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 800263c:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <mapChannels+0x90>)
 800263e:	88bb      	ldrh	r3, [r7, #4]
 8002640:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200001a8 	.word	0x200001a8

08002658 <updateTx>:


static void updateTx (ostime_t txbeg) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <updateTx+0x90>)
 8002662:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002666:	4a20      	ldr	r2, [pc, #128]	@ (80026e8 <updateTx+0x90>)
 8002668:	3310      	adds	r3, #16
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <updateTx+0x90>)
 8002672:	89db      	ldrh	r3, [r3, #14]
 8002674:	4a1c      	ldr	r2, [pc, #112]	@ (80026e8 <updateTx+0x90>)
 8002676:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fba3 	bl	8001dc8 <calcAirTime>
 8002682:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3304      	adds	r3, #4
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <updateTx+0x90>)
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <updateTx+0x90>)
 800269c:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <updateTx+0x90>)
 80026a6:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fb03 f202 	mul.w	r2, r3, r2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	441a      	add	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <updateTx+0x90>)
 80026be:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 80026c6:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <updateTx+0x90>)
 80026c8:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80026cc:	461a      	mov	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fa03 f202 	lsl.w	r2, r3, r2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a03      	ldr	r2, [pc, #12]	@ (80026e8 <updateTx+0x90>)
 80026da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200001a8 	.word	0x200001a8

080026ec <nextTx>:

static ostime_t nextTx (ostime_t now) {
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 80026f4:	230f      	movs	r3, #15
 80026f6:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4b48      	ldr	r3, [pc, #288]	@ (800281c <nextTx+0x130>)
 80026fc:	4413      	add	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002704:	2300      	movs	r3, #0
 8002706:	73bb      	strb	r3, [r7, #14]
 8002708:	e01d      	b.n	8002746 <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 800270a:	7dfa      	ldrb	r2, [r7, #23]
 800270c:	7bbb      	ldrb	r3, [r7, #14]
 800270e:	fa42 f303 	asr.w	r3, r2, r3
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <nextTx+0x54>
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	4a40      	ldr	r2, [pc, #256]	@ (8002820 <nextTx+0x134>)
 800271e:	3304      	adds	r3, #4
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	dd08      	ble.n	8002740 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	4a3a      	ldr	r2, [pc, #232]	@ (8002820 <nextTx+0x134>)
 8002736:	3304      	adds	r3, #4
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	3301      	adds	r3, #1
 8002744:	73bb      	strb	r3, [r7, #14]
 8002746:	7bbb      	ldrb	r3, [r7, #14]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d9de      	bls.n	800270a <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	4a34      	ldr	r2, [pc, #208]	@ (8002820 <nextTx+0x134>)
 8002750:	3304      	adds	r3, #4
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	78db      	ldrb	r3, [r3, #3]
 8002758:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800275a:	2300      	movs	r3, #0
 800275c:	733b      	strb	r3, [r7, #12]
 800275e:	e042      	b.n	80027e6 <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	3301      	adds	r3, #1
 8002764:	737b      	strb	r3, [r7, #13]
 8002766:	7b7b      	ldrb	r3, [r7, #13]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d902      	bls.n	8002772 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 800276c:	7b7b      	ldrb	r3, [r7, #13]
 800276e:	3b10      	subs	r3, #16
 8002770:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002772:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <nextTx+0x134>)
 8002774:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002778:	461a      	mov	r2, r3
 800277a:	7b7b      	ldrb	r3, [r7, #13]
 800277c:	fa42 f303 	asr.w	r3, r2, r3
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02b      	beq.n	80027e0 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002788:	7b7b      	ldrb	r3, [r7, #13]
 800278a:	4a25      	ldr	r2, [pc, #148]	@ (8002820 <nextTx+0x134>)
 800278c:	3340      	adds	r3, #64	@ 0x40
 800278e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002792:	461a      	mov	r2, r3
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <nextTx+0x134>)
 8002796:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	fa42 f303 	asr.w	r3, r2, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01a      	beq.n	80027e0 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	7b7b      	ldrb	r3, [r7, #13]
 80027ae:	491c      	ldr	r1, [pc, #112]	@ (8002820 <nextTx+0x134>)
 80027b0:	3310      	adds	r3, #16
 80027b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027b6:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d110      	bne.n	80027e0 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	4917      	ldr	r1, [pc, #92]	@ (8002820 <nextTx+0x134>)
 80027c2:	1d13      	adds	r3, r2, #4
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	7b79      	ldrb	r1, [r7, #13]
 80027ca:	70d9      	strb	r1, [r3, #3]
 80027cc:	4914      	ldr	r1, [pc, #80]	@ (8002820 <nextTx+0x134>)
 80027ce:	1d13      	adds	r3, r2, #4
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	78da      	ldrb	r2, [r3, #3]
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <nextTx+0x134>)
 80027d8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	e016      	b.n	800280e <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80027e0:	7b3b      	ldrb	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	733b      	strb	r3, [r7, #12]
 80027e6:	7b3b      	ldrb	r3, [r7, #12]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d9b9      	bls.n	8002760 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2201      	movs	r2, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	b25a      	sxtb	r2, r3
 80027fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027fe:	4013      	ands	r3, r2
 8002800:	b25b      	sxtb	r3, r3
 8002802:	75fb      	strb	r3, [r7, #23]
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f47f af76 	bne.w	80026f8 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 800280c:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 800280e:	4618      	mov	r0, r3
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	44aa2000 	.word	0x44aa2000
 8002820:	200001a8 	.word	0x200001a8

08002824 <setBcnRxParams>:


static void setBcnRxParams (void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 8002828:	4b10      	ldr	r3, [pc, #64]	@ (800286c <setBcnRxParams+0x48>)
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8002830:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <setBcnRxParams+0x48>)
 8002832:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8002836:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <setBcnRxParams+0x48>)
 8002838:	3310      	adds	r3, #16
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <setBcnRxParams+0x48>)
 8002844:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 8002846:	2003      	movs	r0, #3
 8002848:	f7fe fff6 	bl	8001838 <dndr2rps>
 800284c:	4603      	mov	r3, r0
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ffa2 	bl	800179a <setNocrc>
 8002856:	4603      	mov	r3, r0
 8002858:	2111      	movs	r1, #17
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe ffc3 	bl	80017e6 <setIh>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b01      	ldr	r3, [pc, #4]	@ (800286c <setBcnRxParams+0x48>)
 8002866:	81da      	strh	r2, [r3, #14]
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200001a8 	.word	0x200001a8

08002870 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8002870:	b598      	push	{r3, r4, r7, lr}
 8002872:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002874:	f002 fe8e 	bl	8005594 <radio_rand1>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <initJoinLoop+0x64>)
 800287e:	fba3 1302 	umull	r1, r3, r3, r2
 8002882:	0899      	lsrs	r1, r3, #2
 8002884:	460b      	mov	r3, r1
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	440b      	add	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <initJoinLoop+0x68>)
 8002892:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <initJoinLoop+0x68>)
 8002898:	220e      	movs	r2, #14
 800289a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 800289e:	2105      	movs	r1, #5
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff fd2b 	bl	80022fc <setDrJoin>
    initDefaultChannels(1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff fd6a 	bl	8002380 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <initJoinLoop+0x68>)
 80028ae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80028b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <initJoinLoop+0x4e>
 80028ba:	f7fe fe71 	bl	80015a0 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <initJoinLoop+0x68>)
 80028c0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80028c2:	2008      	movs	r0, #8
 80028c4:	f7ff fcae 	bl	8002224 <rndDelay>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4423      	add	r3, r4
 80028cc:	4a02      	ldr	r2, [pc, #8]	@ (80028d8 <initJoinLoop+0x68>)
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	bd98      	pop	{r3, r4, r7, pc}
 80028d4:	aaaaaaab 	.word	0xaaaaaaab
 80028d8:	200001a8 	.word	0x200001a8

080028dc <nextJoinState>:


static ostime_t nextJoinState (void) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 80028e6:	4b30      	ldr	r3, [pc, #192]	@ (80029a8 <nextJoinState+0xcc>)
 80028e8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80028ec:	3301      	adds	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <nextJoinState+0xcc>)
 80028f2:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 80028f6:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <nextJoinState+0xcc>)
 80028f8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d103      	bne.n	8002908 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <nextJoinState+0xcc>)
 8002902:	2200      	movs	r2, #0
 8002904:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8002908:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <nextJoinState+0xcc>)
 800290a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800290e:	3301      	adds	r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <nextJoinState+0xcc>)
 8002914:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8002918:	4b23      	ldr	r3, [pc, #140]	@ (80029a8 <nextJoinState+0xcc>)
 800291a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d112      	bne.n	800294c <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <nextJoinState+0xcc>)
 8002928:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002930:	2301      	movs	r3, #1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	e00a      	b.n	800294c <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 8002936:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <nextJoinState+0xcc>)
 8002938:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe ff8f 	bl	8001860 <decDR>
 8002942:	4603      	mov	r3, r0
 8002944:	4619      	mov	r1, r3
 8002946:	2001      	movs	r0, #1
 8002948:	f7ff fcd8 	bl	80022fc <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <nextJoinState+0xcc>)
 800294e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <nextJoinState+0xcc>)
 800295a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 800295e:	f002 f8ef 	bl	8004b40 <os_getTime>
 8002962:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <nextJoinState+0xcc>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	da02      	bge.n	8002976 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8002970:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <nextJoinState+0xcc>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <nextJoinState+0xcc>)
 8002978:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800297c:	461a      	mov	r2, r3
 800297e:	23ff      	movs	r3, #255	@ 0xff
 8002980:	4113      	asrs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fc4d 	bl	8002224 <rndDelay>
 800298a:	4603      	mov	r3, r0
 800298c:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8002990:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	4413      	add	r3, r2
 8002998:	4a03      	ldr	r2, [pc, #12]	@ (80029a8 <nextJoinState+0xcc>)
 800299a:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 800299c:	79fb      	ldrb	r3, [r7, #7]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200001a8 	.word	0x200001a8

080029ac <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    engineUpdate();
 80029b4:	f001 fcb6 	bl	8004324 <engineUpdate>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <reportEvent>:


static void reportEvent (ev_t ev) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 ffcb 	bl	8004968 <onEvent>
    engineUpdate();
 80029d2:	f001 fca7 	bl	8004324 <engineUpdate>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <runReset>:


static void runReset (xref2osjob_t osjob) {
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 80029e6:	f001 fe67 	bl	80046b8 <LMIC_reset>
    LMIC_startJoining();
 80029ea:	f001 fa0f 	bl	8003e0c <LMIC_startJoining>
    reportEvent(EV_RESET);
 80029ee:	200c      	movs	r0, #12
 80029f0:	f7ff ffe6 	bl	80029c0 <reportEvent>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <stateJustJoined>:

static void stateJustJoined (void) {
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8002a08:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a0a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a10:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 8002a14:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a26:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8002a2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a2c:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8002a30:	4b23      	ldr	r3, [pc, #140]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a32:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8002a36:	4b22      	ldr	r3, [pc, #136]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a38:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8002a3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a3e:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8002a42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a44:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8002a50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a52:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a58:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a5e:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8002a62:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a64:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8002a68:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a6a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8002a6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a70:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 8002a74:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 8002a7c:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a86:	22f4      	movs	r2, #244	@ 0xf4
 8002a88:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a96:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <stateJustJoined+0xc8>)
 8002a98:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <stateJustJoined+0xc8>)
 8002aa8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <stateJustJoined+0xc4>)
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200001a8 	.word	0x200001a8
 8002ac4:	33d3e608 	.word	0x33d3e608

08002ac8 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8002ace:	4b46      	ldr	r3, [pc, #280]	@ (8002be8 <decodeBeacon+0x120>)
 8002ad0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8002ad4:	2b11      	cmp	r3, #17
 8002ad6:	d001      	beq.n	8002adc <decodeBeacon+0x14>
 8002ad8:	f7fe fd62 	bl	80015a0 <hal_failed>
    xref2u1_t d = LMIC.frame;
 8002adc:	4b43      	ldr	r3, [pc, #268]	@ (8002bec <decodeBeacon+0x124>)
 8002ade:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3307      	adds	r3, #7
 8002ae4:	781c      	ldrb	r4, [r3, #0]
 8002ae6:	2107      	movs	r1, #7
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fe ffb0 	bl	8001a4e <os_crc16>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b2db      	uxtb	r3, r3
    if(
 8002af2:	429c      	cmp	r4, r3
 8002af4:	d001      	beq.n	8002afa <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 8002af6:	2300      	movs	r3, #0
 8002af8:	e071      	b.n	8002bde <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe ff0c 	bl	8001918 <os_rlsbf4>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b06:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8002b08:	4b37      	ldr	r3, [pc, #220]	@ (8002be8 <decodeBeacon+0x120>)
 8002b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d002      	beq.n	8002b1a <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	e061      	b.n	8002bde <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 8002b1a:	4b33      	ldr	r3, [pc, #204]	@ (8002be8 <decodeBeacon+0x120>)
 8002b1c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002b20:	f023 0303 	bic.w	r3, r3, #3
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <decodeBeacon+0x120>)
 8002b28:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002be8 <decodeBeacon+0x120>)
 8002b2e:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <decodeBeacon+0x120>)
 8002b34:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8002b38:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <decodeBeacon+0x120>)
 8002b3a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <decodeBeacon+0x120>)
 8002b40:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8002b44:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <decodeBeacon+0x120>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8002b4c:	3b0c      	subs	r3, #12
 8002b4e:	4a26      	ldr	r2, [pc, #152]	@ (8002be8 <decodeBeacon+0x120>)
 8002b50:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3303      	adds	r3, #3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fedd 	bl	8001918 <os_rlsbf4>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a21      	ldr	r2, [pc, #132]	@ (8002be8 <decodeBeacon+0x120>)
 8002b62:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 8002b66:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <decodeBeacon+0x120>)
 8002b68:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <decodeBeacon+0x120>)
 8002b74:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	330f      	adds	r3, #15
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe feb6 	bl	80018ee <os_rlsbf2>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461c      	mov	r4, r3
 8002b86:	210f      	movs	r1, #15
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe ff60 	bl	8001a4e <os_crc16>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	429c      	cmp	r4, r3
 8002b92:	d001      	beq.n	8002b98 <decodeBeacon+0xd0>
        return 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e022      	b.n	8002bde <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe febb 	bl	8001918 <os_rlsbf4>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	121b      	asrs	r3, r3, #8
 8002ba6:	4a10      	ldr	r2, [pc, #64]	@ (8002be8 <decodeBeacon+0x120>)
 8002ba8:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	330b      	adds	r3, #11
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe feb1 	bl	8001918 <os_rlsbf4>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	121b      	asrs	r3, r3, #8
 8002bba:	4a0b      	ldr	r2, [pc, #44]	@ (8002be8 <decodeBeacon+0x120>)
 8002bbc:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7a1a      	ldrb	r2, [r3, #8]
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <decodeBeacon+0x120>)
 8002bc6:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <decodeBeacon+0x120>)
 8002bcc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <decodeBeacon+0x120>)
 8002bd8:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 8002bdc:	2302      	movs	r3, #2
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200001a8 	.word	0x200001a8
 8002bec:	200002f0 	.word	0x200002f0

08002bf0 <decodeFrame>:


static bit_t decodeFrame (void) {
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b09b      	sub	sp, #108	@ 0x6c
 8002bf4:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8002bf6:	4b98      	ldr	r3, [pc, #608]	@ (8002e58 <decodeFrame+0x268>)
 8002bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 8002bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 8002c02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002c06:	f023 031f 	bic.w	r3, r3, #31
 8002c0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 8002c0e:	4b93      	ldr	r3, [pc, #588]	@ (8002e5c <decodeFrame+0x26c>)
 8002c10:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8002c14:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 8002c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c18:	2b0b      	cmp	r3, #11
 8002c1a:	dd0d      	ble.n	8002c38 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002c1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002c20:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002c28:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002c2c:	2b60      	cmp	r3, #96	@ 0x60
 8002c2e:	d014      	beq.n	8002c5a <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8002c30:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002c34:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c36:	d010      	beq.n	8002c5a <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8002c38:	bf00      	nop
 8002c3a:	e008      	b.n	8002c4e <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8002c3c:	bf00      	nop
 8002c3e:	e006      	b.n	8002c4e <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8002c40:	bf00      	nop
 8002c42:	e004      	b.n	8002c4e <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002c4c:	bf00      	nop
        LMIC.dataLen = 0;
 8002c4e:	4b83      	ldr	r3, [pc, #524]	@ (8002e5c <decodeFrame+0x26c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e2f6      	b.n	8003248 <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c5c:	3305      	adds	r3, #5
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8002c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c64:	3301      	adds	r3, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fe56 	bl	8001918 <os_rlsbf4>
 8002c6c:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8002c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c70:	3306      	adds	r3, #6
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fe3b 	bl	80018ee <os_rlsbf2>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c86:	115b      	asrs	r3, r3, #5
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	3308      	adds	r3, #8
 8002c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 8002c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c96:	3b04      	subs	r3, #4
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 8002c9a:	4b70      	ldr	r3, [pc, #448]	@ (8002e5c <decodeFrame+0x26c>)
 8002c9c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d1ca      	bne.n	8002c3c <decodeFrame+0x4c>
    if( poff > pend ) {
 8002ca6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dcc8      	bgt.n	8002c40 <decodeFrame+0x50>
    int port = -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 8002cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dd07      	ble.n	8002cd0 <decodeFrame+0xe0>
        port = d[poff++];
 8002cc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002cd0:	4b62      	ldr	r3, [pc, #392]	@ (8002e5c <decodeFrame+0x26c>)
 8002cd2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cd8:	b291      	uxth	r1, r2
 8002cda:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <decodeFrame+0x26c>)
 8002cdc:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	1a8a      	subs	r2, r1, r2
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002cea:	4b5c      	ldr	r3, [pc, #368]	@ (8002e5c <decodeFrame+0x26c>)
 8002cec:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cfc:	4858      	ldr	r0, [pc, #352]	@ (8002e60 <decodeFrame+0x270>)
 8002cfe:	f7fe ff19 	bl	8001b34 <aes_verifyMic>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d09d      	beq.n	8002c44 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002d08:	4b54      	ldr	r3, [pc, #336]	@ (8002e5c <decodeFrame+0x26c>)
 8002d0a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002d0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d219      	bcs.n	8002d48 <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002d14:	4b51      	ldr	r3, [pc, #324]	@ (8002e5c <decodeFrame+0x26c>)
 8002d16:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	db92      	blt.n	8002c48 <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002d22:	4b4e      	ldr	r3, [pc, #312]	@ (8002e5c <decodeFrame+0x26c>)
 8002d24:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d18d      	bne.n	8002c4c <decodeFrame+0x5c>
 8002d30:	4b4a      	ldr	r3, [pc, #296]	@ (8002e5c <decodeFrame+0x26c>)
 8002d32:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d088      	beq.n	8002c4c <decodeFrame+0x5c>
 8002d3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002d3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d40:	d184      	bne.n	8002c4c <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d46:	e00e      	b.n	8002d66 <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	4a43      	ldr	r2, [pc, #268]	@ (8002e5c <decodeFrame+0x26c>)
 8002d4e:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002d52:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002d56:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d58:	d101      	bne.n	8002d5e <decodeFrame+0x16e>
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	e000      	b.n	8002d60 <decodeFrame+0x170>
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4b3e      	ldr	r3, [pc, #248]	@ (8002e5c <decodeFrame+0x26c>)
 8002d62:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002d66:	4b3d      	ldr	r3, [pc, #244]	@ (8002e5c <decodeFrame+0x26c>)
 8002d68:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <decodeFrame+0x18a>
 8002d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 8002d7a:	4b38      	ldr	r3, [pc, #224]	@ (8002e5c <decodeFrame+0x26c>)
 8002d7c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	4b35      	ldr	r3, [pc, #212]	@ (8002e5c <decodeFrame+0x26c>)
 8002d88:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002d8c:	4b33      	ldr	r3, [pc, #204]	@ (8002e5c <decodeFrame+0x26c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8002d94:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <decodeFrame+0x26c>)
 8002d96:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8002d9a:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <decodeFrame+0x26c>)
 8002d9c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002da0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e5c <decodeFrame+0x26c>)
 8002da2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8002da6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002daa:	d003      	beq.n	8002db4 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002dac:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <decodeFrame+0x26c>)
 8002dae:	22f4      	movs	r2, #244	@ 0xf4
 8002db0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002db4:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <decodeFrame+0x26c>)
 8002db6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002dba:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <decodeFrame+0x26c>)
 8002dc0:	89db      	ldrh	r3, [r3, #14]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe ffe0 	bl	8001d88 <getSensitivity>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	1ae3      	subs	r3, r4, r3
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db05      	blt.n	8002de0 <decodeFrame+0x1f0>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	2bfe      	cmp	r3, #254	@ 0xfe
 8002dd8:	bfa8      	it	ge
 8002dda:	23fe      	movge	r3, #254	@ 0xfe
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e000      	b.n	8002de2 <decodeFrame+0x1f2>
 8002de0:	2300      	movs	r3, #0
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <decodeFrame+0x26c>)
 8002de4:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 8002df2:	e1b5      	b.n	8003160 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 8002df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	f200 81ba 	bhi.w	8003178 <decodeFrame+0x588>
 8002e04:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <decodeFrame+0x21c>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e51 	.word	0x08002e51
 8002e10:	08002e65 	.word	0x08002e65
 8002e14:	08002fc3 	.word	0x08002fc3
 8002e18:	08002f3f 	.word	0x08002f3f
 8002e1c:	08002f2f 	.word	0x08002f2f
 8002e20:	08003011 	.word	0x08003011
 8002e24:	08003179 	.word	0x08003179
 8002e28:	08003179 	.word	0x08003179
 8002e2c:	08003179 	.word	0x08003179
 8002e30:	08003179 	.word	0x08003179
 8002e34:	08003179 	.word	0x08003179
 8002e38:	08003179 	.word	0x08003179
 8002e3c:	08003179 	.word	0x08003179
 8002e40:	08003179 	.word	0x08003179
 8002e44:	08003179 	.word	0x08003179
 8002e48:	0800309d 	.word	0x0800309d
 8002e4c:	080030df 	.word	0x080030df
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e52:	3303      	adds	r3, #3
 8002e54:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002e56:	e183      	b.n	8003160 <decodeFrame+0x570>
 8002e58:	200002f0 	.word	0x200002f0
 8002e5c:	200001a8 	.word	0x200001a8
 8002e60:	2000029c 	.word	0x2000029c
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8002e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e66:	3301      	adds	r3, #1
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8002e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e72:	3302      	adds	r3, #2
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	4413      	add	r3, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fd38 	bl	80018ee <os_rlsbf2>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8002e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e84:	3304      	adds	r3, #4
 8002e86:	6a3a      	ldr	r2, [r7, #32]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f023 030f 	bic.w	r3, r3, #15
 8002e90:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8002e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e94:	3304      	adds	r3, #4
 8002e96:	6a3a      	ldr	r2, [r7, #32]
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea4:	3305      	adds	r3, #5
 8002ea6:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8002ea8:	4bb0      	ldr	r3, [pc, #704]	@ (800316c <decodeFrame+0x57c>)
 8002eaa:	2287      	movs	r2, #135	@ 0x87
 8002eac:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8002eb0:	893a      	ldrh	r2, [r7, #8]
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fb84 	bl	80025c4 <mapChannels>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8002ec2:	4baa      	ldr	r3, [pc, #680]	@ (800316c <decodeFrame+0x57c>)
 8002ec4:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4ba7      	ldr	r3, [pc, #668]	@ (800316c <decodeFrame+0x57c>)
 8002ed0:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8002ed4:	7abb      	ldrb	r3, [r7, #10]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 8002eda:	797b      	ldrb	r3, [r7, #5]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fcd7 	bl	8001890 <validDR>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8002ee8:	4ba0      	ldr	r3, [pc, #640]	@ (800316c <decodeFrame+0x57c>)
 8002eea:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8002eee:	f023 0302 	bic.w	r3, r3, #2
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b9d      	ldr	r3, [pc, #628]	@ (800316c <decodeFrame+0x57c>)
 8002ef6:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8002efa:	4b9c      	ldr	r3, [pc, #624]	@ (800316c <decodeFrame+0x57c>)
 8002efc:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8002f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f04:	2b07      	cmp	r3, #7
 8002f06:	d10d      	bne.n	8002f24 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8002f08:	4a98      	ldr	r2, [pc, #608]	@ (800316c <decodeFrame+0x57c>)
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8002f10:	7abb      	ldrb	r3, [r7, #10]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	4a96      	ldr	r2, [pc, #600]	@ (8003170 <decodeFrame+0x580>)
 8002f18:	56d2      	ldrsb	r2, [r2, r3]
 8002f1a:	797b      	ldrb	r3, [r7, #5]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2004      	movs	r0, #4
 8002f20:	f7ff fa00 	bl	8002324 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8002f24:	4b91      	ldr	r3, [pc, #580]	@ (800316c <decodeFrame+0x57c>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 8002f2c:	e118      	b.n	8003160 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8002f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800316c <decodeFrame+0x57c>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 8002f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f38:	3301      	adds	r3, #1
 8002f3a:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8002f3c:	e110      	b.n	8003160 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8002f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f40:	3301      	adds	r3, #1
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	4413      	add	r3, r2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 8002f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f50:	3302      	adds	r3, #2
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	4413      	add	r3, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fb12 	bl	8002580 <convFreq>
 8002f5c:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f60:	3305      	adds	r3, #5
 8002f62:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8002f64:	4b81      	ldr	r3, [pc, #516]	@ (800316c <decodeFrame+0x57c>)
 8002f66:	2280      	movs	r2, #128	@ 0x80
 8002f68:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 8002f6c:	7cbb      	ldrb	r3, [r7, #18]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fc8e 	bl	8001890 <validDR>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8002f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800316c <decodeFrame+0x57c>)
 8002f7c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b79      	ldr	r3, [pc, #484]	@ (800316c <decodeFrame+0x57c>)
 8002f88:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8002f92:	4b76      	ldr	r3, [pc, #472]	@ (800316c <decodeFrame+0x57c>)
 8002f94:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4b73      	ldr	r3, [pc, #460]	@ (800316c <decodeFrame+0x57c>)
 8002fa0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8002fa4:	4b71      	ldr	r3, [pc, #452]	@ (800316c <decodeFrame+0x57c>)
 8002fa6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002faa:	2b83      	cmp	r3, #131	@ 0x83
 8002fac:	f040 80d7 	bne.w	800315e <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8002fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <decodeFrame+0x57c>)
 8002fb2:	7cbb      	ldrb	r3, [r7, #18]
 8002fb4:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 8002fb8:	4a6c      	ldr	r2, [pc, #432]	@ (800316c <decodeFrame+0x57c>)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8002fc0:	e0cd      	b.n	800315e <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8002fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	4413      	add	r3, r2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 8002fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2bff      	cmp	r3, #255	@ 0xff
 8002fd8:	d108      	bne.n	8002fec <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8002fda:	4b64      	ldr	r3, [pc, #400]	@ (800316c <decodeFrame+0x57c>)
 8002fdc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b61      	ldr	r3, [pc, #388]	@ (800316c <decodeFrame+0x57c>)
 8002fe8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b5d      	ldr	r3, [pc, #372]	@ (800316c <decodeFrame+0x57c>)
 8002ff6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8002ffa:	f001 fda1 	bl	8004b40 <os_getTime>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a5a      	ldr	r2, [pc, #360]	@ (800316c <decodeFrame+0x57c>)
 8003002:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003006:	4b59      	ldr	r3, [pc, #356]	@ (800316c <decodeFrame+0x57c>)
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 800300e:	e0a7      	b.n	8003160 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8003010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003012:	3301      	adds	r3, #1
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 800301c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800301e:	3302      	adds	r3, #2
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	4413      	add	r3, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff faab 	bl	8002580 <convFreq>
 800302a:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 800302c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800302e:	3305      	adds	r3, #5
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8003038:	4b4c      	ldr	r3, [pc, #304]	@ (800316c <decodeFrame+0x57c>)
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d026      	beq.n	8003094 <decodeFrame+0x4a4>
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	b21a      	sxth	r2, r3
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f1c3 030f 	rsb	r3, r3, #15
 8003060:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003064:	fa41 f303 	asr.w	r3, r1, r3
 8003068:	b21b      	sxth	r3, r3
 800306a:	4013      	ands	r3, r2
 800306c:	b21b      	sxth	r3, r3
 800306e:	b29a      	uxth	r2, r3
 8003070:	7ef8      	ldrb	r0, [r7, #27]
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	f7ff fa08 	bl	800248c <LMIC_setupChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8003082:	4b3a      	ldr	r3, [pc, #232]	@ (800316c <decodeFrame+0x57c>)
 8003084:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003088:	f043 0303 	orr.w	r3, r3, #3
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b37      	ldr	r3, [pc, #220]	@ (800316c <decodeFrame+0x57c>)
 8003090:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 8003094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003096:	3306      	adds	r3, #6
 8003098:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800309a:	e061      	b.n	8003160 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 800309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800309e:	3301      	adds	r3, #1
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	4413      	add	r3, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fa6b 	bl	8002580 <convFreq>
 80030aa:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 80030ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ae:	3304      	adds	r3, #4
 80030b0:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 80030be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 80030ca:	4a28      	ldr	r2, [pc, #160]	@ (800316c <decodeFrame+0x57c>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 80030d2:	4a26      	ldr	r2, [pc, #152]	@ (800316c <decodeFrame+0x57c>)
 80030d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80030d8:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 80030dc:	e040      	b.n	8003160 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 80030de:	4b23      	ldr	r3, [pc, #140]	@ (800316c <decodeFrame+0x57c>)
 80030e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d134      	bne.n	8003156 <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 80030ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ee:	3303      	adds	r3, #3
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	4413      	add	r3, r2
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <decodeFrame+0x57c>)
 80030f8:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <decodeFrame+0x57c>)
 80030fe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b18      	ldr	r3, [pc, #96]	@ (800316c <decodeFrame+0x57c>)
 800310a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 800310e:	4b17      	ldr	r3, [pc, #92]	@ (800316c <decodeFrame+0x57c>)
 8003110:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <decodeFrame+0x52c>
 8003118:	f7fe fa42 	bl	80015a0 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <decodeFrame+0x57c>)
 800311e:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003122:	3301      	adds	r3, #1
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	4413      	add	r3, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fbe0 	bl	80018ee <os_rlsbf2>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 800313c:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <decodeFrame+0x584>)
 800313e:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003140:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <decodeFrame+0x57c>)
 8003142:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <decodeFrame+0x57c>)
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 800314e:	2101      	movs	r1, #1
 8003150:	201e      	movs	r0, #30
 8003152:	f7fe ff25 	bl	8001fa0 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8003156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003158:	3304      	adds	r3, #4
 800315a:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800315c:	e000      	b.n	8003160 <decodeFrame+0x570>
            continue;
 800315e:	bf00      	nop
    while( oidx < olen ) {
 8003160:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	429a      	cmp	r2, r3
 8003166:	f6ff ae45 	blt.w	8002df4 <decodeFrame+0x204>
 800316a:	e006      	b.n	800317a <decodeFrame+0x58a>
 800316c:	200001a8 	.word	0x200001a8
 8003170:	0800b014 	.word	0x0800b014
 8003174:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003178:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	2b00      	cmp	r3, #0
 800317e:	d11d      	bne.n	80031bc <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8003180:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003182:	2b00      	cmp	r3, #0
 8003184:	db1a      	blt.n	80031bc <decodeFrame+0x5cc>
 8003186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	dd15      	ble.n	80031bc <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8003190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003192:	2b00      	cmp	r3, #0
 8003194:	dc01      	bgt.n	800319a <decodeFrame+0x5aa>
 8003196:	482e      	ldr	r0, [pc, #184]	@ (8003250 <decodeFrame+0x660>)
 8003198:	e000      	b.n	800319c <decodeFrame+0x5ac>
 800319a:	482e      	ldr	r0, [pc, #184]	@ (8003254 <decodeFrame+0x664>)
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <decodeFrame+0x668>)
 800319e:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 80031a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031a6:	4413      	add	r3, r2
 80031a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80031ac:	1a8a      	subs	r2, r1, r2
 80031ae:	9201      	str	r2, [sp, #4]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031b6:	4621      	mov	r1, r4
 80031b8:	f7fe fd66 	bl	8001c88 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031be:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <decodeFrame+0x668>)
 80031c2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 80031ca:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <decodeFrame+0x668>)
 80031cc:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80031d0:	b25b      	sxtb	r3, r3
 80031d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d002      	beq.n	80031de <decodeFrame+0x5ee>
 80031d8:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80031dc:	e000      	b.n	80031e0 <decodeFrame+0x5f0>
 80031de:	2240      	movs	r2, #64	@ 0x40
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <decodeFrame+0x668>)
 80031e8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 80031ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	da12      	bge.n	8003218 <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 80031f2:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <decodeFrame+0x668>)
 80031f4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <decodeFrame+0x668>)
 8003200:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <decodeFrame+0x668>)
 800320a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <decodeFrame+0x668>)
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003216:	e016      	b.n	8003246 <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <decodeFrame+0x668>)
 800321a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800321e:	f043 0310 	orr.w	r3, r3, #16
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <decodeFrame+0x668>)
 8003226:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 800322a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <decodeFrame+0x668>)
 8003230:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	b2da      	uxtb	r2, r3
 8003238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800323a:	b2db      	uxtb	r3, r3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <decodeFrame+0x668>)
 8003242:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	3764      	adds	r7, #100	@ 0x64
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}
 8003250:	2000029c 	.word	0x2000029c
 8003254:	200002ac 	.word	0x200002ac
 8003258:	200001a8 	.word	0x200001a8

0800325c <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <setupRx2+0x3c>)
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003268:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <setupRx2+0x3c>)
 800326a:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fae2 	bl	8001838 <dndr2rps>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <setupRx2+0x3c>)
 800327a:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <setupRx2+0x3c>)
 800327e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003282:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <setupRx2+0x3c>)
 8003284:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <setupRx2+0x3c>)
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 800328e:	2002      	movs	r0, #2
 8003290:	f002 fa7c 	bl	800578c <os_radio>
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	200001a8 	.word	0x200001a8

0800329c <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 80032a6:	4b0e      	ldr	r3, [pc, #56]	@ (80032e0 <schedRx2+0x44>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	18d1      	adds	r1, r2, r3
 80032ae:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <schedRx2+0x44>)
 80032b0:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <schedRx2+0x48>)
 80032b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	4a06      	ldr	r2, [pc, #24]	@ (80032e0 <schedRx2+0x44>)
 80032c6:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <schedRx2+0x44>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	3b40      	subs	r3, #64	@ 0x40
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4805      	ldr	r0, [pc, #20]	@ (80032e8 <schedRx2+0x4c>)
 80032d4:	f001 fc9e 	bl	8004c14 <os_setTimedCallback>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200001a8 	.word	0x200001a8
 80032e4:	0800b048 	.word	0x0800b048
 80032e8:	200001bc 	.word	0x200001bc

080032ec <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 80032f4:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <setupRx1+0x40>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <setupRx1+0x40>)
 80032fe:	89db      	ldrh	r3, [r3, #14]
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fa49 	bl	800179a <setNocrc>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	4b07      	ldr	r3, [pc, #28]	@ (800332c <setupRx1+0x40>)
 800330e:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <setupRx1+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 8003318:	4a04      	ldr	r2, [pc, #16]	@ (800332c <setupRx1+0x40>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 800331e:	2002      	movs	r0, #2
 8003320:	f002 fa34 	bl	800578c <os_radio>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200001a8 	.word	0x200001a8

08003330 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800333a:	4b22      	ldr	r3, [pc, #136]	@ (80033c4 <txDone+0x94>)
 800333c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003340:	461a      	mov	r2, r3
 8003342:	f240 6302 	movw	r3, #1538	@ 0x602
 8003346:	4013      	ands	r3, r2
 8003348:	f240 4202 	movw	r2, #1026	@ 0x402
 800334c:	4293      	cmp	r3, r2
 800334e:	d10b      	bne.n	8003368 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003350:	481d      	ldr	r0, [pc, #116]	@ (80033c8 <txDone+0x98>)
 8003352:	f7fe feab 	bl	80020ac <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003356:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <txDone+0x94>)
 8003358:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800335c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <txDone+0x94>)
 8003364:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003368:	4b16      	ldr	r3, [pc, #88]	@ (80033c4 <txDone+0x94>)
 800336a:	7c1b      	ldrb	r3, [r3, #16]
 800336c:	2b07      	cmp	r3, #7
 800336e:	d10a      	bne.n	8003386 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003370:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <txDone+0x94>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	3b05      	subs	r3, #5
 800337a:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <txDone+0x94>)
 800337c:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <txDone+0x94>)
 8003380:	2208      	movs	r2, #8
 8003382:	741a      	strb	r2, [r3, #16]
 8003384:	e012      	b.n	80033ac <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003386:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <txDone+0x94>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	18d1      	adds	r1, r2, r3
 800338e:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <txDone+0x94>)
 8003390:	7c5b      	ldrb	r3, [r3, #17]
 8003392:	461a      	mov	r2, r3
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <txDone+0x9c>)
 8003396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	4a08      	ldr	r2, [pc, #32]	@ (80033c4 <txDone+0x94>)
 80033a4:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 80033a6:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <txDone+0x94>)
 80033a8:	2205      	movs	r2, #5
 80033aa:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <txDone+0x94>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	3b40      	subs	r3, #64	@ 0x40
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	4806      	ldr	r0, [pc, #24]	@ (80033d0 <txDone+0xa0>)
 80033b8:	f001 fc2c 	bl	8004c14 <os_setTimedCallback>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200001a8 	.word	0x200001a8
 80033c8:	200002dc 	.word	0x200002dc
 80033cc:	0800b048 	.word	0x0800b048
 80033d0:	200001bc 	.word	0x200001bc

080033d4 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 80033dc:	2008      	movs	r0, #8
 80033de:	f7ff faef 	bl	80029c0 <reportEvent>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <processJoinAccept>:


static bit_t processJoinAccept (void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 80033f2:	4b99      	ldr	r3, [pc, #612]	@ (8003658 <processJoinAccept+0x26c>)
 80033f4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <processJoinAccept+0x1e>
 80033fc:	4b96      	ldr	r3, [pc, #600]	@ (8003658 <processJoinAccept+0x26c>)
 80033fe:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <processJoinAccept+0x1e>
 8003406:	f7fe f8cb 	bl	80015a0 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800340a:	4b93      	ldr	r3, [pc, #588]	@ (8003658 <processJoinAccept+0x26c>)
 800340c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <processJoinAccept+0x30>
 8003418:	f7fe f8c2 	bl	80015a0 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 800341c:	4b8e      	ldr	r3, [pc, #568]	@ (8003658 <processJoinAccept+0x26c>)
 800341e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14c      	bne.n	80034c0 <processJoinAccept+0xd4>
      nojoinframe:
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800342a:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 800342c:	4b8a      	ldr	r3, [pc, #552]	@ (8003658 <processJoinAccept+0x26c>)
 800342e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d123      	bne.n	8003482 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800343a:	4b87      	ldr	r3, [pc, #540]	@ (8003658 <processJoinAccept+0x26c>)
 800343c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <processJoinAccept+0x60>
 8003448:	f7fe f8aa 	bl	80015a0 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 800344c:	4b82      	ldr	r3, [pc, #520]	@ (8003658 <processJoinAccept+0x26c>)
 800344e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003452:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b7f      	ldr	r3, [pc, #508]	@ (8003658 <processJoinAccept+0x26c>)
 800345a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 800345e:	4b7e      	ldr	r3, [pc, #504]	@ (8003658 <processJoinAccept+0x26c>)
 8003460:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003464:	2b09      	cmp	r3, #9
 8003466:	d807      	bhi.n	8003478 <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003468:	4b7b      	ldr	r3, [pc, #492]	@ (8003658 <processJoinAccept+0x26c>)
 800346a:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800346e:	3301      	adds	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b79      	ldr	r3, [pc, #484]	@ (8003658 <processJoinAccept+0x26c>)
 8003474:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003478:	2009      	movs	r0, #9
 800347a:	f7ff faa1 	bl	80029c0 <reportEvent>
            return 1;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e6      	b.n	8003650 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003482:	4b75      	ldr	r3, [pc, #468]	@ (8003658 <processJoinAccept+0x26c>)
 8003484:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b72      	ldr	r3, [pc, #456]	@ (8003658 <processJoinAccept+0x26c>)
 8003490:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8003494:	f7ff fa22 	bl	80028dc <nextJoinState>
 8003498:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800349a:	f001 fb51 	bl	8004b40 <os_getTime>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <processJoinAccept+0xc6>
 80034ae:	4b6b      	ldr	r3, [pc, #428]	@ (800365c <processJoinAccept+0x270>)
 80034b0:	e000      	b.n	80034b4 <processJoinAccept+0xc8>
 80034b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003660 <processJoinAccept+0x274>)
 80034b4:	461a      	mov	r2, r3
 80034b6:	486b      	ldr	r0, [pc, #428]	@ (8003664 <processJoinAccept+0x278>)
 80034b8:	f001 fbac 	bl	8004c14 <os_setTimedCallback>
        return 1;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0c7      	b.n	8003650 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 80034c0:	4b65      	ldr	r3, [pc, #404]	@ (8003658 <processJoinAccept+0x26c>)
 80034c2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80034c6:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 80034c8:	4b63      	ldr	r3, [pc, #396]	@ (8003658 <processJoinAccept+0x26c>)
 80034ca:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80034ce:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	3b04      	subs	r3, #4
 80034d4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80034d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003658 <processJoinAccept+0x26c>)
 80034da:	4413      	add	r3, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe fa1b 	bl	8001918 <os_rlsbf4>
 80034e2:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2b11      	cmp	r3, #17
 80034e8:	d002      	beq.n	80034f0 <processJoinAccept+0x104>
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b21      	cmp	r3, #33	@ 0x21
 80034ee:	d104      	bne.n	80034fa <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 80034f0:	7d7b      	ldrb	r3, [r7, #21]
 80034f2:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d00b      	beq.n	8003512 <processJoinAccept+0x126>
      badframe:
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 80034fe:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003500:	4b55      	ldr	r3, [pc, #340]	@ (8003658 <processJoinAccept+0x26c>)
 8003502:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d08d      	beq.n	800342a <processJoinAccept+0x3e>
            return 0;
 800350e:	2300      	movs	r3, #0
 8003510:	e09e      	b.n	8003650 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8003512:	4a55      	ldr	r2, [pc, #340]	@ (8003668 <processJoinAccept+0x27c>)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	3b01      	subs	r3, #1
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f7fe fb9e 	bl	8001c5c <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	3b04      	subs	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4851      	ldr	r0, [pc, #324]	@ (800366c <processJoinAccept+0x280>)
 8003528:	f7fe fb76 	bl	8001c18 <aes_verifyMic0>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0e5      	beq.n	80034fe <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003532:	4b4f      	ldr	r3, [pc, #316]	@ (8003670 <processJoinAccept+0x284>)
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe f9ef 	bl	8001918 <os_rlsbf4>
 800353a:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 800353c:	4a46      	ldr	r2, [pc, #280]	@ (8003658 <processJoinAccept+0x26c>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003544:	484b      	ldr	r0, [pc, #300]	@ (8003674 <processJoinAccept+0x288>)
 8003546:	f7fe f9e7 	bl	8001918 <os_rlsbf4>
 800354a:	4603      	mov	r3, r0
 800354c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003550:	4a41      	ldr	r2, [pc, #260]	@ (8003658 <processJoinAccept+0x26c>)
 8003552:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fe ff12 	bl	8002380 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b11      	cmp	r3, #17
 8003560:	d920      	bls.n	80035a4 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003562:	230d      	movs	r3, #13
 8003564:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003566:	2303      	movs	r3, #3
 8003568:	75bb      	strb	r3, [r7, #22]
 800356a:	e018      	b.n	800359e <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003572:	4a39      	ldr	r2, [pc, #228]	@ (8003658 <processJoinAccept+0x26c>)
 8003574:	4413      	add	r3, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f802 	bl	8002580 <convFreq>
 800357c:	60b8      	str	r0, [r7, #8]
            if( freq )
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003584:	7db8      	ldrb	r0, [r7, #22]
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	2200      	movs	r2, #0
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	f7fe ff7d 	bl	800248c <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003592:	7dbb      	ldrb	r3, [r7, #22]
 8003594:	3301      	adds	r3, #1
 8003596:	75bb      	strb	r3, [r7, #22]
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	3303      	adds	r3, #3
 800359c:	75fb      	strb	r3, [r7, #23]
 800359e:	7dbb      	ldrb	r3, [r7, #22]
 80035a0:	2b07      	cmp	r3, #7
 80035a2:	d9e3      	bls.n	800356c <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 80035a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003658 <processJoinAccept+0x26c>)
 80035a6:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b298      	uxth	r0, r3
 80035ae:	4b32      	ldr	r3, [pc, #200]	@ (8003678 <processJoinAccept+0x28c>)
 80035b0:	4a32      	ldr	r2, [pc, #200]	@ (800367c <processJoinAccept+0x290>)
 80035b2:	492d      	ldr	r1, [pc, #180]	@ (8003668 <processJoinAccept+0x27c>)
 80035b4:	f7fe fbac 	bl	8001d10 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 80035b8:	4b27      	ldr	r3, [pc, #156]	@ (8003658 <processJoinAccept+0x26c>)
 80035ba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035be:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <processJoinAccept+0x1de>
 80035c6:	f7fd ffeb 	bl	80015a0 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80035ca:	4b23      	ldr	r3, [pc, #140]	@ (8003658 <processJoinAccept+0x26c>)
 80035cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80035d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003658 <processJoinAccept+0x26c>)
 80035da:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80035de:	4a1e      	ldr	r2, [pc, #120]	@ (8003658 <processJoinAccept+0x26c>)
 80035e0:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe f968 	bl	80018bc <lowerDR>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <processJoinAccept+0x26c>)
 80035f2:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80035f6:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <processJoinAccept+0x26c>)
 80035f8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035fc:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	b29a      	uxth	r2, r3
 8003606:	4b14      	ldr	r3, [pc, #80]	@ (8003658 <processJoinAccept+0x26c>)
 8003608:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 800360c:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <processJoinAccept+0x26c>)
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 8003614:	f7ff f9f2 	bl	80029fc <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8003618:	4b0f      	ldr	r3, [pc, #60]	@ (8003658 <processJoinAccept+0x26c>)
 800361a:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <processJoinAccept+0x26c>)
 8003626:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <processJoinAccept+0x26c>)
 800362c:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8003630:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <processJoinAccept+0x26c>)
 8003632:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 8003636:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <processJoinAccept+0x26c>)
 8003638:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <processJoinAccept+0x25c>
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <processJoinAccept+0x26c>)
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 8003648:	2006      	movs	r0, #6
 800364a:	f7ff f9b9 	bl	80029c0 <reportEvent>
    return 1;
 800364e:	2301      	movs	r3, #1
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200001a8 	.word	0x200001a8
 800365c:	080033d5 	.word	0x080033d5
 8003660:	080029ad 	.word	0x080029ad
 8003664:	200001bc 	.word	0x200001bc
 8003668:	200002f1 	.word	0x200002f1
 800366c:	200002f0 	.word	0x200002f0
 8003670:	200002f7 	.word	0x200002f7
 8003674:	200002f4 	.word	0x200002f4
 8003678:	200002ac 	.word	0x200002ac
 800367c:	2000029c 	.word	0x2000029c

08003680 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003688:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <processRx2Jacc+0x28>)
 800368a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <processRx2Jacc+0x28>)
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 800369a:	f7ff fea7 	bl	80033ec <processJoinAccept>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200001a8 	.word	0x200001a8

080036ac <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 80036b4:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <setupRx2Jacc+0x1c>)
 80036b6:	4a05      	ldr	r2, [pc, #20]	@ (80036cc <setupRx2Jacc+0x20>)
 80036b8:	61da      	str	r2, [r3, #28]
    setupRx2();
 80036ba:	f7ff fdcf 	bl	800325c <setupRx2>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200001a8 	.word	0x200001a8
 80036cc:	08003681 	.word	0x08003681

080036d0 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <processRx1Jacc+0x2c>)
 80036da:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <processRx1Jacc+0x1c>
 80036e2:	f7ff fe83 	bl	80033ec <processJoinAccept>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 80036ec:	4904      	ldr	r1, [pc, #16]	@ (8003700 <processRx1Jacc+0x30>)
 80036ee:	4805      	ldr	r0, [pc, #20]	@ (8003704 <processRx1Jacc+0x34>)
 80036f0:	f7ff fdd4 	bl	800329c <schedRx2>
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	200001a8 	.word	0x200001a8
 8003700:	080036ad 	.word	0x080036ad
 8003704:	0002ee00 	.word	0x0002ee00

08003708 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8003710:	4803      	ldr	r0, [pc, #12]	@ (8003720 <setupRx1Jacc+0x18>)
 8003712:	f7ff fdeb 	bl	80032ec <setupRx1>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	080036d1 	.word	0x080036d1

08003724 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 800372c:	4903      	ldr	r1, [pc, #12]	@ (800373c <jreqDone+0x18>)
 800372e:	4804      	ldr	r0, [pc, #16]	@ (8003740 <jreqDone+0x1c>)
 8003730:	f7ff fdfe 	bl	8003330 <txDone>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	08003709 	.word	0x08003709
 8003740:	00027100 	.word	0x00027100

08003744 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
    processDnData();
 800374c:	f000 fbc6 	bl	8003edc <processDnData>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <processRx2DnData+0x48>)
 8003762:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003766:	2b00      	cmp	r3, #0
 8003768:	d115      	bne.n	8003796 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <processRx2DnData+0x48>)
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003772:	f001 f9e5 	bl	8004b40 <os_getTime>
 8003776:	4603      	mov	r3, r0
 8003778:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 800377c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8003780:	2002      	movs	r0, #2
 8003782:	f7fe fd4f 	bl	8002224 <rndDelay>
 8003786:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003788:	4423      	add	r3, r4
 800378a:	4a06      	ldr	r2, [pc, #24]	@ (80037a4 <processRx2DnData+0x4c>)
 800378c:	4619      	mov	r1, r3
 800378e:	4806      	ldr	r0, [pc, #24]	@ (80037a8 <processRx2DnData+0x50>)
 8003790:	f001 fa40 	bl	8004c14 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003794:	e001      	b.n	800379a <processRx2DnData+0x42>
    }
    processDnData();
 8003796:	f000 fba1 	bl	8003edc <processDnData>
}
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	200001a8 	.word	0x200001a8
 80037a4:	08003745 	.word	0x08003745
 80037a8:	200001bc 	.word	0x200001bc

080037ac <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <setupRx2DnData+0x1c>)
 80037b6:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <setupRx2DnData+0x20>)
 80037b8:	61da      	str	r2, [r3, #28]
    setupRx2();
 80037ba:	f7ff fd4f 	bl	800325c <setupRx2>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200001a8 	.word	0x200001a8
 80037cc:	08003759 	.word	0x08003759

080037d0 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80037d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <processRx1DnData+0x40>)
 80037da:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <processRx1DnData+0x1c>
 80037e2:	f000 fb7b 	bl	8003edc <processDnData>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10c      	bne.n	8003806 <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 80037ec:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <processRx1DnData+0x40>)
 80037ee:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 80037f2:	3301      	adds	r3, #1
 80037f4:	461a      	mov	r2, r3
 80037f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	4905      	ldr	r1, [pc, #20]	@ (8003814 <processRx1DnData+0x44>)
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fd4b 	bl	800329c <schedRx2>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200001a8 	.word	0x200001a8
 8003814:	080037ad 	.word	0x080037ad

08003818 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8003820:	4803      	ldr	r0, [pc, #12]	@ (8003830 <setupRx1DnData+0x18>)
 8003822:	f7ff fd63 	bl	80032ec <setupRx1>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	080037d1 	.word	0x080037d1

08003834 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 800383c:	4b07      	ldr	r3, [pc, #28]	@ (800385c <updataDone+0x28>)
 800383e:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003842:	461a      	mov	r2, r3
 8003844:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	4904      	ldr	r1, [pc, #16]	@ (8003860 <updataDone+0x2c>)
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fd6e 	bl	8003330 <txDone>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200001a8 	.word	0x200001a8
 8003860:	08003819 	.word	0x08003819

08003864 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b087      	sub	sp, #28
 8003868:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800386a:	4ba3      	ldr	r3, [pc, #652]	@ (8003af8 <buildDataFrame+0x294>)
 800386c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003870:	f003 0318 	and.w	r3, r3, #24
 8003874:	2b10      	cmp	r3, #16
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <buildDataFrame+0x2a>
 8003886:	4b9c      	ldr	r3, [pc, #624]	@ (8003af8 <buildDataFrame+0x294>)
 8003888:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800388c:	e000      	b.n	8003890 <buildDataFrame+0x2c>
 800388e:	2300      	movs	r3, #0
 8003890:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003892:	2308      	movs	r3, #8
 8003894:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 8003896:	4b98      	ldr	r3, [pc, #608]	@ (8003af8 <buildDataFrame+0x294>)
 8003898:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800389c:	461a      	mov	r2, r3
 800389e:	f240 4302 	movw	r3, #1026	@ 0x402
 80038a2:	4013      	ands	r3, r2
 80038a4:	f240 4202 	movw	r2, #1026	@ 0x402
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d11c      	bne.n	80038e6 <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 80038ac:	4a92      	ldr	r2, [pc, #584]	@ (8003af8 <buildDataFrame+0x294>)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80038b6:	2210      	movs	r2, #16
 80038b8:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80038ba:	4b8f      	ldr	r3, [pc, #572]	@ (8003af8 <buildDataFrame+0x294>)
 80038bc:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80038c0:	b25a      	sxtb	r2, r3
 80038c2:	4b8d      	ldr	r3, [pc, #564]	@ (8003af8 <buildDataFrame+0x294>)
 80038c4:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	4313      	orrs	r3, r2
 80038ce:	b25a      	sxtb	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3301      	adds	r3, #1
 80038d4:	b2d1      	uxtb	r1, r2
 80038d6:	4a88      	ldr	r2, [pc, #544]	@ (8003af8 <buildDataFrame+0x294>)
 80038d8:	4413      	add	r3, r2
 80038da:	460a      	mov	r2, r1
 80038dc:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3302      	adds	r3, #2
 80038e4:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80038e6:	4b84      	ldr	r3, [pc, #528]	@ (8003af8 <buildDataFrame+0x294>)
 80038e8:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 80038f0:	4a81      	ldr	r2, [pc, #516]	@ (8003af8 <buildDataFrame+0x294>)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80038fa:	2204      	movs	r2, #4
 80038fc:	701a      	strb	r2, [r3, #0]
        end += 1;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3301      	adds	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8003904:	4b7c      	ldr	r3, [pc, #496]	@ (8003af8 <buildDataFrame+0x294>)
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 800390c:	4b7a      	ldr	r3, [pc, #488]	@ (8003af8 <buildDataFrame+0x294>)
 800390e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01a      	beq.n	800394c <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8003916:	4a78      	ldr	r2, [pc, #480]	@ (8003af8 <buildDataFrame+0x294>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4413      	add	r3, r2
 800391c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003920:	2205      	movs	r2, #5
 8003922:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003924:	4b74      	ldr	r3, [pc, #464]	@ (8003af8 <buildDataFrame+0x294>)
 8003926:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	b2d1      	uxtb	r1, r2
 8003934:	4a70      	ldr	r2, [pc, #448]	@ (8003af8 <buildDataFrame+0x294>)
 8003936:	4413      	add	r3, r2
 8003938:	460a      	mov	r2, r1
 800393a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3302      	adds	r3, #2
 8003942:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8003944:	4b6c      	ldr	r3, [pc, #432]	@ (8003af8 <buildDataFrame+0x294>)
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 800394c:	4b6a      	ldr	r3, [pc, #424]	@ (8003af8 <buildDataFrame+0x294>)
 800394e:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8003952:	2b00      	cmp	r3, #0
 8003954:	d021      	beq.n	800399a <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 8003956:	4a68      	ldr	r2, [pc, #416]	@ (8003af8 <buildDataFrame+0x294>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4413      	add	r3, r2
 800395c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003960:	2206      	movs	r2, #6
 8003962:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1c5c      	adds	r4, r3, #1
 8003968:	f7fe f869 	bl	8001a3e <os_getBattLevel>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <buildDataFrame+0x294>)
 8003972:	4423      	add	r3, r4
 8003974:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3302      	adds	r3, #2
 800397c:	4a5e      	ldr	r2, [pc, #376]	@ (8003af8 <buildDataFrame+0x294>)
 800397e:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8003982:	4a5d      	ldr	r2, [pc, #372]	@ (8003af8 <buildDataFrame+0x294>)
 8003984:	4413      	add	r3, r2
 8003986:	460a      	mov	r2, r1
 8003988:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3303      	adds	r3, #3
 8003990:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003992:	4b59      	ldr	r3, [pc, #356]	@ (8003af8 <buildDataFrame+0x294>)
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800399a:	4b57      	ldr	r3, [pc, #348]	@ (8003af8 <buildDataFrame+0x294>)
 800399c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01a      	beq.n	80039da <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 80039a4:	4a54      	ldr	r2, [pc, #336]	@ (8003af8 <buildDataFrame+0x294>)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80039ae:	2203      	movs	r2, #3
 80039b0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 80039b2:	4b51      	ldr	r3, [pc, #324]	@ (8003af8 <buildDataFrame+0x294>)
 80039b4:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3301      	adds	r3, #1
 80039bc:	f002 0207 	and.w	r2, r2, #7
 80039c0:	b2d1      	uxtb	r1, r2
 80039c2:	4a4d      	ldr	r2, [pc, #308]	@ (8003af8 <buildDataFrame+0x294>)
 80039c4:	4413      	add	r3, r2
 80039c6:	460a      	mov	r2, r1
 80039c8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3302      	adds	r3, #2
 80039d0:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80039d2:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <buildDataFrame+0x294>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80039da:	4b47      	ldr	r3, [pc, #284]	@ (8003af8 <buildDataFrame+0x294>)
 80039dc:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80039e4:	4a44      	ldr	r2, [pc, #272]	@ (8003af8 <buildDataFrame+0x294>)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80039ee:	2212      	movs	r2, #18
 80039f0:	701a      	strb	r2, [r3, #0]
        end += 1;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3301      	adds	r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 80039f8:	4b3f      	ldr	r3, [pc, #252]	@ (8003af8 <buildDataFrame+0x294>)
 80039fa:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 8003a02:	4b3d      	ldr	r3, [pc, #244]	@ (8003af8 <buildDataFrame+0x294>)
 8003a04:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da03      	bge.n	8003a14 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <buildDataFrame+0x294>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 8003a14:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <buildDataFrame+0x294>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8003a1c:	4b36      	ldr	r3, [pc, #216]	@ (8003af8 <buildDataFrame+0x294>)
 8003a1e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01a      	beq.n	8003a5c <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 8003a26:	4a34      	ldr	r2, [pc, #208]	@ (8003af8 <buildDataFrame+0x294>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003a30:	2211      	movs	r2, #17
 8003a32:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003a34:	4b30      	ldr	r3, [pc, #192]	@ (8003af8 <buildDataFrame+0x294>)
 8003a36:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f002 0201 	and.w	r2, r2, #1
 8003a42:	b2d1      	uxtb	r1, r2
 8003a44:	4a2c      	ldr	r2, [pc, #176]	@ (8003af8 <buildDataFrame+0x294>)
 8003a46:	4413      	add	r3, r2
 8003a48:	460a      	mov	r2, r1
 8003a4a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3302      	adds	r3, #2
 8003a52:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8003a54:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <buildDataFrame+0x294>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 8003a5c:	4b26      	ldr	r3, [pc, #152]	@ (8003af8 <buildDataFrame+0x294>)
 8003a5e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01a      	beq.n	8003a9c <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 8003a66:	4a24      	ldr	r2, [pc, #144]	@ (8003af8 <buildDataFrame+0x294>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003a70:	2207      	movs	r2, #7
 8003a72:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <buildDataFrame+0x294>)
 8003a76:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f002 0203 	and.w	r2, r2, #3
 8003a82:	b2d1      	uxtb	r1, r2
 8003a84:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <buildDataFrame+0x294>)
 8003a86:	4413      	add	r3, r2
 8003a88:	460a      	mov	r2, r1
 8003a8a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3302      	adds	r3, #2
 8003a92:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8003a94:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <buildDataFrame+0x294>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b18      	cmp	r3, #24
 8003aa0:	dd01      	ble.n	8003aa6 <buildDataFrame+0x242>
 8003aa2:	f7fd fd7d 	bl	80015a0 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <buildDataFrame+0x250>
 8003aac:	79bb      	ldrb	r3, [r7, #6]
 8003aae:	3305      	adds	r3, #5
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e000      	b.n	8003ab6 <buildDataFrame+0x252>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	4413      	add	r3, r2
 8003abc:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d905      	bls.n	8003ad0 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3304      	adds	r3, #4
 8003ace:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <buildDataFrame+0x294>)
 8003ad2:	2240      	movs	r2, #64	@ 0x40
 8003ad4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003ad8:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <buildDataFrame+0x294>)
 8003ada:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <buildDataFrame+0x294>)
 8003ae0:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	4a03      	ldr	r2, [pc, #12]	@ (8003af8 <buildDataFrame+0x294>)
 8003aec:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	db03      	blt.n	8003afc <buildDataFrame+0x298>
 8003af4:	2240      	movs	r2, #64	@ 0x40
 8003af6:	e002      	b.n	8003afe <buildDataFrame+0x29a>
 8003af8:	200001a8 	.word	0x200001a8
 8003afc:	2200      	movs	r2, #0
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3b08      	subs	r3, #8
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003b12:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b14:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8003b18:	4a3f      	ldr	r2, [pc, #252]	@ (8003c18 <buildDataFrame+0x3b4>)
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f7fd ff49 	bl	80019ba <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 8003b28:	4b3a      	ldr	r3, [pc, #232]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b2a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8003b32:	4b38      	ldr	r3, [pc, #224]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b34:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003b38:	3301      	adds	r3, #1
 8003b3a:	4a36      	ldr	r2, [pc, #216]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b3c:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8003b40:	4a36      	ldr	r2, [pc, #216]	@ (8003c1c <buildDataFrame+0x3b8>)
 8003b42:	4b34      	ldr	r3, [pc, #208]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b44:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7fd ff1b 	bl	800198c <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 8003b56:	4b2f      	ldr	r3, [pc, #188]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d03e      	beq.n	8003be2 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8003b64:	4b2b      	ldr	r3, [pc, #172]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b66:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003b6e:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 8003b76:	4b27      	ldr	r3, [pc, #156]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b78:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <buildDataFrame+0x324>
 8003b80:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8003b88:	4b22      	ldr	r3, [pc, #136]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b8a:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8003b8e:	4a21      	ldr	r2, [pc, #132]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003b98:	460a      	mov	r2, r1
 8003b9a:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <buildDataFrame+0x3bc>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	79ba      	ldrb	r2, [r7, #6]
 8003ba6:	491f      	ldr	r1, [pc, #124]	@ (8003c24 <buildDataFrame+0x3c0>)
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f006 f97f 	bl	8009eac <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003bae:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003bb0:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <buildDataFrame+0x358>
 8003bb8:	481b      	ldr	r0, [pc, #108]	@ (8003c28 <buildDataFrame+0x3c4>)
 8003bba:	e000      	b.n	8003bbe <buildDataFrame+0x35a>
 8003bbc:	481b      	ldr	r0, [pc, #108]	@ (8003c2c <buildDataFrame+0x3c8>)
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003bc0:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8003bc4:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003bc6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003bca:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003bd0:	4a13      	ldr	r2, [pc, #76]	@ (8003c20 <buildDataFrame+0x3bc>)
 8003bd2:	4413      	add	r3, r2
 8003bd4:	79ba      	ldrb	r2, [r7, #6]
 8003bd6:	9201      	str	r2, [sp, #4]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4622      	mov	r2, r4
 8003bde:	f7fe f853 	bl	8001c88 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 8003be2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003be4:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003bea:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <buildDataFrame+0x3bc>)
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	480a      	ldr	r0, [pc, #40]	@ (8003c28 <buildDataFrame+0x3c4>)
 8003bfe:	f7fd ffc5 	bl	8001b8c <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8003c02:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <buildDataFrame+0x3b0>)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd90      	pop	{r4, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200001a8 	.word	0x200001a8
 8003c18:	200002f1 	.word	0x200002f1
 8003c1c:	200002f6 	.word	0x200002f6
 8003c20:	200002f0 	.word	0x200002f0
 8003c24:	20000265 	.word	0x20000265
 8003c28:	2000029c 	.word	0x2000029c
 8003c2c:	200002ac 	.word	0x200002ac

08003c30 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f001 fda7 	bl	800578c <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003c3e:	4823      	ldr	r0, [pc, #140]	@ (8003ccc <onBcnRx+0x9c>)
 8003c40:	f000 ffa4 	bl	8004b8c <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003c44:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <onBcnRx+0xa0>)
 8003c46:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <onBcnRx+0xa0>)
 8003c50:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c54:	f023 0303 	bic.w	r3, r3, #3
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <onBcnRx+0xa0>)
 8003c5c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7fe fead 	bl	80029c0 <reportEvent>
        return;
 8003c66:	e02d      	b.n	8003cc4 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003c68:	f7fe ff2e 	bl	8002ac8 <decodeBeacon>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	dc0f      	bgt.n	8003c92 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003c72:	4b17      	ldr	r3, [pc, #92]	@ (8003cd0 <onBcnRx+0xa0>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f001 fd86 	bl	800578c <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003c80:	4b13      	ldr	r3, [pc, #76]	@ (8003cd0 <onBcnRx+0xa0>)
 8003c82:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003c86:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <onBcnRx+0xa4>)
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4810      	ldr	r0, [pc, #64]	@ (8003ccc <onBcnRx+0x9c>)
 8003c8c:	f000 ffc2 	bl	8004c14 <os_setTimedCallback>
        return;
 8003c90:	e018      	b.n	8003cc4 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003c92:	2101      	movs	r1, #1
 8003c94:	200d      	movs	r0, #13
 8003c96:	f7fe f983 	bl	8001fa0 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <onBcnRx+0xa0>)
 8003c9c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <onBcnRx+0xa0>)
 8003ca8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <onBcnRx+0xa0>)
 8003cae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <onBcnRx+0xa0>)
 8003cba:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f7fe fe7e 	bl	80029c0 <reportEvent>
}
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200001bc 	.word	0x200001bc
 8003cd0:	200001a8 	.word	0x200001a8
 8003cd4:	08003c31 	.word	0x08003c31

08003cd8 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <startScan+0xa4>)
 8003cde:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <startScan+0x1c>
 8003ce6:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <startScan+0xa4>)
 8003ce8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <startScan+0x20>
 8003cf4:	f7fd fc54 	bl	80015a0 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003cf8:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <startScan+0xa4>)
 8003cfa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d137      	bne.n	8003d76 <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <startScan+0xa4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <startScan+0xa4>)
 8003d10:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8003d14:	4b19      	ldr	r3, [pc, #100]	@ (8003d7c <startScan+0xa4>)
 8003d16:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8003d1a:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <startScan+0xa4>)
 8003d1c:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003d20:	4b16      	ldr	r3, [pc, #88]	@ (8003d7c <startScan+0xa4>)
 8003d22:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003d26:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <startScan+0xa4>)
 8003d28:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <startScan+0xa4>)
 8003d3a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 8003d3e:	f7fe fd71 	bl	8002824 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003d42:	f000 fefd 	bl	8004b40 <os_getTime>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8003d4c:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 8003d50:	4a0a      	ldr	r2, [pc, #40]	@ (8003d7c <startScan+0xa4>)
 8003d52:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8003d56:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <startScan+0xa4>)
 8003d58:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003d5c:	4a07      	ldr	r2, [pc, #28]	@ (8003d7c <startScan+0xa4>)
 8003d5e:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <startScan+0xa4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a06      	ldr	r2, [pc, #24]	@ (8003d80 <startScan+0xa8>)
 8003d66:	4619      	mov	r1, r3
 8003d68:	4806      	ldr	r0, [pc, #24]	@ (8003d84 <startScan+0xac>)
 8003d6a:	f000 ff53 	bl	8004c14 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003d6e:	2003      	movs	r0, #3
 8003d70:	f001 fd0c 	bl	800578c <os_radio>
 8003d74:	e000      	b.n	8003d78 <startScan+0xa0>
        return;
 8003d76:	bf00      	nop
}
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200001a8 	.word	0x200001a8
 8003d80:	08003c31 	.word	0x08003c31
 8003d84:	200001bc 	.word	0x200001bc

08003d88 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003d92:	4b16      	ldr	r3, [pc, #88]	@ (8003dec <buildJoinRequest+0x64>)
 8003d94:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	79fa      	ldrb	r2, [r7, #7]
 8003d9a:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fd33 	bl	800480c <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3309      	adds	r3, #9
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fd42 	bl	8004834 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3311      	adds	r3, #17
 8003db4:	4a0e      	ldr	r2, [pc, #56]	@ (8003df0 <buildJoinRequest+0x68>)
 8003db6:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fd fde5 	bl	800198c <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003dc2:	2113      	movs	r1, #19
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7fd ff09 	bl	8001bdc <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <buildJoinRequest+0x68>)
 8003dcc:	2217      	movs	r2, #23
 8003dce:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 8003dd2:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <buildJoinRequest+0x68>)
 8003dd4:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b04      	ldr	r3, [pc, #16]	@ (8003df0 <buildJoinRequest+0x68>)
 8003dde:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	200002f0 	.word	0x200002f0
 8003df0:	200001a8 	.word	0x200001a8

08003df4 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003dfc:	2005      	movs	r0, #5
 8003dfe:	f7fe fddf 	bl	80029c0 <reportEvent>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003e10:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e12:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d138      	bne.n	8003e8c <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e1c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e20:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <LMIC_startJoining+0x20>
 8003e28:	f7fd fbba 	bl	80015a0 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003e34:	4b17      	ldr	r3, [pc, #92]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e36:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e3a:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e46:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003e4a:	4b12      	ldr	r3, [pc, #72]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e54:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8003e58:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e5a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e60:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8003e64:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e66:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 8003e6a:	f7fe fd01 	bl	8002870 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e70:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <LMIC_startJoining+0x88>)
 8003e7c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8003e80:	4905      	ldr	r1, [pc, #20]	@ (8003e98 <LMIC_startJoining+0x8c>)
 8003e82:	4806      	ldr	r0, [pc, #24]	@ (8003e9c <LMIC_startJoining+0x90>)
 8003e84:	f000 fea0 	bl	8004bc8 <os_setCallback>
        return 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200001a8 	.word	0x200001a8
 8003e98:	08003df5 	.word	0x08003df5
 8003e9c:	200001bc 	.word	0x200001bc

08003ea0 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <processPingRx+0x38>)
 8003eaa:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <processPingRx+0x38>)
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 8003eba:	f7fe fe99 	bl	8002bf0 <decodeFrame>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8003ec4:	200d      	movs	r0, #13
 8003ec6:	f7fe fd7b 	bl	80029c0 <reportEvent>
            return;
 8003eca:	e001      	b.n	8003ed0 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8003ecc:	f000 fa2a 	bl	8004324 <engineUpdate>
}
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200001a8 	.word	0x200001a8

08003edc <processDnData>:


static bit_t processDnData (void) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003ee0:	4b76      	ldr	r3, [pc, #472]	@ (80040bc <processDnData+0x1e0>)
 8003ee2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <processDnData+0x16>
 8003eee:	f7fd fb57 	bl	80015a0 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003ef2:	4b72      	ldr	r3, [pc, #456]	@ (80040bc <processDnData+0x1e0>)
 8003ef4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 80ce 	bne.w	800409a <processDnData+0x1be>
      norx:
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8003f02:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8003f04:	4b6d      	ldr	r3, [pc, #436]	@ (80040bc <processDnData+0x1e0>)
 8003f06:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d038      	beq.n	8003f80 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8003f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80040bc <processDnData+0x1e0>)
 8003f10:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003f14:	2b07      	cmp	r3, #7
 8003f16:	d82e      	bhi.n	8003f76 <processDnData+0x9a>
                LMIC.txCnt += 1;
 8003f18:	4b68      	ldr	r3, [pc, #416]	@ (80040bc <processDnData+0x1e0>)
 8003f1a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003f1e:	3301      	adds	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <processDnData+0x1e0>)
 8003f24:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8003f28:	4b64      	ldr	r3, [pc, #400]	@ (80040bc <processDnData+0x1e0>)
 8003f2a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003f2e:	4a63      	ldr	r2, [pc, #396]	@ (80040bc <processDnData+0x1e0>)
 8003f30:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 8003f34:	4611      	mov	r1, r2
 8003f36:	4a62      	ldr	r2, [pc, #392]	@ (80040c0 <processDnData+0x1e4>)
 8003f38:	5c52      	ldrb	r2, [r2, r1]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd fcbd 	bl	80018bc <lowerDR>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003f48:	4619      	mov	r1, r3
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	f7fe f9ea 	bl	8002324 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8003f50:	4b5a      	ldr	r3, [pc, #360]	@ (80040bc <processDnData+0x1e0>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2103      	movs	r1, #3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe f9a2 	bl	80022a0 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8003f5c:	4b57      	ldr	r3, [pc, #348]	@ (80040bc <processDnData+0x1e0>)
 8003f5e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	4b54      	ldr	r3, [pc, #336]	@ (80040bc <processDnData+0x1e0>)
 8003f6a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 8003f6e:	f000 f9d9 	bl	8004324 <engineUpdate>
                return 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e09f      	b.n	80040b6 <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8003f76:	4b51      	ldr	r3, [pc, #324]	@ (80040bc <processDnData+0x1e0>)
 8003f78:	2260      	movs	r2, #96	@ 0x60
 8003f7a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8003f7e:	e003      	b.n	8003f88 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8003f80:	4b4e      	ldr	r3, [pc, #312]	@ (80040bc <processDnData+0x1e0>)
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003f88:	4b4c      	ldr	r3, [pc, #304]	@ (80040bc <processDnData+0x1e0>)
 8003f8a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003f8e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8003f92:	d009      	beq.n	8003fa8 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8003f94:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <processDnData+0x1e0>)
 8003f96:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	b25a      	sxtb	r2, r3
 8003fa2:	4b46      	ldr	r3, [pc, #280]	@ (80040bc <processDnData+0x1e0>)
 8003fa4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8003fa8:	4b44      	ldr	r3, [pc, #272]	@ (80040bc <processDnData+0x1e0>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003fb0:	4b42      	ldr	r3, [pc, #264]	@ (80040bc <processDnData+0x1e0>)
 8003fb2:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <processDnData+0x1e0>)
 8003fb8:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8003fbc:	e000      	b.n	8003fc0 <processDnData+0xe4>
    }
    goto txcomplete;
 8003fbe:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8003fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <processDnData+0x1e0>)
 8003fc2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fc6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80040bc <processDnData+0x1e0>)
 8003fce:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8003fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80040bc <processDnData+0x1e0>)
 8003fd4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <processDnData+0x12a>
 8003fe0:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <processDnData+0x1e0>)
 8003fe2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8003fee:	4b33      	ldr	r3, [pc, #204]	@ (80040bc <processDnData+0x1e0>)
 8003ff0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	4b30      	ldr	r3, [pc, #192]	@ (80040bc <processDnData+0x1e0>)
 8003ffc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 8004000:	200f      	movs	r0, #15
 8004002:	f7fe fcdd 	bl	80029c0 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8004006:	200a      	movs	r0, #10
 8004008:	f7fe fcda 	bl	80029c0 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <processDnData+0x1e0>)
 800400e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004012:	2b18      	cmp	r3, #24
 8004014:	dd1c      	ble.n	8004050 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8004016:	4b29      	ldr	r3, [pc, #164]	@ (80040bc <processDnData+0x1e0>)
 8004018:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800401c:	4618      	mov	r0, r3
 800401e:	f7fd fc1f 	bl	8001860 <decDR>
 8004022:	4603      	mov	r3, r0
 8004024:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004028:	4619      	mov	r1, r3
 800402a:	2003      	movs	r0, #3
 800402c:	f7fe f97a 	bl	8002324 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8004030:	4b22      	ldr	r3, [pc, #136]	@ (80040bc <processDnData+0x1e0>)
 8004032:	220c      	movs	r2, #12
 8004034:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004038:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <processDnData+0x1e0>)
 800403a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800403e:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b1d      	ldr	r3, [pc, #116]	@ (80040bc <processDnData+0x1e0>)
 8004046:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 800404a:	200e      	movs	r0, #14
 800404c:	f7fe fcb8 	bl	80029c0 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8004050:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <processDnData+0x1e0>)
 8004052:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01d      	beq.n	8004096 <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800405a:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <processDnData+0x1e0>)
 800405c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8004068:	2002      	movs	r0, #2
 800406a:	f7fe fca9 	bl	80029c0 <reportEvent>
                LMIC.bcninfoTries = 0;
 800406e:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <processDnData+0x1e0>)
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004076:	e00e      	b.n	8004096 <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8004078:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <processDnData+0x1e0>)
 800407a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800407e:	3b01      	subs	r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <processDnData+0x1e0>)
 8004084:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <processDnData+0x1e0>)
 800408a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8004092:	f7ff fe21 	bl	8003cd8 <startScan>
        return 1;
 8004096:	2301      	movs	r3, #1
 8004098:	e00d      	b.n	80040b6 <processDnData+0x1da>
    if( !decodeFrame() ) {
 800409a:	f7fe fda9 	bl	8002bf0 <decodeFrame>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d18c      	bne.n	8003fbe <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <processDnData+0x1e0>)
 80040a6:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f43f af27 	beq.w	8003f02 <processDnData+0x26>
            return 0;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200001a8 	.word	0x200001a8
 80040c0:	0800b03c 	.word	0x0800b03c

080040c4 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 80040cc:	4b81      	ldr	r3, [pc, #516]	@ (80042d4 <processBeacon+0x210>)
 80040ce:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80040d2:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 80040d4:	4b7f      	ldr	r3, [pc, #508]	@ (80042d4 <processBeacon+0x210>)
 80040d6:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80040da:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 80040dc:	4b7d      	ldr	r3, [pc, #500]	@ (80042d4 <processBeacon+0x210>)
 80040de:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8087 	beq.w	80041f6 <processBeacon+0x132>
 80040e8:	f7fe fcee 	bl	8002ac8 <decodeBeacon>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f340 8081 	ble.w	80041f6 <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 80040f4:	2304      	movs	r3, #4
 80040f6:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004102:	2100      	movs	r1, #0
 8004104:	200d      	movs	r0, #13
 8004106:	f7fd ff4b 	bl	8001fa0 <calcBcnRxWindowFromMillis>
            goto rev;
 800410a:	e0d2      	b.n	80042b2 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	b29a      	uxth	r2, r3
 8004110:	4b70      	ldr	r3, [pc, #448]	@ (80042d4 <processBeacon+0x210>)
 8004112:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004116:	b29b      	uxth	r3, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004120:	b29b      	uxth	r3, r3
 8004122:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8004124:	4b6b      	ldr	r3, [pc, #428]	@ (80042d4 <processBeacon+0x210>)
 8004126:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800412a:	2b00      	cmp	r3, #0
 800412c:	d013      	beq.n	8004156 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 800412e:	4b69      	ldr	r3, [pc, #420]	@ (80042d4 <processBeacon+0x210>)
 8004130:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004134:	b29a      	uxth	r2, r3
 8004136:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800413a:	4966      	ldr	r1, [pc, #408]	@ (80042d4 <processBeacon+0x210>)
 800413c:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8004140:	1a59      	subs	r1, r3, r1
 8004142:	4b64      	ldr	r3, [pc, #400]	@ (80042d4 <processBeacon+0x210>)
 8004144:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004148:	3301      	adds	r3, #1
 800414a:	fb91 f3f3 	sdiv	r3, r1, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	4413      	add	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8004156:	4b5f      	ldr	r3, [pc, #380]	@ (80042d4 <processBeacon+0x210>)
 8004158:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d127      	bne.n	80041b4 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8004164:	4b5b      	ldr	r3, [pc, #364]	@ (80042d4 <processBeacon+0x210>)
 8004166:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800416a:	b29a      	uxth	r2, r3
 800416c:	8abb      	ldrh	r3, [r7, #20]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	b29b      	uxth	r3, r3
 8004172:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8004174:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da03      	bge.n	8004184 <processBeacon+0xc0>
 800417c:	8a7b      	ldrh	r3, [r7, #18]
 800417e:	425b      	negs	r3, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8004184:	4a53      	ldr	r2, [pc, #332]	@ (80042d4 <processBeacon+0x210>)
 8004186:	8a7b      	ldrh	r3, [r7, #18]
 8004188:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 800418c:	4b51      	ldr	r3, [pc, #324]	@ (80042d4 <processBeacon+0x210>)
 800418e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8004192:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004196:	429a      	cmp	r2, r3
 8004198:	dd03      	ble.n	80041a2 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 800419a:	4a4e      	ldr	r2, [pc, #312]	@ (80042d4 <processBeacon+0x210>)
 800419c:	8a7b      	ldrh	r3, [r7, #18]
 800419e:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 80041a2:	4b4c      	ldr	r3, [pc, #304]	@ (80042d4 <processBeacon+0x210>)
 80041a4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80041a8:	f023 0308 	bic.w	r3, r3, #8
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b49      	ldr	r3, [pc, #292]	@ (80042d4 <processBeacon+0x210>)
 80041b0:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 80041b4:	4a47      	ldr	r2, [pc, #284]	@ (80042d4 <processBeacon+0x210>)
 80041b6:	8abb      	ldrh	r3, [r7, #20]
 80041b8:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <processBeacon+0x210>)
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 80041c4:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <processBeacon+0x210>)
 80041c6:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80041ca:	4b42      	ldr	r3, [pc, #264]	@ (80042d4 <processBeacon+0x210>)
 80041cc:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 80041d0:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <processBeacon+0x210>)
 80041d2:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80041d6:	f023 0304 	bic.w	r3, r3, #4
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b3d      	ldr	r3, [pc, #244]	@ (80042d4 <processBeacon+0x210>)
 80041de:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 80041e2:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <processBeacon+0x210>)
 80041e4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d14c      	bne.n	800428a <processBeacon+0x1c6>
 80041f0:	f7fd f9d6 	bl	80015a0 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 80041f4:	e049      	b.n	800428a <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 80041f6:	2303      	movs	r3, #3
 80041f8:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 80041fa:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <processBeacon+0x210>)
 80041fc:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8004200:	4b34      	ldr	r3, [pc, #208]	@ (80042d4 <processBeacon+0x210>)
 8004202:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004206:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 800420a:	4413      	add	r3, r2
 800420c:	4a31      	ldr	r2, [pc, #196]	@ (80042d4 <processBeacon+0x210>)
 800420e:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004212:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <processBeacon+0x210>)
 8004214:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8004218:	3380      	adds	r3, #128	@ 0x80
 800421a:	4a2e      	ldr	r2, [pc, #184]	@ (80042d4 <processBeacon+0x210>)
 800421c:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 8004220:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <processBeacon+0x210>)
 8004222:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004226:	3301      	adds	r3, #1
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b2a      	ldr	r3, [pc, #168]	@ (80042d4 <processBeacon+0x210>)
 800422c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004230:	4b28      	ldr	r3, [pc, #160]	@ (80042d4 <processBeacon+0x210>)
 8004232:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004236:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800423a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800423e:	2104      	movs	r1, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe f82d 	bl	80022a0 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004246:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <processBeacon+0x210>)
 8004248:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800424c:	2b14      	cmp	r3, #20
 800424e:	d908      	bls.n	8004262 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004250:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <processBeacon+0x210>)
 8004252:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	b29a      	uxth	r2, r3
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <processBeacon+0x210>)
 800425e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004262:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <processBeacon+0x210>)
 8004264:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d90f      	bls.n	800428c <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 800426c:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <processBeacon+0x210>)
 800426e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004272:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8004276:	f023 0302 	bic.w	r3, r3, #2
 800427a:	b29a      	uxth	r2, r3
 800427c:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <processBeacon+0x210>)
 800427e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004282:	200b      	movs	r0, #11
 8004284:	f7fe fb9c 	bl	80029c0 <reportEvent>
            return;
 8004288:	e021      	b.n	80042ce <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800428a:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <processBeacon+0x210>)
 800428e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004292:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 8004296:	2103      	movs	r1, #3
 8004298:	2000      	movs	r0, #0
 800429a:	f7fd fe2d 	bl	8001ef8 <calcRxWindow>
 800429e:	4603      	mov	r3, r0
 80042a0:	1ae3      	subs	r3, r4, r3
 80042a2:	4a0c      	ldr	r2, [pc, #48]	@ (80042d4 <processBeacon+0x210>)
 80042a4:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <processBeacon+0x210>)
 80042aa:	7c1a      	ldrb	r2, [r3, #16]
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <processBeacon+0x210>)
 80042ae:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 80042b2:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <processBeacon+0x210>)
 80042b4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80042b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 80042c0:	4805      	ldr	r0, [pc, #20]	@ (80042d8 <processBeacon+0x214>)
 80042c2:	f7fd fef3 	bl	80020ac <rxschedInit>
    reportEvent(ev);
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe fb79 	bl	80029c0 <reportEvent>
}
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	200001a8 	.word	0x200001a8
 80042d8:	200002dc 	.word	0x200002dc

080042dc <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <startRxBcn+0x1c>)
 80042e6:	4a05      	ldr	r2, [pc, #20]	@ (80042fc <startRxBcn+0x20>)
 80042e8:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80042ea:	2002      	movs	r0, #2
 80042ec:	f001 fa4e 	bl	800578c <os_radio>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	200001a8 	.word	0x200001a8
 80042fc:	080040c5 	.word	0x080040c5

08004300 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <startRxPing+0x1c>)
 800430a:	4a05      	ldr	r2, [pc, #20]	@ (8004320 <startRxPing+0x20>)
 800430c:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 800430e:	2002      	movs	r0, #2
 8004310:	f001 fa3c 	bl	800578c <os_radio>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200001a8 	.word	0x200001a8
 8004320:	08003ea1 	.word	0x08003ea1

08004324 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 800432a:	4b90      	ldr	r3, [pc, #576]	@ (800456c <engineUpdate+0x248>)
 800432c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004330:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 81ab 	bne.w	8004690 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 800433a:	4b8c      	ldr	r3, [pc, #560]	@ (800456c <engineUpdate+0x248>)
 800433c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <engineUpdate+0x34>
 8004344:	4b89      	ldr	r3, [pc, #548]	@ (800456c <engineUpdate+0x248>)
 8004346:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <engineUpdate+0x34>
        LMIC_startJoining();
 8004352:	f7ff fd5b 	bl	8003e0c <LMIC_startJoining>
        return;
 8004356:	e19e      	b.n	8004696 <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004358:	f000 fbf2 	bl	8004b40 <os_getTime>
 800435c:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004366:	4b81      	ldr	r3, [pc, #516]	@ (800456c <engineUpdate+0x248>)
 8004368:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00f      	beq.n	8004394 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800437a:	4b7c      	ldr	r3, [pc, #496]	@ (800456c <engineUpdate+0x248>)
 800437c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	dd01      	ble.n	800438a <engineUpdate+0x66>
 8004386:	f7fd f90b 	bl	80015a0 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800438a:	4b78      	ldr	r3, [pc, #480]	@ (800456c <engineUpdate+0x248>)
 800438c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004390:	3b40      	subs	r3, #64	@ 0x40
 8004392:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004394:	4b75      	ldr	r3, [pc, #468]	@ (800456c <engineUpdate+0x248>)
 8004396:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800439a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80f2 	beq.w	8004588 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 80043a4:	4b71      	ldr	r3, [pc, #452]	@ (800456c <engineUpdate+0x248>)
 80043a6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80043aa:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 80043ba:	4b6c      	ldr	r3, [pc, #432]	@ (800456c <engineUpdate+0x248>)
 80043bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80043c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d012      	beq.n	80043ee <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 80043c8:	68b8      	ldr	r0, [r7, #8]
 80043ca:	f7fe f98f 	bl	80026ec <nextTx>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4a66      	ldr	r2, [pc, #408]	@ (800456c <engineUpdate+0x248>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b65      	ldr	r3, [pc, #404]	@ (800456c <engineUpdate+0x248>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 80043da:	4b64      	ldr	r3, [pc, #400]	@ (800456c <engineUpdate+0x248>)
 80043dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80043e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	4b61      	ldr	r3, [pc, #388]	@ (800456c <engineUpdate+0x248>)
 80043e8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80043ec:	e002      	b.n	80043f4 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 80043ee:	4b5f      	ldr	r3, [pc, #380]	@ (800456c <engineUpdate+0x248>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 80043f4:	4b5d      	ldr	r3, [pc, #372]	@ (800456c <engineUpdate+0x248>)
 80043f6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <engineUpdate+0xe8>
 80043fe:	4b5b      	ldr	r3, [pc, #364]	@ (800456c <engineUpdate+0x248>)
 8004400:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <engineUpdate+0xfe>
 800440c:	4b57      	ldr	r3, [pc, #348]	@ (800456c <engineUpdate+0x248>)
 800440e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	da03      	bge.n	8004422 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 800441a:	4b54      	ldr	r3, [pc, #336]	@ (800456c <engineUpdate+0x248>)
 800441c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004420:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004422:	4b52      	ldr	r3, [pc, #328]	@ (800456c <engineUpdate+0x248>)
 8004424:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d017      	beq.n	8004460 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <engineUpdate+0x116>
 8004436:	4a4e      	ldr	r2, [pc, #312]	@ (8004570 <engineUpdate+0x24c>)
 8004438:	e000      	b.n	800443c <engineUpdate+0x118>
 800443a:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <engineUpdate+0x250>)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	441a      	add	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004444:	2b00      	cmp	r3, #0
 8004446:	dd0b      	ble.n	8004460 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800444e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004452:	2110      	movs	r1, #16
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd ff23 	bl	80022a0 <txDelay>
            txbeg = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
            goto checkrx;
 800445e:	e09b      	b.n	8004598 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3340      	adds	r3, #64	@ 0x40
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	da70      	bge.n	800454e <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004470:	4b3e      	ldr	r3, [pc, #248]	@ (800456c <engineUpdate+0x248>)
 8004472:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004476:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800447e:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <engineUpdate+0x248>)
 8004480:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 800448c:	4b37      	ldr	r3, [pc, #220]	@ (800456c <engineUpdate+0x248>)
 800448e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fa10 	bl	80018bc <lowerDR>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 80044a0:	23c0      	movs	r3, #192	@ 0xc0
 80044a2:	73bb      	strb	r3, [r7, #14]
 80044a4:	e001      	b.n	80044aa <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 80044aa:	7bbb      	ldrb	r3, [r7, #14]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fc6b 	bl	8003d88 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 80044b2:	4b2e      	ldr	r3, [pc, #184]	@ (800456c <engineUpdate+0x248>)
 80044b4:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <engineUpdate+0x254>)
 80044b6:	61da      	str	r2, [r3, #28]
 80044b8:	e01d      	b.n	80044f6 <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 80044ba:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <engineUpdate+0x248>)
 80044bc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80044c0:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 80044c4:	d907      	bls.n	80044d6 <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 80044c6:	bf00      	nop
 80044c8:	e000      	b.n	80044cc <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 80044ca:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80044cc:	492b      	ldr	r1, [pc, #172]	@ (800457c <engineUpdate+0x258>)
 80044ce:	482c      	ldr	r0, [pc, #176]	@ (8004580 <engineUpdate+0x25c>)
 80044d0:	f000 fb7a 	bl	8004bc8 <os_setCallback>
                    return;
 80044d4:	e0df      	b.n	8004696 <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80044d6:	4b25      	ldr	r3, [pc, #148]	@ (800456c <engineUpdate+0x248>)
 80044d8:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <engineUpdate+0x1c8>
 80044e0:	4b22      	ldr	r3, [pc, #136]	@ (800456c <engineUpdate+0x248>)
 80044e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d0ee      	beq.n	80044ca <engineUpdate+0x1a6>
                }
                buildDataFrame();
 80044ec:	f7ff f9ba 	bl	8003864 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80044f0:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <engineUpdate+0x248>)
 80044f2:	4a24      	ldr	r2, [pc, #144]	@ (8004584 <engineUpdate+0x260>)
 80044f4:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd f98b 	bl	8001814 <updr2rps>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <engineUpdate+0x248>)
 8004504:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f7fd f91c 	bl	8001748 <setCr>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	4b15      	ldr	r3, [pc, #84]	@ (800456c <engineUpdate+0x248>)
 8004516:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8004518:	4a14      	ldr	r2, [pc, #80]	@ (800456c <engineUpdate+0x248>)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 800451e:	4b13      	ldr	r3, [pc, #76]	@ (800456c <engineUpdate+0x248>)
 8004520:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004524:	b21b      	sxth	r3, r3
 8004526:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 800452a:	b21b      	sxth	r3, r3
 800452c:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8004530:	b21b      	sxth	r3, r3
 8004532:	b29a      	uxth	r2, r3
 8004534:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <engineUpdate+0x248>)
 8004536:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 800453a:	6938      	ldr	r0, [r7, #16]
 800453c:	f7fe f88c 	bl	8002658 <updateTx>
            reportEvent(EV_TXSTART);
 8004540:	2011      	movs	r0, #17
 8004542:	f7fe fa3d 	bl	80029c0 <reportEvent>
            os_radio(RADIO_TX);
 8004546:	2001      	movs	r0, #1
 8004548:	f001 f920 	bl	800578c <os_radio>
            return;
 800454c:	e0a3      	b.n	8004696 <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <engineUpdate+0x248>)
 8004550:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 808c 	beq.w	8004676 <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d119      	bne.n	8004598 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	3301      	adds	r3, #1
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e015      	b.n	8004598 <engineUpdate+0x274>
 800456c:	200001a8 	.word	0x200001a8
 8004570:	00046500 	.word	0x00046500
 8004574:	0002ee00 	.word	0x0002ee00
 8004578:	08003725 	.word	0x08003725
 800457c:	080029df 	.word	0x080029df
 8004580:	200001bc 	.word	0x200001bc
 8004584:	08003835 	.word	0x08003835
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004588:	4b44      	ldr	r3, [pc, #272]	@ (800469c <engineUpdate+0x378>)
 800458a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d07e      	beq.n	8004694 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 8004596:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004598:	4b40      	ldr	r3, [pc, #256]	@ (800469c <engineUpdate+0x378>)
 800459a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800459e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d041      	beq.n	800462a <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3340      	adds	r3, #64	@ 0x40
 80045aa:	4619      	mov	r1, r3
 80045ac:	483c      	ldr	r0, [pc, #240]	@ (80046a0 <engineUpdate+0x37c>)
 80045ae:	f7fd fdeb 	bl	8002188 <rxschedNext>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d038      	beq.n	800462a <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <engineUpdate+0x2a8>
 80045be:	4b37      	ldr	r3, [pc, #220]	@ (800469c <engineUpdate+0x378>)
 80045c0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db56      	blt.n	800467a <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80045cc:	4b33      	ldr	r3, [pc, #204]	@ (800469c <engineUpdate+0x378>)
 80045ce:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 80045d2:	4b32      	ldr	r3, [pc, #200]	@ (800469c <engineUpdate+0x378>)
 80045d4:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80045d6:	4b31      	ldr	r3, [pc, #196]	@ (800469c <engineUpdate+0x378>)
 80045d8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80045dc:	4a2f      	ldr	r2, [pc, #188]	@ (800469c <engineUpdate+0x378>)
 80045de:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80045e0:	4b2e      	ldr	r3, [pc, #184]	@ (800469c <engineUpdate+0x378>)
 80045e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80045e6:	4a2d      	ldr	r2, [pc, #180]	@ (800469c <engineUpdate+0x378>)
 80045e8:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80045ea:	4b2c      	ldr	r3, [pc, #176]	@ (800469c <engineUpdate+0x378>)
 80045ec:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fd f921 	bl	8001838 <dndr2rps>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b28      	ldr	r3, [pc, #160]	@ (800469c <engineUpdate+0x378>)
 80045fc:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 80045fe:	4b27      	ldr	r3, [pc, #156]	@ (800469c <engineUpdate+0x378>)
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 8004606:	4b25      	ldr	r3, [pc, #148]	@ (800469c <engineUpdate+0x378>)
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8004612:	da01      	bge.n	8004618 <engineUpdate+0x2f4>
 8004614:	f7fc ffc4 	bl	80015a0 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8004618:	4b20      	ldr	r3, [pc, #128]	@ (800469c <engineUpdate+0x378>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	3b40      	subs	r3, #64	@ 0x40
 800461e:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <engineUpdate+0x380>)
 8004620:	4619      	mov	r1, r3
 8004622:	4821      	ldr	r0, [pc, #132]	@ (80046a8 <engineUpdate+0x384>)
 8004624:	f000 faf6 	bl	8004c14 <os_setTimedCallback>
            return;
 8004628:	e035      	b.n	8004696 <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <engineUpdate+0x316>
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	db21      	blt.n	800467e <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 800463a:	f7fe f8f3 	bl	8002824 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 800463e:	4b17      	ldr	r3, [pc, #92]	@ (800469c <engineUpdate+0x378>)
 8004640:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8004644:	4b15      	ldr	r3, [pc, #84]	@ (800469c <engineUpdate+0x378>)
 8004646:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <engineUpdate+0x378>)
 800464a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800464e:	4a13      	ldr	r2, [pc, #76]	@ (800469c <engineUpdate+0x378>)
 8004650:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	db06      	blt.n	800466a <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <engineUpdate+0x378>)
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <engineUpdate+0x388>)
 8004660:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004662:	2002      	movs	r0, #2
 8004664:	f001 f892 	bl	800578c <os_radio>
        return;
 8004668:	e015      	b.n	8004696 <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800466a:	4a11      	ldr	r2, [pc, #68]	@ (80046b0 <engineUpdate+0x38c>)
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	480e      	ldr	r0, [pc, #56]	@ (80046a8 <engineUpdate+0x384>)
 8004670:	f000 fad0 	bl	8004c14 <os_setTimedCallback>
    return;
 8004674:	e00f      	b.n	8004696 <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <engineUpdate+0x35c>
                goto txdelay;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <engineUpdate+0x35c>
        goto txdelay;
 800467e:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3b40      	subs	r3, #64	@ 0x40
 8004684:	4a0b      	ldr	r2, [pc, #44]	@ (80046b4 <engineUpdate+0x390>)
 8004686:	4619      	mov	r1, r3
 8004688:	4807      	ldr	r0, [pc, #28]	@ (80046a8 <engineUpdate+0x384>)
 800468a:	f000 fac3 	bl	8004c14 <os_setTimedCallback>
 800468e:	e002      	b.n	8004696 <engineUpdate+0x372>
        return;
 8004690:	bf00      	nop
 8004692:	e000      	b.n	8004696 <engineUpdate+0x372>
            return;
 8004694:	bf00      	nop
}
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200001a8 	.word	0x200001a8
 80046a0:	200002dc 	.word	0x200002dc
 80046a4:	08004301 	.word	0x08004301
 80046a8:	200001bc 	.word	0x200001bc
 80046ac:	080040c5 	.word	0x080040c5
 80046b0:	080042dd 	.word	0x080042dd
 80046b4:	080029ad 	.word	0x080029ad

080046b8 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80046b8:	b598      	push	{r3, r4, r7, lr}
 80046ba:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80046bc:	2000      	movs	r0, #0
 80046be:	f001 f865 	bl	800578c <os_radio>
    os_clearCallback(&LMIC.osjob);
 80046c2:	4821      	ldr	r0, [pc, #132]	@ (8004748 <LMIC_reset+0x90>)
 80046c4:	f000 fa62 	bl	8004b8c <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80046c8:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80046cc:	2100      	movs	r1, #0
 80046ce:	481f      	ldr	r0, [pc, #124]	@ (800474c <LMIC_reset+0x94>)
 80046d0:	f005 fbc0 	bl	8009e54 <memset>
    LMIC.devaddr      =  0;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	@ (800474c <LMIC_reset+0x94>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 80046dc:	f000 ff5a 	bl	8005594 <radio_rand1>
 80046e0:	4603      	mov	r3, r0
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	b21c      	sxth	r4, r3
 80046e6:	f000 ff55 	bl	8005594 <radio_rand1>
 80046ea:	4603      	mov	r3, r0
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	4323      	orrs	r3, r4
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	4b15      	ldr	r3, [pc, #84]	@ (800474c <LMIC_reset+0x94>)
 80046f6:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 80046fa:	4b14      	ldr	r3, [pc, #80]	@ (800474c <LMIC_reset+0x94>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 8004702:	4b12      	ldr	r3, [pc, #72]	@ (800474c <LMIC_reset+0x94>)
 8004704:	2200      	movs	r2, #0
 8004706:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <LMIC_reset+0x94>)
 800470c:	2280      	movs	r2, #128	@ 0x80
 800470e:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8004712:	4b0e      	ldr	r3, [pc, #56]	@ (800474c <LMIC_reset+0x94>)
 8004714:	2200      	movs	r2, #0
 8004716:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 800471a:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <LMIC_reset+0x94>)
 800471c:	4a0c      	ldr	r2, [pc, #48]	@ (8004750 <LMIC_reset+0x98>)
 800471e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <LMIC_reset+0x94>)
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800472a:	4b08      	ldr	r3, [pc, #32]	@ (800474c <LMIC_reset+0x94>)
 800472c:	4a08      	ldr	r2, [pc, #32]	@ (8004750 <LMIC_reset+0x98>)
 800472e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <LMIC_reset+0x94>)
 8004734:	2203      	movs	r2, #3
 8004736:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 800473a:	4b04      	ldr	r3, [pc, #16]	@ (800474c <LMIC_reset+0x94>)
 800473c:	22ff      	movs	r2, #255	@ 0xff
 800473e:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004742:	bf00      	nop
 8004744:	bd98      	pop	{r3, r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	200001bc 	.word	0x200001bc
 800474c:	200001a8 	.word	0x200001a8
 8004750:	33d3e608 	.word	0x33d3e608

08004754 <LMIC_init>:


void LMIC_init (void) {
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <LMIC_init+0x18>)
 800475a:	2240      	movs	r2, #64	@ 0x40
 800475c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	200001a8 	.word	0x200001a8

08004770 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <LMIC_setTxData+0x34>)
 8004776:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800477a:	f043 0308 	orr.w	r3, r3, #8
 800477e:	b29a      	uxth	r2, r3
 8004780:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <LMIC_setTxData+0x34>)
 8004782:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004786:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <LMIC_setTxData+0x34>)
 8004788:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <LMIC_setTxData+0x34>)
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    engineUpdate();
 800479c:	f7ff fdc2 	bl	8004324 <engineUpdate>
}
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200001a8 	.word	0x200001a8

080047a8 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6039      	str	r1, [r7, #0]
 80047b0:	4611      	mov	r1, r2
 80047b2:	461a      	mov	r2, r3
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
 80047b8:	460b      	mov	r3, r1
 80047ba:	71bb      	strb	r3, [r7, #6]
 80047bc:	4613      	mov	r3, r2
 80047be:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80047c0:	79bb      	ldrb	r3, [r7, #6]
 80047c2:	2b34      	cmp	r3, #52	@ 0x34
 80047c4:	d902      	bls.n	80047cc <LMIC_setTxData2+0x24>
        return -2;
 80047c6:	f06f 0301 	mvn.w	r3, #1
 80047ca:	e017      	b.n	80047fc <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80047d2:	79bb      	ldrb	r3, [r7, #6]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	480a      	ldr	r0, [pc, #40]	@ (8004804 <LMIC_setTxData2+0x5c>)
 80047da:	f005 fb67 	bl	8009eac <memcpy>
    LMIC.pendTxConf = confirmed;
 80047de:	4a0a      	ldr	r2, [pc, #40]	@ (8004808 <LMIC_setTxData2+0x60>)
 80047e0:	797b      	ldrb	r3, [r7, #5]
 80047e2:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
    LMIC.pendTxPort = port;
 80047e6:	4a08      	ldr	r2, [pc, #32]	@ (8004808 <LMIC_setTxData2+0x60>)
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
    LMIC.pendTxLen  = dlen;
 80047ee:	4a06      	ldr	r2, [pc, #24]	@ (8004808 <LMIC_setTxData2+0x60>)
 80047f0:	79bb      	ldrb	r3, [r7, #6]
 80047f2:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC_setTxData();
 80047f6:	f7ff ffbb 	bl	8004770 <LMIC_setTxData>
    return 0;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000265 	.word	0x20000265
 8004808:	200001a8 	.word	0x200001a8

0800480c <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4906      	ldr	r1, [pc, #24]	@ (8004830 <os_getArtEui+0x24>)
 8004818:	461a      	mov	r2, r3
 800481a:	460b      	mov	r3, r1
 800481c:	cb03      	ldmia	r3!, {r0, r1}
 800481e:	6010      	str	r0, [r2, #0]
 8004820:	6051      	str	r1, [r2, #4]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	0800b098 	.word	0x0800b098

08004834 <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4906      	ldr	r1, [pc, #24]	@ (8004858 <os_getDevEui+0x24>)
 8004840:	461a      	mov	r2, r3
 8004842:	460b      	mov	r3, r1
 8004844:	cb03      	ldmia	r3!, {r0, r1}
 8004846:	6010      	str	r0, [r2, #0]
 8004848:	6051      	str	r1, [r2, #4]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	0800b0a0 	.word	0x0800b0a0

0800485c <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 800485c:	b4b0      	push	{r4, r5, r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a06      	ldr	r2, [pc, #24]	@ (8004880 <os_getDevKey+0x24>)
 8004868:	461c      	mov	r4, r3
 800486a:	4615      	mov	r5, r2
 800486c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800486e:	6020      	str	r0, [r4, #0]
 8004870:	6061      	str	r1, [r4, #4]
 8004872:	60a2      	str	r2, [r4, #8]
 8004874:	60e3      	str	r3, [r4, #12]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bcb0      	pop	{r4, r5, r7}
 800487e:	4770      	bx	lr
 8004880:	0800b0a8 	.word	0x0800b0a8

08004884 <initsensor>:
void initsensor(){
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET); //alimente le capteur de temperature
 8004888:	2201      	movs	r2, #1
 800488a:	2180      	movs	r1, #128	@ 0x80
 800488c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004890:	f003 f828 	bl	80078e4 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8004894:	217f      	movs	r1, #127	@ 0x7f
 8004896:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <initsensor+0x1c>)
 8004898:	f002 fcd6 	bl	8007248 <HAL_ADCEx_Calibration_Start>
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000028 	.word	0x20000028

080048a4 <initfunc>:

void initfunc (osjob_t* j) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 80048ac:	f7ff ffea 	bl	8004884 <initsensor>
	// reset MAC state
	LMIC_reset();
 80048b0:	f7ff ff02 	bl	80046b8 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 80048b4:	f7ff faaa 	bl	8003e0c <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <readsensor_temp>:
int readsensor_temp(){
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
	return  (188686 - 147 * raw_adc1_in15);
 80048c4:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <readsensor_temp+0x24>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0292 	mvn.w	r2, #146	@ 0x92
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	f503 3338 	add.w	r3, r3, #188416	@ 0x2e000
 80048d4:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000354 	.word	0x20000354

080048e8 <reportfunc>:

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc (osjob_t* j) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	// read sensor
	int val = readsensor_temp();
 80048f0:	f7ff ffe6 	bl	80048c0 <readsensor_temp>
 80048f4:	60f8      	str	r0, [r7, #12]

	// prepare and schedule data for transmission
	val = val / 100; //temperature en 10e de degres
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <reportfunc+0x70>)
 80048fa:	fb82 1203 	smull	r1, r2, r2, r3
 80048fe:	1152      	asrs	r2, r2, #5
 8004900:	17db      	asrs	r3, r3, #31
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	60fb      	str	r3, [r7, #12]
	LMIC.frame[0] = 0;
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <reportfunc+0x74>)
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[1] = 0x67; //adresse capteur
 800490e:	4b13      	ldr	r3, [pc, #76]	@ (800495c <reportfunc+0x74>)
 8004910:	2267      	movs	r2, #103	@ 0x67
 8004912:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149

	LMIC.frame[2] = val >> 8; //valeur capteur
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	121b      	asrs	r3, r3, #8
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <reportfunc+0x74>)
 800491e:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
	LMIC.frame[3] = val;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <reportfunc+0x74>)
 8004928:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b

	LMIC_setTxData2(1, LMIC.frame, 4, 0); // (port 1, 2 bytes, unconfirmed)
 800492c:	2300      	movs	r3, #0
 800492e:	2204      	movs	r2, #4
 8004930:	490b      	ldr	r1, [pc, #44]	@ (8004960 <reportfunc+0x78>)
 8004932:	2001      	movs	r0, #1
 8004934:	f7ff ff38 	bl	80047a8 <LMIC_setTxData2>
	// reschedule job in 60 seconds
	os_setTimedCallback(j, os_getTime()+sec2osticks(15), reportfunc);
 8004938:	f000 f902 	bl	8004b40 <os_getTime>
 800493c:	4603      	mov	r3, r0
 800493e:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8004942:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004946:	4a07      	ldr	r2, [pc, #28]	@ (8004964 <reportfunc+0x7c>)
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f962 	bl	8004c14 <os_setTimedCallback>
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	51eb851f 	.word	0x51eb851f
 800495c:	200001a8 	.word	0x200001a8
 8004960:	200002f0 	.word	0x200002f0
 8004964:	080048e9 	.word	0x080048e9

08004968 <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
	switch(ev) {
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	3b01      	subs	r3, #1
 8004976:	2b0e      	cmp	r3, #14
 8004978:	d824      	bhi.n	80049c4 <onEvent+0x5c>
 800497a:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <onEvent+0x18>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049c5 	.word	0x080049c5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049c5 	.word	0x080049c5
 800498c:	080049c5 	.word	0x080049c5
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049c5 	.word	0x080049c5
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049c5 	.word	0x080049c5
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	080049c5 	.word	0x080049c5
 80049b0:	080049c5 	.word	0x080049c5
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049c5 	.word	0x080049c5
	// network joined, session established
		case EV_JOINING:
			break;

		case EV_JOINED:
			reportfunc(&reportjob);
 80049bc:	4804      	ldr	r0, [pc, #16]	@ (80049d0 <onEvent+0x68>)
 80049be:	f7ff ff93 	bl	80048e8 <reportfunc>
			break;
 80049c2:	e000      	b.n	80049c6 <onEvent+0x5e>
		case EV_LINK_DEAD:
			break;
		case EV_LINK_ALIVE:
			break;
		default:
			break;
 80049c4:	bf00      	nop
	}
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000358 	.word	0x20000358

080049d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049da:	f001 f900 	bl	8005bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049de:	f000 f831 	bl	8004a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049e2:	f7fc fbcd 	bl	8001180 <MX_GPIO_Init>
  MX_SPI3_Init();
 80049e6:	f000 fefd 	bl	80057e4 <MX_SPI3_Init>
  MX_TIM7_Init();
 80049ea:	f001 f855 	bl	8005a98 <MX_TIM7_Init>
  MX_TIM6_Init();
 80049ee:	f001 f81b 	bl	8005a28 <MX_TIM6_Init>
  MX_ADC1_Init();
 80049f2:	f7fb fdb3 	bl	800055c <MX_ADC1_Init>
  MX_I2C1_Init();
 80049f6:	f7fc fddb 	bl	80015b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6); //demarrage du timer 6 en interruption toutes les secondes pour la mesure temperature
 80049fa:	480e      	ldr	r0, [pc, #56]	@ (8004a34 <main+0x60>)
 80049fc:	f004 ffb2 	bl	8009964 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8004a00:	480d      	ldr	r0, [pc, #52]	@ (8004a38 <main+0x64>)
 8004a02:	f004 ffaf 	bl	8009964 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <main+0x68>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <main+0x68>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a14:	601a      	str	r2, [r3, #0]

  osjob_t initjob;
  // initialize runtime env
  os_init();
 8004a16:	f000 f881 	bl	8004b1c <os_init>
  // setup initial job
  os_setCallback(&initjob, initfunc);
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	4908      	ldr	r1, [pc, #32]	@ (8004a40 <main+0x6c>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f8d2 	bl	8004bc8 <os_setCallback>
//  os_setCallback(&hellojob, hellofunc);
  // execute scheduled jobs and events
  os_runloop();
 8004a24:	f000 f92c 	bl	8004c80 <os_runloop>
  // (not reached)
  return 0;
 8004a28:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200003e0 	.word	0x200003e0
 8004a38:	2000042c 	.word	0x2000042c
 8004a3c:	2000037c 	.word	0x2000037c
 8004a40:	080048a5 	.word	0x080048a5

08004a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b096      	sub	sp, #88	@ 0x58
 8004a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a4a:	f107 0314 	add.w	r3, r7, #20
 8004a4e:	2244      	movs	r2, #68	@ 0x44
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f005 f9fe 	bl	8009e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a58:	463b      	mov	r3, r7
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004a6a:	f003 f8ab 	bl	8007bc4 <HAL_PWREx_ControlVoltageScaling>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004a74:	f000 f84c 	bl	8004b10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a82:	2310      	movs	r3, #16
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a86:	2302      	movs	r3, #2
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004a92:	230a      	movs	r3, #10
 8004a94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004a96:	2307      	movs	r3, #7
 8004a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aa2:	f107 0314 	add.w	r3, r7, #20
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f003 f8e2 	bl	8007c70 <HAL_RCC_OscConfig>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004ab2:	f000 f82d 	bl	8004b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ab6:	230f      	movs	r3, #15
 8004ab8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aba:	2303      	movs	r3, #3
 8004abc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004aca:	463b      	mov	r3, r7
 8004acc:	2104      	movs	r1, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fce2 	bl	8008498 <HAL_RCC_ClockConfig>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004ada:	f000 f819 	bl	8004b10 <Error_Handler>
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3758      	adds	r7, #88	@ 0x58
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_ADC_ConvCpltCallback>:
//	}
//}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	raw_adc1_in15 = HAL_ADC_GetValue(&hadc1);
 8004af0:	4805      	ldr	r0, [pc, #20]	@ (8004b08 <HAL_ADC_ConvCpltCallback+0x20>)
 8004af2:	f001 fcdf 	bl	80064b4 <HAL_ADC_GetValue>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <HAL_ADC_ConvCpltCallback+0x24>)
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000028 	.word	0x20000028
 8004b0c:	20000354 	.word	0x20000354

08004b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004b14:	b672      	cpsid	i
}
 8004b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b18:	bf00      	nop
 8004b1a:	e7fd      	b.n	8004b18 <Error_Handler+0x8>

08004b1c <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8004b20:	2208      	movs	r2, #8
 8004b22:	2100      	movs	r1, #0
 8004b24:	4805      	ldr	r0, [pc, #20]	@ (8004b3c <os_init+0x20>)
 8004b26:	f005 f995 	bl	8009e54 <memset>
    hal_init();
 8004b2a:	f7fc fd23 	bl	8001574 <hal_init>
    radio_init();
 8004b2e:	f000 fcbd 	bl	80054ac <radio_init>
    LMIC_init();
 8004b32:	f7ff fe0f 	bl	8004754 <LMIC_init>
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000364 	.word	0x20000364

08004b40 <os_getTime>:

ostime_t os_getTime () {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
    return hal_ticks();
 8004b44:	f7fc fc2c 	bl	80013a0 <hal_ticks>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004b58:	e00d      	b.n	8004b76 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d105      	bne.n	8004b70 <unlinkjob+0x22>
            *pnext = job->next;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	601a      	str	r2, [r3, #0]
            return 1;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e007      	b.n	8004b80 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ed      	bne.n	8004b5a <unlinkjob+0xc>
        }
    }
    return 0;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004b94:	f7fc fcc2 	bl	800151c <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4809      	ldr	r0, [pc, #36]	@ (8004bc0 <os_clearCallback+0x34>)
 8004b9c:	f7ff ffd7 	bl	8004b4e <unlinkjob>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <os_clearCallback+0x26>
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4806      	ldr	r0, [pc, #24]	@ (8004bc4 <os_clearCallback+0x38>)
 8004baa:	f7ff ffd0 	bl	8004b4e <unlinkjob>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004bb2:	f7fc fcc3 	bl	800153c <hal_enableIRQs>
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000364 	.word	0x20000364
 8004bc4:	20000368 	.word	0x20000368

08004bc8 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004bd2:	f7fc fca3 	bl	800151c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	480d      	ldr	r0, [pc, #52]	@ (8004c10 <os_setCallback+0x48>)
 8004bda:	f7ff ffb8 	bl	8004b4e <unlinkjob>
    // fill-in job
    job->func = cb;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8004bea:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <os_setCallback+0x48>)
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e002      	b.n	8004bf6 <os_setCallback+0x2e>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f8      	bne.n	8004bf0 <os_setCallback+0x28>
    *pnext = job;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004c04:	f7fc fc9a 	bl	800153c <hal_enableIRQs>
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000368 	.word	0x20000368

08004c14 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8004c20:	f7fc fc7c 	bl	800151c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	4815      	ldr	r0, [pc, #84]	@ (8004c7c <os_setTimedCallback+0x68>)
 8004c28:	f7ff ff91 	bl	8004b4e <unlinkjob>
    // fill-in job
    job->deadline = time;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c7c <os_setTimedCallback+0x68>)
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e00e      	b.n	8004c62 <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	dd04      	ble.n	8004c5c <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	601a      	str	r2, [r3, #0]
            break;
 8004c5a:	e006      	b.n	8004c6a <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ec      	bne.n	8004c44 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004c70:	f7fc fc64 	bl	800153c <hal_enableIRQs>
}
 8004c74:	bf00      	nop
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000364 	.word	0x20000364

08004c80 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8004c8a:	f7fc fc47 	bl	800151c <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8004c8e:	4b16      	ldr	r3, [pc, #88]	@ (8004ce8 <os_runloop+0x68>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <os_runloop+0x26>
            j = OS.runnablejobs;
 8004c96:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <os_runloop+0x68>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <os_runloop+0x68>)
 8004ca2:	6053      	str	r3, [r2, #4]
 8004ca4:	e016      	b.n	8004cd4 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004ca6:	4b10      	ldr	r3, [pc, #64]	@ (8004ce8 <os_runloop+0x68>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <os_runloop+0x50>
 8004cae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <os_runloop+0x68>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc fbd1 	bl	800145c <hal_checkTimer>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <os_runloop+0x68>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a07      	ldr	r2, [pc, #28]	@ (8004ce8 <os_runloop+0x68>)
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e001      	b.n	8004cd4 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004cd0:	f7fc fc48 	bl	8001564 <hal_sleep>
        }
        hal_enableIRQs();
 8004cd4:	f7fc fc32 	bl	800153c <hal_enableIRQs>
        if(j) { // run job callback
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0d3      	beq.n	8004c86 <os_runloop+0x6>
            j->func(j);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
    while(1) {
 8004ce6:	e7ce      	b.n	8004c86 <os_runloop+0x6>
 8004ce8:	20000364 	.word	0x20000364

08004cec <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	71fb      	strb	r3, [r7, #7]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fc fac7 	bl	8001290 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fc fb22 	bl	8001354 <hal_spi>
    hal_spi(data);
 8004d10:	79bb      	ldrb	r3, [r7, #6]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc fb1e 	bl	8001354 <hal_spi>
    hal_pin_nss(1);
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f7fc fab9 	bl	8001290 <hal_pin_nss>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <readReg>:

static u1_t readReg (u1_t addr) {
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7fc faad 	bl	8001290 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fc fb08 	bl	8001354 <hal_spi>
    u1_t val = hal_spi(0x00);
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fc fb05 	bl	8001354 <hal_spi>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8004d4e:	2001      	movs	r0, #1
 8004d50:	f7fc fa9e 	bl	8001290 <hal_pin_nss>
    return val;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	4603      	mov	r3, r0
 8004d66:	6039      	str	r1, [r7, #0]
 8004d68:	71fb      	strb	r3, [r7, #7]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f7fc fa8e 	bl	8001290 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fc fae9 	bl	8001354 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	e009      	b.n	8004d9c <writeBuf+0x3e>
        hal_spi(buf[i]);
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fc fadf 	bl	8001354 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	79bb      	ldrb	r3, [r7, #6]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3f1      	bcc.n	8004d88 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8004da4:	2001      	movs	r0, #1
 8004da6:	f7fc fa73 	bl	8001290 <hal_pin_nss>
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004db2:	b590      	push	{r4, r7, lr}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	4603      	mov	r3, r0
 8004dba:	6039      	str	r1, [r7, #0]
 8004dbc:	71fb      	strb	r3, [r7, #7]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7fc fa64 	bl	8001290 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc fabf 	bl	8001354 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
 8004dda:	e00a      	b.n	8004df2 <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	18d4      	adds	r4, r2, r3
 8004de2:	2000      	movs	r0, #0
 8004de4:	f7fc fab6 	bl	8001354 <hal_spi>
 8004de8:	4603      	mov	r3, r0
 8004dea:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	3301      	adds	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	7bfa      	ldrb	r2, [r7, #15]
 8004df4:	79bb      	ldrb	r3, [r7, #6]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d3f0      	bcc.n	8004ddc <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f7fc fa48 	bl	8001290 <hal_pin_nss>
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd90      	pop	{r4, r7, pc}

08004e08 <opmode>:

static void opmode (u1_t mode) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8004e12:	2001      	movs	r0, #1
 8004e14:	f7ff ff87 	bl	8004d26 <readReg>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b25b      	sxtb	r3, r3
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	b25a      	sxtb	r2, r3
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7ff ff5c 	bl	8004cec <writeReg>
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <opmodeLora>:

static void opmodeLora() {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8004e42:	2380      	movs	r3, #128	@ 0x80
 8004e44:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	f043 0308 	orr.w	r3, r3, #8
 8004e4c:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	4619      	mov	r1, r3
 8004e52:	2001      	movs	r0, #1
 8004e54:	f7ff ff4a 	bl	8004cec <writeReg>
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <opmodeFSK>:

static void opmodeFSK() {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
    u1_t u = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	f043 0308 	orr.w	r3, r3, #8
 8004e70:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	4619      	mov	r1, r3
 8004e76:	2001      	movs	r0, #1
 8004e78:	f7ff ff38 	bl	8004cec <writeReg>
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 8004e8a:	4b54      	ldr	r3, [pc, #336]	@ (8004fdc <configLoraModem+0x158>)
 8004e8c:	89db      	ldrh	r3, [r3, #14]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fc fc26 	bl	80016e0 <getSf>
 8004e94:	4603      	mov	r3, r0
 8004e96:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	71fb      	strb	r3, [r7, #7]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	71bb      	strb	r3, [r7, #6]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8004ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <configLoraModem+0x158>)
 8004ea6:	89db      	ldrh	r3, [r3, #14]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fc fc29 	bl	8001700 <getBw>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d010      	beq.n	8004ed6 <configLoraModem+0x52>
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	dc13      	bgt.n	8004ee0 <configLoraModem+0x5c>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <configLoraModem+0x3e>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <configLoraModem+0x48>
 8004ec0:	e00e      	b.n	8004ee0 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8004ec8:	71fb      	strb	r3, [r7, #7]
 8004eca:	e00b      	b.n	8004ee4 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ed2:	71fb      	strb	r3, [r7, #7]
 8004ed4:	e006      	b.n	8004ee4 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8004edc:	71fb      	strb	r3, [r7, #7]
 8004ede:	e001      	b.n	8004ee4 <configLoraModem+0x60>
        default:
            ASSERT(0);
 8004ee0:	f7fc fb5e 	bl	80015a0 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8004ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fdc <configLoraModem+0x158>)
 8004ee6:	89db      	ldrh	r3, [r3, #14]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fc fc1b 	bl	8001724 <getCr>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d81f      	bhi.n	8004f34 <configLoraModem+0xb0>
 8004ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <configLoraModem+0x78>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f17 	.word	0x08004f17
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f2b 	.word	0x08004f2b
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f043 0302 	orr.w	r3, r3, #2
 8004f12:	71fb      	strb	r3, [r7, #7]
 8004f14:	e010      	b.n	8004f38 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	71fb      	strb	r3, [r7, #7]
 8004f1e:	e00b      	b.n	8004f38 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	f043 0306 	orr.w	r3, r3, #6
 8004f26:	71fb      	strb	r3, [r7, #7]
 8004f28:	e006      	b.n	8004f38 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	71fb      	strb	r3, [r7, #7]
 8004f32:	e001      	b.n	8004f38 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8004f34:	f7fc fb34 	bl	80015a0 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8004f38:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <configLoraModem+0x158>)
 8004f3a:	89db      	ldrh	r3, [r3, #14]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc fc43 	bl	80017c8 <getIh>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8004f50:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <configLoraModem+0x158>)
 8004f52:	89db      	ldrh	r3, [r3, #14]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fc fc37 	bl	80017c8 <getIh>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	4619      	mov	r1, r3
 8004f60:	2022      	movs	r0, #34	@ 0x22
 8004f62:	f7ff fec3 	bl	8004cec <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	201d      	movs	r0, #29
 8004f6c:	f7ff febe 	bl	8004cec <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8004f70:	793b      	ldrb	r3, [r7, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	3370      	adds	r3, #112	@ 0x70
 8004f7c:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 8004f7e:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <configLoraModem+0x158>)
 8004f80:	89db      	ldrh	r3, [r3, #14]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc fbf9 	bl	800177a <getNocrc>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8004f8e:	79bb      	ldrb	r3, [r7, #6]
 8004f90:	f043 0304 	orr.w	r3, r3, #4
 8004f94:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 8004f96:	79bb      	ldrb	r3, [r7, #6]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	201e      	movs	r0, #30
 8004f9c:	f7ff fea6 	bl	8004cec <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8004fa4:	793b      	ldrb	r3, [r7, #4]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d002      	beq.n	8004fb0 <configLoraModem+0x12c>
 8004faa:	793b      	ldrb	r3, [r7, #4]
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d10b      	bne.n	8004fc8 <configLoraModem+0x144>
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <configLoraModem+0x158>)
 8004fb2:	89db      	ldrh	r3, [r3, #14]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fc fba3 	bl	8001700 <getBw>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8004fc0:	797b      	ldrb	r3, [r7, #5]
 8004fc2:	f043 0308 	orr.w	r3, r3, #8
 8004fc6:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8004fc8:	797b      	ldrb	r3, [r7, #5]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	2026      	movs	r0, #38	@ 0x26
 8004fce:	f7ff fe8d 	bl	8004cec <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200001a8 	.word	0x200001a8

08004fe0 <configChannel>:

static void configChannel () {
 8004fe0:	b5b0      	push	{r4, r5, r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8004fe6:	4c1b      	ldr	r4, [pc, #108]	@ (8005054 <configChannel+0x74>)
 8004fe8:	68a4      	ldr	r4, [r4, #8]
 8004fea:	2500      	movs	r5, #0
 8004fec:	4622      	mov	r2, r4
 8004fee:	462b      	mov	r3, r5
 8004ff0:	0b51      	lsrs	r1, r2, #13
 8004ff2:	04d0      	lsls	r0, r2, #19
 8004ff4:	4a18      	ldr	r2, [pc, #96]	@ (8005058 <configChannel+0x78>)
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f7fb f937 	bl	800026c <__aeabi_uldivmod>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	0c02      	lsrs	r2, r0, #16
 8005014:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005018:	0c0b      	lsrs	r3, r1, #16
 800501a:	b2d3      	uxtb	r3, r2
 800501c:	4619      	mov	r1, r3
 800501e:	2006      	movs	r0, #6
 8005020:	f7ff fe64 	bl	8004cec <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	0a02      	lsrs	r2, r0, #8
 8005032:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005036:	0a0b      	lsrs	r3, r1, #8
 8005038:	b2d3      	uxtb	r3, r2
 800503a:	4619      	mov	r1, r3
 800503c:	2007      	movs	r0, #7
 800503e:	f7ff fe55 	bl	8004cec <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005042:	783b      	ldrb	r3, [r7, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	2008      	movs	r0, #8
 8005048:	f7ff fe50 	bl	8004cec <writeReg>
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bdb0      	pop	{r4, r5, r7, pc}
 8005054:	200001a8 	.word	0x200001a8
 8005058:	01e84800 	.word	0x01e84800

0800505c <configPower>:



static void configPower () {
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005062:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <configPower+0x5c>)
 8005064:	7c9b      	ldrb	r3, [r3, #18]
 8005066:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	2b10      	cmp	r3, #16
 800506e:	dd02      	ble.n	8005076 <configPower+0x1a>
        pw = 15;
 8005070:	230f      	movs	r3, #15
 8005072:	71fb      	strb	r3, [r7, #7]
 8005074:	e005      	b.n	8005082 <configPower+0x26>
    } else if(pw < 2) {
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	2b01      	cmp	r3, #1
 800507c:	dc01      	bgt.n	8005082 <configPower+0x26>
        pw = 2;
 800507e:	2302      	movs	r3, #2
 8005080:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	b25b      	sxtb	r3, r3
 800508a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800508e:	b25b      	sxtb	r3, r3
 8005090:	b2db      	uxtb	r3, r3
 8005092:	4619      	mov	r1, r3
 8005094:	2009      	movs	r0, #9
 8005096:	f7ff fe29 	bl	8004cec <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 800509a:	205a      	movs	r0, #90	@ 0x5a
 800509c:	f7ff fe43 	bl	8004d26 <readReg>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	4619      	mov	r1, r3
 80050aa:	205a      	movs	r0, #90	@ 0x5a
 80050ac:	f7ff fe1e 	bl	8004cec <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	200001a8 	.word	0x200001a8

080050bc <txfsk>:

static void txfsk () {
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80050c0:	2110      	movs	r1, #16
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7ff fe12 	bl	8004cec <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7ff fe2c 	bl	8004d26 <readReg>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d001      	beq.n	80050d8 <txfsk+0x1c>
 80050d4:	f7fc fa64 	bl	80015a0 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80050d8:	2001      	movs	r0, #1
 80050da:	f7ff fe95 	bl	8004e08 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80050de:	2102      	movs	r1, #2
 80050e0:	2002      	movs	r0, #2
 80050e2:	f7ff fe03 	bl	8004cec <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	2003      	movs	r0, #3
 80050ea:	f7ff fdff 	bl	8004cec <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 80050ee:	2101      	movs	r1, #1
 80050f0:	2004      	movs	r0, #4
 80050f2:	f7ff fdfb 	bl	8004cec <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 80050f6:	2199      	movs	r1, #153	@ 0x99
 80050f8:	2005      	movs	r0, #5
 80050fa:	f7ff fdf7 	bl	8004cec <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 80050fe:	2100      	movs	r1, #0
 8005100:	2025      	movs	r0, #37	@ 0x25
 8005102:	f7ff fdf3 	bl	8004cec <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005106:	2105      	movs	r1, #5
 8005108:	2026      	movs	r0, #38	@ 0x26
 800510a:	f7ff fdef 	bl	8004cec <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 800510e:	2112      	movs	r1, #18
 8005110:	2027      	movs	r0, #39	@ 0x27
 8005112:	f7ff fdeb 	bl	8004cec <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005116:	21d0      	movs	r1, #208	@ 0xd0
 8005118:	2030      	movs	r0, #48	@ 0x30
 800511a:	f7ff fde7 	bl	8004cec <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 800511e:	2140      	movs	r1, #64	@ 0x40
 8005120:	2031      	movs	r0, #49	@ 0x31
 8005122:	f7ff fde3 	bl	8004cec <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005126:	21c1      	movs	r1, #193	@ 0xc1
 8005128:	2028      	movs	r0, #40	@ 0x28
 800512a:	f7ff fddf 	bl	8004cec <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800512e:	2194      	movs	r1, #148	@ 0x94
 8005130:	2029      	movs	r0, #41	@ 0x29
 8005132:	f7ff fddb 	bl	8004cec <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005136:	21c1      	movs	r1, #193	@ 0xc1
 8005138:	202a      	movs	r0, #42	@ 0x2a
 800513a:	f7ff fdd7 	bl	8004cec <writeReg>
    // configure frequency
    configChannel();
 800513e:	f7ff ff4f 	bl	8004fe0 <configChannel>
    // configure output power
    configPower();
 8005142:	f7ff ff8b 	bl	800505c <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005146:	2134      	movs	r1, #52	@ 0x34
 8005148:	2040      	movs	r0, #64	@ 0x40
 800514a:	f7ff fdcf 	bl	8004cec <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 800514e:	4b10      	ldr	r3, [pc, #64]	@ (8005190 <txfsk+0xd4>)
 8005150:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005154:	3301      	adds	r3, #1
 8005156:	b2db      	uxtb	r3, r3
 8005158:	4619      	mov	r1, r3
 800515a:	2032      	movs	r0, #50	@ 0x32
 800515c:	f7ff fdc6 	bl	8004cec <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <txfsk+0xd4>)
 8005162:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005166:	4619      	mov	r1, r3
 8005168:	2000      	movs	r0, #0
 800516a:	f7ff fdbf 	bl	8004cec <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800516e:	4b08      	ldr	r3, [pc, #32]	@ (8005190 <txfsk+0xd4>)
 8005170:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005174:	461a      	mov	r2, r3
 8005176:	4907      	ldr	r1, [pc, #28]	@ (8005194 <txfsk+0xd8>)
 8005178:	2000      	movs	r0, #0
 800517a:	f7ff fdf0 	bl	8004d5e <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 800517e:	2001      	movs	r0, #1
 8005180:	f7fc f87b 	bl	800127a <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005184:	2003      	movs	r0, #3
 8005186:	f7ff fe3f 	bl	8004e08 <opmode>
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200001a8 	.word	0x200001a8
 8005194:	200002f0 	.word	0x200002f0

08005198 <txlora>:

static void txlora () {
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 800519c:	f7ff fe4e 	bl	8004e3c <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80051a0:	2001      	movs	r0, #1
 80051a2:	f7ff fdc0 	bl	8004d26 <readReg>
 80051a6:	4603      	mov	r3, r0
 80051a8:	b25b      	sxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db01      	blt.n	80051b2 <txlora+0x1a>
 80051ae:	f7fc f9f7 	bl	80015a0 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80051b2:	2001      	movs	r0, #1
 80051b4:	f7ff fe28 	bl	8004e08 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 80051b8:	f7ff fe64 	bl	8004e84 <configLoraModem>
    // configure frequency
    configChannel();
 80051bc:	f7ff ff10 	bl	8004fe0 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 80051c0:	200a      	movs	r0, #10
 80051c2:	f7ff fdb0 	bl	8004d26 <readReg>
 80051c6:	4603      	mov	r3, r0
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	f023 030f 	bic.w	r3, r3, #15
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	f043 0308 	orr.w	r3, r3, #8
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	4619      	mov	r1, r3
 80051da:	200a      	movs	r0, #10
 80051dc:	f7ff fd86 	bl	8004cec <writeReg>
    configPower();
 80051e0:	f7ff ff3c 	bl	800505c <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 80051e4:	2134      	movs	r1, #52	@ 0x34
 80051e6:	2039      	movs	r0, #57	@ 0x39
 80051e8:	f7ff fd80 	bl	8004cec <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 80051ec:	21f0      	movs	r1, #240	@ 0xf0
 80051ee:	2040      	movs	r0, #64	@ 0x40
 80051f0:	f7ff fd7c 	bl	8004cec <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 80051f4:	21ff      	movs	r1, #255	@ 0xff
 80051f6:	2012      	movs	r0, #18
 80051f8:	f7ff fd78 	bl	8004cec <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 80051fc:	21f7      	movs	r1, #247	@ 0xf7
 80051fe:	2011      	movs	r0, #17
 8005200:	f7ff fd74 	bl	8004cec <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005204:	2100      	movs	r1, #0
 8005206:	200e      	movs	r0, #14
 8005208:	f7ff fd70 	bl	8004cec <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 800520c:	2100      	movs	r1, #0
 800520e:	200d      	movs	r0, #13
 8005210:	f7ff fd6c 	bl	8004cec <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <txlora+0xac>)
 8005216:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800521a:	4619      	mov	r1, r3
 800521c:	2022      	movs	r0, #34	@ 0x22
 800521e:	f7ff fd65 	bl	8004cec <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005222:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <txlora+0xac>)
 8005224:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005228:	461a      	mov	r2, r3
 800522a:	4907      	ldr	r1, [pc, #28]	@ (8005248 <txlora+0xb0>)
 800522c:	2000      	movs	r0, #0
 800522e:	f7ff fd96 	bl	8004d5e <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005232:	2001      	movs	r0, #1
 8005234:	f7fc f821 	bl	800127a <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005238:	2003      	movs	r0, #3
 800523a:	f7ff fde5 	bl	8004e08 <opmode>
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200001a8 	.word	0x200001a8
 8005248:	200002f0 	.word	0x200002f0

0800524c <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005250:	2001      	movs	r0, #1
 8005252:	f7ff fd68 	bl	8004d26 <readReg>
 8005256:	4603      	mov	r3, r0
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <starttx+0x18>
 8005260:	f7fc f99e 	bl	80015a0 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005264:	4b07      	ldr	r3, [pc, #28]	@ (8005284 <starttx+0x38>)
 8005266:	89db      	ldrh	r3, [r3, #14]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fc fa39 	bl	80016e0 <getSf>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <starttx+0x2e>
        txfsk();
 8005274:	f7ff ff22 	bl	80050bc <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005278:	e001      	b.n	800527e <starttx+0x32>
        txlora();
 800527a:	f7ff ff8d 	bl	8005198 <txlora>
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200001a8 	.word	0x200001a8

08005288 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8005292:	f7ff fdd3 	bl	8004e3c <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005296:	2001      	movs	r0, #1
 8005298:	f7ff fd45 	bl	8004d26 <readReg>
 800529c:	4603      	mov	r3, r0
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	db01      	blt.n	80052a8 <rxlora+0x20>
 80052a4:	f7fc f97c 	bl	80015a0 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80052a8:	2001      	movs	r0, #1
 80052aa:	f7ff fdad 	bl	8004e08 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d108      	bne.n	80052c6 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80052b4:	210a      	movs	r1, #10
 80052b6:	201d      	movs	r0, #29
 80052b8:	f7ff fd18 	bl	8004cec <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80052bc:	2170      	movs	r1, #112	@ 0x70
 80052be:	201e      	movs	r0, #30
 80052c0:	f7ff fd14 	bl	8004cec <writeReg>
 80052c4:	e003      	b.n	80052ce <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 80052c6:	f7ff fddd 	bl	8004e84 <configLoraModem>
        // configure frequency
        configChannel();
 80052ca:	f7ff fe89 	bl	8004fe0 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 80052ce:	2121      	movs	r1, #33	@ 0x21
 80052d0:	200c      	movs	r0, #12
 80052d2:	f7ff fd0b 	bl	8004cec <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 80052d6:	2140      	movs	r1, #64	@ 0x40
 80052d8:	2023      	movs	r0, #35	@ 0x23
 80052da:	f7ff fd07 	bl	8004cec <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 80052de:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <rxlora+0xf0>)
 80052e0:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 80052e8:	2033      	movs	r0, #51	@ 0x33
 80052ea:	f7ff fd1c 	bl	8004d26 <readReg>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	2033      	movs	r0, #51	@ 0x33
 80052fa:	f7ff fcf7 	bl	8004cec <writeReg>
 80052fe:	e00a      	b.n	8005316 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005300:	2033      	movs	r0, #51	@ 0x33
 8005302:	f7ff fd10 	bl	8004d26 <readReg>
 8005306:	4603      	mov	r3, r0
 8005308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	2033      	movs	r0, #51	@ 0x33
 8005312:	f7ff fceb 	bl	8004cec <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005316:	4b18      	ldr	r3, [pc, #96]	@ (8005378 <rxlora+0xf0>)
 8005318:	7c1b      	ldrb	r3, [r3, #16]
 800531a:	4619      	mov	r1, r3
 800531c:	201f      	movs	r0, #31
 800531e:	f7ff fce5 	bl	8004cec <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005322:	2134      	movs	r1, #52	@ 0x34
 8005324:	2039      	movs	r0, #57	@ 0x39
 8005326:	f7ff fce1 	bl	8004cec <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 800532a:	21c0      	movs	r1, #192	@ 0xc0
 800532c:	2040      	movs	r0, #64	@ 0x40
 800532e:	f7ff fcdd 	bl	8004cec <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005332:	21ff      	movs	r1, #255	@ 0xff
 8005334:	2012      	movs	r0, #18
 8005336:	f7ff fcd9 	bl	8004cec <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	4a0f      	ldr	r2, [pc, #60]	@ (800537c <rxlora+0xf4>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	43db      	mvns	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	4619      	mov	r1, r3
 8005346:	2011      	movs	r0, #17
 8005348:	f7ff fcd0 	bl	8004cec <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800534c:	2000      	movs	r0, #0
 800534e:	f7fb ff94 	bl	800127a <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005358:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <rxlora+0xf0>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fc f86c 	bl	800143a <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005362:	2006      	movs	r0, #6
 8005364:	f7ff fd50 	bl	8004e08 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005368:	e002      	b.n	8005370 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 800536a:	2005      	movs	r0, #5
 800536c:	f7ff fd4c 	bl	8004e08 <opmode>
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200001a8 	.word	0x200001a8
 800537c:	0800b0b8 	.word	0x0800b0b8

08005380 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <rxfsk+0x14>
 8005390:	f7fc f906 	bl	80015a0 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005394:	f7ff fd64 	bl	8004e60 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005398:	2001      	movs	r0, #1
 800539a:	f7ff fcc4 	bl	8004d26 <readReg>
 800539e:	4603      	mov	r3, r0
 80053a0:	b25b      	sxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da01      	bge.n	80053aa <rxfsk+0x2a>
 80053a6:	f7fc f8fb 	bl	80015a0 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80053aa:	2001      	movs	r0, #1
 80053ac:	f7ff fd2c 	bl	8004e08 <opmode>
    // configure frequency
    configChannel();
 80053b0:	f7ff fe16 	bl	8004fe0 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 80053b4:	2121      	movs	r1, #33	@ 0x21
 80053b6:	200c      	movs	r0, #12
 80053b8:	f7ff fc98 	bl	8004cec <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 80053bc:	211e      	movs	r1, #30
 80053be:	200d      	movs	r0, #13
 80053c0:	f7ff fc94 	bl	8004cec <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 80053c4:	210b      	movs	r1, #11
 80053c6:	2012      	movs	r0, #18
 80053c8:	f7ff fc90 	bl	8004cec <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 80053cc:	2112      	movs	r1, #18
 80053ce:	2013      	movs	r0, #19
 80053d0:	f7ff fc8c 	bl	8004cec <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 80053d4:	21aa      	movs	r1, #170	@ 0xaa
 80053d6:	201f      	movs	r0, #31
 80053d8:	f7ff fc88 	bl	8004cec <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 80053dc:	2112      	movs	r1, #18
 80053de:	2027      	movs	r0, #39	@ 0x27
 80053e0:	f7ff fc84 	bl	8004cec <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 80053e4:	21d8      	movs	r1, #216	@ 0xd8
 80053e6:	2030      	movs	r0, #48	@ 0x30
 80053e8:	f7ff fc80 	bl	8004cec <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 80053ec:	2140      	movs	r1, #64	@ 0x40
 80053ee:	2031      	movs	r0, #49	@ 0x31
 80053f0:	f7ff fc7c 	bl	8004cec <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 80053f4:	21c1      	movs	r1, #193	@ 0xc1
 80053f6:	2028      	movs	r0, #40	@ 0x28
 80053f8:	f7ff fc78 	bl	8004cec <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 80053fc:	2194      	movs	r1, #148	@ 0x94
 80053fe:	2029      	movs	r0, #41	@ 0x29
 8005400:	f7ff fc74 	bl	8004cec <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005404:	21c1      	movs	r1, #193	@ 0xc1
 8005406:	202a      	movs	r0, #42	@ 0x2a
 8005408:	f7ff fc70 	bl	8004cec <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 800540c:	21ff      	movs	r1, #255	@ 0xff
 800540e:	2021      	movs	r0, #33	@ 0x21
 8005410:	f7ff fc6c 	bl	8004cec <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005414:	2102      	movs	r1, #2
 8005416:	2002      	movs	r0, #2
 8005418:	f7ff fc68 	bl	8004cec <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800541c:	2180      	movs	r1, #128	@ 0x80
 800541e:	2003      	movs	r0, #3
 8005420:	f7ff fc64 	bl	8004cec <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005424:	2101      	movs	r1, #1
 8005426:	2004      	movs	r0, #4
 8005428:	f7ff fc60 	bl	8004cec <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800542c:	2199      	movs	r1, #153	@ 0x99
 800542e:	2005      	movs	r0, #5
 8005430:	f7ff fc5c 	bl	8004cec <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005434:	2138      	movs	r1, #56	@ 0x38
 8005436:	2040      	movs	r0, #64	@ 0x40
 8005438:	f7ff fc58 	bl	8004cec <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800543c:	2000      	movs	r0, #0
 800543e:	f7fb ff1c 	bl	800127a <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <rxfsk+0xdc>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fb fff7 	bl	800143a <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 800544c:	2005      	movs	r0, #5
 800544e:	f7ff fcdb 	bl	8004e08 <opmode>
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200001a8 	.word	0x200001a8

08005460 <startrx>:

static void startrx (u1_t rxmode) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 800546a:	2001      	movs	r0, #1
 800546c:	f7ff fc5b 	bl	8004d26 <readReg>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <startrx+0x1e>
 800547a:	f7fc f891 	bl	80015a0 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 800547e:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <startrx+0x48>)
 8005480:	89db      	ldrh	r3, [r3, #14]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc f92c 	bl	80016e0 <getSf>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <startrx+0x38>
        rxfsk(rxmode);
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff75 	bl	8005380 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 8005496:	e003      	b.n	80054a0 <startrx+0x40>
        rxlora(rxmode);
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fef4 	bl	8005288 <rxlora>
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	200001a8 	.word	0x200001a8

080054ac <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80054b2:	f7fc f833 	bl	800151c <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80054b6:	2000      	movs	r0, #0
 80054b8:	f7fb fefb 	bl	80012b2 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80054bc:	f7ff fb40 	bl	8004b40 <os_getTime>
 80054c0:	4603      	mov	r3, r0
 80054c2:	3320      	adds	r3, #32
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fb ffb8 	bl	800143a <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80054ca:	2002      	movs	r0, #2
 80054cc:	f7fb fef1 	bl	80012b2 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80054d0:	f7ff fb36 	bl	8004b40 <os_getTime>
 80054d4:	4603      	mov	r3, r0
 80054d6:	33a0      	adds	r3, #160	@ 0xa0
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fb ffae 	bl	800143a <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80054de:	2000      	movs	r0, #0
 80054e0:	f7ff fc92 	bl	8004e08 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80054e4:	2042      	movs	r0, #66	@ 0x42
 80054e6:	f7ff fc1e 	bl	8004d26 <readReg>
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b12      	cmp	r3, #18
 80054f2:	d001      	beq.n	80054f8 <radio_init+0x4c>
 80054f4:	f7fc f854 	bl	80015a0 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 80054f8:	2002      	movs	r0, #2
 80054fa:	f7ff fec5 	bl	8005288 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 80054fe:	bf00      	nop
 8005500:	2001      	movs	r0, #1
 8005502:	f7ff fc10 	bl	8004d26 <readReg>
 8005506:	4603      	mov	r3, r0
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	2b05      	cmp	r3, #5
 800550e:	d1f7      	bne.n	8005500 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005510:	2301      	movs	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e02c      	b.n	8005570 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	e023      	b.n	8005564 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 800551c:	bf00      	nop
 800551e:	202c      	movs	r0, #44	@ 0x2c
 8005520:	f7ff fc01 	bl	8004d26 <readReg>
 8005524:	4603      	mov	r3, r0
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	71bb      	strb	r3, [r7, #6]
 800552c:	79bc      	ldrb	r4, [r7, #6]
 800552e:	202c      	movs	r0, #44	@ 0x2c
 8005530:	f7ff fbf9 	bl	8004d26 <readReg>
 8005534:	4603      	mov	r3, r0
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	429c      	cmp	r4, r3
 800553c:	d0ef      	beq.n	800551e <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 800553e:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <radio_init+0xe4>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	b25a      	sxtb	r2, r3
 800554a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800554e:	4313      	orrs	r3, r2
 8005550:	b25b      	sxtb	r3, r3
 8005552:	b2d9      	uxtb	r1, r3
 8005554:	4a0e      	ldr	r2, [pc, #56]	@ (8005590 <radio_init+0xe4>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	460a      	mov	r2, r1
 800555c:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3301      	adds	r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b07      	cmp	r3, #7
 8005568:	ddd8      	ble.n	800551c <radio_init+0x70>
    for(int i=1; i<16; i++) {
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b0f      	cmp	r3, #15
 8005574:	ddcf      	ble.n	8005516 <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 8005576:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <radio_init+0xe4>)
 8005578:	2210      	movs	r2, #16
 800557a:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 800557c:	2000      	movs	r0, #0
 800557e:	f7ff fc43 	bl	8004e08 <opmode>

    hal_enableIRQs();
 8005582:	f7fb ffdb 	bl	800153c <hal_enableIRQs>
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	bf00      	nop
 8005590:	2000036c 	.word	0x2000036c

08005594 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <radio_rand1+0x48>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <radio_rand1+0x16>
 80055a6:	f7fb fffb 	bl	80015a0 <hal_failed>
    if( i==16 ) {
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d106      	bne.n	80055be <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80055b0:	2210      	movs	r2, #16
 80055b2:	490a      	ldr	r1, [pc, #40]	@ (80055dc <radio_rand1+0x48>)
 80055b4:	2000      	movs	r0, #0
 80055b6:	f7fb f91f 	bl	80007f8 <os_aes>
        i = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	71fa      	strb	r2, [r7, #7]
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b05      	ldr	r3, [pc, #20]	@ (80055dc <radio_rand1+0x48>)
 80055c8:	5c9b      	ldrb	r3, [r3, r2]
 80055ca:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80055cc:	4a03      	ldr	r2, [pc, #12]	@ (80055dc <radio_rand1+0x48>)
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	7013      	strb	r3, [r2, #0]
    return v;
 80055d2:	79bb      	ldrb	r3, [r7, #6]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	2000036c 	.word	0x2000036c

080055e0 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 80055ea:	f7ff faa9 	bl	8004b40 <os_getTime>
 80055ee:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7ff fb98 	bl	8004d26 <readReg>
 80055f6:	4603      	mov	r3, r0
 80055f8:	b25b      	sxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da74      	bge.n	80056e8 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 80055fe:	2012      	movs	r0, #18
 8005600:	f7ff fb91 	bl	8004d26 <readReg>
 8005604:	4603      	mov	r3, r0
 8005606:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8005608:	7a7b      	ldrb	r3, [r7, #9]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3b01      	subs	r3, #1
 8005616:	4a59      	ldr	r2, [pc, #356]	@ (800577c <radio_irq_handler+0x19c>)
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e05c      	b.n	80056d6 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 800561c:	7a7b      	ldrb	r3, [r7, #9]
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d04f      	beq.n	80056c6 <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8005626:	4b55      	ldr	r3, [pc, #340]	@ (800577c <radio_irq_handler+0x19c>)
 8005628:	89db      	ldrh	r3, [r3, #14]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fc f868 	bl	8001700 <getBw>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8005636:	4b51      	ldr	r3, [pc, #324]	@ (800577c <radio_irq_handler+0x19c>)
 8005638:	89db      	ldrh	r3, [r3, #14]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fc f850 	bl	80016e0 <getSf>
 8005640:	4603      	mov	r3, r0
 8005642:	461a      	mov	r2, r3
 8005644:	4b4e      	ldr	r3, [pc, #312]	@ (8005780 <radio_irq_handler+0x1a0>)
 8005646:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800564a:	461a      	mov	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8005652:	4a4a      	ldr	r2, [pc, #296]	@ (800577c <radio_irq_handler+0x19c>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005658:	201d      	movs	r0, #29
 800565a:	f7ff fb64 	bl	8004d26 <readReg>
 800565e:	4603      	mov	r3, r0
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8005668:	2022      	movs	r0, #34	@ 0x22
 800566a:	f7ff fb5c 	bl	8004d26 <readReg>
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	e004      	b.n	800567e <radio_irq_handler+0x9e>
 8005674:	2013      	movs	r0, #19
 8005676:	f7ff fb56 	bl	8004d26 <readReg>
 800567a:	4603      	mov	r3, r0
 800567c:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 800567e:	4b3f      	ldr	r3, [pc, #252]	@ (800577c <radio_irq_handler+0x19c>)
 8005680:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8005684:	2010      	movs	r0, #16
 8005686:	f7ff fb4e 	bl	8004d26 <readReg>
 800568a:	4603      	mov	r3, r0
 800568c:	4619      	mov	r1, r3
 800568e:	200d      	movs	r0, #13
 8005690:	f7ff fb2c 	bl	8004cec <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005694:	4b39      	ldr	r3, [pc, #228]	@ (800577c <radio_irq_handler+0x19c>)
 8005696:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800569a:	461a      	mov	r2, r3
 800569c:	4939      	ldr	r1, [pc, #228]	@ (8005784 <radio_irq_handler+0x1a4>)
 800569e:	2000      	movs	r0, #0
 80056a0:	f7ff fb87 	bl	8004db2 <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80056a4:	2019      	movs	r0, #25
 80056a6:	f7ff fb3e 	bl	8004d26 <readReg>
 80056aa:	4603      	mov	r3, r0
 80056ac:	b25a      	sxtb	r2, r3
 80056ae:	4b33      	ldr	r3, [pc, #204]	@ (800577c <radio_irq_handler+0x19c>)
 80056b0:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80056b2:	201a      	movs	r0, #26
 80056b4:	f7ff fb37 	bl	8004d26 <readReg>
 80056b8:	4603      	mov	r3, r0
 80056ba:	3b3d      	subs	r3, #61	@ 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	b25a      	sxtb	r2, r3
 80056c0:	4b2e      	ldr	r3, [pc, #184]	@ (800577c <radio_irq_handler+0x19c>)
 80056c2:	731a      	strb	r2, [r3, #12]
 80056c4:	e007      	b.n	80056d6 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80056c6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da03      	bge.n	80056d6 <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80056ce:	4b2b      	ldr	r3, [pc, #172]	@ (800577c <radio_irq_handler+0x19c>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 80056d6:	21ff      	movs	r1, #255	@ 0xff
 80056d8:	2011      	movs	r0, #17
 80056da:	f7ff fb07 	bl	8004cec <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80056de:	21ff      	movs	r1, #255	@ 0xff
 80056e0:	2012      	movs	r0, #18
 80056e2:	f7ff fb03 	bl	8004cec <writeReg>
 80056e6:	e03c      	b.n	8005762 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 80056e8:	203e      	movs	r0, #62	@ 0x3e
 80056ea:	f7ff fb1c 	bl	8004d26 <readReg>
 80056ee:	4603      	mov	r3, r0
 80056f0:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 80056f2:	203f      	movs	r0, #63	@ 0x3f
 80056f4:	f7ff fb17 	bl	8004d26 <readReg>
 80056f8:	4603      	mov	r3, r0
 80056fa:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 80056fc:	7abb      	ldrb	r3, [r7, #10]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005706:	4a1d      	ldr	r2, [pc, #116]	@ (800577c <radio_irq_handler+0x19c>)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	e029      	b.n	8005762 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 800570e:	7abb      	ldrb	r3, [r7, #10]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d019      	beq.n	800574c <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8005718:	4a18      	ldr	r2, [pc, #96]	@ (800577c <radio_irq_handler+0x19c>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 800571e:	2032      	movs	r0, #50	@ 0x32
 8005720:	f7ff fb01 	bl	8004d26 <readReg>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	4b14      	ldr	r3, [pc, #80]	@ (800577c <radio_irq_handler+0x19c>)
 800572a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800572e:	4b13      	ldr	r3, [pc, #76]	@ (800577c <radio_irq_handler+0x19c>)
 8005730:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005734:	461a      	mov	r2, r3
 8005736:	4913      	ldr	r1, [pc, #76]	@ (8005784 <radio_irq_handler+0x1a4>)
 8005738:	2000      	movs	r0, #0
 800573a:	f7ff fb3a 	bl	8004db2 <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 800573e:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <radio_irq_handler+0x19c>)
 8005740:	2200      	movs	r2, #0
 8005742:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005744:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <radio_irq_handler+0x19c>)
 8005746:	2200      	movs	r2, #0
 8005748:	731a      	strb	r2, [r3, #12]
 800574a:	e00a      	b.n	8005762 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 800574c:	7afb      	ldrb	r3, [r7, #11]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 8005756:	4b09      	ldr	r3, [pc, #36]	@ (800577c <radio_irq_handler+0x19c>)
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 800575e:	e000      	b.n	8005762 <radio_irq_handler+0x182>
        } else {
            while(1);
 8005760:	e7fe      	b.n	8005760 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005762:	2000      	movs	r0, #0
 8005764:	f7ff fb50 	bl	8004e08 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <radio_irq_handler+0x19c>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	4619      	mov	r1, r3
 800576e:	4806      	ldr	r0, [pc, #24]	@ (8005788 <radio_irq_handler+0x1a8>)
 8005770:	f7ff fa2a 	bl	8004bc8 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200001a8 	.word	0x200001a8
 8005780:	0800b0bc 	.word	0x0800b0bc
 8005784:	200002f0 	.word	0x200002f0
 8005788:	200001bc 	.word	0x200001bc

0800578c <os_radio>:

void os_radio (u1_t mode) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 8005796:	f7fb fec1 	bl	800151c <hal_disableIRQs>
    switch (mode) {
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d81a      	bhi.n	80057d6 <os_radio+0x4a>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <os_radio+0x1c>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057c1 	.word	0x080057c1
 80057b0:	080057c7 	.word	0x080057c7
 80057b4:	080057cf 	.word	0x080057cf
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7ff fb25 	bl	8004e08 <opmode>
        break;
 80057be:	e00a      	b.n	80057d6 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 80057c0:	f7ff fd44 	bl	800524c <starttx>
        break;
 80057c4:	e007      	b.n	80057d6 <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 80057c6:	2000      	movs	r0, #0
 80057c8:	f7ff fe4a 	bl	8005460 <startrx>
        break;
 80057cc:	e003      	b.n	80057d6 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 80057ce:	2001      	movs	r0, #1
 80057d0:	f7ff fe46 	bl	8005460 <startrx>
        break;
 80057d4:	bf00      	nop
    }
    hal_enableIRQs();
 80057d6:	f7fb feb1 	bl	800153c <hal_enableIRQs>
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop

080057e4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <MX_SPI3_Init+0x74>)
 80057ea:	4a1c      	ldr	r2, [pc, #112]	@ (800585c <MX_SPI3_Init+0x78>)
 80057ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80057ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005858 <MX_SPI3_Init+0x74>)
 80057f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80057f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80057f6:	4b18      	ldr	r3, [pc, #96]	@ (8005858 <MX_SPI3_Init+0x74>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80057fc:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <MX_SPI3_Init+0x74>)
 80057fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005802:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800580a:	4b13      	ldr	r3, [pc, #76]	@ (8005858 <MX_SPI3_Init+0x74>)
 800580c:	2200      	movs	r2, #0
 800580e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005810:	4b11      	ldr	r3, [pc, #68]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005816:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005818:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <MX_SPI3_Init+0x74>)
 800581a:	2228      	movs	r2, #40	@ 0x28
 800581c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800581e:	4b0e      	ldr	r3, [pc, #56]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005820:	2200      	movs	r2, #0
 8005822:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005824:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005826:	2200      	movs	r2, #0
 8005828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582a:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <MX_SPI3_Init+0x74>)
 800582c:	2200      	movs	r2, #0
 800582e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005830:	4b09      	ldr	r3, [pc, #36]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005832:	2207      	movs	r2, #7
 8005834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005836:	4b08      	ldr	r3, [pc, #32]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <MX_SPI3_Init+0x74>)
 800583e:	2208      	movs	r2, #8
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005842:	4805      	ldr	r0, [pc, #20]	@ (8005858 <MX_SPI3_Init+0x74>)
 8005844:	f003 fafc 	bl	8008e40 <HAL_SPI_Init>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800584e:	f7ff f95f 	bl	8004b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	2000037c 	.word	0x2000037c
 800585c:	40003c00 	.word	0x40003c00

08005860 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	@ 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1b      	ldr	r2, [pc, #108]	@ (80058ec <HAL_SPI_MspInit+0x8c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d12f      	bne.n	80058e2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005882:	4b1b      	ldr	r3, [pc, #108]	@ (80058f0 <HAL_SPI_MspInit+0x90>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	4a1a      	ldr	r2, [pc, #104]	@ (80058f0 <HAL_SPI_MspInit+0x90>)
 8005888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588c:	6593      	str	r3, [r2, #88]	@ 0x58
 800588e:	4b18      	ldr	r3, [pc, #96]	@ (80058f0 <HAL_SPI_MspInit+0x90>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800589a:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <HAL_SPI_MspInit+0x90>)
 800589c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589e:	4a14      	ldr	r2, [pc, #80]	@ (80058f0 <HAL_SPI_MspInit+0x90>)
 80058a0:	f043 0302 	orr.w	r3, r3, #2
 80058a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058a6:	4b12      	ldr	r3, [pc, #72]	@ (80058f0 <HAL_SPI_MspInit+0x90>)
 80058a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80058b2:	2338      	movs	r3, #56	@ 0x38
 80058b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b6:	2302      	movs	r3, #2
 80058b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058be:	2303      	movs	r3, #3
 80058c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058c2:	2306      	movs	r3, #6
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	4619      	mov	r1, r3
 80058cc:	4809      	ldr	r0, [pc, #36]	@ (80058f4 <HAL_SPI_MspInit+0x94>)
 80058ce:	f001 fe9f 	bl	8007610 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80058d2:	2200      	movs	r2, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	2033      	movs	r0, #51	@ 0x33
 80058d8:	f001 fe23 	bl	8007522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80058dc:	2033      	movs	r0, #51	@ 0x33
 80058de:	f001 fe3c 	bl	800755a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80058e2:	bf00      	nop
 80058e4:	3728      	adds	r7, #40	@ 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40003c00 	.word	0x40003c00
 80058f0:	40021000 	.word	0x40021000
 80058f4:	48000400 	.word	0x48000400

080058f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <HAL_MspInit+0x44>)
 8005900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005902:	4a0e      	ldr	r2, [pc, #56]	@ (800593c <HAL_MspInit+0x44>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	6613      	str	r3, [r2, #96]	@ 0x60
 800590a:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <HAL_MspInit+0x44>)
 800590c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	607b      	str	r3, [r7, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_MspInit+0x44>)
 8005918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591a:	4a08      	ldr	r2, [pc, #32]	@ (800593c <HAL_MspInit+0x44>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005920:	6593      	str	r3, [r2, #88]	@ 0x58
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_MspInit+0x44>)
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000

08005940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <NMI_Handler+0x4>

08005948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <HardFault_Handler+0x4>

08005950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <MemManage_Handler+0x4>

08005958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <BusFault_Handler+0x4>

08005960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <UsageFault_Handler+0x4>

08005968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005976:	b480      	push	{r7}
 8005978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005996:	f000 f977 	bl	8005c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800599a:	bf00      	nop
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80059a4:	4802      	ldr	r0, [pc, #8]	@ (80059b0 <ADC1_IRQHandler+0x10>)
 80059a6:	f000 fd92 	bl	80064ce <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000028 	.word	0x20000028

080059b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80059b8:	2040      	movs	r0, #64	@ 0x40
 80059ba:	f001 ffab 	bl	8007914 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80059be:	2080      	movs	r0, #128	@ 0x80
 80059c0:	f001 ffa8 	bl	8007914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80059cc:	4802      	ldr	r0, [pc, #8]	@ (80059d8 <SPI3_IRQHandler+0x10>)
 80059ce:	f003 fcf9 	bl	80093c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	2000037c 	.word	0x2000037c

080059dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80059e0:	4802      	ldr	r0, [pc, #8]	@ (80059ec <TIM6_DAC_IRQHandler+0x10>)
 80059e2:	f004 f813 	bl	8009a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200003e0 	.word	0x200003e0

080059f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80059f4:	4802      	ldr	r0, [pc, #8]	@ (8005a00 <TIM7_IRQHandler+0x10>)
 80059f6:	f004 f809 	bl	8009a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	2000042c 	.word	0x2000042c

08005a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <SystemInit+0x20>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	4a05      	ldr	r2, [pc, #20]	@ (8005a24 <SystemInit+0x20>)
 8005a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005a38:	4b15      	ldr	r3, [pc, #84]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a3a:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <MX_TIM6_Init+0x6c>)
 8005a3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 8005a3e:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a40:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8005a44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a46:	4b12      	ldr	r3, [pc, #72]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8005a4c:	4b10      	ldr	r3, [pc, #64]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a54:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005a5a:	480d      	ldr	r0, [pc, #52]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a5c:	f003 ff2a 	bl	80098b4 <HAL_TIM_Base_Init>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005a66:	f7ff f853 	bl	8004b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4806      	ldr	r0, [pc, #24]	@ (8005a90 <MX_TIM6_Init+0x68>)
 8005a78:	f004 f968 	bl	8009d4c <HAL_TIMEx_MasterConfigSynchronization>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8005a82:	f7ff f845 	bl	8004b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200003e0 	.word	0x200003e0
 8005a94:	40001000 	.word	0x40001000

08005a98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a9e:	1d3b      	adds	r3, r7, #4
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005aa8:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005aaa:	4a16      	ldr	r2, [pc, #88]	@ (8005b04 <MX_TIM7_Init+0x6c>)
 8005aac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 8005aae:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005ab0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8005ab4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab6:	4b12      	ldr	r3, [pc, #72]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005abc:	4b10      	ldr	r3, [pc, #64]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ac2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005aca:	480d      	ldr	r0, [pc, #52]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005acc:	f003 fef2 	bl	80098b4 <HAL_TIM_Base_Init>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005ad6:	f7ff f81b 	bl	8004b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4806      	ldr	r0, [pc, #24]	@ (8005b00 <MX_TIM7_Init+0x68>)
 8005ae8:	f004 f930 	bl	8009d4c <HAL_TIMEx_MasterConfigSynchronization>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005af2:	f7ff f80d 	bl	8004b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000042c 	.word	0x2000042c
 8005b04:	40001400 	.word	0x40001400

08005b08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1a      	ldr	r2, [pc, #104]	@ (8005b80 <HAL_TIM_Base_MspInit+0x78>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d114      	bne.n	8005b44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005b84 <HAL_TIM_Base_MspInit+0x7c>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1e:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <HAL_TIM_Base_MspInit+0x7c>)
 8005b20:	f043 0310 	orr.w	r3, r3, #16
 8005b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b26:	4b17      	ldr	r3, [pc, #92]	@ (8005b84 <HAL_TIM_Base_MspInit+0x7c>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2100      	movs	r1, #0
 8005b36:	2036      	movs	r0, #54	@ 0x36
 8005b38:	f001 fcf3 	bl	8007522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b3c:	2036      	movs	r0, #54	@ 0x36
 8005b3e:	f001 fd0c 	bl	800755a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005b42:	e018      	b.n	8005b76 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0f      	ldr	r2, [pc, #60]	@ (8005b88 <HAL_TIM_Base_MspInit+0x80>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <HAL_TIM_Base_MspInit+0x7c>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	4a0c      	ldr	r2, [pc, #48]	@ (8005b84 <HAL_TIM_Base_MspInit+0x7c>)
 8005b54:	f043 0320 	orr.w	r3, r3, #32
 8005b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <HAL_TIM_Base_MspInit+0x7c>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005b66:	2200      	movs	r2, #0
 8005b68:	2100      	movs	r1, #0
 8005b6a:	2037      	movs	r0, #55	@ 0x37
 8005b6c:	f001 fcd9 	bl	8007522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005b70:	2037      	movs	r0, #55	@ 0x37
 8005b72:	f001 fcf2 	bl	800755a <HAL_NVIC_EnableIRQ>
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40001000 	.word	0x40001000
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40001400 	.word	0x40001400

08005b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005b90:	f7ff ff38 	bl	8005a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b94:	480c      	ldr	r0, [pc, #48]	@ (8005bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b96:	490d      	ldr	r1, [pc, #52]	@ (8005bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b98:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd0 <LoopForever+0xe>)
  movs r3, #0
 8005b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b9c:	e002      	b.n	8005ba4 <LoopCopyDataInit>

08005b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ba2:	3304      	adds	r3, #4

08005ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ba8:	d3f9      	bcc.n	8005b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005baa:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005bac:	4c0a      	ldr	r4, [pc, #40]	@ (8005bd8 <LoopForever+0x16>)
  movs r3, #0
 8005bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bb0:	e001      	b.n	8005bb6 <LoopFillZerobss>

08005bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bb4:	3204      	adds	r2, #4

08005bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bb8:	d3fb      	bcc.n	8005bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bba:	f004 f953 	bl	8009e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bbe:	f7fe ff09 	bl	80049d4 <main>

08005bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8005bc2:	e7fe      	b.n	8005bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005bc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005bd0:	0800b11c 	.word	0x0800b11c
  ldr r2, =_sbss
 8005bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005bd8:	2000047c 	.word	0x2000047c

08005bdc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bdc:	e7fe      	b.n	8005bdc <CAN1_RX0_IRQHandler>

08005bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005be8:	2003      	movs	r0, #3
 8005bea:	f001 fc8f 	bl	800750c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bee:	200f      	movs	r0, #15
 8005bf0:	f000 f80e 	bl	8005c10 <HAL_InitTick>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	71fb      	strb	r3, [r7, #7]
 8005bfe:	e001      	b.n	8005c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c00:	f7ff fe7a 	bl	80058f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c04:	79fb      	ldrb	r3, [r7, #7]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005c1c:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <HAL_InitTick+0x6c>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d023      	beq.n	8005c6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005c24:	4b16      	ldr	r3, [pc, #88]	@ (8005c80 <HAL_InitTick+0x70>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <HAL_InitTick+0x6c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 fc9b 	bl	8007576 <HAL_SYSTICK_Config>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b0f      	cmp	r3, #15
 8005c4a:	d809      	bhi.n	8005c60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	f001 fc65 	bl	8007522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c58:	4a0a      	ldr	r2, [pc, #40]	@ (8005c84 <HAL_InitTick+0x74>)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e007      	b.n	8005c70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
 8005c64:	e004      	b.n	8005c70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e001      	b.n	8005c70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000008 	.word	0x20000008
 8005c80:	20000000 	.word	0x20000000
 8005c84:	20000004 	.word	0x20000004

08005c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <HAL_IncTick+0x20>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <HAL_IncTick+0x24>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	4a04      	ldr	r2, [pc, #16]	@ (8005cac <HAL_IncTick+0x24>)
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000008 	.word	0x20000008
 8005cac:	20000478 	.word	0x20000478

08005cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8005cb4:	4b03      	ldr	r3, [pc, #12]	@ (8005cc4 <HAL_GetTick+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000478 	.word	0x20000478

08005cc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3360      	adds	r3, #96	@ 0x60
 8005d42:	461a      	mov	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <LL_ADC_SetOffset+0x44>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	03fff000 	.word	0x03fff000

08005d78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3360      	adds	r3, #96	@ 0x60
 8005d86:	461a      	mov	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3360      	adds	r3, #96	@ 0x60
 8005db4:	461a      	mov	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3330      	adds	r3, #48	@ 0x30
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f003 030c 	and.w	r3, r3, #12
 8005e1c:	4413      	add	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	211f      	movs	r1, #31
 8005e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0e9b      	lsrs	r3, r3, #26
 8005e38:	f003 011f 	and.w	r1, r3, #31
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	fa01 f303 	lsl.w	r3, r1, r3
 8005e46:	431a      	orrs	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e64:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	0e5b      	lsrs	r3, r3, #25
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	4413      	add	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	0d1b      	lsrs	r3, r3, #20
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	2107      	movs	r1, #7
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	0d1b      	lsrs	r3, r3, #20
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eec:	43db      	mvns	r3, r3
 8005eee:	401a      	ands	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0318 	and.w	r3, r3, #24
 8005ef6:	4908      	ldr	r1, [pc, #32]	@ (8005f18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005ef8:	40d9      	lsrs	r1, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	400b      	ands	r3, r1
 8005efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f02:	431a      	orrs	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	0007ffff 	.word	0x0007ffff

08005f1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6093      	str	r3, [r2, #8]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f54:	d101      	bne.n	8005f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa4:	d101      	bne.n	8005faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005fcc:	f043 0201 	orr.w	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ff4:	f043 0202 	orr.w	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <LL_ADC_IsEnabled+0x18>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <LL_ADC_IsEnabled+0x1a>
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d101      	bne.n	8006046 <LL_ADC_IsDisableOngoing+0x18>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <LL_ADC_IsDisableOngoing+0x1a>
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006068:	f043 0204 	orr.w	r2, r3, #4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b04      	cmp	r3, #4
 800608e:	d101      	bne.n	8006094 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d101      	bne.n	80060ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e126      	b.n	8006330 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d109      	bne.n	8006104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fa fa97 	bl	8000624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff19 	bl	8005f40 <LL_ADC_IsDeepPowerDownEnabled>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff feff 	bl	8005f1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff ff34 	bl	8005f90 <LL_ADC_IsInternalRegulatorEnabled>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d115      	bne.n	800615a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff ff18 	bl	8005f68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006138:	4b7f      	ldr	r3, [pc, #508]	@ (8006338 <HAL_ADC_Init+0x270>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	099b      	lsrs	r3, r3, #6
 800613e:	4a7f      	ldr	r2, [pc, #508]	@ (800633c <HAL_ADC_Init+0x274>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	099b      	lsrs	r3, r3, #6
 8006146:	3301      	adds	r3, #1
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800614c:	e002      	b.n	8006154 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b01      	subs	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f9      	bne.n	800614e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff ff16 	bl	8005f90 <LL_ADC_IsInternalRegulatorEnabled>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616e:	f043 0210 	orr.w	r2, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617a:	f043 0201 	orr.w	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff ff76 	bl	800607c <LL_ADC_REG_IsConversionOngoing>
 8006190:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 80bf 	bne.w	800631e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 80bb 	bne.w	800631e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80061b0:	f043 0202 	orr.w	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff ff23 	bl	8006008 <LL_ADC_IsEnabled>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061c8:	485d      	ldr	r0, [pc, #372]	@ (8006340 <HAL_ADC_Init+0x278>)
 80061ca:	f7ff ff1d 	bl	8006008 <LL_ADC_IsEnabled>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d105      	bne.n	80061e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4619      	mov	r1, r3
 80061da:	485a      	ldr	r0, [pc, #360]	@ (8006344 <HAL_ADC_Init+0x27c>)
 80061dc:	f7ff fd74 	bl	8005cc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7e5b      	ldrb	r3, [r3, #25]
 80061e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80061f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80061f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006200:	4313      	orrs	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d106      	bne.n	800621c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	3b01      	subs	r3, #1
 8006214:	045b      	lsls	r3, r3, #17
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4313      	orrs	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4313      	orrs	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	4b42      	ldr	r3, [pc, #264]	@ (8006348 <HAL_ADC_Init+0x280>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	69b9      	ldr	r1, [r7, #24]
 8006248:	430b      	orrs	r3, r1
 800624a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff ff26 	bl	80060a2 <LL_ADC_INJ_IsConversionOngoing>
 8006256:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d13d      	bne.n	80062da <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d13a      	bne.n	80062da <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006268:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006270:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006280:	f023 0302 	bic.w	r3, r3, #2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	69b9      	ldr	r1, [r7, #24]
 800628a:	430b      	orrs	r3, r1
 800628c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006294:	2b01      	cmp	r3, #1
 8006296:	d118      	bne.n	80062ca <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80062a2:	f023 0304 	bic.w	r3, r3, #4
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062ae:	4311      	orrs	r1, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80062b4:	4311      	orrs	r1, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80062ba:	430a      	orrs	r2, r1
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	611a      	str	r2, [r3, #16]
 80062c8:	e007      	b.n	80062da <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10c      	bne.n	80062fc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	f023 010f 	bic.w	r1, r3, #15
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	1e5a      	subs	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80062fa:	e007      	b.n	800630c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 020f 	bic.w	r2, r2, #15
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	f043 0201 	orr.w	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	655a      	str	r2, [r3, #84]	@ 0x54
 800631c:	e007      	b.n	800632e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	f043 0210 	orr.w	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800632e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000000 	.word	0x20000000
 800633c:	053e2d63 	.word	0x053e2d63
 8006340:	50040000 	.word	0x50040000
 8006344:	50040300 	.word	0x50040300
 8006348:	fff0c007 	.word	0xfff0c007

0800634c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fe8f 	bl	800607c <LL_ADC_REG_IsConversionOngoing>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 80a0 	bne.w	80064a6 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_ADC_Start_IT+0x28>
 8006370:	2302      	movs	r3, #2
 8006372:	e09b      	b.n	80064ac <HAL_ADC_Start_IT+0x160>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fe51 	bl	8007024 <ADC_Enable>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 8087 	bne.w	800649c <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006392:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d006      	beq.n	80063bc <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b2:	f023 0206 	bic.w	r2, r3, #6
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80063ba:	e002      	b.n	80063c2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	221c      	movs	r2, #28
 80063c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 021c 	bic.w	r2, r2, #28
 80063e0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d108      	bne.n	80063fc <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0208 	orr.w	r2, r2, #8
 80063f8:	605a      	str	r2, [r3, #4]
          break;
 80063fa:	e008      	b.n	800640e <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0204 	orr.w	r2, r2, #4
 800640a:	605a      	str	r2, [r3, #4]
          break;
 800640c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0210 	orr.w	r2, r2, #16
 8006424:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02d      	beq.n	8006490 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006438:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800643c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d110      	bne.n	800646e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0220 	bic.w	r2, r2, #32
 800645a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800646a:	605a      	str	r2, [r3, #4]
            break;
 800646c:	e010      	b.n	8006490 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800647c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0220 	orr.w	r2, r2, #32
 800648c:	605a      	str	r2, [r3, #4]
            break;
 800648e:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fddd 	bl	8006054 <LL_ADC_REG_StartConversion>
 800649a:	e006      	b.n	80064aa <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064a4:	e001      	b.n	80064aa <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b088      	sub	sp, #32
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d017      	beq.n	8006524 <HAL_ADC_IRQHandler+0x56>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d012      	beq.n	8006524 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 ff1e 	bl	8007358 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2202      	movs	r2, #2
 8006522:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_ADC_IRQHandler+0x6a>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800653e:	2b00      	cmp	r3, #0
 8006540:	d05e      	beq.n	8006600 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d059      	beq.n	8006600 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fc36 	bl	8005dda <LL_ADC_REG_IsTriggerSourceSWStart>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d03e      	beq.n	80065f2 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d135      	bne.n	80065f2 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d12e      	bne.n	80065f2 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fd6f 	bl	800607c <LL_ADC_REG_IsConversionOngoing>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11a      	bne.n	80065da <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 020c 	bic.w	r2, r2, #12
 80065b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d112      	bne.n	80065f2 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d0:	f043 0201 	orr.w	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80065d8:	e00b      	b.n	80065f2 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	f043 0210 	orr.w	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ea:	f043 0201 	orr.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fe fa78 	bl	8004ae8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	220c      	movs	r2, #12
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <HAL_ADC_IRQHandler+0x146>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d072      	beq.n	8006704 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d06d      	beq.n	8006704 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006638:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fc07 	bl	8005e58 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800664a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fbc2 	bl	8005dda <LL_ADC_REG_IsTriggerSourceSWStart>
 8006656:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d047      	beq.n	80066f6 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_ADC_IRQHandler+0x1b2>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d03f      	beq.n	80066f6 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800667c:	2b00      	cmp	r3, #0
 800667e:	d13a      	bne.n	80066f6 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668a:	2b40      	cmp	r3, #64	@ 0x40
 800668c:	d133      	bne.n	80066f6 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d12e      	bne.n	80066f6 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fd00 	bl	80060a2 <LL_ADC_INJ_IsConversionOngoing>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11a      	bne.n	80066de <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80066b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d112      	bne.n	80066f6 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d4:	f043 0201 	orr.w	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	655a      	str	r2, [r3, #84]	@ 0x54
 80066dc:	e00b      	b.n	80066f6 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	f043 0210 	orr.w	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fe06 	bl	8007308 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2260      	movs	r2, #96	@ 0x60
 8006702:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d011      	beq.n	8006732 <HAL_ADC_IRQHandler+0x264>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00c      	beq.n	8006732 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f886 	bl	8006836 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2280      	movs	r2, #128	@ 0x80
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d012      	beq.n	8006762 <HAL_ADC_IRQHandler+0x294>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fdec 	bl	8007330 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006768:	2b00      	cmp	r3, #0
 800676a:	d012      	beq.n	8006792 <HAL_ADC_IRQHandler+0x2c4>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fdde 	bl	8007344 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006790:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d02a      	beq.n	80067f2 <HAL_ADC_IRQHandler+0x324>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d025      	beq.n	80067f2 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80067ae:	2301      	movs	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	e008      	b.n	80067c6 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d10e      	bne.n	80067ea <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	f043 0202 	orr.w	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f830 	bl	800684a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2210      	movs	r2, #16
 80067f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d018      	beq.n	800682e <HAL_ADC_IRQHandler+0x360>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	f043 0208 	orr.w	r2, r3, #8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006826:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fd77 	bl	800731c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800682e:	bf00      	nop
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b0b6      	sub	sp, #216	@ 0xd8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006870:	2300      	movs	r3, #0
 8006872:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_ADC_ConfigChannel+0x22>
 800687e:	2302      	movs	r3, #2
 8006880:	e3bb      	b.n	8006ffa <HAL_ADC_ConfigChannel+0x79a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fbf4 	bl	800607c <LL_ADC_REG_IsConversionOngoing>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 83a0 	bne.w	8006fdc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	d824      	bhi.n	80068f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	3b02      	subs	r3, #2
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d81b      	bhi.n	80068ee <HAL_ADC_ConfigChannel+0x8e>
 80068b6:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <HAL_ADC_ConfigChannel+0x5c>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	080068d5 	.word	0x080068d5
 80068c4:	080068dd 	.word	0x080068dd
 80068c8:	080068e5 	.word	0x080068e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80068cc:	230c      	movs	r3, #12
 80068ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80068d2:	e010      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80068d4:	2312      	movs	r3, #18
 80068d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80068da:	e00c      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80068dc:	2318      	movs	r3, #24
 80068de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80068e2:	e008      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80068e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80068ec:	e003      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80068ee:	2306      	movs	r3, #6
 80068f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80068f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006904:	f7ff fa7c 	bl	8005e00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fbb5 	bl	800607c <LL_ADC_REG_IsConversionOngoing>
 8006912:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fbc1 	bl	80060a2 <LL_ADC_INJ_IsConversionOngoing>
 8006920:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 81a4 	bne.w	8006c76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800692e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 819f 	bne.w	8006c76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	461a      	mov	r2, r3
 8006946:	f7ff fa9a 	bl	8005e7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	08db      	lsrs	r3, r3, #3
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b04      	cmp	r3, #4
 800696a:	d00a      	beq.n	8006982 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	6919      	ldr	r1, [r3, #16]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800697c:	f7ff f9d8 	bl	8005d30 <LL_ADC_SetOffset>
 8006980:	e179      	b.n	8006c76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff f9f5 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 800698e:	4603      	mov	r3, r0
 8006990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <HAL_ADC_ConfigChannel+0x14e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff f9ea 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 80069a4:	4603      	mov	r3, r0
 80069a6:	0e9b      	lsrs	r3, r3, #26
 80069a8:	f003 021f 	and.w	r2, r3, #31
 80069ac:	e01e      	b.n	80069ec <HAL_ADC_ConfigChannel+0x18c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff f9df 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069c4:	fa93 f3a3 	rbit	r3, r3
 80069c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80069cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80069d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80069dc:	2320      	movs	r3, #32
 80069de:	e004      	b.n	80069ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80069e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069e4:	fab3 f383 	clz	r3, r3
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <HAL_ADC_ConfigChannel+0x1a4>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	0e9b      	lsrs	r3, r3, #26
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	e018      	b.n	8006a36 <HAL_ADC_ConfigChannel+0x1d6>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a10:	fa93 f3a3 	rbit	r3, r3
 8006a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006a28:	2320      	movs	r3, #32
 8006a2a:	e004      	b.n	8006a36 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a30:	fab3 f383 	clz	r3, r3
 8006a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d106      	bne.n	8006a48 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff f9ae 	bl	8005da4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff f992 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x214>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2101      	movs	r1, #1
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff f987 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	0e9b      	lsrs	r3, r3, #26
 8006a6e:	f003 021f 	and.w	r2, r3, #31
 8006a72:	e01e      	b.n	8006ab2 <HAL_ADC_ConfigChannel+0x252>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2101      	movs	r1, #1
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff f97c 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8006aa2:	2320      	movs	r3, #32
 8006aa4:	e004      	b.n	8006ab0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006aaa:	fab3 f383 	clz	r3, r3
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <HAL_ADC_ConfigChannel+0x26a>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	0e9b      	lsrs	r3, r3, #26
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	e018      	b.n	8006afc <HAL_ADC_ConfigChannel+0x29c>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ad6:	fa93 f3a3 	rbit	r3, r3
 8006ada:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006ade:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ae2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8006aee:	2320      	movs	r3, #32
 8006af0:	e004      	b.n	8006afc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8006af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006af6:	fab3 f383 	clz	r3, r3
 8006afa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d106      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	2101      	movs	r1, #1
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff f94b 	bl	8005da4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2102      	movs	r1, #2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff f92f 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <HAL_ADC_ConfigChannel+0x2da>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff f924 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006b30:	4603      	mov	r3, r0
 8006b32:	0e9b      	lsrs	r3, r3, #26
 8006b34:	f003 021f 	and.w	r2, r3, #31
 8006b38:	e01e      	b.n	8006b78 <HAL_ADC_ConfigChannel+0x318>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff f919 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b50:	fa93 f3a3 	rbit	r3, r3
 8006b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006b68:	2320      	movs	r3, #32
 8006b6a:	e004      	b.n	8006b76 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b70:	fab3 f383 	clz	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x330>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	0e9b      	lsrs	r3, r3, #26
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	e014      	b.n	8006bba <HAL_ADC_ConfigChannel+0x35a>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b98:	fa93 f3a3 	rbit	r3, r3
 8006b9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006b9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006bac:	2320      	movs	r3, #32
 8006bae:	e004      	b.n	8006bba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8006bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bb4:	fab3 f383 	clz	r3, r3
 8006bb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d106      	bne.n	8006bcc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2102      	movs	r1, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff f8ec 	bl	8005da4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2103      	movs	r1, #3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff f8d0 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x398>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2103      	movs	r1, #3
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f8c5 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	0e9b      	lsrs	r3, r3, #26
 8006bf2:	f003 021f 	and.w	r2, r3, #31
 8006bf6:	e017      	b.n	8006c28 <HAL_ADC_ConfigChannel+0x3c8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff f8ba 	bl	8005d78 <LL_ADC_GetOffsetChannel>
 8006c04:	4603      	mov	r3, r0
 8006c06:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c0a:	fa93 f3a3 	rbit	r3, r3
 8006c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006c14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8006c1a:	2320      	movs	r3, #32
 8006c1c:	e003      	b.n	8006c26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8006c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c20:	fab3 f383 	clz	r3, r3
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <HAL_ADC_ConfigChannel+0x3e0>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0e9b      	lsrs	r3, r3, #26
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	e011      	b.n	8006c64 <HAL_ADC_ConfigChannel+0x404>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c48:	fa93 f3a3 	rbit	r3, r3
 8006c4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c50:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006c58:	2320      	movs	r3, #32
 8006c5a:	e003      	b.n	8006c64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c5e:	fab3 f383 	clz	r3, r3
 8006c62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d106      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2103      	movs	r1, #3
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff f897 	bl	8005da4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff f9c4 	bl	8006008 <LL_ADC_IsEnabled>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 8140 	bne.w	8006f08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	461a      	mov	r2, r3
 8006c96:	f7ff f91d 	bl	8005ed4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	4a8f      	ldr	r2, [pc, #572]	@ (8006edc <HAL_ADC_ConfigChannel+0x67c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	f040 8131 	bne.w	8006f08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <HAL_ADC_ConfigChannel+0x46e>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	0e9b      	lsrs	r3, r3, #26
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	bf94      	ite	ls
 8006cc6:	2301      	movls	r3, #1
 8006cc8:	2300      	movhi	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	e019      	b.n	8006d02 <HAL_ADC_ConfigChannel+0x4a2>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cd6:	fa93 f3a3 	rbit	r3, r3
 8006cda:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006ce0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8006ce6:	2320      	movs	r3, #32
 8006ce8:	e003      	b.n	8006cf2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cec:	fab3 f383 	clz	r3, r3
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f003 031f 	and.w	r3, r3, #31
 8006cf8:	2b09      	cmp	r3, #9
 8006cfa:	bf94      	ite	ls
 8006cfc:	2301      	movls	r3, #1
 8006cfe:	2300      	movhi	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d079      	beq.n	8006dfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d107      	bne.n	8006d22 <HAL_ADC_ConfigChannel+0x4c2>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	0e9b      	lsrs	r3, r3, #26
 8006d18:	3301      	adds	r3, #1
 8006d1a:	069b      	lsls	r3, r3, #26
 8006d1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006d20:	e015      	b.n	8006d4e <HAL_ADC_ConfigChannel+0x4ee>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d2a:	fa93 f3a3 	rbit	r3, r3
 8006d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d32:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8006d3a:	2320      	movs	r3, #32
 8006d3c:	e003      	b.n	8006d46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d40:	fab3 f383 	clz	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	3301      	adds	r3, #1
 8006d48:	069b      	lsls	r3, r3, #26
 8006d4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <HAL_ADC_ConfigChannel+0x50e>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	0e9b      	lsrs	r3, r3, #26
 8006d60:	3301      	adds	r3, #1
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2101      	movs	r1, #1
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	e017      	b.n	8006d9e <HAL_ADC_ConfigChannel+0x53e>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d76:	fa93 f3a3 	rbit	r3, r3
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006d86:	2320      	movs	r3, #32
 8006d88:	e003      	b.n	8006d92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8c:	fab3 f383 	clz	r3, r3
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	3301      	adds	r3, #1
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2101      	movs	r1, #1
 8006d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9e:	ea42 0103 	orr.w	r1, r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x564>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	0e9b      	lsrs	r3, r3, #26
 8006db4:	3301      	adds	r3, #1
 8006db6:	f003 021f 	and.w	r2, r3, #31
 8006dba:	4613      	mov	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	051b      	lsls	r3, r3, #20
 8006dc2:	e018      	b.n	8006df6 <HAL_ADC_ConfigChannel+0x596>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dcc:	fa93 f3a3 	rbit	r3, r3
 8006dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8006ddc:	2320      	movs	r3, #32
 8006dde:	e003      	b.n	8006de8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	fab3 f383 	clz	r3, r3
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3301      	adds	r3, #1
 8006dea:	f003 021f 	and.w	r2, r3, #31
 8006dee:	4613      	mov	r3, r2
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	4413      	add	r3, r2
 8006df4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006df6:	430b      	orrs	r3, r1
 8006df8:	e081      	b.n	8006efe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d107      	bne.n	8006e16 <HAL_ADC_ConfigChannel+0x5b6>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	0e9b      	lsrs	r3, r3, #26
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	069b      	lsls	r3, r3, #26
 8006e10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e14:	e015      	b.n	8006e42 <HAL_ADC_ConfigChannel+0x5e2>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	fa93 f3a3 	rbit	r3, r3
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8006e2e:	2320      	movs	r3, #32
 8006e30:	e003      	b.n	8006e3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	fab3 f383 	clz	r3, r3
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	069b      	lsls	r3, r3, #26
 8006e3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_ADC_ConfigChannel+0x602>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	0e9b      	lsrs	r3, r3, #26
 8006e54:	3301      	adds	r3, #1
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e60:	e017      	b.n	8006e92 <HAL_ADC_ConfigChannel+0x632>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	fa93 f3a3 	rbit	r3, r3
 8006e6e:	61bb      	str	r3, [r7, #24]
  return result;
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	e003      	b.n	8006e86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	fab3 f383 	clz	r3, r3
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	3301      	adds	r3, #1
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e92:	ea42 0103 	orr.w	r1, r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10d      	bne.n	8006ebe <HAL_ADC_ConfigChannel+0x65e>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	0e9b      	lsrs	r3, r3, #26
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	f003 021f 	and.w	r2, r3, #31
 8006eae:	4613      	mov	r3, r2
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3b1e      	subs	r3, #30
 8006eb6:	051b      	lsls	r3, r3, #20
 8006eb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ebc:	e01e      	b.n	8006efc <HAL_ADC_ConfigChannel+0x69c>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	fa93 f3a3 	rbit	r3, r3
 8006eca:	60fb      	str	r3, [r7, #12]
  return result;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8006ed6:	2320      	movs	r3, #32
 8006ed8:	e006      	b.n	8006ee8 <HAL_ADC_ConfigChannel+0x688>
 8006eda:	bf00      	nop
 8006edc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	fab3 f383 	clz	r3, r3
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	3301      	adds	r3, #1
 8006eea:	f003 021f 	and.w	r2, r3, #31
 8006eee:	4613      	mov	r3, r2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4413      	add	r3, r2
 8006ef4:	3b1e      	subs	r3, #30
 8006ef6:	051b      	lsls	r3, r3, #20
 8006ef8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006efc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f02:	4619      	mov	r1, r3
 8006f04:	f7fe ffbb 	bl	8005e7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8007004 <HAL_ADC_ConfigChannel+0x7a4>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d06c      	beq.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f14:	483c      	ldr	r0, [pc, #240]	@ (8007008 <HAL_ADC_ConfigChannel+0x7a8>)
 8006f16:	f7fe fefd 	bl	8005d14 <LL_ADC_GetCommonPathInternalCh>
 8006f1a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a3a      	ldr	r2, [pc, #232]	@ (800700c <HAL_ADC_ConfigChannel+0x7ac>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d127      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d121      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a35      	ldr	r2, [pc, #212]	@ (8007010 <HAL_ADC_ConfigChannel+0x7b0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d157      	bne.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f46:	4619      	mov	r1, r3
 8006f48:	482f      	ldr	r0, [pc, #188]	@ (8007008 <HAL_ADC_ConfigChannel+0x7a8>)
 8006f4a:	f7fe fed0 	bl	8005cee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f4e:	4b31      	ldr	r3, [pc, #196]	@ (8007014 <HAL_ADC_ConfigChannel+0x7b4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	099b      	lsrs	r3, r3, #6
 8006f54:	4a30      	ldr	r2, [pc, #192]	@ (8007018 <HAL_ADC_ConfigChannel+0x7b8>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	099b      	lsrs	r3, r3, #6
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006f68:	e002      	b.n	8006f70 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f9      	bne.n	8006f6a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f76:	e03a      	b.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a27      	ldr	r2, [pc, #156]	@ (800701c <HAL_ADC_ConfigChannel+0x7bc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d113      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006f82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10d      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1f      	ldr	r2, [pc, #124]	@ (8007010 <HAL_ADC_ConfigChannel+0x7b0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d12a      	bne.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4819      	ldr	r0, [pc, #100]	@ (8007008 <HAL_ADC_ConfigChannel+0x7a8>)
 8006fa4:	f7fe fea3 	bl	8005cee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006fa8:	e021      	b.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1c      	ldr	r2, [pc, #112]	@ (8007020 <HAL_ADC_ConfigChannel+0x7c0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d11c      	bne.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d116      	bne.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a12      	ldr	r2, [pc, #72]	@ (8007010 <HAL_ADC_ConfigChannel+0x7b0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d111      	bne.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	480c      	ldr	r0, [pc, #48]	@ (8007008 <HAL_ADC_ConfigChannel+0x7a8>)
 8006fd6:	f7fe fe8a 	bl	8005cee <LL_ADC_SetCommonPathInternalCh>
 8006fda:	e008      	b.n	8006fee <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006ff6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	37d8      	adds	r7, #216	@ 0xd8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	80080000 	.word	0x80080000
 8007008:	50040300 	.word	0x50040300
 800700c:	c7520000 	.word	0xc7520000
 8007010:	50040000 	.word	0x50040000
 8007014:	20000000 	.word	0x20000000
 8007018:	053e2d63 	.word	0x053e2d63
 800701c:	cb840000 	.word	0xcb840000
 8007020:	80000001 	.word	0x80000001

08007024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800702c:	2300      	movs	r3, #0
 800702e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe ffe7 	bl	8006008 <LL_ADC_IsEnabled>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d169      	bne.n	8007114 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	4b36      	ldr	r3, [pc, #216]	@ (8007120 <ADC_Enable+0xfc>)
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007052:	f043 0210 	orr.w	r2, r3, #16
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e055      	b.n	8007116 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe ffa2 	bl	8005fb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007074:	482b      	ldr	r0, [pc, #172]	@ (8007124 <ADC_Enable+0x100>)
 8007076:	f7fe fe4d 	bl	8005d14 <LL_ADC_GetCommonPathInternalCh>
 800707a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800707c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007080:	2b00      	cmp	r3, #0
 8007082:	d013      	beq.n	80070ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007084:	4b28      	ldr	r3, [pc, #160]	@ (8007128 <ADC_Enable+0x104>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	099b      	lsrs	r3, r3, #6
 800708a:	4a28      	ldr	r2, [pc, #160]	@ (800712c <ADC_Enable+0x108>)
 800708c:	fba2 2303 	umull	r2, r3, r2, r3
 8007090:	099b      	lsrs	r3, r3, #6
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	4613      	mov	r3, r2
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800709e:	e002      	b.n	80070a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f9      	bne.n	80070a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80070ac:	f7fe fe00 	bl	8005cb0 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070b2:	e028      	b.n	8007106 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe ffa5 	bl	8006008 <LL_ADC_IsEnabled>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe ff75 	bl	8005fb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80070ce:	f7fe fdef 	bl	8005cb0 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d914      	bls.n	8007106 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d00d      	beq.n	8007106 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ee:	f043 0210 	orr.w	r2, r3, #16
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e007      	b.n	8007116 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b01      	cmp	r3, #1
 8007112:	d1cf      	bne.n	80070b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	8000003f 	.word	0x8000003f
 8007124:	50040300 	.word	0x50040300
 8007128:	20000000 	.word	0x20000000
 800712c:	053e2d63 	.word	0x053e2d63

08007130 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe ff76 	bl	800602e <LL_ADC_IsDisableOngoing>
 8007142:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe ff5d 	bl	8006008 <LL_ADC_IsEnabled>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d047      	beq.n	80071e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d144      	bne.n	80071e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 030d 	and.w	r3, r3, #13
 8007164:	2b01      	cmp	r3, #1
 8007166:	d10c      	bne.n	8007182 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe ff37 	bl	8005fe0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2203      	movs	r2, #3
 8007178:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800717a:	f7fe fd99 	bl	8005cb0 <HAL_GetTick>
 800717e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007180:	e029      	b.n	80071d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007186:	f043 0210 	orr.w	r2, r3, #16
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007192:	f043 0201 	orr.w	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e023      	b.n	80071e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800719e:	f7fe fd87 	bl	8005cb0 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d914      	bls.n	80071d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071be:	f043 0210 	orr.w	r2, r3, #16
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ca:	f043 0201 	orr.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e007      	b.n	80071e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1dc      	bne.n	800719e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <LL_ADC_StartCalibration>:
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800720a:	4313      	orrs	r3, r2
 800720c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <LL_ADC_IsCalibrationOnGoing>:
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007234:	d101      	bne.n	800723a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_ADCEx_Calibration_Start+0x1c>
 8007260:	2302      	movs	r3, #2
 8007262:	e04d      	b.n	8007300 <HAL_ADCEx_Calibration_Start+0xb8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff ff5f 	bl	8007130 <ADC_Disable>
 8007272:	4603      	mov	r3, r0
 8007274:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d136      	bne.n	80072ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007280:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007284:	f023 0302 	bic.w	r3, r3, #2
 8007288:	f043 0202 	orr.w	r2, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff ffa9 	bl	80071ee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800729c:	e014      	b.n	80072c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3301      	adds	r3, #1
 80072a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80072aa:	d30d      	bcc.n	80072c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b0:	f023 0312 	bic.w	r3, r3, #18
 80072b4:	f043 0210 	orr.w	r2, r3, #16
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e01b      	b.n	8007300 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ffa7 	bl	8007220 <LL_ADC_IsCalibrationOnGoing>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e2      	bne.n	800729e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072dc:	f023 0303 	bic.w	r3, r3, #3
 80072e0:	f043 0201 	orr.w	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80072e8:	e005      	b.n	80072f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ee:	f043 0210 	orr.w	r2, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800737c:	4b0c      	ldr	r3, [pc, #48]	@ (80073b0 <__NVIC_SetPriorityGrouping+0x44>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007388:	4013      	ands	r3, r2
 800738a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800739c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800739e:	4a04      	ldr	r2, [pc, #16]	@ (80073b0 <__NVIC_SetPriorityGrouping+0x44>)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	60d3      	str	r3, [r2, #12]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	e000ed00 	.word	0xe000ed00

080073b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073b8:	4b04      	ldr	r3, [pc, #16]	@ (80073cc <__NVIC_GetPriorityGrouping+0x18>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	f003 0307 	and.w	r3, r3, #7
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	e000ed00 	.word	0xe000ed00

080073d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	db0b      	blt.n	80073fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	f003 021f 	and.w	r2, r3, #31
 80073e8:	4907      	ldr	r1, [pc, #28]	@ (8007408 <__NVIC_EnableIRQ+0x38>)
 80073ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	2001      	movs	r0, #1
 80073f2:	fa00 f202 	lsl.w	r2, r0, r2
 80073f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	e000e100 	.word	0xe000e100

0800740c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741c:	2b00      	cmp	r3, #0
 800741e:	db0a      	blt.n	8007436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	490c      	ldr	r1, [pc, #48]	@ (8007458 <__NVIC_SetPriority+0x4c>)
 8007426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742a:	0112      	lsls	r2, r2, #4
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	440b      	add	r3, r1
 8007430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007434:	e00a      	b.n	800744c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4908      	ldr	r1, [pc, #32]	@ (800745c <__NVIC_SetPriority+0x50>)
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	3b04      	subs	r3, #4
 8007444:	0112      	lsls	r2, r2, #4
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	440b      	add	r3, r1
 800744a:	761a      	strb	r2, [r3, #24]
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	e000e100 	.word	0xe000e100
 800745c:	e000ed00 	.word	0xe000ed00

08007460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	@ 0x24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	f1c3 0307 	rsb	r3, r3, #7
 800747a:	2b04      	cmp	r3, #4
 800747c:	bf28      	it	cs
 800747e:	2304      	movcs	r3, #4
 8007480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	3304      	adds	r3, #4
 8007486:	2b06      	cmp	r3, #6
 8007488:	d902      	bls.n	8007490 <NVIC_EncodePriority+0x30>
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	3b03      	subs	r3, #3
 800748e:	e000      	b.n	8007492 <NVIC_EncodePriority+0x32>
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007494:	f04f 32ff 	mov.w	r2, #4294967295
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43da      	mvns	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	401a      	ands	r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074a8:	f04f 31ff 	mov.w	r1, #4294967295
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	43d9      	mvns	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b8:	4313      	orrs	r3, r2
         );
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3724      	adds	r7, #36	@ 0x24
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074d8:	d301      	bcc.n	80074de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074da:	2301      	movs	r3, #1
 80074dc:	e00f      	b.n	80074fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074de:	4a0a      	ldr	r2, [pc, #40]	@ (8007508 <SysTick_Config+0x40>)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074e6:	210f      	movs	r1, #15
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	f7ff ff8e 	bl	800740c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074f0:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <SysTick_Config+0x40>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074f6:	4b04      	ldr	r3, [pc, #16]	@ (8007508 <SysTick_Config+0x40>)
 80074f8:	2207      	movs	r2, #7
 80074fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	e000e010 	.word	0xe000e010

0800750c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ff29 	bl	800736c <__NVIC_SetPriorityGrouping>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	4603      	mov	r3, r0
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007534:	f7ff ff3e 	bl	80073b4 <__NVIC_GetPriorityGrouping>
 8007538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	6978      	ldr	r0, [r7, #20]
 8007540:	f7ff ff8e 	bl	8007460 <NVIC_EncodePriority>
 8007544:	4602      	mov	r2, r0
 8007546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800754a:	4611      	mov	r1, r2
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff ff5d 	bl	800740c <__NVIC_SetPriority>
}
 8007552:	bf00      	nop
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	4603      	mov	r3, r0
 8007562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff ff31 	bl	80073d0 <__NVIC_EnableIRQ>
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff ffa2 	bl	80074c8 <SysTick_Config>
 8007584:	4603      	mov	r3, r0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d005      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2204      	movs	r2, #4
 80075aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
 80075b0:	e029      	b.n	8007606 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 020e 	bic.w	r2, r2, #14
 80075c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	f003 021c 	and.w	r2, r3, #28
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	2101      	movs	r1, #1
 80075e0:	fa01 f202 	lsl.w	r2, r1, r2
 80075e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
    }
  }
  return status;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800761e:	e148      	b.n	80078b2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	2101      	movs	r1, #1
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	4013      	ands	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 813a 	beq.w	80078ac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	2b01      	cmp	r3, #1
 8007642:	d005      	beq.n	8007650 <HAL_GPIO_Init+0x40>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d130      	bne.n	80076b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	2203      	movs	r2, #3
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	43db      	mvns	r3, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4013      	ands	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007686:	2201      	movs	r2, #1
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43db      	mvns	r3, r3
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4013      	ands	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	f003 0201 	and.w	r2, r3, #1
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d017      	beq.n	80076ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	2203      	movs	r2, #3
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	43db      	mvns	r3, r3
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4013      	ands	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d123      	bne.n	8007742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	08da      	lsrs	r2, r3, #3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3208      	adds	r2, #8
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	220f      	movs	r2, #15
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43db      	mvns	r3, r3
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4013      	ands	r3, r2
 800771c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	08da      	lsrs	r2, r3, #3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3208      	adds	r2, #8
 800773c:	6939      	ldr	r1, [r7, #16]
 800773e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	2203      	movs	r2, #3
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43db      	mvns	r3, r3
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4013      	ands	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f003 0203 	and.w	r2, r3, #3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 8094 	beq.w	80078ac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007784:	4b52      	ldr	r3, [pc, #328]	@ (80078d0 <HAL_GPIO_Init+0x2c0>)
 8007786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007788:	4a51      	ldr	r2, [pc, #324]	@ (80078d0 <HAL_GPIO_Init+0x2c0>)
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007790:	4b4f      	ldr	r3, [pc, #316]	@ (80078d0 <HAL_GPIO_Init+0x2c0>)
 8007792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800779c:	4a4d      	ldr	r2, [pc, #308]	@ (80078d4 <HAL_GPIO_Init+0x2c4>)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	089b      	lsrs	r3, r3, #2
 80077a2:	3302      	adds	r3, #2
 80077a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	220f      	movs	r2, #15
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	43db      	mvns	r3, r3
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4013      	ands	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80077c6:	d00d      	beq.n	80077e4 <HAL_GPIO_Init+0x1d4>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a43      	ldr	r2, [pc, #268]	@ (80078d8 <HAL_GPIO_Init+0x2c8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d007      	beq.n	80077e0 <HAL_GPIO_Init+0x1d0>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a42      	ldr	r2, [pc, #264]	@ (80078dc <HAL_GPIO_Init+0x2cc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d101      	bne.n	80077dc <HAL_GPIO_Init+0x1cc>
 80077d8:	2302      	movs	r3, #2
 80077da:	e004      	b.n	80077e6 <HAL_GPIO_Init+0x1d6>
 80077dc:	2307      	movs	r3, #7
 80077de:	e002      	b.n	80077e6 <HAL_GPIO_Init+0x1d6>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e000      	b.n	80077e6 <HAL_GPIO_Init+0x1d6>
 80077e4:	2300      	movs	r3, #0
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	f002 0203 	and.w	r2, r2, #3
 80077ec:	0092      	lsls	r2, r2, #2
 80077ee:	4093      	lsls	r3, r2
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80077f6:	4937      	ldr	r1, [pc, #220]	@ (80078d4 <HAL_GPIO_Init+0x2c4>)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	089b      	lsrs	r3, r3, #2
 80077fc:	3302      	adds	r3, #2
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007804:	4b36      	ldr	r3, [pc, #216]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	43db      	mvns	r3, r3
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4013      	ands	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007828:	4a2d      	ldr	r2, [pc, #180]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800782e:	4b2c      	ldr	r3, [pc, #176]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	43db      	mvns	r3, r3
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4013      	ands	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007852:	4a23      	ldr	r2, [pc, #140]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007858:	4b21      	ldr	r3, [pc, #132]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	43db      	mvns	r3, r3
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4013      	ands	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800787c:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007882:	4b17      	ldr	r3, [pc, #92]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	43db      	mvns	r3, r3
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	4013      	ands	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80078a6:	4a0e      	ldr	r2, [pc, #56]	@ (80078e0 <HAL_GPIO_Init+0x2d0>)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	3301      	adds	r3, #1
 80078b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	fa22 f303 	lsr.w	r3, r2, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f47f aeaf 	bne.w	8007620 <HAL_GPIO_Init+0x10>
  }
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	40021000 	.word	0x40021000
 80078d4:	40010000 	.word	0x40010000
 80078d8:	48000400 	.word	0x48000400
 80078dc:	48000800 	.word	0x48000800
 80078e0:	40010400 	.word	0x40010400

080078e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	807b      	strh	r3, [r7, #2]
 80078f0:	4613      	mov	r3, r2
 80078f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078f4:	787b      	ldrb	r3, [r7, #1]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078fa:	887a      	ldrh	r2, [r7, #2]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007900:	e002      	b.n	8007908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007902:	887a      	ldrh	r2, [r7, #2]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800791e:	4b08      	ldr	r3, [pc, #32]	@ (8007940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007920:	695a      	ldr	r2, [r3, #20]
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	4013      	ands	r3, r2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800792a:	4a05      	ldr	r2, [pc, #20]	@ (8007940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	4618      	mov	r0, r3
 8007934:	f7f9 fcf2 	bl	800131c <HAL_GPIO_EXTI_Callback>
  }
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40010400 	.word	0x40010400

08007944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e08d      	b.n	8007a72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7f9 fe60 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	@ 0x24
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007994:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d107      	bne.n	80079be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	e006      	b.n	80079cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80079ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d108      	bne.n	80079e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079e2:	605a      	str	r2, [r3, #4]
 80079e4:	e007      	b.n	80079f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	69d9      	ldr	r1, [r3, #28]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1a      	ldr	r2, [r3, #32]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d138      	bne.n	8007b02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e032      	b.n	8007b04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2224      	movs	r2, #36	@ 0x24
 8007aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007acc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	e000      	b.n	8007b04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b02:	2302      	movs	r3, #2
  }
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d139      	bne.n	8007b9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e033      	b.n	8007b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	@ 0x24
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0201 	orr.w	r2, r2, #1
 8007b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e000      	b.n	8007b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b9a:	2302      	movs	r3, #2
  }
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007bac:	4b04      	ldr	r3, [pc, #16]	@ (8007bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40007000 	.word	0x40007000

08007bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd2:	d130      	bne.n	8007c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bd4:	4b23      	ldr	r3, [pc, #140]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be0:	d038      	beq.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007be2:	4b20      	ldr	r3, [pc, #128]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bea:	4a1e      	ldr	r2, [pc, #120]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2232      	movs	r2, #50	@ 0x32
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8007c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	0c9b      	lsrs	r3, r3, #18
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c08:	e002      	b.n	8007c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c10:	4b14      	ldr	r3, [pc, #80]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c1c:	d102      	bne.n	8007c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1f2      	bne.n	8007c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c24:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c30:	d110      	bne.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e00f      	b.n	8007c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c42:	d007      	beq.n	8007c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c44:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c4c:	4a05      	ldr	r2, [pc, #20]	@ (8007c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40007000 	.word	0x40007000
 8007c68:	20000000 	.word	0x20000000
 8007c6c:	431bde83 	.word	0x431bde83

08007c70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f000 bc02 	b.w	8008488 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c84:	4b96      	ldr	r3, [pc, #600]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 030c 	and.w	r3, r3, #12
 8007c8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c8e:	4b94      	ldr	r3, [pc, #592]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80e4 	beq.w	8007e6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <HAL_RCC_OscConfig+0x4c>
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	f040 808b 	bne.w	8007dca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	f040 8087 	bne.w	8007dca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cbc:	4b88      	ldr	r3, [pc, #544]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x64>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e3d9      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	4b81      	ldr	r3, [pc, #516]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d004      	beq.n	8007cee <HAL_RCC_OscConfig+0x7e>
 8007ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cec:	e005      	b.n	8007cfa <HAL_RCC_OscConfig+0x8a>
 8007cee:	4b7c      	ldr	r3, [pc, #496]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cf4:	091b      	lsrs	r3, r3, #4
 8007cf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d223      	bcs.n	8007d46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fd54 	bl	80087b0 <RCC_SetFlashLatencyFromMSIRange>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e3ba      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d12:	4b73      	ldr	r3, [pc, #460]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a72      	ldr	r2, [pc, #456]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d18:	f043 0308 	orr.w	r3, r3, #8
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b70      	ldr	r3, [pc, #448]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	496d      	ldr	r1, [pc, #436]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d30:	4b6b      	ldr	r3, [pc, #428]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4968      	ldr	r1, [pc, #416]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	604b      	str	r3, [r1, #4]
 8007d44:	e025      	b.n	8007d92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d46:	4b66      	ldr	r3, [pc, #408]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a65      	ldr	r2, [pc, #404]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	4b63      	ldr	r3, [pc, #396]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	4960      	ldr	r1, [pc, #384]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d64:	4b5e      	ldr	r3, [pc, #376]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	495b      	ldr	r1, [pc, #364]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fd14 	bl	80087b0 <RCC_SetFlashLatencyFromMSIRange>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e37a      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d92:	f000 fc81 	bl	8008698 <HAL_RCC_GetSysClockFreq>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b51      	ldr	r3, [pc, #324]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	091b      	lsrs	r3, r3, #4
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	4950      	ldr	r1, [pc, #320]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007da4:	5ccb      	ldrb	r3, [r1, r3]
 8007da6:	f003 031f 	and.w	r3, r3, #31
 8007daa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dae:	4a4e      	ldr	r2, [pc, #312]	@ (8007ee8 <HAL_RCC_OscConfig+0x278>)
 8007db0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007db2:	4b4e      	ldr	r3, [pc, #312]	@ (8007eec <HAL_RCC_OscConfig+0x27c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fd ff2a 	bl	8005c10 <HAL_InitTick>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d052      	beq.n	8007e6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	e35e      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d032      	beq.n	8007e38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007dd2:	4b43      	ldr	r3, [pc, #268]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a42      	ldr	r2, [pc, #264]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007dde:	f7fd ff67 	bl	8005cb0 <HAL_GetTick>
 8007de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007de4:	e008      	b.n	8007df8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007de6:	f7fd ff63 	bl	8005cb0 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e347      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007df8:	4b39      	ldr	r3, [pc, #228]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0f0      	beq.n	8007de6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e04:	4b36      	ldr	r3, [pc, #216]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a35      	ldr	r2, [pc, #212]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e0a:	f043 0308 	orr.w	r3, r3, #8
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	4b33      	ldr	r3, [pc, #204]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	4930      	ldr	r1, [pc, #192]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e22:	4b2f      	ldr	r3, [pc, #188]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	492b      	ldr	r1, [pc, #172]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	604b      	str	r3, [r1, #4]
 8007e36:	e01a      	b.n	8007e6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007e38:	4b29      	ldr	r3, [pc, #164]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a28      	ldr	r2, [pc, #160]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e3e:	f023 0301 	bic.w	r3, r3, #1
 8007e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e44:	f7fd ff34 	bl	8005cb0 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e4c:	f7fd ff30 	bl	8005cb0 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e314      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e5e:	4b20      	ldr	r3, [pc, #128]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1f0      	bne.n	8007e4c <HAL_RCC_OscConfig+0x1dc>
 8007e6a:	e000      	b.n	8007e6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d073      	beq.n	8007f62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d005      	beq.n	8007e8c <HAL_RCC_OscConfig+0x21c>
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	d10e      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d10b      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e8c:	4b14      	ldr	r3, [pc, #80]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d063      	beq.n	8007f60 <HAL_RCC_OscConfig+0x2f0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d15f      	bne.n	8007f60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e2f1      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eac:	d106      	bne.n	8007ebc <HAL_RCC_OscConfig+0x24c>
 8007eae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e025      	b.n	8007f08 <HAL_RCC_OscConfig+0x298>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ec4:	d114      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x280>
 8007ec6:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a05      	ldr	r2, [pc, #20]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	4b03      	ldr	r3, [pc, #12]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a02      	ldr	r2, [pc, #8]	@ (8007ee0 <HAL_RCC_OscConfig+0x270>)
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e013      	b.n	8007f08 <HAL_RCC_OscConfig+0x298>
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	0800b0cc 	.word	0x0800b0cc
 8007ee8:	20000000 	.word	0x20000000
 8007eec:	20000004 	.word	0x20000004
 8007ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a9f      	ldr	r2, [pc, #636]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4b9d      	ldr	r3, [pc, #628]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a9c      	ldr	r2, [pc, #624]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d013      	beq.n	8007f38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fd fece 	bl	8005cb0 <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f18:	f7fd feca 	bl	8005cb0 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b64      	cmp	r3, #100	@ 0x64
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e2ae      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f2a:	4b92      	ldr	r3, [pc, #584]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0x2a8>
 8007f36:	e014      	b.n	8007f62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fd feba 	bl	8005cb0 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f40:	f7fd feb6 	bl	8005cb0 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	@ 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e29a      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f52:	4b88      	ldr	r3, [pc, #544]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x2d0>
 8007f5e:	e000      	b.n	8007f62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d060      	beq.n	8008030 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d005      	beq.n	8007f80 <HAL_RCC_OscConfig+0x310>
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b0c      	cmp	r3, #12
 8007f78:	d119      	bne.n	8007fae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d116      	bne.n	8007fae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f80:	4b7c      	ldr	r3, [pc, #496]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <HAL_RCC_OscConfig+0x328>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e277      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f98:	4b76      	ldr	r3, [pc, #472]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	4973      	ldr	r1, [pc, #460]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fac:	e040      	b.n	8008030 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d023      	beq.n	8007ffe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a6e      	ldr	r2, [pc, #440]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc2:	f7fd fe75 	bl	8005cb0 <HAL_GetTick>
 8007fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fca:	f7fd fe71 	bl	8005cb0 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e255      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fdc:	4b65      	ldr	r3, [pc, #404]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0f0      	beq.n	8007fca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe8:	4b62      	ldr	r3, [pc, #392]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	495f      	ldr	r1, [pc, #380]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
 8007ffc:	e018      	b.n	8008030 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a5c      	ldr	r2, [pc, #368]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800a:	f7fd fe51 	bl	8005cb0 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008010:	e008      	b.n	8008024 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008012:	f7fd fe4d 	bl	8005cb0 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e231      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008024:	4b53      	ldr	r3, [pc, #332]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f0      	bne.n	8008012 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d03c      	beq.n	80080b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01c      	beq.n	800807e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008044:	4b4b      	ldr	r3, [pc, #300]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800804a:	4a4a      	ldr	r2, [pc, #296]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 800804c:	f043 0301 	orr.w	r3, r3, #1
 8008050:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008054:	f7fd fe2c 	bl	8005cb0 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800805c:	f7fd fe28 	bl	8005cb0 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e20c      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800806e:	4b41      	ldr	r3, [pc, #260]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0ef      	beq.n	800805c <HAL_RCC_OscConfig+0x3ec>
 800807c:	e01b      	b.n	80080b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800807e:	4b3d      	ldr	r3, [pc, #244]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008084:	4a3b      	ldr	r2, [pc, #236]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808e:	f7fd fe0f 	bl	8005cb0 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008096:	f7fd fe0b 	bl	8005cb0 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e1ef      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080a8:	4b32      	ldr	r3, [pc, #200]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 80080aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1ef      	bne.n	8008096 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80a6 	beq.w	8008210 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c4:	2300      	movs	r3, #0
 80080c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80080c8:	4b2a      	ldr	r3, [pc, #168]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 80080ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10d      	bne.n	80080f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080d4:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 80080d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d8:	4a26      	ldr	r2, [pc, #152]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 80080da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080de:	6593      	str	r3, [r2, #88]	@ 0x58
 80080e0:	4b24      	ldr	r3, [pc, #144]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 80080e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ec:	2301      	movs	r3, #1
 80080ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080f0:	4b21      	ldr	r3, [pc, #132]	@ (8008178 <HAL_RCC_OscConfig+0x508>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d118      	bne.n	800812e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008178 <HAL_RCC_OscConfig+0x508>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a1d      	ldr	r2, [pc, #116]	@ (8008178 <HAL_RCC_OscConfig+0x508>)
 8008102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008108:	f7fd fdd2 	bl	8005cb0 <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008110:	f7fd fdce 	bl	8005cb0 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e1b2      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008122:	4b15      	ldr	r3, [pc, #84]	@ (8008178 <HAL_RCC_OscConfig+0x508>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f0      	beq.n	8008110 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d108      	bne.n	8008148 <HAL_RCC_OscConfig+0x4d8>
 8008136:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813c:	4a0d      	ldr	r2, [pc, #52]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008146:	e029      	b.n	800819c <HAL_RCC_OscConfig+0x52c>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b05      	cmp	r3, #5
 800814e:	d115      	bne.n	800817c <HAL_RCC_OscConfig+0x50c>
 8008150:	4b08      	ldr	r3, [pc, #32]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008156:	4a07      	ldr	r2, [pc, #28]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008158:	f043 0304 	orr.w	r3, r3, #4
 800815c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008160:	4b04      	ldr	r3, [pc, #16]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	4a03      	ldr	r2, [pc, #12]	@ (8008174 <HAL_RCC_OscConfig+0x504>)
 8008168:	f043 0301 	orr.w	r3, r3, #1
 800816c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008170:	e014      	b.n	800819c <HAL_RCC_OscConfig+0x52c>
 8008172:	bf00      	nop
 8008174:	40021000 	.word	0x40021000
 8008178:	40007000 	.word	0x40007000
 800817c:	4b9a      	ldr	r3, [pc, #616]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 800817e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008182:	4a99      	ldr	r2, [pc, #612]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800818c:	4b96      	ldr	r3, [pc, #600]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008192:	4a95      	ldr	r2, [pc, #596]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008194:	f023 0304 	bic.w	r3, r3, #4
 8008198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d016      	beq.n	80081d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a4:	f7fd fd84 	bl	8005cb0 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081aa:	e00a      	b.n	80081c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ac:	f7fd fd80 	bl	8005cb0 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e162      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081c2:	4b89      	ldr	r3, [pc, #548]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ed      	beq.n	80081ac <HAL_RCC_OscConfig+0x53c>
 80081d0:	e015      	b.n	80081fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d2:	f7fd fd6d 	bl	8005cb0 <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081d8:	e00a      	b.n	80081f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081da:	f7fd fd69 	bl	8005cb0 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e14b      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081f0:	4b7d      	ldr	r3, [pc, #500]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80081f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1ed      	bne.n	80081da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081fe:	7ffb      	ldrb	r3, [r7, #31]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d105      	bne.n	8008210 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008204:	4b78      	ldr	r3, [pc, #480]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008208:	4a77      	ldr	r2, [pc, #476]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 800820a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800820e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d03c      	beq.n	8008296 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01c      	beq.n	800825e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008224:	4b70      	ldr	r3, [pc, #448]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008226:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800822a:	4a6f      	ldr	r2, [pc, #444]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 800822c:	f043 0301 	orr.w	r3, r3, #1
 8008230:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008234:	f7fd fd3c 	bl	8005cb0 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800823c:	f7fd fd38 	bl	8005cb0 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e11c      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800824e:	4b66      	ldr	r3, [pc, #408]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0ef      	beq.n	800823c <HAL_RCC_OscConfig+0x5cc>
 800825c:	e01b      	b.n	8008296 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800825e:	4b62      	ldr	r3, [pc, #392]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008264:	4a60      	ldr	r2, [pc, #384]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826e:	f7fd fd1f 	bl	8005cb0 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008274:	e008      	b.n	8008288 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008276:	f7fd fd1b 	bl	8005cb0 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e0ff      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008288:	4b57      	ldr	r3, [pc, #348]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 800828a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1ef      	bne.n	8008276 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80f3 	beq.w	8008486 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	f040 80c9 	bne.w	800843c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80082aa:	4b4f      	ldr	r3, [pc, #316]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f003 0203 	and.w	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d12c      	bne.n	8008318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c8:	3b01      	subs	r3, #1
 80082ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d123      	bne.n	8008318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082dc:	429a      	cmp	r2, r3
 80082de:	d11b      	bne.n	8008318 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d113      	bne.n	8008318 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	3b01      	subs	r3, #1
 80082fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008300:	429a      	cmp	r2, r3
 8008302:	d109      	bne.n	8008318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	3b01      	subs	r3, #1
 8008312:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008314:	429a      	cmp	r2, r3
 8008316:	d06b      	beq.n	80083f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b0c      	cmp	r3, #12
 800831c:	d062      	beq.n	80083e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800831e:	4b32      	ldr	r3, [pc, #200]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e0ac      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800832e:	4b2e      	ldr	r3, [pc, #184]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a2d      	ldr	r2, [pc, #180]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008338:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800833a:	f7fd fcb9 	bl	8005cb0 <HAL_GetTick>
 800833e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008340:	e008      	b.n	8008354 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008342:	f7fd fcb5 	bl	8005cb0 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d901      	bls.n	8008354 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e099      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008354:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f0      	bne.n	8008342 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008360:	4b21      	ldr	r3, [pc, #132]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	4b21      	ldr	r3, [pc, #132]	@ (80083ec <HAL_RCC_OscConfig+0x77c>)
 8008366:	4013      	ands	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008370:	3a01      	subs	r2, #1
 8008372:	0112      	lsls	r2, r2, #4
 8008374:	4311      	orrs	r1, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800837a:	0212      	lsls	r2, r2, #8
 800837c:	4311      	orrs	r1, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008382:	0852      	lsrs	r2, r2, #1
 8008384:	3a01      	subs	r2, #1
 8008386:	0552      	lsls	r2, r2, #21
 8008388:	4311      	orrs	r1, r2
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800838e:	0852      	lsrs	r2, r2, #1
 8008390:	3a01      	subs	r2, #1
 8008392:	0652      	lsls	r2, r2, #25
 8008394:	4311      	orrs	r1, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800839a:	06d2      	lsls	r2, r2, #27
 800839c:	430a      	orrs	r2, r1
 800839e:	4912      	ldr	r1, [pc, #72]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80083a4:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a0f      	ldr	r2, [pc, #60]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80083aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083b0:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4a0c      	ldr	r2, [pc, #48]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80083b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083bc:	f7fd fc78 	bl	8005cb0 <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c4:	f7fd fc74 	bl	8005cb0 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e058      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083d6:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <HAL_RCC_OscConfig+0x778>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f0      	beq.n	80083c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80083e2:	e050      	b.n	8008486 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e04f      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
 80083e8:	40021000 	.word	0x40021000
 80083ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083f0:	4b27      	ldr	r3, [pc, #156]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d144      	bne.n	8008486 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80083fc:	4b24      	ldr	r3, [pc, #144]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a23      	ldr	r2, [pc, #140]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 8008402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008406:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008408:	4b21      	ldr	r3, [pc, #132]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	4a20      	ldr	r2, [pc, #128]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 800840e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008414:	f7fd fc4c 	bl	8005cb0 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800841c:	f7fd fc48 	bl	8005cb0 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e02c      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800842e:	4b18      	ldr	r3, [pc, #96]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0x7ac>
 800843a:	e024      	b.n	8008486 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	2b0c      	cmp	r3, #12
 8008440:	d01f      	beq.n	8008482 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008442:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a12      	ldr	r2, [pc, #72]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 8008448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800844c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844e:	f7fd fc2f 	bl	8005cb0 <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008456:	f7fd fc2b 	bl	8005cb0 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e00f      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008468:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008474:	4b06      	ldr	r3, [pc, #24]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	4905      	ldr	r1, [pc, #20]	@ (8008490 <HAL_RCC_OscConfig+0x820>)
 800847a:	4b06      	ldr	r3, [pc, #24]	@ (8008494 <HAL_RCC_OscConfig+0x824>)
 800847c:	4013      	ands	r3, r2
 800847e:	60cb      	str	r3, [r1, #12]
 8008480:	e001      	b.n	8008486 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3720      	adds	r7, #32
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	40021000 	.word	0x40021000
 8008494:	feeefffc 	.word	0xfeeefffc

08008498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0e7      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084ac:	4b75      	ldr	r3, [pc, #468]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d910      	bls.n	80084dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ba:	4b72      	ldr	r3, [pc, #456]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f023 0207 	bic.w	r2, r3, #7
 80084c2:	4970      	ldr	r1, [pc, #448]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ca:	4b6e      	ldr	r3, [pc, #440]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d001      	beq.n	80084dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e0cf      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d010      	beq.n	800850a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	4b66      	ldr	r3, [pc, #408]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d908      	bls.n	800850a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084f8:	4b63      	ldr	r3, [pc, #396]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4960      	ldr	r1, [pc, #384]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008506:	4313      	orrs	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d04c      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	2b03      	cmp	r3, #3
 800851c:	d107      	bne.n	800852e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800851e:	4b5a      	ldr	r3, [pc, #360]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d121      	bne.n	800856e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e0a6      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d107      	bne.n	8008546 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008536:	4b54      	ldr	r3, [pc, #336]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d115      	bne.n	800856e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e09a      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d107      	bne.n	800855e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800854e:	4b4e      	ldr	r3, [pc, #312]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e08e      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800855e:	4b4a      	ldr	r3, [pc, #296]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e086      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800856e:	4b46      	ldr	r3, [pc, #280]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 0203 	bic.w	r2, r3, #3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	4943      	ldr	r1, [pc, #268]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 800857c:	4313      	orrs	r3, r2
 800857e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008580:	f7fd fb96 	bl	8005cb0 <HAL_GetTick>
 8008584:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008586:	e00a      	b.n	800859e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008588:	f7fd fb92 	bl	8005cb0 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008596:	4293      	cmp	r3, r2
 8008598:	d901      	bls.n	800859e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e06e      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859e:	4b3a      	ldr	r3, [pc, #232]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 020c 	and.w	r2, r3, #12
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d1eb      	bne.n	8008588 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	4b31      	ldr	r3, [pc, #196]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d208      	bcs.n	80085de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	492b      	ldr	r1, [pc, #172]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085de:	4b29      	ldr	r3, [pc, #164]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d210      	bcs.n	800860e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ec:	4b25      	ldr	r3, [pc, #148]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f023 0207 	bic.w	r2, r3, #7
 80085f4:	4923      	ldr	r1, [pc, #140]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085fc:	4b21      	ldr	r3, [pc, #132]	@ (8008684 <HAL_RCC_ClockConfig+0x1ec>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d001      	beq.n	800860e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e036      	b.n	800867c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	d008      	beq.n	800862c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800861a:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	4918      	ldr	r1, [pc, #96]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008628:	4313      	orrs	r3, r2
 800862a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008638:	4b13      	ldr	r3, [pc, #76]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	4910      	ldr	r1, [pc, #64]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008648:	4313      	orrs	r3, r2
 800864a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800864c:	f000 f824 	bl	8008698 <HAL_RCC_GetSysClockFreq>
 8008650:	4602      	mov	r2, r0
 8008652:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <HAL_RCC_ClockConfig+0x1f0>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	091b      	lsrs	r3, r3, #4
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	490b      	ldr	r1, [pc, #44]	@ (800868c <HAL_RCC_ClockConfig+0x1f4>)
 800865e:	5ccb      	ldrb	r3, [r1, r3]
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
 8008668:	4a09      	ldr	r2, [pc, #36]	@ (8008690 <HAL_RCC_ClockConfig+0x1f8>)
 800866a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800866c:	4b09      	ldr	r3, [pc, #36]	@ (8008694 <HAL_RCC_ClockConfig+0x1fc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f7fd facd 	bl	8005c10 <HAL_InitTick>
 8008676:	4603      	mov	r3, r0
 8008678:	72fb      	strb	r3, [r7, #11]

  return status;
 800867a:	7afb      	ldrb	r3, [r7, #11]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40022000 	.word	0x40022000
 8008688:	40021000 	.word	0x40021000
 800868c:	0800b0cc 	.word	0x0800b0cc
 8008690:	20000000 	.word	0x20000000
 8008694:	20000004 	.word	0x20000004

08008698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	@ 0x24
 800869c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	2300      	movs	r3, #0
 80086a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086a6:	4b3e      	ldr	r3, [pc, #248]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 030c 	and.w	r3, r3, #12
 80086ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086b0:	4b3b      	ldr	r3, [pc, #236]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <HAL_RCC_GetSysClockFreq+0x34>
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b0c      	cmp	r3, #12
 80086c4:	d121      	bne.n	800870a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d11e      	bne.n	800870a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80086cc:	4b34      	ldr	r3, [pc, #208]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0308 	and.w	r3, r3, #8
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d107      	bne.n	80086e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80086d8:	4b31      	ldr	r3, [pc, #196]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	e005      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80086e8:	4b2d      	ldr	r3, [pc, #180]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	091b      	lsrs	r3, r3, #4
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80086f4:	4a2b      	ldr	r2, [pc, #172]	@ (80087a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008708:	e00a      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b04      	cmp	r3, #4
 800870e:	d102      	bne.n	8008716 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008710:	4b25      	ldr	r3, [pc, #148]	@ (80087a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008712:	61bb      	str	r3, [r7, #24]
 8008714:	e004      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b08      	cmp	r3, #8
 800871a:	d101      	bne.n	8008720 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800871c:	4b23      	ldr	r3, [pc, #140]	@ (80087ac <HAL_RCC_GetSysClockFreq+0x114>)
 800871e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	2b0c      	cmp	r3, #12
 8008724:	d134      	bne.n	8008790 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008726:	4b1e      	ldr	r3, [pc, #120]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d003      	beq.n	800873e <HAL_RCC_GetSysClockFreq+0xa6>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b03      	cmp	r3, #3
 800873a:	d003      	beq.n	8008744 <HAL_RCC_GetSysClockFreq+0xac>
 800873c:	e005      	b.n	800874a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800873e:	4b1a      	ldr	r3, [pc, #104]	@ (80087a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008740:	617b      	str	r3, [r7, #20]
      break;
 8008742:	e005      	b.n	8008750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008744:	4b19      	ldr	r3, [pc, #100]	@ (80087ac <HAL_RCC_GetSysClockFreq+0x114>)
 8008746:	617b      	str	r3, [r7, #20]
      break;
 8008748:	e002      	b.n	8008750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	617b      	str	r3, [r7, #20]
      break;
 800874e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008750:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	091b      	lsrs	r3, r3, #4
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	3301      	adds	r3, #1
 800875c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800875e:	4b10      	ldr	r3, [pc, #64]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	fb03 f202 	mul.w	r2, r3, r2
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	fbb2 f3f3 	udiv	r3, r2, r3
 8008774:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008776:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	0e5b      	lsrs	r3, r3, #25
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	3301      	adds	r3, #1
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	fbb2 f3f3 	udiv	r3, r2, r3
 800878e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008790:	69bb      	ldr	r3, [r7, #24]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3724      	adds	r7, #36	@ 0x24
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40021000 	.word	0x40021000
 80087a4:	0800b0dc 	.word	0x0800b0dc
 80087a8:	00f42400 	.word	0x00f42400
 80087ac:	007a1200 	.word	0x007a1200

080087b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80087b8:	2300      	movs	r3, #0
 80087ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80087bc:	4b2a      	ldr	r3, [pc, #168]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80087c8:	f7ff f9ee 	bl	8007ba8 <HAL_PWREx_GetVoltageRange>
 80087cc:	6178      	str	r0, [r7, #20]
 80087ce:	e014      	b.n	80087fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80087d0:	4b25      	ldr	r3, [pc, #148]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d4:	4a24      	ldr	r2, [pc, #144]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087da:	6593      	str	r3, [r2, #88]	@ 0x58
 80087dc:	4b22      	ldr	r3, [pc, #136]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80087e8:	f7ff f9de 	bl	8007ba8 <HAL_PWREx_GetVoltageRange>
 80087ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80087ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008800:	d10b      	bne.n	800881a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b80      	cmp	r3, #128	@ 0x80
 8008806:	d919      	bls.n	800883c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2ba0      	cmp	r3, #160	@ 0xa0
 800880c:	d902      	bls.n	8008814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800880e:	2302      	movs	r3, #2
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	e013      	b.n	800883c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008814:	2301      	movs	r3, #1
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	e010      	b.n	800883c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b80      	cmp	r3, #128	@ 0x80
 800881e:	d902      	bls.n	8008826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008820:	2303      	movs	r3, #3
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	e00a      	b.n	800883c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b80      	cmp	r3, #128	@ 0x80
 800882a:	d102      	bne.n	8008832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800882c:	2302      	movs	r3, #2
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	e004      	b.n	800883c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b70      	cmp	r3, #112	@ 0x70
 8008836:	d101      	bne.n	800883c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008838:	2301      	movs	r3, #1
 800883a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800883c:	4b0b      	ldr	r3, [pc, #44]	@ (800886c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f023 0207 	bic.w	r2, r3, #7
 8008844:	4909      	ldr	r1, [pc, #36]	@ (800886c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4313      	orrs	r3, r2
 800884a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800884c:	4b07      	ldr	r3, [pc, #28]	@ (800886c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	429a      	cmp	r2, r3
 8008858:	d001      	beq.n	800885e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	40021000 	.word	0x40021000
 800886c:	40022000 	.word	0x40022000

08008870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008878:	2300      	movs	r3, #0
 800887a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800887c:	2300      	movs	r3, #0
 800887e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008888:	2b00      	cmp	r3, #0
 800888a:	d031      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008890:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008894:	d01a      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008896:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800889a:	d814      	bhi.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800889c:	2b00      	cmp	r3, #0
 800889e:	d009      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80088a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088a4:	d10f      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80088a6:	4b5d      	ldr	r3, [pc, #372]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	4a5c      	ldr	r2, [pc, #368]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80088b2:	e00c      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f9ce 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80088c4:	e003      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	74fb      	strb	r3, [r7, #19]
      break;
 80088ca:	e000      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80088cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ce:	7cfb      	ldrb	r3, [r7, #19]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088d4:	4b51      	ldr	r3, [pc, #324]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e2:	494e      	ldr	r1, [pc, #312]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80088ea:	e001      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ec:	7cfb      	ldrb	r3, [r7, #19]
 80088ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 809e 	beq.w	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008902:	4b46      	ldr	r3, [pc, #280]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00d      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008918:	4b40      	ldr	r3, [pc, #256]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800891a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800891c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800891e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008922:	6593      	str	r3, [r2, #88]	@ 0x58
 8008924:	4b3d      	ldr	r3, [pc, #244]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800892c:	60bb      	str	r3, [r7, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008930:	2301      	movs	r3, #1
 8008932:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008934:	4b3a      	ldr	r3, [pc, #232]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a39      	ldr	r2, [pc, #228]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800893a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800893e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008940:	f7fd f9b6 	bl	8005cb0 <HAL_GetTick>
 8008944:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008946:	e009      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008948:	f7fd f9b2 	bl	8005cb0 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d902      	bls.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	74fb      	strb	r3, [r7, #19]
        break;
 800895a:	e005      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800895c:	4b30      	ldr	r3, [pc, #192]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0ef      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008968:	7cfb      	ldrb	r3, [r7, #19]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d15a      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800896e:	4b2b      	ldr	r3, [pc, #172]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008978:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01e      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	429a      	cmp	r2, r3
 8008988:	d019      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800898a:	4b24      	ldr	r3, [pc, #144]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008994:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008996:	4b21      	ldr	r3, [pc, #132]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800899c:	4a1f      	ldr	r2, [pc, #124]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800899e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089a6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ac:	4a1b      	ldr	r2, [pc, #108]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089b6:	4a19      	ldr	r2, [pc, #100]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d016      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c8:	f7fd f972 	bl	8005cb0 <HAL_GetTick>
 80089cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ce:	e00b      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d0:	f7fd f96e 	bl	8005cb0 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089de:	4293      	cmp	r3, r2
 80089e0:	d902      	bls.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	74fb      	strb	r3, [r7, #19]
            break;
 80089e6:	e006      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089e8:	4b0c      	ldr	r3, [pc, #48]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0ec      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80089f6:	7cfb      	ldrb	r3, [r7, #19]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10b      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0a:	4904      	ldr	r1, [pc, #16]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a12:	e009      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a14:	7cfb      	ldrb	r3, [r7, #19]
 8008a16:	74bb      	strb	r3, [r7, #18]
 8008a18:	e006      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008a1a:	bf00      	nop
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7cfb      	ldrb	r3, [r7, #19]
 8008a26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a28:	7c7b      	ldrb	r3, [r7, #17]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d105      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a2e:	4b8a      	ldr	r3, [pc, #552]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a32:	4a89      	ldr	r2, [pc, #548]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a46:	4b84      	ldr	r3, [pc, #528]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4c:	f023 0203 	bic.w	r2, r3, #3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	4980      	ldr	r1, [pc, #512]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00a      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a68:	4b7b      	ldr	r3, [pc, #492]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6e:	f023 020c 	bic.w	r2, r3, #12
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a76:	4978      	ldr	r1, [pc, #480]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a8a:	4b73      	ldr	r3, [pc, #460]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	496f      	ldr	r1, [pc, #444]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aac:	4b6a      	ldr	r3, [pc, #424]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aba:	4967      	ldr	r1, [pc, #412]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ace:	4b62      	ldr	r3, [pc, #392]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008adc:	495e      	ldr	r1, [pc, #376]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008af0:	4b59      	ldr	r3, [pc, #356]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	4956      	ldr	r1, [pc, #344]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b12:	4b51      	ldr	r3, [pc, #324]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b20:	494d      	ldr	r1, [pc, #308]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d028      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b34:	4b48      	ldr	r3, [pc, #288]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	4945      	ldr	r1, [pc, #276]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b52:	d106      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b54:	4b40      	ldr	r3, [pc, #256]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	4a3f      	ldr	r2, [pc, #252]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b5e:	60d3      	str	r3, [r2, #12]
 8008b60:	e011      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b6a:	d10c      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	2101      	movs	r1, #1
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f872 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008b7c:	7cfb      	ldrb	r3, [r7, #19]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008b82:	7cfb      	ldrb	r3, [r7, #19]
 8008b84:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d028      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b92:	4b31      	ldr	r3, [pc, #196]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba0:	492d      	ldr	r1, [pc, #180]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb2:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	4a28      	ldr	r2, [pc, #160]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bbc:	60d3      	str	r3, [r2, #12]
 8008bbe:	e011      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bc8:	d10c      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f843 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008bda:	7cfb      	ldrb	r3, [r7, #19]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008be0:	7cfb      	ldrb	r3, [r7, #19]
 8008be2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01c      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bf0:	4b19      	ldr	r3, [pc, #100]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bfe:	4916      	ldr	r1, [pc, #88]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c0e:	d10c      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3304      	adds	r3, #4
 8008c14:	2102      	movs	r1, #2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f820 	bl	8008c5c <RCCEx_PLLSAI1_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c20:	7cfb      	ldrb	r3, [r7, #19]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008c26:	7cfb      	ldrb	r3, [r7, #19]
 8008c28:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00a      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c36:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c3c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c44:	4904      	ldr	r1, [pc, #16]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40021000 	.word	0x40021000

08008c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c6a:	4b74      	ldr	r3, [pc, #464]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d018      	beq.n	8008ca8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008c76:	4b71      	ldr	r3, [pc, #452]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f003 0203 	and.w	r2, r3, #3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d10d      	bne.n	8008ca2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
       ||
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	091b      	lsrs	r3, r3, #4
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d047      	beq.n	8008d32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	e044      	b.n	8008d32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d018      	beq.n	8008ce2 <RCCEx_PLLSAI1_Config+0x86>
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d825      	bhi.n	8008d00 <RCCEx_PLLSAI1_Config+0xa4>
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d002      	beq.n	8008cbe <RCCEx_PLLSAI1_Config+0x62>
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d009      	beq.n	8008cd0 <RCCEx_PLLSAI1_Config+0x74>
 8008cbc:	e020      	b.n	8008d00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d11d      	bne.n	8008d06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cce:	e01a      	b.n	8008d06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d116      	bne.n	8008d0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ce0:	e013      	b.n	8008d0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008ce2:	4b56      	ldr	r3, [pc, #344]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10f      	bne.n	8008d0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008cee:	4b53      	ldr	r3, [pc, #332]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d109      	bne.n	8008d0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cfe:	e006      	b.n	8008d0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
      break;
 8008d04:	e004      	b.n	8008d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008d16:	4b49      	ldr	r3, [pc, #292]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6819      	ldr	r1, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	4943      	ldr	r1, [pc, #268]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d17c      	bne.n	8008e32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008d38:	4b40      	ldr	r3, [pc, #256]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d44:	f7fc ffb4 	bl	8005cb0 <HAL_GetTick>
 8008d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d4a:	e009      	b.n	8008d60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d4c:	f7fc ffb0 	bl	8005cb0 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d902      	bls.n	8008d60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d5e:	e005      	b.n	8008d6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d60:	4b36      	ldr	r3, [pc, #216]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1ef      	bne.n	8008d4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d15f      	bne.n	8008e32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d110      	bne.n	8008d9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d78:	4b30      	ldr	r3, [pc, #192]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008d80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6892      	ldr	r2, [r2, #8]
 8008d88:	0211      	lsls	r1, r2, #8
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68d2      	ldr	r2, [r2, #12]
 8008d8e:	06d2      	lsls	r2, r2, #27
 8008d90:	430a      	orrs	r2, r1
 8008d92:	492a      	ldr	r1, [pc, #168]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	610b      	str	r3, [r1, #16]
 8008d98:	e027      	b.n	8008dea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d112      	bne.n	8008dc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008da0:	4b26      	ldr	r3, [pc, #152]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008da8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6892      	ldr	r2, [r2, #8]
 8008db0:	0211      	lsls	r1, r2, #8
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6912      	ldr	r2, [r2, #16]
 8008db6:	0852      	lsrs	r2, r2, #1
 8008db8:	3a01      	subs	r2, #1
 8008dba:	0552      	lsls	r2, r2, #21
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	491f      	ldr	r1, [pc, #124]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	610b      	str	r3, [r1, #16]
 8008dc4:	e011      	b.n	8008dea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008dce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6892      	ldr	r2, [r2, #8]
 8008dd6:	0211      	lsls	r1, r2, #8
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6952      	ldr	r2, [r2, #20]
 8008ddc:	0852      	lsrs	r2, r2, #1
 8008dde:	3a01      	subs	r2, #1
 8008de0:	0652      	lsls	r2, r2, #25
 8008de2:	430a      	orrs	r2, r1
 8008de4:	4915      	ldr	r1, [pc, #84]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008dea:	4b14      	ldr	r3, [pc, #80]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a13      	ldr	r2, [pc, #76]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008df0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008df4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df6:	f7fc ff5b 	bl	8005cb0 <HAL_GetTick>
 8008dfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008dfc:	e009      	b.n	8008e12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008dfe:	f7fc ff57 	bl	8005cb0 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d902      	bls.n	8008e12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e10:	e005      	b.n	8008e1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e12:	4b0a      	ldr	r3, [pc, #40]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0ef      	beq.n	8008dfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	4903      	ldr	r1, [pc, #12]	@ (8008e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40021000 	.word	0x40021000

08008e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e095      	b.n	8008f7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d108      	bne.n	8008e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e62:	d009      	beq.n	8008e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	61da      	str	r2, [r3, #28]
 8008e6a:	e005      	b.n	8008e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7fc fce4 	bl	8005860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008eb8:	d902      	bls.n	8008ec0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e002      	b.n	8008ec6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ec4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ece:	d007      	beq.n	8008ee0 <HAL_SPI_Init+0xa0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ed8:	d002      	beq.n	8008ee0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f22:	ea42 0103 	orr.w	r1, r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	f003 0204 	and.w	r2, r3, #4
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f5c:	ea42 0103 	orr.w	r1, r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b08a      	sub	sp, #40	@ 0x28
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f94:	2301      	movs	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f98:	f7fc fe8a 	bl	8005cb0 <HAL_GetTick>
 8008f9c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fa4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008fac:	887b      	ldrh	r3, [r7, #2]
 8008fae:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008fb0:	887b      	ldrh	r3, [r7, #2]
 8008fb2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fb4:	7ffb      	ldrb	r3, [r7, #31]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d00c      	beq.n	8008fd4 <HAL_SPI_TransmitReceive+0x4e>
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fc0:	d106      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x4a>
 8008fca:	7ffb      	ldrb	r3, [r7, #31]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d001      	beq.n	8008fd4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e1f3      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x60>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x60>
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e1e8      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x72>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e1e1      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b04      	cmp	r3, #4
 800900a:	d003      	beq.n	8009014 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2205      	movs	r2, #5
 8009010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	887a      	ldrh	r2, [r7, #2]
 8009024:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	887a      	ldrh	r2, [r7, #2]
 800902c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	887a      	ldrh	r2, [r7, #2]
 800903a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	887a      	ldrh	r2, [r7, #2]
 8009040:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009056:	d802      	bhi.n	800905e <HAL_SPI_TransmitReceive+0xd8>
 8009058:	8abb      	ldrh	r3, [r7, #20]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d908      	bls.n	8009070 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800906c:	605a      	str	r2, [r3, #4]
 800906e:	e007      	b.n	8009080 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800907e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908a:	2b40      	cmp	r3, #64	@ 0x40
 800908c:	d007      	beq.n	800909e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090a6:	f240 8083 	bls.w	80091b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <HAL_SPI_TransmitReceive+0x132>
 80090b2:	8afb      	ldrh	r3, [r7, #22]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d16f      	bne.n	8009198 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090bc:	881a      	ldrh	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c8:	1c9a      	adds	r2, r3, #2
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090dc:	e05c      	b.n	8009198 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d11b      	bne.n	8009124 <HAL_SPI_TransmitReceive+0x19e>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d016      	beq.n	8009124 <HAL_SPI_TransmitReceive+0x19e>
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d113      	bne.n	8009124 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009100:	881a      	ldrh	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910c:	1c9a      	adds	r2, r3, #2
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b01      	cmp	r3, #1
 8009130:	d11c      	bne.n	800916c <HAL_SPI_TransmitReceive+0x1e6>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d016      	beq.n	800916c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009148:	b292      	uxth	r2, r2
 800914a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009150:	1c9a      	adds	r2, r3, #2
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009168:	2301      	movs	r3, #1
 800916a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800916c:	f7fc fda0 	bl	8005cb0 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009178:	429a      	cmp	r2, r3
 800917a:	d80d      	bhi.n	8009198 <HAL_SPI_TransmitReceive+0x212>
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009182:	d009      	beq.n	8009198 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e111      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d19d      	bne.n	80090de <HAL_SPI_TransmitReceive+0x158>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d197      	bne.n	80090de <HAL_SPI_TransmitReceive+0x158>
 80091ae:	e0e5      	b.n	800937c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <HAL_SPI_TransmitReceive+0x23a>
 80091b8:	8afb      	ldrh	r3, [r7, #22]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	f040 80d1 	bne.w	8009362 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d912      	bls.n	80091f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	881a      	ldrh	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	1c9a      	adds	r2, r3, #2
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	3b02      	subs	r3, #2
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091ee:	e0b8      	b.n	8009362 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	7812      	ldrb	r2, [r2, #0]
 80091fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009216:	e0a4      	b.n	8009362 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b02      	cmp	r3, #2
 8009224:	d134      	bne.n	8009290 <HAL_SPI_TransmitReceive+0x30a>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800922a:	b29b      	uxth	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d02f      	beq.n	8009290 <HAL_SPI_TransmitReceive+0x30a>
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	2b01      	cmp	r3, #1
 8009234:	d12c      	bne.n	8009290 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b01      	cmp	r3, #1
 800923e:	d912      	bls.n	8009266 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009244:	881a      	ldrh	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	1c9a      	adds	r2, r3, #2
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800925a:	b29b      	uxth	r3, r3
 800925c:	3b02      	subs	r3, #2
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009264:	e012      	b.n	800928c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b01      	cmp	r3, #1
 800929c:	d148      	bne.n	8009330 <HAL_SPI_TransmitReceive+0x3aa>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d042      	beq.n	8009330 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d923      	bls.n	80092fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c0:	b292      	uxth	r2, r2
 80092c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c8:	1c9a      	adds	r2, r3, #2
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b02      	subs	r3, #2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d81f      	bhi.n	800932c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092fa:	605a      	str	r2, [r3, #4]
 80092fc:	e016      	b.n	800932c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f103 020c 	add.w	r2, r3, #12
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800932c:	2301      	movs	r3, #1
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009330:	f7fc fcbe 	bl	8005cb0 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933c:	429a      	cmp	r2, r3
 800933e:	d803      	bhi.n	8009348 <HAL_SPI_TransmitReceive+0x3c2>
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d102      	bne.n	800934e <HAL_SPI_TransmitReceive+0x3c8>
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e02c      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	f47f af55 	bne.w	8009218 <HAL_SPI_TransmitReceive+0x292>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009374:	b29b      	uxth	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	f47f af4e 	bne.w	8009218 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800937c:	6a3a      	ldr	r2, [r7, #32]
 800937e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fa51 	bl	8009828 <SPI_EndRxTxTransaction>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d008      	beq.n	800939e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2220      	movs	r2, #32
 8009390:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e00e      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80093ba:	2300      	movs	r3, #0
  }
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3728      	adds	r7, #40	@ 0x28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10e      	bne.n	8009404 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	4798      	blx	r3
    return;
 8009402:	e0ce      	b.n	80095a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d009      	beq.n	8009422 <HAL_SPI_IRQHandler+0x5e>
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
    return;
 8009420:	e0bf      	b.n	80095a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <HAL_SPI_IRQHandler+0x7e>
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009432:	2b00      	cmp	r3, #0
 8009434:	d105      	bne.n	8009442 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80b0 	beq.w	80095a2 <HAL_SPI_IRQHandler+0x1de>
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 80aa 	beq.w	80095a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d023      	beq.n	80094a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b03      	cmp	r3, #3
 8009462:	d011      	beq.n	8009488 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009468:	f043 0204 	orr.w	r2, r3, #4
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	e00b      	b.n	80094a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009488:	2300      	movs	r3, #0
 800948a:	613b      	str	r3, [r7, #16]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	613b      	str	r3, [r7, #16]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	693b      	ldr	r3, [r7, #16]
        return;
 800949e:	e080      	b.n	80095a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ae:	f043 0201 	orr.w	r2, r3, #1
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00c      	beq.n	80094f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e2:	f043 0208 	orr.w	r2, r3, #8
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094ea:	2300      	movs	r3, #0
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	60bb      	str	r3, [r7, #8]
 80094f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d04f      	beq.n	80095a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800950e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <HAL_SPI_IRQHandler+0x168>
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d034      	beq.n	8009596 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0203 	bic.w	r2, r2, #3
 800953a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009540:	2b00      	cmp	r3, #0
 8009542:	d011      	beq.n	8009568 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009548:	4a17      	ldr	r2, [pc, #92]	@ (80095a8 <HAL_SPI_IRQHandler+0x1e4>)
 800954a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe f81c 	bl	800758e <HAL_DMA_Abort_IT>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d005      	beq.n	8009568 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009560:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956c:	2b00      	cmp	r3, #0
 800956e:	d016      	beq.n	800959e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009574:	4a0c      	ldr	r2, [pc, #48]	@ (80095a8 <HAL_SPI_IRQHandler+0x1e4>)
 8009576:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe f806 	bl	800758e <HAL_DMA_Abort_IT>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00a      	beq.n	800959e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800958c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009594:	e003      	b.n	800959e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f808 	bl	80095ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800959c:	e000      	b.n	80095a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800959e:	bf00      	nop
    return;
 80095a0:	bf00      	nop
  }
}
 80095a2:	3720      	adds	r7, #32
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	080095c1 	.word	0x080095c1

080095ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7ff ffe5 	bl	80095ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b088      	sub	sp, #32
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80095fc:	f7fc fb58 	bl	8005cb0 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4413      	add	r3, r2
 800960a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800960c:	f7fc fb50 	bl	8005cb0 <HAL_GetTick>
 8009610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009612:	4b39      	ldr	r3, [pc, #228]	@ (80096f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	015b      	lsls	r3, r3, #5
 8009618:	0d1b      	lsrs	r3, r3, #20
 800961a:	69fa      	ldr	r2, [r7, #28]
 800961c:	fb02 f303 	mul.w	r3, r2, r3
 8009620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009622:	e054      	b.n	80096ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d050      	beq.n	80096ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800962c:	f7fc fb40 	bl	8005cb0 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	429a      	cmp	r2, r3
 800963a:	d902      	bls.n	8009642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d13d      	bne.n	80096be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800965a:	d111      	bne.n	8009680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009664:	d004      	beq.n	8009670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800966e:	d107      	bne.n	8009680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800967e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009688:	d10f      	bne.n	80096aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e017      	b.n	80096ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4013      	ands	r3, r2
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	bf0c      	ite	eq
 80096de:	2301      	moveq	r3, #1
 80096e0:	2300      	movne	r3, #0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	461a      	mov	r2, r3
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d19b      	bne.n	8009624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000000 	.word	0x20000000

080096fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	@ 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800970e:	f7fc facf 	bl	8005cb0 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	4413      	add	r3, r2
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800971e:	f7fc fac7 	bl	8005cb0 <HAL_GetTick>
 8009722:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	330c      	adds	r3, #12
 800972a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800972c:	4b3d      	ldr	r3, [pc, #244]	@ (8009824 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	00da      	lsls	r2, r3, #3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	0d1b      	lsrs	r3, r3, #20
 800973c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800973e:	fb02 f303 	mul.w	r3, r2, r3
 8009742:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009744:	e060      	b.n	8009808 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800974c:	d107      	bne.n	800975e <SPI_WaitFifoStateUntilTimeout+0x62>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d104      	bne.n	800975e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800975c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d050      	beq.n	8009808 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009766:	f7fc faa3 	bl	8005cb0 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009772:	429a      	cmp	r2, r3
 8009774:	d902      	bls.n	800977c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	d13d      	bne.n	80097f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800978a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009794:	d111      	bne.n	80097ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800979e:	d004      	beq.n	80097aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097a8:	d107      	bne.n	80097ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097c2:	d10f      	bne.n	80097e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e010      	b.n	800981a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	3b01      	subs	r3, #1
 8009806:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4013      	ands	r3, r2
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d196      	bne.n	8009746 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3728      	adds	r7, #40	@ 0x28
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000000 	.word	0x20000000

08009828 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af02      	add	r7, sp, #8
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2200      	movs	r2, #0
 800983c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff ff5b 	bl	80096fc <SPI_WaitFifoStateUntilTimeout>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d007      	beq.n	800985c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009850:	f043 0220 	orr.w	r2, r3, #32
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e027      	b.n	80098ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	2180      	movs	r1, #128	@ 0x80
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff fec0 	bl	80095ec <SPI_WaitFlagStateUntilTimeout>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d007      	beq.n	8009882 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009876:	f043 0220 	orr.w	r2, r3, #32
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e014      	b.n	80098ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2200      	movs	r2, #0
 800988a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7ff ff34 	bl	80096fc <SPI_WaitFifoStateUntilTimeout>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d007      	beq.n	80098aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800989e:	f043 0220 	orr.w	r2, r3, #32
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e000      	b.n	80098ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e049      	b.n	800995a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d106      	bne.n	80098e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7fc f914 	bl	8005b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3304      	adds	r3, #4
 80098f0:	4619      	mov	r1, r3
 80098f2:	4610      	mov	r0, r2
 80098f4:	f000 f9ba 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	d001      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e03b      	b.n	80099f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0201 	orr.w	r2, r2, #1
 8009992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a19      	ldr	r2, [pc, #100]	@ (8009a00 <HAL_TIM_Base_Start_IT+0x9c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d009      	beq.n	80099b2 <HAL_TIM_Base_Start_IT+0x4e>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099a6:	d004      	beq.n	80099b2 <HAL_TIM_Base_Start_IT+0x4e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <HAL_TIM_Base_Start_IT+0xa0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d115      	bne.n	80099de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	4b13      	ldr	r3, [pc, #76]	@ (8009a08 <HAL_TIM_Base_Start_IT+0xa4>)
 80099ba:	4013      	ands	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b06      	cmp	r3, #6
 80099c2:	d015      	beq.n	80099f0 <HAL_TIM_Base_Start_IT+0x8c>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ca:	d011      	beq.n	80099f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099dc:	e008      	b.n	80099f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0201 	orr.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e000      	b.n	80099f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	40012c00 	.word	0x40012c00
 8009a04:	40014000 	.word	0x40014000
 8009a08:	00010007 	.word	0x00010007

08009a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d020      	beq.n	8009a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01b      	beq.n	8009a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0202 	mvn.w	r2, #2
 8009a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f8e9 	bl	8009c2e <HAL_TIM_IC_CaptureCallback>
 8009a5c:	e005      	b.n	8009a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f8db 	bl	8009c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f8ec 	bl	8009c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d020      	beq.n	8009abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01b      	beq.n	8009abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f06f 0204 	mvn.w	r2, #4
 8009a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2202      	movs	r2, #2
 8009a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f8c3 	bl	8009c2e <HAL_TIM_IC_CaptureCallback>
 8009aa8:	e005      	b.n	8009ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f8b5 	bl	8009c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f8c6 	bl	8009c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f003 0308 	and.w	r3, r3, #8
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d020      	beq.n	8009b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f003 0308 	and.w	r3, r3, #8
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d01b      	beq.n	8009b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f06f 0208 	mvn.w	r2, #8
 8009ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2204      	movs	r2, #4
 8009ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f89d 	bl	8009c2e <HAL_TIM_IC_CaptureCallback>
 8009af4:	e005      	b.n	8009b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f88f 	bl	8009c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8a0 	bl	8009c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f003 0310 	and.w	r3, r3, #16
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d020      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0310 	and.w	r3, r3, #16
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01b      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f06f 0210 	mvn.w	r2, #16
 8009b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2208      	movs	r2, #8
 8009b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f877 	bl	8009c2e <HAL_TIM_IC_CaptureCallback>
 8009b40:	e005      	b.n	8009b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f869 	bl	8009c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f87a 	bl	8009c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00c      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d007      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0201 	mvn.w	r2, #1
 8009b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7f7 fcb0 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d104      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00c      	beq.n	8009ba6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f943 	bl	8009e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00c      	beq.n	8009bca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f93b 	bl	8009e40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00c      	beq.n	8009bee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d007      	beq.n	8009bee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f834 	bl	8009c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00c      	beq.n	8009c12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d007      	beq.n	8009c12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f06f 0220 	mvn.w	r2, #32
 8009c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f903 	bl	8009e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c12:	bf00      	nop
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c4a:	bf00      	nop
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a30      	ldr	r2, [pc, #192]	@ (8009d40 <TIM_Base_SetConfig+0xd4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d003      	beq.n	8009c8c <TIM_Base_SetConfig+0x20>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c8a:	d108      	bne.n	8009c9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a27      	ldr	r2, [pc, #156]	@ (8009d40 <TIM_Base_SetConfig+0xd4>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00b      	beq.n	8009cbe <TIM_Base_SetConfig+0x52>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cac:	d007      	beq.n	8009cbe <TIM_Base_SetConfig+0x52>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a24      	ldr	r2, [pc, #144]	@ (8009d44 <TIM_Base_SetConfig+0xd8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d003      	beq.n	8009cbe <TIM_Base_SetConfig+0x52>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a23      	ldr	r2, [pc, #140]	@ (8009d48 <TIM_Base_SetConfig+0xdc>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d108      	bne.n	8009cd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a12      	ldr	r2, [pc, #72]	@ (8009d40 <TIM_Base_SetConfig+0xd4>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d007      	beq.n	8009d0c <TIM_Base_SetConfig+0xa0>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a11      	ldr	r2, [pc, #68]	@ (8009d44 <TIM_Base_SetConfig+0xd8>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <TIM_Base_SetConfig+0xa0>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a10      	ldr	r2, [pc, #64]	@ (8009d48 <TIM_Base_SetConfig+0xdc>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d103      	bne.n	8009d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d105      	bne.n	8009d32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f023 0201 	bic.w	r2, r3, #1
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	611a      	str	r2, [r3, #16]
  }
}
 8009d32:	bf00      	nop
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	40012c00 	.word	0x40012c00
 8009d44:	40014000 	.word	0x40014000
 8009d48:	40014400 	.word	0x40014400

08009d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e04f      	b.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a21      	ldr	r2, [pc, #132]	@ (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d108      	bne.n	8009da0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a14      	ldr	r2, [pc, #80]	@ (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d009      	beq.n	8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dcc:	d004      	beq.n	8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a10      	ldr	r2, [pc, #64]	@ (8009e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d10c      	bne.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	40012c00 	.word	0x40012c00
 8009e14:	40014000 	.word	0x40014000

08009e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <memset>:
 8009e54:	4402      	add	r2, r0
 8009e56:	4603      	mov	r3, r0
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d100      	bne.n	8009e5e <memset+0xa>
 8009e5c:	4770      	bx	lr
 8009e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e62:	e7f9      	b.n	8009e58 <memset+0x4>

08009e64 <__libc_init_array>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	4d0d      	ldr	r5, [pc, #52]	@ (8009e9c <__libc_init_array+0x38>)
 8009e68:	4c0d      	ldr	r4, [pc, #52]	@ (8009ea0 <__libc_init_array+0x3c>)
 8009e6a:	1b64      	subs	r4, r4, r5
 8009e6c:	10a4      	asrs	r4, r4, #2
 8009e6e:	2600      	movs	r6, #0
 8009e70:	42a6      	cmp	r6, r4
 8009e72:	d109      	bne.n	8009e88 <__libc_init_array+0x24>
 8009e74:	4d0b      	ldr	r5, [pc, #44]	@ (8009ea4 <__libc_init_array+0x40>)
 8009e76:	4c0c      	ldr	r4, [pc, #48]	@ (8009ea8 <__libc_init_array+0x44>)
 8009e78:	f000 f826 	bl	8009ec8 <_init>
 8009e7c:	1b64      	subs	r4, r4, r5
 8009e7e:	10a4      	asrs	r4, r4, #2
 8009e80:	2600      	movs	r6, #0
 8009e82:	42a6      	cmp	r6, r4
 8009e84:	d105      	bne.n	8009e92 <__libc_init_array+0x2e>
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8c:	4798      	blx	r3
 8009e8e:	3601      	adds	r6, #1
 8009e90:	e7ee      	b.n	8009e70 <__libc_init_array+0xc>
 8009e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e96:	4798      	blx	r3
 8009e98:	3601      	adds	r6, #1
 8009e9a:	e7f2      	b.n	8009e82 <__libc_init_array+0x1e>
 8009e9c:	0800b114 	.word	0x0800b114
 8009ea0:	0800b114 	.word	0x0800b114
 8009ea4:	0800b114 	.word	0x0800b114
 8009ea8:	0800b118 	.word	0x0800b118

08009eac <memcpy>:
 8009eac:	440a      	add	r2, r1
 8009eae:	4291      	cmp	r1, r2
 8009eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eb4:	d100      	bne.n	8009eb8 <memcpy+0xc>
 8009eb6:	4770      	bx	lr
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec2:	4291      	cmp	r1, r2
 8009ec4:	d1f9      	bne.n	8009eba <memcpy+0xe>
 8009ec6:	bd10      	pop	{r4, pc}

08009ec8 <_init>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr

08009ed4 <_fini>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	bf00      	nop
 8009ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eda:	bc08      	pop	{r3}
 8009edc:	469e      	mov	lr, r3
 8009ede:	4770      	bx	lr
