
ProjetIOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000177c  0800eea8  0800eea8  0000fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010624  08010624  0001207c  2**0
                  CONTENTS
  4 .ARM          00000008  08010624  08010624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801062c  0801062c  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801062c  0801062c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010630  08010630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010634  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  2000007c  080106b0  0001207c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  080106b0  0001275c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f690  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e8  00000000  00000000  0003173c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  00036028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000172e  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002672d  00000000  00000000  0003952e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002458f  00000000  00000000  0005fc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e310b  00000000  00000000  000841ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001672f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000887c  00000000  00000000  00167338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee90 	.word	0x0800ee90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800ee90 	.word	0x0800ee90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9b5 	b.w	8000e38 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b96a 	b.w	8000e38 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	460c      	mov	r4, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14e      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b88:	4694      	mov	ip, r2
 8000b8a:	458c      	cmp	ip, r1
 8000b8c:	4686      	mov	lr, r0
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	d962      	bls.n	8000c5a <__udivmoddi4+0xde>
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000baa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bae:	fa1f f68c 	uxth.w	r6, ip
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	fb07 1114 	mls	r1, r7, r4, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb04 f106 	mul.w	r1, r4, r6
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd2:	f080 8112 	bcs.w	8000dfa <__udivmoddi4+0x27e>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 810f 	bls.w	8000dfa <__udivmoddi4+0x27e>
 8000bdc:	3c02      	subs	r4, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bea:	fb07 1110 	mls	r1, r7, r0, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb00 f606 	mul.w	r6, r0, r6
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x94>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c02:	f080 80fc 	bcs.w	8000dfe <__udivmoddi4+0x282>
 8000c06:	429e      	cmp	r6, r3
 8000c08:	f240 80f9 	bls.w	8000dfe <__udivmoddi4+0x282>
 8000c0c:	4463      	add	r3, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa6>
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xba>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb4>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x150>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xcc>
 8000c42:	4290      	cmp	r0, r2
 8000c44:	f0c0 80f0 	bcc.w	8000e28 <__udivmoddi4+0x2ac>
 8000c48:	1a86      	subs	r6, r0, r2
 8000c4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d0e6      	beq.n	8000c22 <__udivmoddi4+0xa6>
 8000c54:	e9c5 6300 	strd	r6, r3, [r5]
 8000c58:	e7e3      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x204>
 8000c60:	eba1 040c 	sub.w	r4, r1, ip
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa1f f78c 	uxth.w	r7, ip
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb07 f006 	mul.w	r0, r7, r6
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x11c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x11a>
 8000c90:	4298      	cmp	r0, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c96:	4626      	mov	r6, r4
 8000c98:	1a1c      	subs	r4, r3, r0
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb00 f707 	mul.w	r7, r0, r7
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x148>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x146>
 8000cbc:	429f      	cmp	r7, r3
 8000cbe:	f200 80b0 	bhi.w	8000e22 <__udivmoddi4+0x2a6>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	1bdb      	subs	r3, r3, r7
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x9c>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce0:	ea43 030c 	orr.w	r3, r3, ip
 8000ce4:	40f4      	lsrs	r4, r6
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	0c38      	lsrs	r0, r7, #16
 8000cec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d00:	fb0e f90c 	mul.w	r9, lr, ip
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x1a6>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d12:	f080 8084 	bcs.w	8000e1e <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8081 	bls.w	8000e1e <__udivmoddi4+0x2a2>
 8000d1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	eba4 0409 	sub.w	r4, r4, r9
 8000d26:	fa1f f983 	uxth.w	r9, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x1d2>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d44:	d267      	bcs.n	8000e16 <__udivmoddi4+0x29a>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0x29a>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d52:	fba0 9302 	umull	r9, r3, r0, r2
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	46ce      	mov	lr, r9
 8000d5e:	469c      	mov	ip, r3
 8000d60:	d351      	bcc.n	8000e06 <__udivmoddi4+0x28a>
 8000d62:	d04e      	beq.n	8000e02 <__udivmoddi4+0x286>
 8000d64:	b155      	cbz	r5, 8000d7c <__udivmoddi4+0x200>
 8000d66:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	40cb      	lsrs	r3, r1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e750      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f103 	lsr.w	r1, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d9c:	fa1f f78c 	uxth.w	r7, ip
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3110 	mls	r1, r8, r0, r3
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f107 	mul.w	r1, r0, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x24c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dbe:	d22c      	bcs.n	8000e1a <__udivmoddi4+0x29e>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d92a      	bls.n	8000e1a <__udivmoddi4+0x29e>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb01 f307 	mul.w	r3, r1, r7
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x276>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de8:	d213      	bcs.n	8000e12 <__udivmoddi4+0x296>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d911      	bls.n	8000e12 <__udivmoddi4+0x296>
 8000dee:	3902      	subs	r1, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df8:	e739      	b.n	8000c6e <__udivmoddi4+0xf2>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	e6f0      	b.n	8000be0 <__udivmoddi4+0x64>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e706      	b.n	8000c10 <__udivmoddi4+0x94>
 8000e02:	45c8      	cmp	r8, r9
 8000e04:	d2ae      	bcs.n	8000d64 <__udivmoddi4+0x1e8>
 8000e06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7a8      	b.n	8000d64 <__udivmoddi4+0x1e8>
 8000e12:	4631      	mov	r1, r6
 8000e14:	e7ed      	b.n	8000df2 <__udivmoddi4+0x276>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e799      	b.n	8000d4e <__udivmoddi4+0x1d2>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e7d4      	b.n	8000dc8 <__udivmoddi4+0x24c>
 8000e1e:	46d6      	mov	lr, sl
 8000e20:	e77f      	b.n	8000d22 <__udivmoddi4+0x1a6>
 8000e22:	4463      	add	r3, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e74d      	b.n	8000cc4 <__udivmoddi4+0x148>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e70f      	b.n	8000c50 <__udivmoddi4+0xd4>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	e730      	b.n	8000c98 <__udivmoddi4+0x11c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e54:	4a29      	ldr	r2, [pc, #164]	@ (8000efc <MX_ADC1_Init+0xc0>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eb4:	f008 fba2 	bl	80095fc <HAL_ADC_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000ebe:	f004 fc33 	bl	8005728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_ADC1_Init+0xc4>)
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ece:	237f      	movs	r3, #127	@ 0x7f
 8000ed0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ee0:	f008 ff58 	bl	8009d94 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eea:	f004 fc1d 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000098 	.word	0x20000098
 8000efc:	50040000 	.word	0x50040000
 8000f00:	3ef08000 	.word	0x3ef08000

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	@ 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2254      	movs	r2, #84	@ 0x54
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00d f942 	bl	800e1ae <memset>
  if(adcHandle->Instance==ADC1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <HAL_ADC_MspInit+0xd0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d14a      	bne.n	8000fca <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00b fcfc 	bl	800c960 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000f6e:	f004 fbdb 	bl	8005728 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <HAL_ADC_MspInit+0xd8>)
 8000fb6:	f009 fdc5 	bl	800ab44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2012      	movs	r0, #18
 8000fc0:	f009 fd49 	bl	800aa56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000fc4:	2012      	movs	r0, #18
 8000fc6:	f009 fd62 	bl	800aa8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3778      	adds	r7, #120	@ 0x78
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	50040000 	.word	0x50040000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e021      	b.n	8001030 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000fec:	4a37      	ldr	r2, [pc, #220]	@ (80010cc <aesroundkeys+0xec>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	061a      	lsls	r2, r3, #24
 8000ff6:	4935      	ldr	r1, [pc, #212]	@ (80010cc <aesroundkeys+0xec>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001004:	431a      	orrs	r2, r3
 8001006:	4931      	ldr	r1, [pc, #196]	@ (80010cc <aesroundkeys+0xec>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001014:	431a      	orrs	r2, r3
 8001016:	492d      	ldr	r1, [pc, #180]	@ (80010cc <aesroundkeys+0xec>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800101e:	0e1b      	lsrs	r3, r3, #24
 8001020:	431a      	orrs	r2, r3
 8001022:	492a      	ldr	r1, [pc, #168]	@ (80010cc <aesroundkeys+0xec>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b03      	cmp	r3, #3
 8001034:	ddda      	ble.n	8000fec <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8001036:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <aesroundkeys+0xec>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800103c:	e03c      	b.n	80010b8 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d127      	bne.n	8001098 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <aesroundkeys+0xf0>)
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <aesroundkeys+0xf0>)
 8001060:	5c5b      	ldrb	r3, [r3, r1]
 8001062:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001064:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <aesroundkeys+0xf0>)
 800106e:	5c5b      	ldrb	r3, [r3, r1]
 8001070:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8001072:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	0e12      	lsrs	r2, r2, #24
 8001078:	4915      	ldr	r1, [pc, #84]	@ (80010d0 <aesroundkeys+0xf0>)
 800107a:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 800107c:	4053      	eors	r3, r2
 800107e:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b04      	subs	r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	da00      	bge.n	800108a <aesroundkeys+0xaa>
 8001088:	3303      	adds	r3, #3
 800108a:	109b      	asrs	r3, r3, #2
 800108c:	4619      	mov	r1, r3
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <aesroundkeys+0xf4>)
 8001090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001094:	4053      	eors	r3, r2
 8001096:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b04      	subs	r3, #4
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <aesroundkeys+0xec>)
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4053      	eors	r3, r2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4908      	ldr	r1, [pc, #32]	@ (80010cc <aesroundkeys+0xec>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80010bc:	ddbf      	ble.n	800103e <aesroundkeys+0x5e>
    }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	2000010c 	.word	0x2000010c
 80010d0:	0800f32c 	.word	0x0800f32c
 80010d4:	0800f304 	.word	0x0800f304

080010d8 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	@ 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 80010e8:	f7ff ff7a 	bl	8000fe0 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <os_aes+0x188>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	4b58      	ldr	r3, [pc, #352]	@ (8001260 <os_aes+0x188>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <os_aes+0x188>)
 8001102:	6093      	str	r3, [r2, #8]
 8001104:	4b56      	ldr	r3, [pc, #344]	@ (8001260 <os_aes+0x188>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a55      	ldr	r2, [pc, #340]	@ (8001260 <os_aes+0x188>)
 800110a:	6053      	str	r3, [r2, #4]
 800110c:	4b54      	ldr	r3, [pc, #336]	@ (8001260 <os_aes+0x188>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a53      	ldr	r2, [pc, #332]	@ (8001260 <os_aes+0x188>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	f000 bc97 	b.w	8001a46 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 8001118:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <os_aes+0x188>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	061a      	lsls	r2, r3, #24
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <os_aes+0x188>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001128:	431a      	orrs	r2, r3
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <os_aes+0x188>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001134:	431a      	orrs	r2, r3
 8001136:	4b4a      	ldr	r3, [pc, #296]	@ (8001260 <os_aes+0x188>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0e1b      	lsrs	r3, r3, #24
 800113c:	4313      	orrs	r3, r2
 800113e:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <os_aes+0x188>)
 8001140:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 8001142:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <os_aes+0x188>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	4b45      	ldr	r3, [pc, #276]	@ (8001260 <os_aes+0x188>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001152:	431a      	orrs	r2, r3
 8001154:	4b42      	ldr	r3, [pc, #264]	@ (8001260 <os_aes+0x188>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800115e:	431a      	orrs	r2, r3
 8001160:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <os_aes+0x188>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	0e1b      	lsrs	r3, r3, #24
 8001166:	4313      	orrs	r3, r2
 8001168:	4a3d      	ldr	r2, [pc, #244]	@ (8001260 <os_aes+0x188>)
 800116a:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <os_aes+0x188>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	061a      	lsls	r2, r3, #24
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <os_aes+0x188>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800117c:	431a      	orrs	r2, r3
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <os_aes+0x188>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001188:	431a      	orrs	r2, r3
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <os_aes+0x188>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	0e1b      	lsrs	r3, r3, #24
 8001190:	4313      	orrs	r3, r2
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <os_aes+0x188>)
 8001194:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <os_aes+0x188>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	061a      	lsls	r2, r3, #24
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <os_aes+0x188>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80011a6:	431a      	orrs	r2, r3
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <os_aes+0x188>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80011b2:	431a      	orrs	r2, r3
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <os_aes+0x188>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0e1b      	lsrs	r3, r3, #24
 80011ba:	4313      	orrs	r3, r2
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <os_aes+0x188>)
 80011be:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 80011c0:	f000 bc41 	b.w	8001a46 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <os_aes+0x10a>
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d011      	beq.n	80011fc <os_aes+0x124>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <os_aes+0x124>
                a0 = AESAUX[0];
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <os_aes+0x188>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <os_aes+0x188>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <os_aes+0x188>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <os_aes+0x188>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	e062      	b.n	80012c2 <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d016      	beq.n	8001234 <os_aes+0x15c>
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	2b10      	cmp	r3, #16
 800120a:	d813      	bhi.n	8001234 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d101      	bne.n	8001226 <os_aes+0x14e>
 8001222:	2210      	movs	r2, #16
 8001224:	e000      	b.n	8001228 <os_aes+0x150>
 8001226:	2220      	movs	r2, #32
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4313      	orrs	r3, r2
 800122e:	b25b      	sxtb	r3, r3
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e046      	b.n	80012c2 <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 8001234:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e026      	b.n	800128a <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	021a      	lsls	r2, r3, #8
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	69f9      	ldr	r1, [r7, #28]
 8001244:	4299      	cmp	r1, r3
 8001246:	d204      	bcs.n	8001252 <os_aes+0x17a>
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	440b      	add	r3, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	e009      	b.n	8001266 <os_aes+0x18e>
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	69f9      	ldr	r1, [r7, #28]
 8001256:	4299      	cmp	r1, r3
 8001258:	d104      	bne.n	8001264 <os_aes+0x18c>
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	e003      	b.n	8001266 <os_aes+0x18e>
 800125e:	bf00      	nop
 8001260:	200000fc 	.word	0x200000fc
 8001264:	2300      	movs	r3, #0
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d107      	bne.n	8001284 <os_aes+0x1ac>
                        a0 = a1;
 8001274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d9d5      	bls.n	800123c <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d013      	beq.n	80012c2 <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 800129a:	4ba0      	ldr	r3, [pc, #640]	@ (800151c <os_aes+0x444>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012a0:	4053      	eors	r3, r2
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 80012a4:	4b9d      	ldr	r3, [pc, #628]	@ (800151c <os_aes+0x444>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012aa:	4053      	eors	r3, r2
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 80012ae:	4b9b      	ldr	r3, [pc, #620]	@ (800151c <os_aes+0x444>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b4:	4053      	eors	r3, r2
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 80012b8:	4b98      	ldr	r3, [pc, #608]	@ (800151c <os_aes+0x444>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	4053      	eors	r3, r2
 80012c0:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <os_aes+0x448>)
 80012c4:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3380      	adds	r3, #128	@ 0x80
 80012ca:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012d2:	4053      	eors	r3, r2
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3304      	adds	r3, #4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	4053      	eors	r3, r2
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ea:	4053      	eors	r3, r2
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	330c      	adds	r3, #12
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a3a      	ldr	r2, [r7, #32]
 80012f6:	4053      	eors	r3, r2
 80012f8:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 8001312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <os_aes+0x44c>)
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4053      	eors	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	4b7e      	ldr	r3, [pc, #504]	@ (8001528 <os_aes+0x450>)
 800132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4053      	eors	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4b7a      	ldr	r3, [pc, #488]	@ (800152c <os_aes+0x454>)
 8001342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	4053      	eors	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134e:	0e1b      	lsrs	r3, r3, #24
 8001350:	4a77      	ldr	r2, [pc, #476]	@ (8001530 <os_aes+0x458>)
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4053      	eors	r3, r2
 800135a:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <os_aes+0x44c>)
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4053      	eors	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <os_aes+0x450>)
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	4053      	eors	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b68      	ldr	r3, [pc, #416]	@ (800152c <os_aes+0x454>)
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	4053      	eors	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001398:	0e1b      	lsrs	r3, r3, #24
 800139a:	4a65      	ldr	r2, [pc, #404]	@ (8001530 <os_aes+0x458>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4053      	eors	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <os_aes+0x44c>)
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4053      	eors	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <os_aes+0x450>)
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4053      	eors	r3, r2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b55      	ldr	r3, [pc, #340]	@ (800152c <os_aes+0x454>)
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4053      	eors	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	0e1b      	lsrs	r3, r3, #24
 80013e4:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <os_aes+0x458>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4053      	eors	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <os_aes+0x44c>)
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	4053      	eors	r3, r2
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <os_aes+0x450>)
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4053      	eors	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4b43      	ldr	r3, [pc, #268]	@ (800152c <os_aes+0x454>)
 8001420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4053      	eors	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	0e1b      	lsrs	r3, r3, #24
 800142e:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <os_aes+0x458>)
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	4053      	eors	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <os_aes+0x44c>)
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001460:	4053      	eors	r3, r2
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <os_aes+0x450>)
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001474:	4053      	eors	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <os_aes+0x454>)
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	6a3a      	ldr	r2, [r7, #32]
 8001488:	4053      	eors	r3, r2
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	0e1b      	lsrs	r3, r3, #24
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <os_aes+0x458>)
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001498:	4053      	eors	r3, r2
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <os_aes+0x44c>)
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014aa:	4053      	eors	r3, r2
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <os_aes+0x450>)
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	4053      	eors	r3, r2
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <os_aes+0x454>)
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014d2:	4053      	eors	r3, r2
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	0e1b      	lsrs	r3, r3, #24
 80014da:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <os_aes+0x458>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e2:	4053      	eors	r3, r2
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <os_aes+0x44c>)
 80014ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f2:	6a3a      	ldr	r2, [r7, #32]
 80014f4:	4053      	eors	r3, r2
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <os_aes+0x450>)
 8001502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001508:	4053      	eors	r3, r2
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	0c1b      	lsrs	r3, r3, #16
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <os_aes+0x454>)
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	e00b      	b.n	8001534 <os_aes+0x45c>
 800151c:	200000fc 	.word	0x200000fc
 8001520:	2000010c 	.word	0x2000010c
 8001524:	0801002c 	.word	0x0801002c
 8001528:	0800fc2c 	.word	0x0800fc2c
 800152c:	0800f82c 	.word	0x0800f82c
 8001530:	0800f42c 	.word	0x0800f42c
 8001534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001536:	4053      	eors	r3, r2
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0e1b      	lsrs	r3, r3, #24
 800153e:	4aa1      	ldr	r2, [pc, #644]	@ (80017c4 <os_aes+0x6ec>)
 8001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001546:	4053      	eors	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	4b9d      	ldr	r3, [pc, #628]	@ (80017c8 <os_aes+0x6f0>)
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001558:	4053      	eors	r3, r2
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4b99      	ldr	r3, [pc, #612]	@ (80017cc <os_aes+0x6f4>)
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800156c:	4053      	eors	r3, r2
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4b95      	ldr	r3, [pc, #596]	@ (80017d0 <os_aes+0x6f8>)
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001580:	4053      	eors	r3, r2
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0e1b      	lsrs	r3, r3, #24
 8001588:	4a8e      	ldr	r2, [pc, #568]	@ (80017c4 <os_aes+0x6ec>)
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	4053      	eors	r3, r2
 8001592:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3320      	adds	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	429a      	cmp	r2, r3
 80015a0:	f4ff aeab 	bcc.w	80012fa <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <os_aes+0x6f0>)
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4053      	eors	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b7d      	ldr	r3, [pc, #500]	@ (80017cc <os_aes+0x6f4>)
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4053      	eors	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b79      	ldr	r3, [pc, #484]	@ (80017d0 <os_aes+0x6f8>)
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4053      	eors	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	0e1b      	lsrs	r3, r3, #24
 80015fa:	4a72      	ldr	r2, [pc, #456]	@ (80017c4 <os_aes+0x6ec>)
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	4053      	eors	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4b6e      	ldr	r3, [pc, #440]	@ (80017c8 <os_aes+0x6f0>)
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4053      	eors	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <os_aes+0x6f4>)
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4053      	eors	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <os_aes+0x6f8>)
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4053      	eors	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	0e1b      	lsrs	r3, r3, #24
 8001644:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <os_aes+0x6ec>)
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4053      	eors	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <os_aes+0x6f0>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4053      	eors	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <os_aes+0x6f4>)
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	4053      	eors	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <os_aes+0x6f8>)
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4053      	eors	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	4a4d      	ldr	r2, [pc, #308]	@ (80017c4 <os_aes+0x6ec>)
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4053      	eors	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <os_aes+0x6f0>)
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4053      	eors	r3, r2
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <os_aes+0x6f4>)
 80016b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4053      	eors	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <os_aes+0x6f8>)
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4053      	eors	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	0e1b      	lsrs	r3, r3, #24
 80016d8:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <os_aes+0x6ec>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4053      	eors	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	4a39      	ldr	r2, [pc, #228]	@ (80017d4 <os_aes+0x6fc>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f6:	4053      	eors	r3, r2
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <os_aes+0x6fc>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800170a:	4053      	eors	r3, r2
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <os_aes+0x6fc>)
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171e:	4053      	eors	r3, r2
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <os_aes+0x6fc>)
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	461a      	mov	r2, r3
 800172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001730:	4053      	eors	r3, r2
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	0e1b      	lsrs	r3, r3, #24
 800173e:	4a25      	ldr	r2, [pc, #148]	@ (80017d4 <os_aes+0x6fc>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001746:	4053      	eors	r3, r2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <os_aes+0x6fc>)
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175a:	4053      	eors	r3, r2
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <os_aes+0x6fc>)
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800176e:	4053      	eors	r3, r2
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <os_aes+0x6fc>)
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	461a      	mov	r2, r3
 800177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001780:	4053      	eors	r3, r2
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	0e1b      	lsrs	r3, r3, #24
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <os_aes+0x6fc>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	061b      	lsls	r3, r3, #24
 8001794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001796:	4053      	eors	r3, r2
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <os_aes+0x6fc>)
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	4053      	eors	r3, r2
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <os_aes+0x6fc>)
 80017b8:	5c9b      	ldrb	r3, [r3, r2]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017be:	4053      	eors	r3, r2
 80017c0:	e00a      	b.n	80017d8 <os_aes+0x700>
 80017c2:	bf00      	nop
 80017c4:	0800f42c 	.word	0x0800f42c
 80017c8:	0801002c 	.word	0x0801002c
 80017cc:	0800fc2c 	.word	0x0800fc2c
 80017d0:	0800f82c 	.word	0x0800f82c
 80017d4:	0800f32c 	.word	0x0800f32c
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <os_aes+0x888>)
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	461a      	mov	r2, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	4053      	eors	r3, r2
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	0e1b      	lsrs	r3, r3, #24
 80017f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001960 <os_aes+0x888>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	061b      	lsls	r3, r3, #24
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	4053      	eors	r3, r2
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <os_aes+0x888>)
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	4053      	eors	r3, r2
 8001814:	623b      	str	r3, [r7, #32]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <os_aes+0x888>)
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	6a3a      	ldr	r2, [r7, #32]
 8001826:	4053      	eors	r3, r2
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <os_aes+0x888>)
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	461a      	mov	r2, r3
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	4053      	eors	r3, r2
 800183a:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d056      	beq.n	80018f4 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	111b      	asrs	r3, r3, #4
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d041      	beq.n	80018da <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	0fdb      	lsrs	r3, r3, #31
 800185a:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	005a      	lsls	r2, r3, #1
 8001860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001862:	0fdb      	lsrs	r3, r3, #31
 8001864:	4313      	orrs	r3, r2
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8001868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186a:	005a      	lsls	r2, r3, #1
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	0fdb      	lsrs	r3, r3, #31
 8001870:	4313      	orrs	r3, r2
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	005a      	lsls	r2, r3, #1
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	0fdb      	lsrs	r3, r3, #31
 800187c:	4313      	orrs	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <os_aes+0x7bc>
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8001892:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	3b01      	subs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1da      	bne.n	8001856 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <os_aes+0x88c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	4053      	eors	r3, r2
 80018a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001964 <os_aes+0x88c>)
 80018aa:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <os_aes+0x88c>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	4053      	eors	r3, r2
 80018b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <os_aes+0x88c>)
 80018b6:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <os_aes+0x88c>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	4053      	eors	r3, r2
 80018c0:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <os_aes+0x88c>)
 80018c2:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <os_aes+0x88c>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	4053      	eors	r3, r2
 80018cc:	4a25      	ldr	r2, [pc, #148]	@ (8001964 <os_aes+0x88c>)
 80018ce:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018d6:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 80018d8:	e4ad      	b.n	8001236 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 80018da:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <os_aes+0x88c>)
 80018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018de:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <os_aes+0x88c>)
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 80018e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <os_aes+0x88c>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 80018ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <os_aes+0x88c>)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	60d3      	str	r3, [r2, #12]
 80018f2:	e094      	b.n	8001a1e <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d034      	beq.n	8001968 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	2b10      	cmp	r3, #16
 8001902:	bf28      	it	cs
 8001904:	2310      	movcs	r3, #16
 8001906:	b29b      	uxth	r3, r3
 8001908:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e01d      	b.n	800194c <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4413      	add	r3, r2
 8001916:	7819      	ldrb	r1, [r3, #0]
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	0e1b      	lsrs	r3, r3, #24
 800191c:	b2da      	uxtb	r2, r3
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4403      	add	r3, r0
 8001924:	404a      	eors	r2, r1
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b03      	cmp	r3, #3
 8001938:	d105      	bne.n	8001946 <os_aes+0x86e>
                            a0 = a1;
 800193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3301      	adds	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3dd      	bcc.n	8001910 <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <os_aes+0x88c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	4a02      	ldr	r2, [pc, #8]	@ (8001964 <os_aes+0x88c>)
 800195c:	60d3      	str	r3, [r2, #12]
 800195e:	e05e      	b.n	8001a1e <os_aes+0x946>
 8001960:	0800f32c 	.word	0x0800f32c
 8001964:	200000fc 	.word	0x200000fc
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8001968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196a:	0e1b      	lsrs	r3, r3, #24
 800196c:	b2da      	uxtb	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001974:	0c1a      	lsrs	r2, r3, #16
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	0a1a      	lsrs	r2, r3, #8
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3303      	adds	r3, #3
 800198e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	0e1a      	lsrs	r2, r3, #24
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3304      	adds	r3, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	0c1a      	lsrs	r2, r3, #16
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3305      	adds	r3, #5
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	0a1a      	lsrs	r2, r3, #8
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3306      	adds	r3, #6
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3307      	adds	r3, #7
 80019bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	0e1a      	lsrs	r2, r3, #24
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	3308      	adds	r3, #8
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	0c1a      	lsrs	r2, r3, #16
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3309      	adds	r3, #9
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	0a1a      	lsrs	r2, r3, #8
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	330a      	adds	r3, #10
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	330b      	adds	r3, #11
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	0e1a      	lsrs	r2, r3, #24
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	330c      	adds	r3, #12
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	0c1a      	lsrs	r2, r3, #16
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	330d      	adds	r3, #13
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	0a1a      	lsrs	r2, r3, #8
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	330e      	adds	r3, #14
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	330f      	adds	r3, #15
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <os_aes+0x95a>
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <os_aes+0x966>
                buf += 16;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3310      	adds	r3, #16
 8001a36:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	3b10      	subs	r3, #16
 8001a3c:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f73f abba 	bgt.w	80011c4 <os_aes+0xec>
        }
        return AESAUX[0];
 8001a50:	4b02      	ldr	r3, [pc, #8]	@ (8001a5c <os_aes+0x984>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000fc 	.word	0x200000fc

08001a60 <cayenne_lpp_reset>:
#include <string.h>

#include "cayenne_lpp.h"

void cayenne_lpp_reset(cayenne_lpp_t *lpp)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    memset(lpp->buffer, 0, CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2226      	movs	r2, #38	@ 0x26
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00c fb9d 	bl	800e1ae <memset>
    lpp->cursor = 0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <cayenne_lpp_add_analog_output>:
    lpp->buffer[lpp->cursor++] = val;
}

void cayenne_lpp_add_analog_output(cayenne_lpp_t *lpp, uint8_t channel,
                                   float value)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a92:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_ANALOG_OUTPUT_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	2b25      	cmp	r3, #37	@ 0x25
 8001a9e:	d905      	bls.n	8001aac <cayenne_lpp_add_analog_output+0x28>
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <cayenne_lpp_add_analog_output+0xb0>)
 8001aa2:	4a25      	ldr	r2, [pc, #148]	@ (8001b38 <cayenne_lpp_add_analog_output+0xb4>)
 8001aa4:	213e      	movs	r1, #62	@ 0x3e
 8001aa6:	4825      	ldr	r0, [pc, #148]	@ (8001b3c <cayenne_lpp_add_analog_output+0xb8>)
 8001aa8:	f00c fa4c 	bl	800df44 <__assert_func>

    int16_t val = value * 100;
 8001aac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001b40 <cayenne_lpp_add_analog_output+0xbc>
 8001ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001abc:	ee17 3a90 	vmov	r3, s15
 8001ac0:	82fb      	strh	r3, [r7, #22]
    lpp->buffer[lpp->cursor++] = channel;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	b2d1      	uxtb	r1, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	7afa      	ldrb	r2, [r7, #11]
 8001ad8:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_ANALOG_OUTPUT;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	b2d1      	uxtb	r1, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2103      	movs	r1, #3
 8001af0:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val >> 8;
 8001af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001af6:	121b      	asrs	r3, r3, #8
 8001af8:	b219      	sxth	r1, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	b2d0      	uxtb	r0, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f882 0026 	strb.w	r0, [r2, #38]	@ 0x26
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	b2c9      	uxtb	r1, r1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	b2d1      	uxtb	r1, r2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001b22:	461a      	mov	r2, r3
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	b2d9      	uxtb	r1, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	5499      	strb	r1, [r3, r2]
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0800efb0 	.word	0x0800efb0
 8001b38:	0801042c 	.word	0x0801042c
 8001b3c:	0800eef8 	.word	0x0800eef8
 8001b40:	42c80000 	.word	0x42c80000

08001b44 <cayenne_lpp_add_temperature>:
    lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_temperature(cayenne_lpp_t *lpp, uint8_t channel,
                                 float celsius)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b52:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_TEMPERATURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	2b25      	cmp	r3, #37	@ 0x25
 8001b5e:	d905      	bls.n	8001b6c <cayenne_lpp_add_temperature+0x28>
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <cayenne_lpp_add_temperature+0xb0>)
 8001b62:	4a25      	ldr	r2, [pc, #148]	@ (8001bf8 <cayenne_lpp_add_temperature+0xb4>)
 8001b64:	215f      	movs	r1, #95	@ 0x5f
 8001b66:	4825      	ldr	r0, [pc, #148]	@ (8001bfc <cayenne_lpp_add_temperature+0xb8>)
 8001b68:	f00c f9ec 	bl	800df44 <__assert_func>

    int16_t val = celsius * 10;
 8001b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	82fb      	strh	r3, [r7, #22]
    lpp->buffer[lpp->cursor++] = channel;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	b2d1      	uxtb	r1, r2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001b92:	4619      	mov	r1, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	7afa      	ldrb	r2, [r7, #11]
 8001b98:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_TEMPERATURE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	b2d1      	uxtb	r1, r2
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2167      	movs	r1, #103	@ 0x67
 8001bb0:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val >> 8;
 8001bb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bb6:	121b      	asrs	r3, r3, #8
 8001bb8:	b219      	sxth	r1, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	b2d0      	uxtb	r0, r2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	f882 0026 	strb.w	r0, [r2, #38]	@ 0x26
 8001bca:	461a      	mov	r2, r3
 8001bcc:	b2c9      	uxtb	r1, r1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	b2d1      	uxtb	r1, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001be2:	461a      	mov	r2, r3
 8001be4:	8afb      	ldrh	r3, [r7, #22]
 8001be6:	b2d9      	uxtb	r1, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	5499      	strb	r1, [r3, r2]
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800f094 	.word	0x0800f094
 8001bf8:	0801044c 	.word	0x0801044c
 8001bfc:	0800eef8 	.word	0x0800eef8

08001c00 <cayenne_lpp_add_relative_humidity>:

void cayenne_lpp_add_relative_humidity(cayenne_lpp_t *lpp, uint8_t channel,
                                       float rh)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c0e:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_RELATIVE_HUMIDITY_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c16:	3303      	adds	r3, #3
 8001c18:	2b25      	cmp	r3, #37	@ 0x25
 8001c1a:	d905      	bls.n	8001c28 <cayenne_lpp_add_relative_humidity+0x28>
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <cayenne_lpp_add_relative_humidity+0x8c>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <cayenne_lpp_add_relative_humidity+0x90>)
 8001c20:	216b      	movs	r1, #107	@ 0x6b
 8001c22:	481c      	ldr	r0, [pc, #112]	@ (8001c94 <cayenne_lpp_add_relative_humidity+0x94>)
 8001c24:	f00c f98e 	bl	800df44 <__assert_func>

    uint8_t val = rh * 2;
 8001c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c34:	edc7 7a00 	vstr	s15, [r7]
 8001c38:	783b      	ldrb	r3, [r7, #0]
 8001c3a:	75fb      	strb	r3, [r7, #23]
    lpp->buffer[lpp->cursor++] = channel;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	b2d1      	uxtb	r1, r2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	7afa      	ldrb	r2, [r7, #11]
 8001c52:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_RELATIVE_HUMIDITY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	b2d1      	uxtb	r1, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2168      	movs	r1, #104	@ 0x68
 8001c6a:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	b2d1      	uxtb	r1, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	7dfa      	ldrb	r2, [r7, #23]
 8001c82:	545a      	strb	r2, [r3, r1]
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0800f0e0 	.word	0x0800f0e0
 8001c90:	08010468 	.word	0x08010468
 8001c94:	0800eef8 	.word	0x0800eef8

08001c98 <cayenne_lpp_add_barometric_pressure>:
    lpp->buffer[lpp->cursor++] = vz;
}

void cayenne_lpp_add_barometric_pressure(cayenne_lpp_t *lpp, uint8_t channel,
                                         float hpa)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ca6:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_BAROMETRIC_PRESSURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001cae:	3304      	adds	r3, #4
 8001cb0:	2b25      	cmp	r3, #37	@ 0x25
 8001cb2:	d905      	bls.n	8001cc0 <cayenne_lpp_add_barometric_pressure+0x28>
 8001cb4:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <cayenne_lpp_add_barometric_pressure+0xb0>)
 8001cb6:	4a25      	ldr	r2, [pc, #148]	@ (8001d4c <cayenne_lpp_add_barometric_pressure+0xb4>)
 8001cb8:	2189      	movs	r1, #137	@ 0x89
 8001cba:	4825      	ldr	r0, [pc, #148]	@ (8001d50 <cayenne_lpp_add_barometric_pressure+0xb8>)
 8001cbc:	f00c f942 	bl	800df44 <__assert_func>

    int16_t val = hpa * 10;
 8001cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd0:	ee17 3a90 	vmov	r3, s15
 8001cd4:	82fb      	strh	r3, [r7, #22]
    lpp->buffer[lpp->cursor++] = channel;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	b2d1      	uxtb	r1, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	7afa      	ldrb	r2, [r7, #11]
 8001cec:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_BAROMETRIC_PRESSURE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	b2d1      	uxtb	r1, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2173      	movs	r1, #115	@ 0x73
 8001d04:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val >> 8;
 8001d06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d0a:	121b      	asrs	r3, r3, #8
 8001d0c:	b219      	sxth	r1, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	b2d0      	uxtb	r0, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	f882 0026 	strb.w	r0, [r2, #38]	@ 0x26
 8001d1e:	461a      	mov	r2, r3
 8001d20:	b2c9      	uxtb	r1, r1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	b2d1      	uxtb	r1, r2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	f882 1026 	strb.w	r1, [r2, #38]	@ 0x26
 8001d36:	461a      	mov	r2, r3
 8001d38:	8afb      	ldrh	r3, [r7, #22]
 8001d3a:	b2d9      	uxtb	r1, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	5499      	strb	r1, [r3, r2]
}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	0800f184 	.word	0x0800f184
 8001d4c:	0801048c 	.word	0x0801048c
 8001d50:	0800eef8 	.word	0x0800eef8

08001d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a32      	ldr	r2, [pc, #200]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a2c      	ldr	r2, [pc, #176]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	4a26      	ldr	r2, [pc, #152]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <MX_GPIO_Init+0xe4>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f648 0180 	movw	r1, #34944	@ 0x8880
 8001db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbc:	f009 f82c 	bl	800ae18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	481d      	ldr	r0, [pc, #116]	@ (8001e3c <MX_GPIO_Init+0xe8>)
 8001dc6:	f009 f827 	bl	800ae18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 8001dca:	f648 0380 	movw	r3, #34944	@ 0x8880
 8001dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de6:	f008 fead 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001dea:	2302      	movs	r3, #2
 8001dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <MX_GPIO_Init+0xe8>)
 8001e02:	f008 fe9f 	bl	800ab44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001e06:	23c0      	movs	r3, #192	@ 0xc0
 8001e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_GPIO_Init+0xe8>)
 8001e1c:	f008 fe92 	bl	800ab44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2017      	movs	r0, #23
 8001e26:	f008 fe16 	bl	800aa56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e2a:	2017      	movs	r0, #23
 8001e2c:	f008 fe2f 	bl	800aa8e <HAL_NVIC_EnableIRQ>

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000400 	.word	0x48000400

08001e40 <hal_io_init>:


// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	461a      	mov	r2, r3
 8001e72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7a:	f008 ffcd 	bl	800ae18 <HAL_GPIO_WritePin>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b08c      	sub	sp, #48	@ 0x30
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <hal_pin_rst+0x16>
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d116      	bne.n	8001eca <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001e9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ea0:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb4:	f008 fe46 	bl	800ab44 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec4:	f008 ffa8 	bl	800ae18 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001ec8:	e00e      	b.n	8001ee8 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001eca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ece:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee2:	f008 fe2f 	bl	800ab44 <HAL_GPIO_Init>
    }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3730      	adds	r7, #48	@ 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	2b40      	cmp	r3, #64	@ 0x40
 8001efe:	d102      	bne.n	8001f06 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f004 f979 	bl	80061f8 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	2b80      	cmp	r3, #128	@ 0x80
 8001f0a:	d102      	bne.n	8001f12 <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f004 f973 	bl	80061f8 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 8001f32:	2300      	movs	r3, #0
 8001f34:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001f36:	2300      	movs	r3, #0
 8001f38:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001f3e:	f107 0208 	add.w	r2, r7, #8
 8001f42:	f107 010c 	add.w	r1, r7, #12
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	4804      	ldr	r0, [pc, #16]	@ (8001f60 <hal_spi+0x38>)
 8001f50:	f00b f891 	bl	800d076 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001f54:	7a3b      	ldrb	r3, [r7, #8]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000430 	.word	0x20000430

08001f64 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <hal_ticks>:

u4_t hal_ticks () {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001f7a:	f000 f8b9 	bl	80020f0 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <hal_ticks+0x58>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <hal_ticks+0x5c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <hal_ticks+0x5c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d10d      	bne.n	8001fb6 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <hal_ticks+0x5c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d106      	bne.n	8001fb6 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <hal_ticks+0x5c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	807b      	strh	r3, [r7, #2]
    		t++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001fb6:	f000 f8ab 	bl	8002110 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	4313      	orrs	r3, r2
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200001bc 	.word	0x200001bc
 8001fd0:	200004e4 	.word	0x200004e4

08001fd4 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001fdc:	f7ff ffca 	bl	8001f74 <hal_ticks>
 8001fe0:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dc01      	bgt.n	8001ff4 <deltaticks+0x20>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e008      	b.n	8002006 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	141b      	asrs	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <deltaticks+0x2e>
 8001ffc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002000:	e001      	b.n	8002006 <deltaticks+0x32>
    return (u2_t)d;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	b29b      	uxth	r3, r3
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8002016:	bf00      	nop
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffdb 	bl	8001fd4 <deltaticks>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <hal_waitUntil+0xa>
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8002038:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <hal_checkTimer+0x78>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <hal_checkTimer+0x78>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0202 	bic.w	r2, r2, #2
 8002046:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffc3 	bl	8001fd4 <deltaticks>
 800204e:	4603      	mov	r3, r0
 8002050:	81fb      	strh	r3, [r7, #14]
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d809      	bhi.n	800206c <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <hal_checkTimer+0x78>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <hal_checkTimer+0x78>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0202 	bic.w	r2, r2, #2
 8002066:	60da      	str	r2, [r3, #12]
        return 1;
 8002068:	2301      	movs	r3, #1
 800206a:	e018      	b.n	800209e <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <hal_checkTimer+0x78>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002072:	89fa      	ldrh	r2, [r7, #14]
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <hal_checkTimer+0x78>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	440a      	add	r2, r1
 800207a:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <hal_checkTimer+0x78>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <hal_checkTimer+0x78>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0202 	orr.w	r2, r2, #2
 800208a:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <hal_checkTimer+0x78>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <hal_checkTimer+0x78>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	621a      	str	r2, [r3, #32]
        return 0;
 800209c:	2300      	movs	r3, #0
    }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004e4 	.word	0x200004e4

080020ac <HAL_TIM_PeriodElapsedCallback>:

//Callback deja renseigne dans le main.c
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d104      	bne.n	80020ca <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80020c8:	6053      	str	r3, [r2, #4]
    }

	if(htim == &htim6) HAL_ADC_Start_IT(&hadc1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a06      	ldr	r2, [pc, #24]	@ (80020e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d102      	bne.n	80020d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80020d2:	4806      	ldr	r0, [pc, #24]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020d4:	f007 fbd4 	bl	8009880 <HAL_ADC_Start_IT>

}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200004e4 	.word	0x200004e4
 80020e4:	200001bc 	.word	0x200001bc
 80020e8:	20000498 	.word	0x20000498
 80020ec:	20000098 	.word	0x20000098

080020f0 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <hal_disableIRQs+0x1c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a03      	ldr	r2, [pc, #12]	@ (800210c <hal_disableIRQs+0x1c>)
 8002100:	6013      	str	r3, [r2, #0]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200001bc 	.word	0x200001bc

08002110 <hal_enableIRQs>:

void hal_enableIRQs () {
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <hal_enableIRQs+0x24>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <hal_enableIRQs+0x24>)
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <hal_enableIRQs+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002126:	b662      	cpsie	i
}
 8002128:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	200001bc 	.word	0x200001bc

08002138 <hal_sleep>:

void hal_sleep () {
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 800213c:	bf30      	wfi
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 800214c:	2208      	movs	r2, #8
 800214e:	2100      	movs	r1, #0
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <hal_init+0x28>)
 8002152:	f00c f82c 	bl	800e1ae <memset>
    hal_disableIRQs();
 8002156:	f7ff ffcb 	bl	80020f0 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 800215a:	f7ff fe71 	bl	8001e40 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 800215e:	f7ff fedc 	bl	8001f1a <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 8002162:	f7ff feff 	bl	8001f64 <hal_time_init>
    hal_enableIRQs();
 8002166:	f7ff ffd3 	bl	8002110 <hal_enableIRQs>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200001bc 	.word	0x200001bc

08002174 <hal_failed>:

void hal_failed () {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8002178:	f7ff ffba 	bl	80020f0 <hal_disableIRQs>
    hal_sleep();
 800217c:	f7ff ffdc 	bl	8002138 <hal_sleep>
    while(1);
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <hal_failed+0xc>

08002184 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <MX_I2C1_Init+0x74>)
 800218a:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <MX_I2C1_Init+0x78>)
 800218c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <MX_I2C1_Init+0x74>)
 8002190:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <MX_I2C1_Init+0x7c>)
 8002192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002194:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <MX_I2C1_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <MX_I2C1_Init+0x74>)
 800219c:	2201      	movs	r2, #1
 800219e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021be:	480e      	ldr	r0, [pc, #56]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021c0:	f008 fe5a 	bl	800ae78 <HAL_I2C_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021ca:	f003 faad 	bl	8005728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4809      	ldr	r0, [pc, #36]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021d2:	f009 fcc9 	bl	800bb68 <HAL_I2CEx_ConfigAnalogFilter>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021dc:	f003 faa4 	bl	8005728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021e0:	2100      	movs	r1, #0
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_I2C1_Init+0x74>)
 80021e4:	f009 fd0b 	bl	800bbfe <HAL_I2CEx_ConfigDigitalFilter>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ee:	f003 fa9b 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200001c4 	.word	0x200001c4
 80021fc:	40005400 	.word	0x40005400
 8002200:	10d19ce4 	.word	0x10d19ce4

08002204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b09e      	sub	sp, #120	@ 0x78
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2254      	movs	r2, #84	@ 0x54
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f00b ffc2 	bl	800e1ae <memset>
  if(i2cHandle->Instance==I2C1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <HAL_I2C_MspInit+0xa8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d137      	bne.n	80022a4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002234:	2340      	movs	r3, #64	@ 0x40
 8002236:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002238:	2300      	movs	r3, #0
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f00a fb8d 	bl	800c960 <HAL_RCCEx_PeriphCLKConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800224c:	f003 fa6c 	bl	8005728 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002254:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002268:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800226c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226e:	2312      	movs	r3, #18
 8002270:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002272:	2301      	movs	r3, #1
 8002274:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800227a:	2304      	movs	r3, #4
 800227c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002288:	f008 fc5c 	bl	800ab44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 8002292:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002296:	6593      	str	r3, [r2, #88]	@ 0x58
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_I2C_MspInit+0xac>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022a4:	bf00      	nop
 80022a6:	3778      	adds	r7, #120	@ 0x78
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40005400 	.word	0x40005400
 80022b0:	40021000 	.word	0x40021000

080022b4 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b29b      	uxth	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	460a      	mov	r2, r1
 8002326:	80fb      	strh	r3, [r7, #6]
 8002328:	4613      	mov	r3, r2
 800232a:	717b      	strb	r3, [r7, #5]
 800232c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002330:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002334:	b21a      	sxth	r2, r3
 8002336:	797b      	ldrb	r3, [r7, #5]
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	b21b      	sxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b21b      	sxth	r3, r3
 8002340:	b29b      	uxth	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	80fb      	strh	r3, [r7, #6]
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	09db      	lsrs	r3, r3, #7
 800235c:	b29b      	uxth	r3, r3
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	6039      	str	r1, [r7, #0]
 8002378:	80fb      	strh	r3, [r7, #6]
 800237a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002382:	b21a      	sxth	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	01db      	lsls	r3, r3, #7
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21b      	sxth	r3, r3
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	6039      	str	r1, [r7, #0]
 80023c4:	80fb      	strh	r3, [r7, #6]
 80023c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <updr2rps+0x20>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	080104b0 	.word	0x080104b0

0800240c <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ffe5 	bl	80023e8 <updr2rps>
 800241e:	4603      	mov	r3, r0
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffa3 	bl	800236e <setNocrc>
 8002428:	4603      	mov	r3, r0
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <decDR+0x2c>)
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	2bff      	cmp	r3, #255	@ 0xff
 8002446:	d003      	beq.n	8002450 <decDR+0x1c>
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	3b01      	subs	r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e000      	b.n	8002452 <decDR+0x1e>
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	080104b0 	.word	0x080104b0

08002464 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	3301      	adds	r3, #1
 8002472:	4a06      	ldr	r2, [pc, #24]	@ (800248c <validDR+0x28>)
 8002474:	5cd3      	ldrb	r3, [r2, r3]
 8002476:	2bff      	cmp	r3, #255	@ 0xff
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	080104b0 	.word	0x080104b0

08002490 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
 80024a0:	e005      	b.n	80024ae <lowerDR+0x1e>
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ffc5 	bl	8002434 <decDR>
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	1e5a      	subs	r2, r3, #1
 80024b2:	71ba      	strb	r2, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f4      	bne.n	80024a2 <lowerDR+0x12>
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3301      	adds	r3, #1
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21b      	sxth	r3, r3
 80024de:	b29b      	uxth	r3, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3301      	adds	r3, #1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	4313      	orrs	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3302      	adds	r3, #2
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3303      	adds	r3, #3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	4313      	orrs	r3, r2
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3303      	adds	r3, #3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3302      	adds	r3, #2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	4313      	orrs	r3, r2
 8002540:	461a      	mov	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3301      	adds	r3, #1
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4313      	orrs	r3, r2
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3301      	adds	r3, #1
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	0a1a      	lsrs	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	0c1a      	lsrs	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3302      	adds	r3, #2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	0e1a      	lsrs	r2, r3, #24
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3303      	adds	r3, #3
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3303      	adds	r3, #3
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	0a1a      	lsrs	r2, r3, #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3302      	adds	r3, #2
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	0c1a      	lsrs	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	0e1b      	lsrs	r3, r3, #24
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	701a      	strb	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8002616:	23ff      	movs	r3, #255	@ 0xff
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8002622:	b480      	push	{r7}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8002630:	f241 0321 	movw	r3, #4129	@ 0x1021
 8002634:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	e026      	b.n	800268a <os_crc16+0x68>
        remainder ^= data[i] << 8;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	b21a      	sxth	r2, r3
 8002648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800264c:	4053      	eors	r3, r2
 800264e:	b21b      	sxth	r3, r3
 8002650:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8002652:	2308      	movs	r3, #8
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e012      	b.n	800267e <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8002658:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da08      	bge.n	8002672 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 8002660:	8afb      	ldrh	r3, [r7, #22]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	b21a      	sxth	r2, r3
 8002666:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800266a:	4053      	eors	r3, r2
 800266c:	b21b      	sxth	r3, r3
 800266e:	82fb      	strh	r3, [r7, #22]
 8002670:	e002      	b.n	8002678 <os_crc16+0x56>
            else 
                remainder <<= 1;
 8002672:	8afb      	ldrh	r3, [r7, #22]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	3b01      	subs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	3301      	adds	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3d4      	bcc.n	800263c <os_crc16+0x1a>
        }
    }
    return remainder;
 8002692:	8afb      	ldrh	r3, [r7, #22]
}
 8002694:	4618      	mov	r0, r3
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 80026ae:	2210      	movs	r2, #16
 80026b0:	2100      	movs	r1, #0
 80026b2:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <micB0+0x54>)
 80026b4:	f00b fd7b 	bl	800e1ae <memset>
    AESaux[0]  = 0x49;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <micB0+0x54>)
 80026ba:	2249      	movs	r2, #73	@ 0x49
 80026bc:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <micB0+0x58>)
 80026cc:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <micB0+0x5c>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <micB0+0x60>)
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff57 	bl	800258e <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <micB0+0x64>)
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff52 	bl	800258e <os_wlsbf4>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200000fc 	.word	0x200000fc
 80026f8:	20000101 	.word	0x20000101
 80026fc:	2000010b 	.word	0x2000010b
 8002700:	20000102 	.word	0x20000102
 8002704:	20000106 	.word	0x20000106

08002708 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f7ff ffbf 	bl	80026a0 <micB0>
    os_copyMem(AESkey,key,16);
 8002722:	2210      	movs	r2, #16
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	480d      	ldr	r0, [pc, #52]	@ (800275c <aes_verifyMic+0x54>)
 8002728:	f00b fdbd 	bl	800e2a6 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	6a39      	ldr	r1, [r7, #32]
 8002734:	2002      	movs	r0, #2
 8002736:	f7fe fccf 	bl	80010d8 <os_aes>
 800273a:	4604      	mov	r4, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	4413      	add	r3, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff feef 	bl	8002526 <os_rmsbf4>
 8002748:	4603      	mov	r3, r0
 800274a:	429c      	cmp	r4, r3
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	2000010c 	.word	0x2000010c

08002760 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68b8      	ldr	r0, [r7, #8]
 8002776:	f7ff ff93 	bl	80026a0 <micB0>
    os_copyMem(AESkey,key,16);
 800277a:	2210      	movs	r2, #16
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	480b      	ldr	r0, [pc, #44]	@ (80027ac <aes_appendMic+0x4c>)
 8002780:	f00b fd91 	bl	800e2a6 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	6a3a      	ldr	r2, [r7, #32]
 8002788:	18d4      	adds	r4, r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	6a39      	ldr	r1, [r7, #32]
 8002792:	2002      	movs	r0, #2
 8002794:	f7fe fca0 	bl	80010d8 <os_aes>
 8002798:	4603      	mov	r3, r0
 800279a:	4619      	mov	r1, r3
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ff17 	bl	80025d0 <os_wmsbf4>
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000010c 	.word	0x2000010c

080027b0 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80027ba:	480b      	ldr	r0, [pc, #44]	@ (80027e8 <aes_appendMic0+0x38>)
 80027bc:	f002 fe38 	bl	8005430 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	18d4      	adds	r4, r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	200a      	movs	r0, #10
 80027d0:	f7fe fc82 	bl	80010d8 <os_aes>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4620      	mov	r0, r4
 80027da:	f7ff fef9 	bl	80025d0 <os_wmsbf4>
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000010c 	.word	0x2000010c

080027ec <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80027f6:	480d      	ldr	r0, [pc, #52]	@ (800282c <aes_verifyMic0+0x40>)
 80027f8:	f002 fe1a 	bl	8005430 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	200a      	movs	r0, #10
 8002806:	f7fe fc67 	bl	80010d8 <os_aes>
 800280a:	4604      	mov	r4, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fe87 	bl	8002526 <os_rmsbf4>
 8002818:	4603      	mov	r3, r0
 800281a:	429c      	cmp	r4, r3
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	2000010c 	.word	0x2000010c

08002830 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800283a:	4807      	ldr	r0, [pc, #28]	@ (8002858 <aes_encrypt+0x28>)
 800283c:	f002 fdf8 	bl	8005430 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fc45 	bl	80010d8 <os_aes>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000010c 	.word	0x2000010c

0800285c <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dd29      	ble.n	80028c4 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 8002870:	2210      	movs	r2, #16
 8002872:	2100      	movs	r1, #0
 8002874:	4815      	ldr	r0, [pc, #84]	@ (80028cc <aes_cipher+0x70>)
 8002876:	f00b fc9a 	bl	800e1ae <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <aes_cipher+0x74>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <aes_cipher+0x70>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <aes_cipher+0x78>)
 8002894:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <aes_cipher+0x7c>)
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fe77 	bl	800258e <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <aes_cipher+0x80>)
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fe72 	bl	800258e <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 80028aa:	2210      	movs	r2, #16
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <aes_cipher+0x84>)
 80028b0:	f00b fcf9 	bl	800e2a6 <memcpy>
    os_aes(AES_CTR, payload, len);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	2004      	movs	r0, #4
 80028be:	f7fe fc0b 	bl	80010d8 <os_aes>
 80028c2:	e000      	b.n	80028c6 <aes_cipher+0x6a>
        return;
 80028c4:	bf00      	nop
}
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200000fc 	.word	0x200000fc
 80028d0:	2000010b 	.word	0x2000010b
 80028d4:	20000101 	.word	0x20000101
 80028d8:	20000102 	.word	0x20000102
 80028dc:	20000106 	.word	0x20000106
 80028e0:	2000010c 	.word	0x2000010c

080028e4 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4603      	mov	r3, r0
 80028f2:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 80028f4:	2210      	movs	r2, #16
 80028f6:	2100      	movs	r1, #0
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f00b fc58 	bl	800e1ae <memset>
    nwkkey[0] = 0x01;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3301      	adds	r3, #1
 8002908:	2206      	movs	r2, #6
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	4618      	mov	r0, r3
 800290e:	f00b fcca 	bl	800e2a6 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3307      	adds	r3, #7
 8002916:	89fa      	ldrh	r2, [r7, #14]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fe20 	bl	8002560 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8002920:	2210      	movs	r2, #16
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	6838      	ldr	r0, [r7, #0]
 8002926:	f00b fcbe 	bl	800e2a6 <memcpy>
    artkey[0] = 0x02;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2202      	movs	r2, #2
 800292e:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8002930:	4809      	ldr	r0, [pc, #36]	@ (8002958 <aes_sessKeys+0x74>)
 8002932:	f002 fd7d 	bl	8005430 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8002936:	2210      	movs	r2, #16
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe fbcc 	bl	80010d8 <os_aes>
    os_getDevKey(AESkey);
 8002940:	4805      	ldr	r0, [pc, #20]	@ (8002958 <aes_sessKeys+0x74>)
 8002942:	f002 fd75 	bl	8005430 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8002946:	2210      	movs	r2, #16
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fbc4 	bl	80010d8 <os_aes>
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000010c 	.word	0x2000010c

0800295c <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fca3 	bl	80022b4 <getSf>
 800296e:	4603      	mov	r3, r0
 8002970:	461c      	mov	r4, r3
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fcad 	bl	80022d4 <getBw>
 800297a:	4603      	mov	r3, r0
 800297c:	4619      	mov	r1, r3
 800297e:	4a06      	ldr	r2, [pc, #24]	@ (8002998 <getSensitivity+0x3c>)
 8002980:	4623      	mov	r3, r4
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4423      	add	r3, r4
 8002986:	4413      	add	r3, r2
 8002988:	440b      	add	r3, r1
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3b8d      	subs	r3, #141	@ 0x8d
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	080104cc 	.word	0x080104cc

0800299c <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	460a      	mov	r2, r1
 80029a6:	80fb      	strh	r3, [r7, #6]
 80029a8:	4613      	mov	r3, r2
 80029aa:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fc90 	bl	80022d4 <getBw>
 80029b4:	4603      	mov	r3, r0
 80029b6:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fc7a 	bl	80022b4 <getSf>
 80029c0:	4603      	mov	r3, r0
 80029c2:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 80029c4:	7abb      	ldrb	r3, [r7, #10]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 80029ca:	797b      	ldrb	r3, [r7, #5]
 80029cc:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 80029ce:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac8 <calcAirTime+0x12c>)
 80029d8:	fb82 1203 	smull	r1, r2, r2, r3
 80029dc:	1312      	asrs	r2, r2, #12
 80029de:	17db      	asrs	r3, r3, #31
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	e06d      	b.n	8002ac0 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 80029e4:	7abb      	ldrb	r3, [r7, #10]
 80029e6:	3306      	adds	r3, #6
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 80029ee:	7abb      	ldrb	r3, [r7, #10]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d901      	bls.n	80029f8 <calcAirTime+0x5c>
 80029f4:	2308      	movs	r3, #8
 80029f6:	e000      	b.n	80029fa <calcAirTime+0x5e>
 80029f8:	2300      	movs	r3, #0
 80029fa:	7dfa      	ldrb	r2, [r7, #23]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8002a00:	797b      	ldrb	r3, [r7, #5]
 8002a02:	00da      	lsls	r2, r3, #3
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f103 041c 	add.w	r4, r3, #28
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fc9d 	bl	800234e <getNocrc>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <calcAirTime+0x82>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <calcAirTime+0x84>
 8002a1e:	2310      	movs	r3, #16
 8002a20:	441c      	add	r4, r3
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fcb9 	bl	800239c <getIh>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <calcAirTime+0x98>
 8002a30:	2314      	movs	r3, #20
 8002a32:	e000      	b.n	8002a36 <calcAirTime+0x9a>
 8002a34:	2300      	movs	r3, #0
 8002a36:	1ae3      	subs	r3, r4, r3
 8002a38:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dd15      	ble.n	8002a6c <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8002a40:	7a7a      	ldrb	r2, [r7, #9]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	7a7b      	ldrb	r3, [r7, #9]
 8002a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a4e:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fc50 	bl	80022f8 <getCr>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	1d5a      	adds	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	3308      	adds	r3, #8
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e001      	b.n	8002a70 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	3331      	adds	r3, #49	@ 0x31
 8002a76:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8002a78:	7aba      	ldrb	r2, [r7, #10]
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8002a84:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8002a88:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d907      	bls.n	8002aa0 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	3b04      	subs	r3, #4
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	fa42 f303 	asr.w	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002aac:	fb03 f202 	mul.w	r2, r3, r2
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	0fd9      	lsrs	r1, r3, #31
 8002ab4:	440b      	add	r3, r1
 8002ab6:	105b      	asrs	r3, r3, #1
 8002ab8:	441a      	add	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	14f8b589 	.word	0x14f8b589

08002acc <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	71fb      	strb	r3, [r7, #7]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <calcRxWindow+0xa0>)
 8002ae4:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002ae8:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <calcRxWindow+0xa0>)
 8002aec:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e011      	b.n	8002b18 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <calcRxWindow+0xa0>)
 8002af6:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002afa:	461a      	mov	r2, r3
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8002b06:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <calcRxWindow+0xa0>)
 8002b08:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	11db      	asrs	r3, r3, #7
 8002b16:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8002b18:	2305      	movs	r3, #5
 8002b1a:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <calcRxWindow+0xa0>)
 8002b1e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <calcRxWindow+0xa0>)
 8002b26:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <calcRxWindow+0xa4>)
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3305      	adds	r3, #5
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <calcRxWindow+0xa0>)
 8002b4a:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	3b08      	subs	r3, #8
 8002b50:	79ba      	ldrb	r2, [r7, #6]
 8002b52:	4907      	ldr	r1, [pc, #28]	@ (8002b70 <calcRxWindow+0xa4>)
 8002b54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b58:	fb03 f202 	mul.w	r2, r3, r2
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	4413      	add	r3, r2
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000218 	.word	0x20000218
 8002b70:	080104f0 	.word	0x080104f0

08002b74 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4606      	mov	r6, r0
 8002b7e:	4608      	mov	r0, r1
 8002b80:	4631      	mov	r1, r6
 8002b82:	73f9      	strb	r1, [r7, #15]
 8002b84:	4601      	mov	r1, r0
 8002b86:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8002b88:	7bb9      	ldrb	r1, [r7, #14]
 8002b8a:	2900      	cmp	r1, #0
 8002b8c:	d014      	beq.n	8002bb8 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 8002b8e:	493b      	ldr	r1, [pc, #236]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002b90:	2000      	movs	r0, #0
 8002b92:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8002b96:	4939      	ldr	r1, [pc, #228]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 8002b9e:	4937      	ldr	r1, [pc, #220]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002ba6:	4935      	ldr	r1, [pc, #212]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002ba8:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8002bac:	f041 010c 	orr.w	r1, r1, #12
 8002bb0:	b2c8      	uxtb	r0, r1
 8002bb2:	4932      	ldr	r1, [pc, #200]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002bb4:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8002bb8:	2142      	movs	r1, #66	@ 0x42
 8002bba:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8002bbc:	7bf9      	ldrb	r1, [r7, #15]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f04f 0a00 	mov.w	sl, #0
 8002bcc:	f04f 0b00 	mov.w	fp, #0
 8002bd0:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002bd4:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002bd8:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002bdc:	4650      	mov	r0, sl
 8002bde:	4659      	mov	r1, fp
 8002be0:	1b02      	subs	r2, r0, r4
 8002be2:	eb61 0305 	sbc.w	r3, r1, r5
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002bf4:	0090      	lsls	r0, r2, #2
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	eb12 0804 	adds.w	r8, r2, r4
 8002bfe:	eb43 0905 	adc.w	r9, r3, r5
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8002c0e:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002c12:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002c16:	4690      	mov	r8, r2
 8002c18:	4699      	mov	r9, r3
 8002c1a:	4642      	mov	r2, r8
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8002c22:	1851      	adds	r1, r2, r1
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	f143 0300 	adc.w	r3, r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c38:	f7fd ff38 	bl	8000aac <__aeabi_ldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3305      	adds	r3, #5
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002c4e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002c54:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002c58:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 8002c5c:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002c5e:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8002c62:	3b08      	subs	r3, #8
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <calcBcnRxWindowFromMillis+0x108>)
 8002c6e:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7c:	20000218 	.word	0x20000218

08002c80 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8002c88:	2210      	movs	r2, #16
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	482e      	ldr	r0, [pc, #184]	@ (8002d48 <rxschedInit+0xc8>)
 8002c8e:	f00b fa8e 	bl	800e1ae <memset>
    os_clearMem(LMIC.frame+8,8);
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <rxschedInit+0xcc>)
 8002c94:	2208      	movs	r2, #8
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f00b fa88 	bl	800e1ae <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <rxschedInit+0xd0>)
 8002ca0:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	482b      	ldr	r0, [pc, #172]	@ (8002d54 <rxschedInit+0xd4>)
 8002ca8:	f7ff fc71 	bl	800258e <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8002cac:	4a2a      	ldr	r2, [pc, #168]	@ (8002d58 <rxschedInit+0xd8>)
 8002cae:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <rxschedInit+0xd0>)
 8002cb0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f7ff fc69 	bl	800258e <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	4925      	ldr	r1, [pc, #148]	@ (8002d54 <rxschedInit+0xd4>)
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe fa09 	bl	80010d8 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8002ccc:	4821      	ldr	r0, [pc, #132]	@ (8002d54 <rxschedInit+0xd4>)
 8002cce:	f7ff fbf8 	bl	80024c2 <os_rlsbf2>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	f1c3 0307 	rsb	r3, r3, #7
 8002cdc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002ce0:	fa42 f303 	asr.w	r3, r2, r3
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <rxschedInit+0xd0>)
 8002cea:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 8002cee:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8002d00:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d04:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685c      	ldr	r4, [r3, #4]
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2201      	movs	r2, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3302      	adds	r3, #2
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7ff fecf 	bl	8002acc <calcRxWindow>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	1ae2      	subs	r2, r4, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <rxschedInit+0xd0>)
 8002d38:	7c1a      	ldrb	r2, [r3, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	70da      	strb	r2, [r3, #3]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2000010c 	.word	0x2000010c
 8002d4c:	20000368 	.word	0x20000368
 8002d50:	20000218 	.word	0x20000218
 8002d54:	20000360 	.word	0x20000360
 8002d58:	20000364 	.word	0x20000364

08002d5c <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db01      	blt.n	8002d76 <rxschedNext+0x1a>
        return 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e03a      	b.n	8002dec <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da01      	bge.n	8002d88 <rxschedNext+0x2c>
        return 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e031      	b.n	8002dec <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4093      	lsls	r3, r2
 8002d92:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	7bbb      	ldrb	r3, [r7, #14]
 8002d98:	4413      	add	r3, r2
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	709a      	strb	r2, [r3, #2]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da01      	bge.n	8002db0 <rxschedNext+0x54>
        return 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e01d      	b.n	8002dec <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	049b      	lsls	r3, r3, #18
 8002dbe:	11db      	asrs	r3, r3, #7
 8002dc0:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3302      	adds	r3, #2
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff fe79 	bl	8002acc <calcRxWindow>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002de2:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <rxschedNext+0x98>)
 8002de4:	7c1a      	ldrb	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	70da      	strb	r2, [r3, #3]
    goto again;
 8002dea:	e7bc      	b.n	8002d66 <rxschedNext+0xa>
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	20000218 	.word	0x20000218

08002df8 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8002e02:	f003 f9d3 	bl	80061ac <radio_rand1>
 8002e06:	4603      	mov	r3, r0
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	b21c      	sxth	r4, r3
 8002e0c:	f003 f9ce 	bl	80061ac <radio_rand1>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	4323      	orrs	r3, r4
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002e24:	dd0b      	ble.n	8002e3e <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <rndDelay+0x78>)
 8002e2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002e2e:	0ad2      	lsrs	r2, r2, #11
 8002e30:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002e34:	fb01 f202 	mul.w	r2, r1, r2
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	79fa      	ldrb	r2, [r7, #7]
 8002e4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e4e:	fb01 f202 	mul.w	r2, r1, r2
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
    return delay;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	10624dd3 	.word	0x10624dd3

08002e74 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ffb8 	bl	8002df8 <rndDelay>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <txDelay+0x58>)
 8002e92:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <txDelay+0x34>
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <txDelay+0x58>)
 8002e9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	dd0c      	ble.n	8002ec2 <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <txDelay+0x58>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <txDelay+0x58>)
 8002eb2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <txDelay+0x58>)
 8002ebe:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000218 	.word	0x20000218

08002ed0 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460a      	mov	r2, r1
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002ee0:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <setDrJoin+0x24>)
 8002ee2:	79bb      	ldrb	r3, [r7, #6]
 8002ee4:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000218 	.word	0x20000218

08002ef8 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
 8002f02:	460b      	mov	r3, r1
 8002f04:	71bb      	strb	r3, [r7, #6]
 8002f06:	4613      	mov	r3, r2
 8002f08:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002f0a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f0e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002f12:	d003      	beq.n	8002f1c <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002f14:	4a0e      	ldr	r2, [pc, #56]	@ (8002f50 <setDrTxpow+0x58>)
 8002f16:	797b      	ldrb	r3, [r7, #5]
 8002f18:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <setDrTxpow+0x58>)
 8002f1e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002f22:	79ba      	ldrb	r2, [r7, #6]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d00c      	beq.n	8002f42 <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002f28:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <setDrTxpow+0x58>)
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <setDrTxpow+0x58>)
 8002f32:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002f36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <setDrTxpow+0x58>)
 8002f3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000218 	.word	0x20000218

08002f54 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	2100      	movs	r1, #0
 8002f62:	483a      	ldr	r0, [pc, #232]	@ (800304c <initDefaultChannels+0xf8>)
 8002f64:	f00b f923 	bl	800e1ae <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002f68:	2220      	movs	r2, #32
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4838      	ldr	r0, [pc, #224]	@ (8003050 <initDefaultChannels+0xfc>)
 8002f6e:	f00b f91e 	bl	800e1ae <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002f72:	2220      	movs	r2, #32
 8002f74:	2100      	movs	r1, #0
 8002f76:	4837      	ldr	r0, [pc, #220]	@ (8003054 <initDefaultChannels+0x100>)
 8002f78:	f00b f919 	bl	800e1ae <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <initDefaultChannels+0x104>)
 8002f7e:	223f      	movs	r2, #63	@ 0x3f
 8002f80:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <initDefaultChannels+0x3a>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <initDefaultChannels+0x3c>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	73bb      	strb	r3, [r7, #14]
 8002f96:	e014      	b.n	8002fc2 <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	7bbb      	ldrb	r3, [r7, #14]
 8002f9c:	492f      	ldr	r1, [pc, #188]	@ (800305c <initDefaultChannels+0x108>)
 8002f9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002fa2:	492d      	ldr	r1, [pc, #180]	@ (8003058 <initDefaultChannels+0x104>)
 8002fa4:	3310      	adds	r3, #16
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002faa:	7bbb      	ldrb	r3, [r7, #14]
 8002fac:	4a2a      	ldr	r2, [pc, #168]	@ (8003058 <initDefaultChannels+0x104>)
 8002fae:	3340      	adds	r3, #64	@ 0x40
 8002fb0:	213f      	movs	r1, #63	@ 0x3f
 8002fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	73bb      	strb	r3, [r7, #14]
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	7bbb      	ldrb	r3, [r7, #14]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d9e7      	bls.n	8002f98 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002fc8:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <initDefaultChannels+0x104>)
 8002fca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fce:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002fd0:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <initDefaultChannels+0x104>)
 8002fd2:	220e      	movs	r2, #14
 8002fd4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002fd8:	f003 f8e8 	bl	80061ac <radio_rand1>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8003058 <initDefaultChannels+0x104>)
 8002fe6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 8002fea:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <initDefaultChannels+0x104>)
 8002fec:	2264      	movs	r2, #100	@ 0x64
 8002fee:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <initDefaultChannels+0x104>)
 8002ff2:	220e      	movs	r2, #14
 8002ff4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002ff8:	f003 f8d8 	bl	80061ac <radio_rand1>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <initDefaultChannels+0x104>)
 8003006:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 800300a:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <initDefaultChannels+0x104>)
 800300c:	220a      	movs	r2, #10
 800300e:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <initDefaultChannels+0x104>)
 8003012:	221b      	movs	r2, #27
 8003014:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8003018:	f003 f8c8 	bl	80061ac <radio_rand1>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <initDefaultChannels+0x104>)
 8003026:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 800302a:	f002 fb95 	bl	8005758 <os_getTime>
 800302e:	4603      	mov	r3, r0
 8003030:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <initDefaultChannels+0x104>)
 8003032:	6353      	str	r3, [r2, #52]	@ 0x34
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <initDefaultChannels+0x104>)
 8003036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <initDefaultChannels+0x104>)
 800303a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <initDefaultChannels+0x104>)
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8003040:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <initDefaultChannels+0x104>)
 8003042:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000258 	.word	0x20000258
 8003050:	20000298 	.word	0x20000298
 8003054:	20000238 	.word	0x20000238
 8003058:	20000218 	.word	0x20000218
 800305c:	08010510 	.word	0x08010510

08003060 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6039      	str	r1, [r7, #0]
 8003068:	4611      	mov	r1, r2
 800306a:	461a      	mov	r2, r3
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	460b      	mov	r3, r1
 8003072:	80bb      	strh	r3, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d901      	bls.n	8003082 <LMIC_setupChannel+0x22>
        return 0;
 800307e:	2300      	movs	r3, #0
 8003080:	e054      	b.n	800312c <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 8003082:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d121      	bne.n	80030d0 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4a2a      	ldr	r2, [pc, #168]	@ (8003138 <LMIC_setupChannel+0xd8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d908      	bls.n	80030a6 <LMIC_setupChannel+0x46>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4a29      	ldr	r2, [pc, #164]	@ (800313c <LMIC_setupChannel+0xdc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d804      	bhi.n	80030a6 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	e021      	b.n	80030ea <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	4a25      	ldr	r2, [pc, #148]	@ (8003140 <LMIC_setupChannel+0xe0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d903      	bls.n	80030b6 <LMIC_setupChannel+0x56>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	4a24      	ldr	r2, [pc, #144]	@ (8003144 <LMIC_setupChannel+0xe4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d907      	bls.n	80030c6 <LMIC_setupChannel+0x66>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	@ (8003148 <LMIC_setupChannel+0xe8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d315      	bcc.n	80030ea <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	@ (800314c <LMIC_setupChannel+0xec>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d811      	bhi.n	80030ea <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	e00c      	b.n	80030ea <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 80030d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	dd01      	ble.n	80030dc <LMIC_setupChannel+0x7c>
 80030d8:	2300      	movs	r3, #0
 80030da:	e027      	b.n	800312c <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	4918      	ldr	r1, [pc, #96]	@ (8003150 <LMIC_setupChannel+0xf0>)
 80030ee:	3310      	adds	r3, #16
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <LMIC_setupChannel+0xa0>
 80030fc:	88ba      	ldrh	r2, [r7, #4]
 80030fe:	e000      	b.n	8003102 <LMIC_setupChannel+0xa2>
 8003100:	223f      	movs	r2, #63	@ 0x3f
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4912      	ldr	r1, [pc, #72]	@ (8003150 <LMIC_setupChannel+0xf0>)
 8003106:	3340      	adds	r3, #64	@ 0x40
 8003108:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 800310c:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <LMIC_setupChannel+0xf0>)
 800310e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8003112:	b21a      	sxth	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	b21b      	sxth	r3, r3
 800311e:	4313      	orrs	r3, r2
 8003120:	b21b      	sxth	r3, r3
 8003122:	b29a      	uxth	r2, r3
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <LMIC_setupChannel+0xf0>)
 8003126:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 800312a:	2301      	movs	r3, #1
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	33d1fdbf 	.word	0x33d1fdbf
 800313c:	33d5ce50 	.word	0x33d5ce50
 8003140:	33bca0ff 	.word	0x33bca0ff
 8003144:	33c5c8c0 	.word	0x33c5c8c0
 8003148:	33d691a0 	.word	0x33d691a0
 800314c:	33db2580 	.word	0x33db2580
 8003150:	20000218 	.word	0x20000218

08003154 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f9c3 	bl	80024ec <os_rlsbf4>
 8003166:	4603      	mov	r3, r0
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	2264      	movs	r2, #100	@ 0x64
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a06      	ldr	r2, [pc, #24]	@ (8003190 <convFreq+0x3c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d303      	bcc.n	8003182 <convFreq+0x2e>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a05      	ldr	r2, [pc, #20]	@ (8003194 <convFreq+0x40>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <convFreq+0x32>
        freq = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
    return freq;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	337055c0 	.word	0x337055c0
 8003194:	33db2580 	.word	0x33db2580

08003198 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	460a      	mov	r2, r1
 80031a2:	71fb      	strb	r3, [r7, #7]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <mapChannels+0x2c>
 80031ae:	88bb      	ldrh	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <mapChannels+0x2c>
 80031b4:	88ba      	ldrh	r2, [r7, #4]
 80031b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003228 <mapChannels+0x90>)
 80031b8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80031bc:	43db      	mvns	r3, r3
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <mapChannels+0x30>
        return 0;  // illegal input
 80031c4:	2300      	movs	r3, #0
 80031c6:	e028      	b.n	800321a <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e01d      	b.n	800320a <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 80031ce:	88ba      	ldrh	r2, [r7, #4]
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	fa42 f303 	asr.w	r3, r2, r3
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <mapChannels+0x6c>
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <mapChannels+0x90>)
 80031e2:	3310      	adds	r3, #16
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2201      	movs	r2, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031fe:	4013      	ands	r3, r2
 8003200:	b21b      	sxth	r3, r3
 8003202:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	3301      	adds	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d9de      	bls.n	80031ce <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 8003210:	4a05      	ldr	r2, [pc, #20]	@ (8003228 <mapChannels+0x90>)
 8003212:	88bb      	ldrh	r3, [r7, #4]
 8003214:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 8003218:	2301      	movs	r3, #1
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000218 	.word	0x20000218

0800322c <updateTx>:


static void updateTx (ostime_t txbeg) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <updateTx+0x90>)
 8003236:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800323a:	4a20      	ldr	r2, [pc, #128]	@ (80032bc <updateTx+0x90>)
 800323c:	3310      	adds	r3, #16
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8003244:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <updateTx+0x90>)
 8003246:	89db      	ldrh	r3, [r3, #14]
 8003248:	4a1c      	ldr	r2, [pc, #112]	@ (80032bc <updateTx+0x90>)
 800324a:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fba3 	bl	800299c <calcAirTime>
 8003256:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	3304      	adds	r3, #4
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4a16      	ldr	r2, [pc, #88]	@ (80032bc <updateTx+0x90>)
 8003264:	4413      	add	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	4a13      	ldr	r2, [pc, #76]	@ (80032bc <updateTx+0x90>)
 8003270:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8003278:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <updateTx+0x90>)
 800327a:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	fb03 f202 	mul.w	r2, r3, r2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	441a      	add	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 8003290:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <updateTx+0x90>)
 8003292:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 800329a:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <updateTx+0x90>)
 800329c:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80032a0:	461a      	mov	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa03 f202 	lsl.w	r2, r3, r2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a03      	ldr	r2, [pc, #12]	@ (80032bc <updateTx+0x90>)
 80032ae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000218 	.word	0x20000218

080032c0 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 80032c8:	230f      	movs	r3, #15
 80032ca:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4b48      	ldr	r3, [pc, #288]	@ (80033f0 <nextTx+0x130>)
 80032d0:	4413      	add	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 80032d8:	2300      	movs	r3, #0
 80032da:	73bb      	strb	r3, [r7, #14]
 80032dc:	e01d      	b.n	800331a <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 80032de:	7dfa      	ldrb	r2, [r7, #23]
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	fa42 f303 	asr.w	r3, r2, r3
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <nextTx+0x54>
 80032ee:	7bbb      	ldrb	r3, [r7, #14]
 80032f0:	4a40      	ldr	r2, [pc, #256]	@ (80033f4 <nextTx+0x134>)
 80032f2:	3304      	adds	r3, #4
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	dd08      	ble.n	8003314 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	4a3a      	ldr	r2, [pc, #232]	@ (80033f4 <nextTx+0x134>)
 800330a:	3304      	adds	r3, #4
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8003314:	7bbb      	ldrb	r3, [r7, #14]
 8003316:	3301      	adds	r3, #1
 8003318:	73bb      	strb	r3, [r7, #14]
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d9de      	bls.n	80032de <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	4a34      	ldr	r2, [pc, #208]	@ (80033f4 <nextTx+0x134>)
 8003324:	3304      	adds	r3, #4
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	78db      	ldrb	r3, [r3, #3]
 800332c:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800332e:	2300      	movs	r3, #0
 8003330:	733b      	strb	r3, [r7, #12]
 8003332:	e042      	b.n	80033ba <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	3301      	adds	r3, #1
 8003338:	737b      	strb	r3, [r7, #13]
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d902      	bls.n	8003346 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 8003340:	7b7b      	ldrb	r3, [r7, #13]
 8003342:	3b10      	subs	r3, #16
 8003344:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8003346:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <nextTx+0x134>)
 8003348:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800334c:	461a      	mov	r2, r3
 800334e:	7b7b      	ldrb	r3, [r7, #13]
 8003350:	fa42 f303 	asr.w	r3, r2, r3
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d02b      	beq.n	80033b4 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800335c:	7b7b      	ldrb	r3, [r7, #13]
 800335e:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <nextTx+0x134>)
 8003360:	3340      	adds	r3, #64	@ 0x40
 8003362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003366:	461a      	mov	r2, r3
 8003368:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <nextTx+0x134>)
 800336a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	fa42 f303 	asr.w	r3, r2, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01a      	beq.n	80033b4 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	7b7b      	ldrb	r3, [r7, #13]
 8003382:	491c      	ldr	r1, [pc, #112]	@ (80033f4 <nextTx+0x134>)
 8003384:	3310      	adds	r3, #16
 8003386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800338a:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800338e:	429a      	cmp	r2, r3
 8003390:	d110      	bne.n	80033b4 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	4917      	ldr	r1, [pc, #92]	@ (80033f4 <nextTx+0x134>)
 8003396:	1d13      	adds	r3, r2, #4
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	7b79      	ldrb	r1, [r7, #13]
 800339e:	70d9      	strb	r1, [r3, #3]
 80033a0:	4914      	ldr	r1, [pc, #80]	@ (80033f4 <nextTx+0x134>)
 80033a2:	1d13      	adds	r3, r2, #4
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	78da      	ldrb	r2, [r3, #3]
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <nextTx+0x134>)
 80033ac:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	e016      	b.n	80033e2 <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80033b4:	7b3b      	ldrb	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	733b      	strb	r3, [r7, #12]
 80033ba:	7b3b      	ldrb	r3, [r7, #12]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d9b9      	bls.n	8003334 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2201      	movs	r2, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	b25a      	sxtb	r2, r3
 80033ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b25b      	sxtb	r3, r3
 80033d6:	75fb      	strb	r3, [r7, #23]
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f af76 	bne.w	80032cc <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 80033e0:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	44aa2000 	.word	0x44aa2000
 80033f4:	20000218 	.word	0x20000218

080033f8 <setBcnRxParams>:


static void setBcnRxParams (void) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 80033fc:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <setBcnRxParams+0x48>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <setBcnRxParams+0x48>)
 8003406:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 800340a:	4a0d      	ldr	r2, [pc, #52]	@ (8003440 <setBcnRxParams+0x48>)
 800340c:	3310      	adds	r3, #16
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <setBcnRxParams+0x48>)
 8003418:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800341a:	2003      	movs	r0, #3
 800341c:	f7fe fff6 	bl	800240c <dndr2rps>
 8003420:	4603      	mov	r3, r0
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe ffa2 	bl	800236e <setNocrc>
 800342a:	4603      	mov	r3, r0
 800342c:	2111      	movs	r1, #17
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe ffc3 	bl	80023ba <setIh>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	4b01      	ldr	r3, [pc, #4]	@ (8003440 <setBcnRxParams+0x48>)
 800343a:	81da      	strh	r2, [r3, #14]
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000218 	.word	0x20000218

08003444 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8003444:	b598      	push	{r3, r4, r7, lr}
 8003446:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8003448:	f002 feb0 	bl	80061ac <radio_rand1>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <initJoinLoop+0x64>)
 8003452:	fba3 1302 	umull	r1, r3, r3, r2
 8003456:	0899      	lsrs	r1, r3, #2
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <initJoinLoop+0x68>)
 8003466:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <initJoinLoop+0x68>)
 800346c:	220e      	movs	r2, #14
 800346e:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 8003472:	2105      	movs	r1, #5
 8003474:	2000      	movs	r0, #0
 8003476:	f7ff fd2b 	bl	8002ed0 <setDrJoin>
    initDefaultChannels(1);
 800347a:	2001      	movs	r0, #1
 800347c:	f7ff fd6a 	bl	8002f54 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8003480:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <initJoinLoop+0x68>)
 8003482:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <initJoinLoop+0x4e>
 800348e:	f7fe fe71 	bl	8002174 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <initJoinLoop+0x68>)
 8003494:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003496:	2008      	movs	r0, #8
 8003498:	f7ff fcae 	bl	8002df8 <rndDelay>
 800349c:	4603      	mov	r3, r0
 800349e:	4423      	add	r3, r4
 80034a0:	4a02      	ldr	r2, [pc, #8]	@ (80034ac <initJoinLoop+0x68>)
 80034a2:	6013      	str	r3, [r2, #0]
}
 80034a4:	bf00      	nop
 80034a6:	bd98      	pop	{r3, r4, r7, pc}
 80034a8:	aaaaaaab 	.word	0xaaaaaaab
 80034ac:	20000218 	.word	0x20000218

080034b0 <nextJoinState>:


static ostime_t nextJoinState (void) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 80034ba:	4b30      	ldr	r3, [pc, #192]	@ (800357c <nextJoinState+0xcc>)
 80034bc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80034c0:	3301      	adds	r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <nextJoinState+0xcc>)
 80034c6:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 80034ca:	4b2c      	ldr	r3, [pc, #176]	@ (800357c <nextJoinState+0xcc>)
 80034cc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d103      	bne.n	80034dc <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 80034d4:	4b29      	ldr	r3, [pc, #164]	@ (800357c <nextJoinState+0xcc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <nextJoinState+0xcc>)
 80034de:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b25      	ldr	r3, [pc, #148]	@ (800357c <nextJoinState+0xcc>)
 80034e8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 80034ec:	4b23      	ldr	r3, [pc, #140]	@ (800357c <nextJoinState+0xcc>)
 80034ee:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d112      	bne.n	8003520 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 80034fa:	4b20      	ldr	r3, [pc, #128]	@ (800357c <nextJoinState+0xcc>)
 80034fc:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8003504:	2301      	movs	r3, #1
 8003506:	71fb      	strb	r3, [r7, #7]
 8003508:	e00a      	b.n	8003520 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 800350a:	4b1c      	ldr	r3, [pc, #112]	@ (800357c <nextJoinState+0xcc>)
 800350c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe ff8f 	bl	8002434 <decDR>
 8003516:	4603      	mov	r3, r0
 8003518:	4619      	mov	r1, r3
 800351a:	2001      	movs	r0, #1
 800351c:	f7ff fcd8 	bl	8002ed0 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8003520:	4b16      	ldr	r3, [pc, #88]	@ (800357c <nextJoinState+0xcc>)
 8003522:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800352a:	b29a      	uxth	r2, r3
 800352c:	4b13      	ldr	r3, [pc, #76]	@ (800357c <nextJoinState+0xcc>)
 800352e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8003532:	f002 f911 	bl	8005758 <os_getTime>
 8003536:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8003538:	4b10      	ldr	r3, [pc, #64]	@ (800357c <nextJoinState+0xcc>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	da02      	bge.n	800354a <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <nextJoinState+0xcc>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <nextJoinState+0xcc>)
 800354c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003550:	461a      	mov	r2, r3
 8003552:	23ff      	movs	r3, #255	@ 0xff
 8003554:	4113      	asrs	r3, r2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fc4d 	bl	8002df8 <rndDelay>
 800355e:	4603      	mov	r3, r0
 8003560:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8003564:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a03      	ldr	r2, [pc, #12]	@ (800357c <nextJoinState+0xcc>)
 800356e:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8003570:	79fb      	ldrb	r3, [r7, #7]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000218 	.word	0x20000218

08003580 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8003588:	f001 fcb6 	bl	8004ef8 <engineUpdate>
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <reportEvent>:


static void reportEvent (ev_t ev) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 ffe5 	bl	8005570 <onEvent>
    engineUpdate();
 80035a6:	f001 fca7 	bl	8004ef8 <engineUpdate>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <runReset>:


static void runReset (xref2osjob_t osjob) {
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 80035ba:	f001 fe67 	bl	800528c <LMIC_reset>
    LMIC_startJoining();
 80035be:	f001 fa0f 	bl	80049e0 <LMIC_startJoining>
    reportEvent(EV_RESET);
 80035c2:	200c      	movs	r0, #12
 80035c4:	f7ff ffe6 	bl	8003594 <reportEvent>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <stateJustJoined>:

static void stateJustJoined (void) {
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003694 <stateJustJoined+0xc4>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80035dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <stateJustJoined+0xc4>)
 80035de:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80035e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <stateJustJoined+0xc4>)
 80035e4:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <stateJustJoined+0xc4>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80035f0:	4b28      	ldr	r3, [pc, #160]	@ (8003694 <stateJustJoined+0xc4>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 80035f8:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <stateJustJoined+0xc4>)
 80035fa:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 80035fe:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <stateJustJoined+0xc4>)
 8003600:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8003604:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <stateJustJoined+0xc4>)
 8003606:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800360a:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <stateJustJoined+0xc4>)
 800360c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8003610:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <stateJustJoined+0xc4>)
 8003612:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8003616:	4b1f      	ldr	r3, [pc, #124]	@ (8003694 <stateJustJoined+0xc4>)
 8003618:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <stateJustJoined+0xc4>)
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <stateJustJoined+0xc4>)
 8003626:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 800362a:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <stateJustJoined+0xc4>)
 800362c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8003630:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <stateJustJoined+0xc4>)
 8003632:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8003636:	4b17      	ldr	r3, [pc, #92]	@ (8003694 <stateJustJoined+0xc4>)
 8003638:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800363c:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <stateJustJoined+0xc4>)
 800363e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <stateJustJoined+0xc4>)
 8003644:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <stateJustJoined+0xc4>)
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 8003650:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <stateJustJoined+0xc4>)
 8003652:	2200      	movs	r2, #0
 8003654:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8003658:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <stateJustJoined+0xc4>)
 800365a:	22f4      	movs	r2, #244	@ 0xf4
 800365c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <stateJustJoined+0xc4>)
 8003662:	2200      	movs	r2, #0
 8003664:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <stateJustJoined+0xc4>)
 800366a:	4a0b      	ldr	r2, [pc, #44]	@ (8003698 <stateJustJoined+0xc8>)
 800366c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <stateJustJoined+0xc4>)
 8003672:	2205      	movs	r2, #5
 8003674:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <stateJustJoined+0xc4>)
 800367a:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <stateJustJoined+0xc8>)
 800367c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <stateJustJoined+0xc4>)
 8003682:	2203      	movs	r2, #3
 8003684:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000218 	.word	0x20000218
 8003698:	33d3e608 	.word	0x33d3e608

0800369c <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80036a2:	4b46      	ldr	r3, [pc, #280]	@ (80037bc <decodeBeacon+0x120>)
 80036a4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80036a8:	2b11      	cmp	r3, #17
 80036aa:	d001      	beq.n	80036b0 <decodeBeacon+0x14>
 80036ac:	f7fe fd62 	bl	8002174 <hal_failed>
    xref2u1_t d = LMIC.frame;
 80036b0:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <decodeBeacon+0x124>)
 80036b2:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3307      	adds	r3, #7
 80036b8:	781c      	ldrb	r4, [r3, #0]
 80036ba:	2107      	movs	r1, #7
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe ffb0 	bl	8002622 <os_crc16>
 80036c2:	4603      	mov	r3, r0
 80036c4:	b2db      	uxtb	r3, r3
    if(
 80036c6:	429c      	cmp	r4, r3
 80036c8:	d001      	beq.n	80036ce <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 80036ca:	2300      	movs	r3, #0
 80036cc:	e071      	b.n	80037b2 <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe ff0c 	bl	80024ec <os_rlsbf4>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036da:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 80036dc:	4b37      	ldr	r3, [pc, #220]	@ (80037bc <decodeBeacon+0x120>)
 80036de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d002      	beq.n	80036ee <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	e061      	b.n	80037b2 <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 80036ee:	4b33      	ldr	r3, [pc, #204]	@ (80037bc <decodeBeacon+0x120>)
 80036f0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80036f4:	f023 0303 	bic.w	r3, r3, #3
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4b30      	ldr	r3, [pc, #192]	@ (80037bc <decodeBeacon+0x120>)
 80036fc:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8003700:	4b2e      	ldr	r3, [pc, #184]	@ (80037bc <decodeBeacon+0x120>)
 8003702:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8003706:	4b2d      	ldr	r3, [pc, #180]	@ (80037bc <decodeBeacon+0x120>)
 8003708:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 800370c:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <decodeBeacon+0x120>)
 800370e:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003712:	4b2a      	ldr	r3, [pc, #168]	@ (80037bc <decodeBeacon+0x120>)
 8003714:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8003718:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <decodeBeacon+0x120>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8003720:	3b0c      	subs	r3, #12
 8003722:	4a26      	ldr	r2, [pc, #152]	@ (80037bc <decodeBeacon+0x120>)
 8003724:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3303      	adds	r3, #3
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fedd 	bl	80024ec <os_rlsbf4>
 8003732:	4603      	mov	r3, r0
 8003734:	4a21      	ldr	r2, [pc, #132]	@ (80037bc <decodeBeacon+0x120>)
 8003736:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <decodeBeacon+0x120>)
 800373c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <decodeBeacon+0x120>)
 8003748:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	330f      	adds	r3, #15
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe feb6 	bl	80024c2 <os_rlsbf2>
 8003756:	4603      	mov	r3, r0
 8003758:	461c      	mov	r4, r3
 800375a:	210f      	movs	r1, #15
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fe ff60 	bl	8002622 <os_crc16>
 8003762:	4603      	mov	r3, r0
 8003764:	429c      	cmp	r4, r3
 8003766:	d001      	beq.n	800376c <decodeBeacon+0xd0>
        return 1;
 8003768:	2301      	movs	r3, #1
 800376a:	e022      	b.n	80037b2 <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3308      	adds	r3, #8
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe febb 	bl	80024ec <os_rlsbf4>
 8003776:	4603      	mov	r3, r0
 8003778:	121b      	asrs	r3, r3, #8
 800377a:	4a10      	ldr	r2, [pc, #64]	@ (80037bc <decodeBeacon+0x120>)
 800377c:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	330b      	adds	r3, #11
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe feb1 	bl	80024ec <os_rlsbf4>
 800378a:	4603      	mov	r3, r0
 800378c:	121b      	asrs	r3, r3, #8
 800378e:	4a0b      	ldr	r2, [pc, #44]	@ (80037bc <decodeBeacon+0x120>)
 8003790:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7a1a      	ldrb	r2, [r3, #8]
 8003798:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <decodeBeacon+0x120>)
 800379a:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 800379e:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <decodeBeacon+0x120>)
 80037a0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <decodeBeacon+0x120>)
 80037ac:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 80037b0:	2302      	movs	r3, #2
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd90      	pop	{r4, r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000218 	.word	0x20000218
 80037c0:	20000360 	.word	0x20000360

080037c4 <decodeFrame>:


static bit_t decodeFrame (void) {
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b09b      	sub	sp, #108	@ 0x6c
 80037c8:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 80037ca:	4b98      	ldr	r3, [pc, #608]	@ (8003a2c <decodeFrame+0x268>)
 80037cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 80037ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 80037d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037da:	f023 031f 	bic.w	r3, r3, #31
 80037de:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 80037e2:	4b93      	ldr	r3, [pc, #588]	@ (8003a30 <decodeFrame+0x26c>)
 80037e4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 80037ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ec:	2b0b      	cmp	r3, #11
 80037ee:	dd0d      	ble.n	800380c <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80037f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037f4:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80037fc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003800:	2b60      	cmp	r3, #96	@ 0x60
 8003802:	d014      	beq.n	800382e <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8003804:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003808:	2ba0      	cmp	r3, #160	@ 0xa0
 800380a:	d010      	beq.n	800382e <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 800380c:	bf00      	nop
 800380e:	e008      	b.n	8003822 <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8003810:	bf00      	nop
 8003812:	e006      	b.n	8003822 <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8003814:	bf00      	nop
 8003816:	e004      	b.n	8003822 <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8003818:	bf00      	nop
 800381a:	e002      	b.n	8003822 <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 800381c:	bf00      	nop
 800381e:	e000      	b.n	8003822 <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8003820:	bf00      	nop
        LMIC.dataLen = 0;
 8003822:	4b83      	ldr	r3, [pc, #524]	@ (8003a30 <decodeFrame+0x26c>)
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 800382a:	2300      	movs	r3, #0
 800382c:	e2f6      	b.n	8003e1c <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 800382e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003830:	3305      	adds	r3, #5
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8003836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003838:	3301      	adds	r3, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fe56 	bl	80024ec <os_rlsbf4>
 8003840:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8003842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003844:	3306      	adds	r3, #6
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fe3b 	bl	80024c2 <os_rlsbf2>
 800384c:	4603      	mov	r3, r0
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 8003850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8003858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385a:	115b      	asrs	r3, r3, #5
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	3308      	adds	r3, #8
 8003866:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 8003868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386a:	3b04      	subs	r3, #4
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 800386e:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <decodeFrame+0x26c>)
 8003870:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003876:	429a      	cmp	r2, r3
 8003878:	d1ca      	bne.n	8003810 <decodeFrame+0x4c>
    if( poff > pend ) {
 800387a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	429a      	cmp	r2, r3
 8003880:	dcc8      	bgt.n	8003814 <decodeFrame+0x50>
    int port = -1;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 800388c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800388e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003890:	429a      	cmp	r2, r3
 8003892:	dd07      	ble.n	80038a4 <decodeFrame+0xe0>
        port = d[poff++];
 8003894:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800389a:	461a      	mov	r2, r3
 800389c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 80038a4:	4b62      	ldr	r3, [pc, #392]	@ (8003a30 <decodeFrame+0x26c>)
 80038a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80038aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ac:	b291      	uxth	r1, r2
 80038ae:	4a60      	ldr	r2, [pc, #384]	@ (8003a30 <decodeFrame+0x26c>)
 80038b0:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 80038b4:	b292      	uxth	r2, r2
 80038b6:	1a8a      	subs	r2, r1, r2
 80038b8:	b292      	uxth	r2, r2
 80038ba:	4413      	add	r3, r2
 80038bc:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 80038be:	4b5c      	ldr	r3, [pc, #368]	@ (8003a30 <decodeFrame+0x26c>)
 80038c0:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2301      	movs	r3, #1
 80038ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038d0:	4858      	ldr	r0, [pc, #352]	@ (8003a34 <decodeFrame+0x270>)
 80038d2:	f7fe ff19 	bl	8002708 <aes_verifyMic>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d09d      	beq.n	8003818 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 80038dc:	4b54      	ldr	r3, [pc, #336]	@ (8003a30 <decodeFrame+0x26c>)
 80038de:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80038e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d219      	bcs.n	800391c <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 80038e8:	4b51      	ldr	r3, [pc, #324]	@ (8003a30 <decodeFrame+0x26c>)
 80038ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80038ee:	461a      	mov	r2, r3
 80038f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f2:	429a      	cmp	r2, r3
 80038f4:	db92      	blt.n	800381c <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 80038f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a30 <decodeFrame+0x26c>)
 80038f8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80038fc:	3b01      	subs	r3, #1
 80038fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003900:	429a      	cmp	r2, r3
 8003902:	d18d      	bne.n	8003820 <decodeFrame+0x5c>
 8003904:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <decodeFrame+0x26c>)
 8003906:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800390a:	2b00      	cmp	r3, #0
 800390c:	d088      	beq.n	8003820 <decodeFrame+0x5c>
 800390e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003912:	2ba0      	cmp	r3, #160	@ 0xa0
 8003914:	d184      	bne.n	8003820 <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	657b      	str	r3, [r7, #84]	@ 0x54
 800391a:	e00e      	b.n	800393a <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 800391c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391e:	3301      	adds	r3, #1
 8003920:	4a43      	ldr	r2, [pc, #268]	@ (8003a30 <decodeFrame+0x26c>)
 8003922:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8003926:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800392a:	2ba0      	cmp	r3, #160	@ 0xa0
 800392c:	d101      	bne.n	8003932 <decodeFrame+0x16e>
 800392e:	2220      	movs	r2, #32
 8003930:	e000      	b.n	8003934 <decodeFrame+0x170>
 8003932:	2200      	movs	r2, #0
 8003934:	4b3e      	ldr	r3, [pc, #248]	@ (8003a30 <decodeFrame+0x26c>)
 8003936:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 800393a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a30 <decodeFrame+0x26c>)
 800393c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <decodeFrame+0x18a>
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 800394e:	4b38      	ldr	r3, [pc, #224]	@ (8003a30 <decodeFrame+0x26c>)
 8003950:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	b29a      	uxth	r2, r3
 800395a:	4b35      	ldr	r3, [pc, #212]	@ (8003a30 <decodeFrame+0x26c>)
 800395c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8003960:	4b33      	ldr	r3, [pc, #204]	@ (8003a30 <decodeFrame+0x26c>)
 8003962:	2200      	movs	r2, #0
 8003964:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8003968:	4b31      	ldr	r3, [pc, #196]	@ (8003a30 <decodeFrame+0x26c>)
 800396a:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800396e:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <decodeFrame+0x26c>)
 8003970:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003974:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <decodeFrame+0x26c>)
 8003976:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800397a:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800397e:	d003      	beq.n	8003988 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8003980:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <decodeFrame+0x26c>)
 8003982:	22f4      	movs	r2, #244	@ 0xf4
 8003984:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8003988:	4b29      	ldr	r3, [pc, #164]	@ (8003a30 <decodeFrame+0x26c>)
 800398a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800398e:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8003992:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <decodeFrame+0x26c>)
 8003994:	89db      	ldrh	r3, [r3, #14]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe ffe0 	bl	800295c <getSensitivity>
 800399c:	4603      	mov	r3, r0
 800399e:	1ae3      	subs	r3, r4, r3
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db05      	blt.n	80039b4 <decodeFrame+0x1f0>
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80039ac:	bfa8      	it	ge
 80039ae:	23fe      	movge	r3, #254	@ 0xfe
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e000      	b.n	80039b6 <decodeFrame+0x1f2>
 80039b4:	2300      	movs	r3, #0
 80039b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a30 <decodeFrame+0x26c>)
 80039b8:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 80039bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039be:	3308      	adds	r3, #8
 80039c0:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 80039c6:	e1b5      	b.n	8003d34 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 80039c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ca:	6a3a      	ldr	r2, [r7, #32]
 80039cc:	4413      	add	r3, r2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	3b02      	subs	r3, #2
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	f200 81ba 	bhi.w	8003d4c <decodeFrame+0x588>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <decodeFrame+0x21c>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a25 	.word	0x08003a25
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	08003b97 	.word	0x08003b97
 80039ec:	08003b13 	.word	0x08003b13
 80039f0:	08003b03 	.word	0x08003b03
 80039f4:	08003be5 	.word	0x08003be5
 80039f8:	08003d4d 	.word	0x08003d4d
 80039fc:	08003d4d 	.word	0x08003d4d
 8003a00:	08003d4d 	.word	0x08003d4d
 8003a04:	08003d4d 	.word	0x08003d4d
 8003a08:	08003d4d 	.word	0x08003d4d
 8003a0c:	08003d4d 	.word	0x08003d4d
 8003a10:	08003d4d 	.word	0x08003d4d
 8003a14:	08003d4d 	.word	0x08003d4d
 8003a18:	08003d4d 	.word	0x08003d4d
 8003a1c:	08003c71 	.word	0x08003c71
 8003a20:	08003cb3 	.word	0x08003cb3
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8003a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a26:	3303      	adds	r3, #3
 8003a28:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003a2a:	e183      	b.n	8003d34 <decodeFrame+0x570>
 8003a2c:	20000360 	.word	0x20000360
 8003a30:	20000218 	.word	0x20000218
 8003a34:	2000030c 	.word	0x2000030c
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8003a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8003a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a46:	3302      	adds	r3, #2
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fd38 	bl	80024c2 <os_rlsbf2>
 8003a52:	4603      	mov	r3, r0
 8003a54:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8003a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a58:	3304      	adds	r3, #4
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f023 030f 	bic.w	r3, r3, #15
 8003a64:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8003a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a68:	3304      	adds	r3, #4
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 8003a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a78:	3305      	adds	r3, #5
 8003a7a:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8003a7c:	4bb0      	ldr	r3, [pc, #704]	@ (8003d40 <decodeFrame+0x57c>)
 8003a7e:	2287      	movs	r2, #135	@ 0x87
 8003a80:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8003a84:	893a      	ldrh	r2, [r7, #8]
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fb84 	bl	8003198 <mapChannels>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8003a96:	4baa      	ldr	r3, [pc, #680]	@ (8003d40 <decodeFrame+0x57c>)
 8003a98:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4ba7      	ldr	r3, [pc, #668]	@ (8003d40 <decodeFrame+0x57c>)
 8003aa4:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8003aa8:	7abb      	ldrb	r3, [r7, #10]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 8003aae:	797b      	ldrb	r3, [r7, #5]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fcd7 	bl	8002464 <validDR>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8003abc:	4ba0      	ldr	r3, [pc, #640]	@ (8003d40 <decodeFrame+0x57c>)
 8003abe:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	4b9d      	ldr	r3, [pc, #628]	@ (8003d40 <decodeFrame+0x57c>)
 8003aca:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8003ace:	4b9c      	ldr	r3, [pc, #624]	@ (8003d40 <decodeFrame+0x57c>)
 8003ad0:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad8:	2b07      	cmp	r3, #7
 8003ada:	d10d      	bne.n	8003af8 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8003adc:	4a98      	ldr	r2, [pc, #608]	@ (8003d40 <decodeFrame+0x57c>)
 8003ade:	79bb      	ldrb	r3, [r7, #6]
 8003ae0:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8003ae4:	7abb      	ldrb	r3, [r7, #10]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	4a96      	ldr	r2, [pc, #600]	@ (8003d44 <decodeFrame+0x580>)
 8003aec:	56d2      	ldrsb	r2, [r2, r3]
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	4619      	mov	r1, r3
 8003af2:	2004      	movs	r0, #4
 8003af4:	f7ff fa00 	bl	8002ef8 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8003af8:	4b91      	ldr	r3, [pc, #580]	@ (8003d40 <decodeFrame+0x57c>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 8003b00:	e118      	b.n	8003d34 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8003b02:	4b8f      	ldr	r3, [pc, #572]	@ (8003d40 <decodeFrame+0x57c>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 8003b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003b10:	e110      	b.n	8003d34 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8003b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b14:	3301      	adds	r3, #1
 8003b16:	6a3a      	ldr	r2, [r7, #32]
 8003b18:	4413      	add	r3, r2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 8003b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b24:	3302      	adds	r3, #2
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	4413      	add	r3, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fb12 	bl	8003154 <convFreq>
 8003b30:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 8003b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b34:	3305      	adds	r3, #5
 8003b36:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8003b38:	4b81      	ldr	r3, [pc, #516]	@ (8003d40 <decodeFrame+0x57c>)
 8003b3a:	2280      	movs	r2, #128	@ 0x80
 8003b3c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 8003b40:	7cbb      	ldrb	r3, [r7, #18]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fc8e 	bl	8002464 <validDR>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8003b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d40 <decodeFrame+0x57c>)
 8003b50:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b79      	ldr	r3, [pc, #484]	@ (8003d40 <decodeFrame+0x57c>)
 8003b5c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8003b66:	4b76      	ldr	r3, [pc, #472]	@ (8003d40 <decodeFrame+0x57c>)
 8003b68:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b73      	ldr	r3, [pc, #460]	@ (8003d40 <decodeFrame+0x57c>)
 8003b74:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8003b78:	4b71      	ldr	r3, [pc, #452]	@ (8003d40 <decodeFrame+0x57c>)
 8003b7a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003b7e:	2b83      	cmp	r3, #131	@ 0x83
 8003b80:	f040 80d7 	bne.w	8003d32 <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8003b84:	4a6e      	ldr	r2, [pc, #440]	@ (8003d40 <decodeFrame+0x57c>)
 8003b86:	7cbb      	ldrb	r3, [r7, #18]
 8003b88:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 8003b8c:	4a6c      	ldr	r2, [pc, #432]	@ (8003d40 <decodeFrame+0x57c>)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8003b94:	e0cd      	b.n	8003d32 <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8003b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b98:	3301      	adds	r3, #1
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 8003ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	2bff      	cmp	r3, #255	@ 0xff
 8003bac:	d108      	bne.n	8003bc0 <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8003bae:	4b64      	ldr	r3, [pc, #400]	@ (8003d40 <decodeFrame+0x57c>)
 8003bb0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	4b61      	ldr	r3, [pc, #388]	@ (8003d40 <decodeFrame+0x57c>)
 8003bbc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d40 <decodeFrame+0x57c>)
 8003bca:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8003bce:	f001 fdc3 	bl	8005758 <os_getTime>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d40 <decodeFrame+0x57c>)
 8003bd6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003bda:	4b59      	ldr	r3, [pc, #356]	@ (8003d40 <decodeFrame+0x57c>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 8003be2:	e0a7      	b.n	8003d34 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8003be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be6:	3301      	adds	r3, #1
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff faab 	bl	8003154 <convFreq>
 8003bfe:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 8003c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c02:	3305      	adds	r3, #5
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d40 <decodeFrame+0x57c>)
 8003c0e:	2280      	movs	r2, #128	@ 0x80
 8003c10:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d026      	beq.n	8003c68 <decodeFrame+0x4a4>
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	7cfb      	ldrb	r3, [r7, #19]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f1c3 030f 	rsb	r3, r3, #15
 8003c34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003c38:	fa41 f303 	asr.w	r3, r1, r3
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4013      	ands	r3, r2
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	7ef8      	ldrb	r0, [r7, #27]
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	6979      	ldr	r1, [r7, #20]
 8003c4c:	f7ff fa08 	bl	8003060 <LMIC_setupChannel>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8003c56:	4b3a      	ldr	r3, [pc, #232]	@ (8003d40 <decodeFrame+0x57c>)
 8003c58:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003c5c:	f043 0303 	orr.w	r3, r3, #3
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b37      	ldr	r3, [pc, #220]	@ (8003d40 <decodeFrame+0x57c>)
 8003c64:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 8003c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6a:	3306      	adds	r3, #6
 8003c6c:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003c6e:	e061      	b.n	8003d34 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8003c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c72:	3301      	adds	r3, #1
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	4413      	add	r3, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fa6b 	bl	8003154 <convFreq>
 8003c7e:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 8003c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c82:	3304      	adds	r3, #4
 8003c84:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 8003c86:	2380      	movs	r3, #128	@ 0x80
 8003c88:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8003c92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 8003c9e:	4a28      	ldr	r2, [pc, #160]	@ (8003d40 <decodeFrame+0x57c>)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8003ca6:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <decodeFrame+0x57c>)
 8003ca8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003cac:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 8003cb0:	e040      	b.n	8003d34 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8003cb2:	4b23      	ldr	r3, [pc, #140]	@ (8003d40 <decodeFrame+0x57c>)
 8003cb4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d134      	bne.n	8003d2a <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc2:	3303      	adds	r3, #3
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <decodeFrame+0x57c>)
 8003ccc:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <decodeFrame+0x57c>)
 8003cd2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	4b18      	ldr	r3, [pc, #96]	@ (8003d40 <decodeFrame+0x57c>)
 8003cde:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8003ce2:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <decodeFrame+0x57c>)
 8003ce4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <decodeFrame+0x52c>
 8003cec:	f7fe fa42 	bl	8002174 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <decodeFrame+0x57c>)
 8003cf2:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fbe0 	bl	80024c2 <os_rlsbf2>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8003d10:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <decodeFrame+0x584>)
 8003d12:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003d14:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <decodeFrame+0x57c>)
 8003d16:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <decodeFrame+0x57c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8003d22:	2101      	movs	r1, #1
 8003d24:	201e      	movs	r0, #30
 8003d26:	f7fe ff25 	bl	8002b74 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8003d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003d30:	e000      	b.n	8003d34 <decodeFrame+0x570>
            continue;
 8003d32:	bf00      	nop
    while( oidx < olen ) {
 8003d34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f6ff ae45 	blt.w	80039c8 <decodeFrame+0x204>
 8003d3e:	e006      	b.n	8003d4e <decodeFrame+0x58a>
 8003d40:	20000218 	.word	0x20000218
 8003d44:	080104bc 	.word	0x080104bc
 8003d48:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003d4c:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11d      	bne.n	8003d90 <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8003d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	db1a      	blt.n	8003d90 <decodeFrame+0x5cc>
 8003d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dd15      	ble.n	8003d90 <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8003d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dc01      	bgt.n	8003d6e <decodeFrame+0x5aa>
 8003d6a:	482e      	ldr	r0, [pc, #184]	@ (8003e24 <decodeFrame+0x660>)
 8003d6c:	e000      	b.n	8003d70 <decodeFrame+0x5ac>
 8003d6e:	482e      	ldr	r0, [pc, #184]	@ (8003e28 <decodeFrame+0x664>)
 8003d70:	4b2e      	ldr	r3, [pc, #184]	@ (8003e2c <decodeFrame+0x668>)
 8003d72:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 8003d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d7a:	4413      	add	r3, r2
 8003d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d80:	1a8a      	subs	r2, r1, r2
 8003d82:	9201      	str	r2, [sp, #4]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2301      	movs	r3, #1
 8003d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	f7fe fd66 	bl	800285c <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8003d94:	4b25      	ldr	r3, [pc, #148]	@ (8003e2c <decodeFrame+0x668>)
 8003d96:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003d9e:	4b23      	ldr	r3, [pc, #140]	@ (8003e2c <decodeFrame+0x668>)
 8003da0:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da8:	2a00      	cmp	r2, #0
 8003daa:	d002      	beq.n	8003db2 <decodeFrame+0x5ee>
 8003dac:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003db0:	e000      	b.n	8003db4 <decodeFrame+0x5f0>
 8003db2:	2240      	movs	r2, #64	@ 0x40
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <decodeFrame+0x668>)
 8003dbc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 8003dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da12      	bge.n	8003dec <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003dc6:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <decodeFrame+0x668>)
 8003dc8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003dcc:	f043 0320 	orr.w	r3, r3, #32
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4b16      	ldr	r3, [pc, #88]	@ (8003e2c <decodeFrame+0x668>)
 8003dd4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <decodeFrame+0x668>)
 8003dde:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <decodeFrame+0x668>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003dea:	e016      	b.n	8003e1a <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003dec:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <decodeFrame+0x668>)
 8003dee:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003df2:	f043 0310 	orr.w	r3, r3, #16
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <decodeFrame+0x668>)
 8003dfa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <decodeFrame+0x668>)
 8003e04:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <decodeFrame+0x668>)
 8003e16:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3764      	adds	r7, #100	@ 0x64
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	2000030c 	.word	0x2000030c
 8003e28:	2000031c 	.word	0x2000031c
 8003e2c:	20000218 	.word	0x20000218

08003e30 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003e34:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <setupRx2+0x3c>)
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <setupRx2+0x3c>)
 8003e3e:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fae2 	bl	800240c <dndr2rps>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <setupRx2+0x3c>)
 8003e4e:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003e50:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <setupRx2+0x3c>)
 8003e52:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003e56:	4a05      	ldr	r2, [pc, #20]	@ (8003e6c <setupRx2+0x3c>)
 8003e58:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003e5a:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <setupRx2+0x3c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 8003e62:	2002      	movs	r0, #2
 8003e64:	f002 fa9e 	bl	80063a4 <os_radio>
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000218 	.word	0x20000218

08003e70 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <schedRx2+0x44>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	18d1      	adds	r1, r2, r3
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <schedRx2+0x44>)
 8003e84:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <schedRx2+0x48>)
 8003e8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	4a06      	ldr	r2, [pc, #24]	@ (8003eb4 <schedRx2+0x44>)
 8003e9a:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <schedRx2+0x44>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	3b40      	subs	r3, #64	@ 0x40
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4805      	ldr	r0, [pc, #20]	@ (8003ebc <schedRx2+0x4c>)
 8003ea8:	f001 fcc0 	bl	800582c <os_setTimedCallback>
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000218 	.word	0x20000218
 8003eb8:	080104f0 	.word	0x080104f0
 8003ebc:	2000022c 	.word	0x2000022c

08003ec0 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <setupRx1+0x40>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <setupRx1+0x40>)
 8003ed2:	89db      	ldrh	r3, [r3, #14]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fa49 	bl	800236e <setNocrc>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <setupRx1+0x40>)
 8003ee2:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <setupRx1+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 8003eec:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <setupRx1+0x40>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003ef2:	2002      	movs	r0, #2
 8003ef4:	f002 fa56 	bl	80063a4 <os_radio>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000218 	.word	0x20000218

08003f04 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 8003f0e:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <txDone+0x94>)
 8003f10:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f14:	461a      	mov	r2, r3
 8003f16:	f240 6302 	movw	r3, #1538	@ 0x602
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	f240 4202 	movw	r2, #1026	@ 0x402
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10b      	bne.n	8003f3c <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003f24:	481d      	ldr	r0, [pc, #116]	@ (8003f9c <txDone+0x98>)
 8003f26:	f7fe feab 	bl	8002c80 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f98 <txDone+0x94>)
 8003f2c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <txDone+0x94>)
 8003f38:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003f3c:	4b16      	ldr	r3, [pc, #88]	@ (8003f98 <txDone+0x94>)
 8003f3e:	7c1b      	ldrb	r3, [r3, #16]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	d10a      	bne.n	8003f5a <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003f44:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <txDone+0x94>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3b05      	subs	r3, #5
 8003f4e:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <txDone+0x94>)
 8003f50:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003f52:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <txDone+0x94>)
 8003f54:	2208      	movs	r2, #8
 8003f56:	741a      	strb	r2, [r3, #16]
 8003f58:	e012      	b.n	8003f80 <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f98 <txDone+0x94>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	18d1      	adds	r1, r2, r3
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <txDone+0x94>)
 8003f64:	7c5b      	ldrb	r3, [r3, #17]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <txDone+0x9c>)
 8003f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <txDone+0x94>)
 8003f78:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003f7a:	4b07      	ldr	r3, [pc, #28]	@ (8003f98 <txDone+0x94>)
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003f80:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <txDone+0x94>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	3b40      	subs	r3, #64	@ 0x40
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4806      	ldr	r0, [pc, #24]	@ (8003fa4 <txDone+0xa0>)
 8003f8c:	f001 fc4e 	bl	800582c <os_setTimedCallback>
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000218 	.word	0x20000218
 8003f9c:	2000034c 	.word	0x2000034c
 8003fa0:	080104f0 	.word	0x080104f0
 8003fa4:	2000022c 	.word	0x2000022c

08003fa8 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 8003fb0:	2008      	movs	r0, #8
 8003fb2:	f7ff faef 	bl	8003594 <reportEvent>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003fc6:	4b99      	ldr	r3, [pc, #612]	@ (800422c <processJoinAccept+0x26c>)
 8003fc8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <processJoinAccept+0x1e>
 8003fd0:	4b96      	ldr	r3, [pc, #600]	@ (800422c <processJoinAccept+0x26c>)
 8003fd2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <processJoinAccept+0x1e>
 8003fda:	f7fe f8cb 	bl	8002174 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003fde:	4b93      	ldr	r3, [pc, #588]	@ (800422c <processJoinAccept+0x26c>)
 8003fe0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <processJoinAccept+0x30>
 8003fec:	f7fe f8c2 	bl	8002174 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800422c <processJoinAccept+0x26c>)
 8003ff2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d14c      	bne.n	8004094 <processJoinAccept+0xd4>
      nojoinframe:
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 8003ffe:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8004000:	4b8a      	ldr	r3, [pc, #552]	@ (800422c <processJoinAccept+0x26c>)
 8004002:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d123      	bne.n	8004056 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800400e:	4b87      	ldr	r3, [pc, #540]	@ (800422c <processJoinAccept+0x26c>)
 8004010:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <processJoinAccept+0x60>
 800401c:	f7fe f8aa 	bl	8002174 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8004020:	4b82      	ldr	r3, [pc, #520]	@ (800422c <processJoinAccept+0x26c>)
 8004022:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004026:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800402a:	b29a      	uxth	r2, r3
 800402c:	4b7f      	ldr	r3, [pc, #508]	@ (800422c <processJoinAccept+0x26c>)
 800402e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 8004032:	4b7e      	ldr	r3, [pc, #504]	@ (800422c <processJoinAccept+0x26c>)
 8004034:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8004038:	2b09      	cmp	r3, #9
 800403a:	d807      	bhi.n	800404c <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 800403c:	4b7b      	ldr	r3, [pc, #492]	@ (800422c <processJoinAccept+0x26c>)
 800403e:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8004042:	3301      	adds	r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b79      	ldr	r3, [pc, #484]	@ (800422c <processJoinAccept+0x26c>)
 8004048:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 800404c:	2009      	movs	r0, #9
 800404e:	f7ff faa1 	bl	8003594 <reportEvent>
            return 1;
 8004052:	2301      	movs	r3, #1
 8004054:	e0e6      	b.n	8004224 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8004056:	4b75      	ldr	r3, [pc, #468]	@ (800422c <processJoinAccept+0x26c>)
 8004058:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800405c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004060:	b29a      	uxth	r2, r3
 8004062:	4b72      	ldr	r3, [pc, #456]	@ (800422c <processJoinAccept+0x26c>)
 8004064:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8004068:	f7ff fa22 	bl	80034b0 <nextJoinState>
 800406c:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800406e:	f001 fb73 	bl	8005758 <os_getTime>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <processJoinAccept+0xc6>
 8004082:	4b6b      	ldr	r3, [pc, #428]	@ (8004230 <processJoinAccept+0x270>)
 8004084:	e000      	b.n	8004088 <processJoinAccept+0xc8>
 8004086:	4b6b      	ldr	r3, [pc, #428]	@ (8004234 <processJoinAccept+0x274>)
 8004088:	461a      	mov	r2, r3
 800408a:	486b      	ldr	r0, [pc, #428]	@ (8004238 <processJoinAccept+0x278>)
 800408c:	f001 fbce 	bl	800582c <os_setTimedCallback>
        return 1;
 8004090:	2301      	movs	r3, #1
 8004092:	e0c7      	b.n	8004224 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 8004094:	4b65      	ldr	r3, [pc, #404]	@ (800422c <processJoinAccept+0x26c>)
 8004096:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800409a:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 800409c:	4b63      	ldr	r3, [pc, #396]	@ (800422c <processJoinAccept+0x26c>)
 800409e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80040a2:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	3b04      	subs	r3, #4
 80040a8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80040ac:	4a5f      	ldr	r2, [pc, #380]	@ (800422c <processJoinAccept+0x26c>)
 80040ae:	4413      	add	r3, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fa1b 	bl	80024ec <os_rlsbf4>
 80040b6:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b11      	cmp	r3, #17
 80040bc:	d002      	beq.n	80040c4 <processJoinAccept+0x104>
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b21      	cmp	r3, #33	@ 0x21
 80040c2:	d104      	bne.n	80040ce <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 80040c4:	7d7b      	ldrb	r3, [r7, #21]
 80040c6:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d00b      	beq.n	80040e6 <processJoinAccept+0x126>
      badframe:
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 80040d2:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80040d4:	4b55      	ldr	r3, [pc, #340]	@ (800422c <processJoinAccept+0x26c>)
 80040d6:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d08d      	beq.n	8003ffe <processJoinAccept+0x3e>
            return 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e09e      	b.n	8004224 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 80040e6:	4a55      	ldr	r2, [pc, #340]	@ (800423c <processJoinAccept+0x27c>)
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7fe fb9e 	bl	8002830 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	3b04      	subs	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4851      	ldr	r0, [pc, #324]	@ (8004240 <processJoinAccept+0x280>)
 80040fc:	f7fe fb76 	bl	80027ec <aes_verifyMic0>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0e5      	beq.n	80040d2 <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8004106:	4b4f      	ldr	r3, [pc, #316]	@ (8004244 <processJoinAccept+0x284>)
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe f9ef 	bl	80024ec <os_rlsbf4>
 800410e:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 8004110:	4a46      	ldr	r2, [pc, #280]	@ (800422c <processJoinAccept+0x26c>)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8004118:	484b      	ldr	r0, [pc, #300]	@ (8004248 <processJoinAccept+0x288>)
 800411a:	f7fe f9e7 	bl	80024ec <os_rlsbf4>
 800411e:	4603      	mov	r3, r0
 8004120:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004124:	4a41      	ldr	r2, [pc, #260]	@ (800422c <processJoinAccept+0x26c>)
 8004126:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 800412a:	2000      	movs	r0, #0
 800412c:	f7fe ff12 	bl	8002f54 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b11      	cmp	r3, #17
 8004134:	d920      	bls.n	8004178 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8004136:	230d      	movs	r3, #13
 8004138:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800413a:	2303      	movs	r3, #3
 800413c:	75bb      	strb	r3, [r7, #22]
 800413e:	e018      	b.n	8004172 <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004146:	4a39      	ldr	r2, [pc, #228]	@ (800422c <processJoinAccept+0x26c>)
 8004148:	4413      	add	r3, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f802 	bl	8003154 <convFreq>
 8004150:	60b8      	str	r0, [r7, #8]
            if( freq )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d006      	beq.n	8004166 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8004158:	7db8      	ldrb	r0, [r7, #22]
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
 800415e:	2200      	movs	r2, #0
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	f7fe ff7d 	bl	8003060 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8004166:	7dbb      	ldrb	r3, [r7, #22]
 8004168:	3301      	adds	r3, #1
 800416a:	75bb      	strb	r3, [r7, #22]
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	3303      	adds	r3, #3
 8004170:	75fb      	strb	r3, [r7, #23]
 8004172:	7dbb      	ldrb	r3, [r7, #22]
 8004174:	2b07      	cmp	r3, #7
 8004176:	d9e3      	bls.n	8004140 <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8004178:	4b2c      	ldr	r3, [pc, #176]	@ (800422c <processJoinAccept+0x26c>)
 800417a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800417e:	3b01      	subs	r3, #1
 8004180:	b298      	uxth	r0, r3
 8004182:	4b32      	ldr	r3, [pc, #200]	@ (800424c <processJoinAccept+0x28c>)
 8004184:	4a32      	ldr	r2, [pc, #200]	@ (8004250 <processJoinAccept+0x290>)
 8004186:	492d      	ldr	r1, [pc, #180]	@ (800423c <processJoinAccept+0x27c>)
 8004188:	f7fe fbac 	bl	80028e4 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 800418c:	4b27      	ldr	r3, [pc, #156]	@ (800422c <processJoinAccept+0x26c>)
 800418e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004192:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <processJoinAccept+0x1de>
 800419a:	f7fd ffeb 	bl	8002174 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800419e:	4b23      	ldr	r3, [pc, #140]	@ (800422c <processJoinAccept+0x26c>)
 80041a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80041ac:	4b1f      	ldr	r3, [pc, #124]	@ (800422c <processJoinAccept+0x26c>)
 80041ae:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80041b2:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <processJoinAccept+0x26c>)
 80041b4:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe f968 	bl	8002490 <lowerDR>
 80041c0:	4603      	mov	r3, r0
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <processJoinAccept+0x26c>)
 80041c6:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80041ca:	4b18      	ldr	r3, [pc, #96]	@ (800422c <processJoinAccept+0x26c>)
 80041cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80041d0:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 80041d4:	f023 0302 	bic.w	r3, r3, #2
 80041d8:	b29a      	uxth	r2, r3
 80041da:	4b14      	ldr	r3, [pc, #80]	@ (800422c <processJoinAccept+0x26c>)
 80041dc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <processJoinAccept+0x26c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 80041e8:	f7ff f9f2 	bl	80035d0 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <processJoinAccept+0x26c>)
 80041ee:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <processJoinAccept+0x26c>)
 80041fa:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 80041fe:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <processJoinAccept+0x26c>)
 8004200:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8004204:	4b09      	ldr	r3, [pc, #36]	@ (800422c <processJoinAccept+0x26c>)
 8004206:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <processJoinAccept+0x26c>)
 800420c:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <processJoinAccept+0x25c>
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <processJoinAccept+0x26c>)
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 800421c:	2006      	movs	r0, #6
 800421e:	f7ff f9b9 	bl	8003594 <reportEvent>
    return 1;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000218 	.word	0x20000218
 8004230:	08003fa9 	.word	0x08003fa9
 8004234:	08003581 	.word	0x08003581
 8004238:	2000022c 	.word	0x2000022c
 800423c:	20000361 	.word	0x20000361
 8004240:	20000360 	.word	0x20000360
 8004244:	20000367 	.word	0x20000367
 8004248:	20000364 	.word	0x20000364
 800424c:	2000031c 	.word	0x2000031c
 8004250:	2000030c 	.word	0x2000030c

08004254 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 800425c:	4b07      	ldr	r3, [pc, #28]	@ (800427c <processRx2Jacc+0x28>)
 800425e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8004266:	4b05      	ldr	r3, [pc, #20]	@ (800427c <processRx2Jacc+0x28>)
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 800426e:	f7ff fea7 	bl	8003fc0 <processJoinAccept>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000218 	.word	0x20000218

08004280 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8004288:	4b04      	ldr	r3, [pc, #16]	@ (800429c <setupRx2Jacc+0x1c>)
 800428a:	4a05      	ldr	r2, [pc, #20]	@ (80042a0 <setupRx2Jacc+0x20>)
 800428c:	61da      	str	r2, [r3, #28]
    setupRx2();
 800428e:	f7ff fdcf 	bl	8003e30 <setupRx2>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000218 	.word	0x20000218
 80042a0:	08004255 	.word	0x08004255

080042a4 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80042ac:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <processRx1Jacc+0x2c>)
 80042ae:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <processRx1Jacc+0x1c>
 80042b6:	f7ff fe83 	bl	8003fc0 <processJoinAccept>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d103      	bne.n	80042c8 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 80042c0:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <processRx1Jacc+0x30>)
 80042c2:	4805      	ldr	r0, [pc, #20]	@ (80042d8 <processRx1Jacc+0x34>)
 80042c4:	f7ff fdd4 	bl	8003e70 <schedRx2>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000218 	.word	0x20000218
 80042d4:	08004281 	.word	0x08004281
 80042d8:	0002ee00 	.word	0x0002ee00

080042dc <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 80042e4:	4803      	ldr	r0, [pc, #12]	@ (80042f4 <setupRx1Jacc+0x18>)
 80042e6:	f7ff fdeb 	bl	8003ec0 <setupRx1>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	080042a5 	.word	0x080042a5

080042f8 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8004300:	4903      	ldr	r1, [pc, #12]	@ (8004310 <jreqDone+0x18>)
 8004302:	4804      	ldr	r0, [pc, #16]	@ (8004314 <jreqDone+0x1c>)
 8004304:	f7ff fdfe 	bl	8003f04 <txDone>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	080042dd 	.word	0x080042dd
 8004314:	00027100 	.word	0x00027100

08004318 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    processDnData();
 8004320:	f000 fbc6 	bl	8004ab0 <processDnData>
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8004334:	4b0f      	ldr	r3, [pc, #60]	@ (8004374 <processRx2DnData+0x48>)
 8004336:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800433a:	2b00      	cmp	r3, #0
 800433c:	d115      	bne.n	800436a <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <processRx2DnData+0x48>)
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8004346:	f001 fa07 	bl	8005758 <os_getTime>
 800434a:	4603      	mov	r3, r0
 800434c:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8004350:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8004354:	2002      	movs	r0, #2
 8004356:	f7fe fd4f 	bl	8002df8 <rndDelay>
 800435a:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 800435c:	4423      	add	r3, r4
 800435e:	4a06      	ldr	r2, [pc, #24]	@ (8004378 <processRx2DnData+0x4c>)
 8004360:	4619      	mov	r1, r3
 8004362:	4806      	ldr	r0, [pc, #24]	@ (800437c <processRx2DnData+0x50>)
 8004364:	f001 fa62 	bl	800582c <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8004368:	e001      	b.n	800436e <processRx2DnData+0x42>
    }
    processDnData();
 800436a:	f000 fba1 	bl	8004ab0 <processDnData>
}
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000218 	.word	0x20000218
 8004378:	08004319 	.word	0x08004319
 800437c:	2000022c 	.word	0x2000022c

08004380 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <setupRx2DnData+0x1c>)
 800438a:	4a05      	ldr	r2, [pc, #20]	@ (80043a0 <setupRx2DnData+0x20>)
 800438c:	61da      	str	r2, [r3, #28]
    setupRx2();
 800438e:	f7ff fd4f 	bl	8003e30 <setupRx2>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000218 	.word	0x20000218
 80043a0:	0800432d 	.word	0x0800432d

080043a4 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80043ac:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <processRx1DnData+0x40>)
 80043ae:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <processRx1DnData+0x1c>
 80043b6:	f000 fb7b 	bl	8004ab0 <processDnData>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10c      	bne.n	80043da <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <processRx1DnData+0x40>)
 80043c2:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 80043c6:	3301      	adds	r3, #1
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4905      	ldr	r1, [pc, #20]	@ (80043e8 <processRx1DnData+0x44>)
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fd4b 	bl	8003e70 <schedRx2>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000218 	.word	0x20000218
 80043e8:	08004381 	.word	0x08004381

080043ec <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 80043f4:	4803      	ldr	r0, [pc, #12]	@ (8004404 <setupRx1DnData+0x18>)
 80043f6:	f7ff fd63 	bl	8003ec0 <setupRx1>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	080043a5 	.word	0x080043a5

08004408 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8004410:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <updataDone+0x28>)
 8004412:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004416:	461a      	mov	r2, r3
 8004418:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	4904      	ldr	r1, [pc, #16]	@ (8004434 <updataDone+0x2c>)
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fd6e 	bl	8003f04 <txDone>
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000218 	.word	0x20000218
 8004434:	080043ed 	.word	0x080043ed

08004438 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800443e:	4ba3      	ldr	r3, [pc, #652]	@ (80046cc <buildDataFrame+0x294>)
 8004440:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004444:	f003 0318 	and.w	r3, r3, #24
 8004448:	2b10      	cmp	r3, #16
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <buildDataFrame+0x2a>
 800445a:	4b9c      	ldr	r3, [pc, #624]	@ (80046cc <buildDataFrame+0x294>)
 800445c:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8004460:	e000      	b.n	8004464 <buildDataFrame+0x2c>
 8004462:	2300      	movs	r3, #0
 8004464:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8004466:	2308      	movs	r3, #8
 8004468:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 800446a:	4b98      	ldr	r3, [pc, #608]	@ (80046cc <buildDataFrame+0x294>)
 800446c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004470:	461a      	mov	r2, r3
 8004472:	f240 4302 	movw	r3, #1026	@ 0x402
 8004476:	4013      	ands	r3, r2
 8004478:	f240 4202 	movw	r2, #1026	@ 0x402
 800447c:	4293      	cmp	r3, r2
 800447e:	d11c      	bne.n	80044ba <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 8004480:	4a92      	ldr	r2, [pc, #584]	@ (80046cc <buildDataFrame+0x294>)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800448a:	2210      	movs	r2, #16
 800448c:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 800448e:	4b8f      	ldr	r3, [pc, #572]	@ (80046cc <buildDataFrame+0x294>)
 8004490:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8004494:	b25a      	sxtb	r2, r3
 8004496:	4b8d      	ldr	r3, [pc, #564]	@ (80046cc <buildDataFrame+0x294>)
 8004498:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	b25b      	sxtb	r3, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3301      	adds	r3, #1
 80044a8:	b2d1      	uxtb	r1, r2
 80044aa:	4a88      	ldr	r2, [pc, #544]	@ (80046cc <buildDataFrame+0x294>)
 80044ac:	4413      	add	r3, r2
 80044ae:	460a      	mov	r2, r1
 80044b0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3302      	adds	r3, #2
 80044b8:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80044ba:	4b84      	ldr	r3, [pc, #528]	@ (80046cc <buildDataFrame+0x294>)
 80044bc:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00d      	beq.n	80044e0 <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 80044c4:	4a81      	ldr	r2, [pc, #516]	@ (80046cc <buildDataFrame+0x294>)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80044ce:	2204      	movs	r2, #4
 80044d0:	701a      	strb	r2, [r3, #0]
        end += 1;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 80044d8:	4b7c      	ldr	r3, [pc, #496]	@ (80046cc <buildDataFrame+0x294>)
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 80044e0:	4b7a      	ldr	r3, [pc, #488]	@ (80046cc <buildDataFrame+0x294>)
 80044e2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01a      	beq.n	8004520 <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 80044ea:	4a78      	ldr	r2, [pc, #480]	@ (80046cc <buildDataFrame+0x294>)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80044f4:	2205      	movs	r2, #5
 80044f6:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 80044f8:	4b74      	ldr	r3, [pc, #464]	@ (80046cc <buildDataFrame+0x294>)
 80044fa:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3301      	adds	r3, #1
 8004502:	f002 0203 	and.w	r2, r2, #3
 8004506:	b2d1      	uxtb	r1, r2
 8004508:	4a70      	ldr	r2, [pc, #448]	@ (80046cc <buildDataFrame+0x294>)
 800450a:	4413      	add	r3, r2
 800450c:	460a      	mov	r2, r1
 800450e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3302      	adds	r3, #2
 8004516:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8004518:	4b6c      	ldr	r3, [pc, #432]	@ (80046cc <buildDataFrame+0x294>)
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 8004520:	4b6a      	ldr	r3, [pc, #424]	@ (80046cc <buildDataFrame+0x294>)
 8004522:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8004526:	2b00      	cmp	r3, #0
 8004528:	d021      	beq.n	800456e <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 800452a:	4a68      	ldr	r2, [pc, #416]	@ (80046cc <buildDataFrame+0x294>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4413      	add	r3, r2
 8004530:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004534:	2206      	movs	r2, #6
 8004536:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1c5c      	adds	r4, r3, #1
 800453c:	f7fe f869 	bl	8002612 <os_getBattLevel>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	4b61      	ldr	r3, [pc, #388]	@ (80046cc <buildDataFrame+0x294>)
 8004546:	4423      	add	r3, r4
 8004548:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	3302      	adds	r3, #2
 8004550:	4a5e      	ldr	r2, [pc, #376]	@ (80046cc <buildDataFrame+0x294>)
 8004552:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8004556:	4a5d      	ldr	r2, [pc, #372]	@ (80046cc <buildDataFrame+0x294>)
 8004558:	4413      	add	r3, r2
 800455a:	460a      	mov	r2, r1
 800455c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3303      	adds	r3, #3
 8004564:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8004566:	4b59      	ldr	r3, [pc, #356]	@ (80046cc <buildDataFrame+0x294>)
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800456e:	4b57      	ldr	r3, [pc, #348]	@ (80046cc <buildDataFrame+0x294>)
 8004570:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 8004578:	4a54      	ldr	r2, [pc, #336]	@ (80046cc <buildDataFrame+0x294>)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004582:	2203      	movs	r2, #3
 8004584:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8004586:	4b51      	ldr	r3, [pc, #324]	@ (80046cc <buildDataFrame+0x294>)
 8004588:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	3301      	adds	r3, #1
 8004590:	f002 0207 	and.w	r2, r2, #7
 8004594:	b2d1      	uxtb	r1, r2
 8004596:	4a4d      	ldr	r2, [pc, #308]	@ (80046cc <buildDataFrame+0x294>)
 8004598:	4413      	add	r3, r2
 800459a:	460a      	mov	r2, r1
 800459c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3302      	adds	r3, #2
 80045a4:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80045a6:	4b49      	ldr	r3, [pc, #292]	@ (80046cc <buildDataFrame+0x294>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80045ae:	4b47      	ldr	r3, [pc, #284]	@ (80046cc <buildDataFrame+0x294>)
 80045b0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80045b8:	4a44      	ldr	r2, [pc, #272]	@ (80046cc <buildDataFrame+0x294>)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80045c2:	2212      	movs	r2, #18
 80045c4:	701a      	strb	r2, [r3, #0]
        end += 1;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 80045cc:	4b3f      	ldr	r3, [pc, #252]	@ (80046cc <buildDataFrame+0x294>)
 80045ce:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 80045d6:	4b3d      	ldr	r3, [pc, #244]	@ (80046cc <buildDataFrame+0x294>)
 80045d8:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da03      	bge.n	80045e8 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 80045e0:	4b3a      	ldr	r3, [pc, #232]	@ (80046cc <buildDataFrame+0x294>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 80045e8:	4b38      	ldr	r3, [pc, #224]	@ (80046cc <buildDataFrame+0x294>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 80045f0:	4b36      	ldr	r3, [pc, #216]	@ (80046cc <buildDataFrame+0x294>)
 80045f2:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01a      	beq.n	8004630 <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 80045fa:	4a34      	ldr	r2, [pc, #208]	@ (80046cc <buildDataFrame+0x294>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004604:	2211      	movs	r2, #17
 8004606:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8004608:	4b30      	ldr	r3, [pc, #192]	@ (80046cc <buildDataFrame+0x294>)
 800460a:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3301      	adds	r3, #1
 8004612:	f002 0201 	and.w	r2, r2, #1
 8004616:	b2d1      	uxtb	r1, r2
 8004618:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <buildDataFrame+0x294>)
 800461a:	4413      	add	r3, r2
 800461c:	460a      	mov	r2, r1
 800461e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3302      	adds	r3, #2
 8004626:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8004628:	4b28      	ldr	r3, [pc, #160]	@ (80046cc <buildDataFrame+0x294>)
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 8004630:	4b26      	ldr	r3, [pc, #152]	@ (80046cc <buildDataFrame+0x294>)
 8004632:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01a      	beq.n	8004670 <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 800463a:	4a24      	ldr	r2, [pc, #144]	@ (80046cc <buildDataFrame+0x294>)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4413      	add	r3, r2
 8004640:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004644:	2207      	movs	r2, #7
 8004646:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8004648:	4b20      	ldr	r3, [pc, #128]	@ (80046cc <buildDataFrame+0x294>)
 800464a:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3301      	adds	r3, #1
 8004652:	f002 0203 	and.w	r2, r2, #3
 8004656:	b2d1      	uxtb	r1, r2
 8004658:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <buildDataFrame+0x294>)
 800465a:	4413      	add	r3, r2
 800465c:	460a      	mov	r2, r1
 800465e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3302      	adds	r3, #2
 8004666:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8004668:	4b18      	ldr	r3, [pc, #96]	@ (80046cc <buildDataFrame+0x294>)
 800466a:	2200      	movs	r2, #0
 800466c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b18      	cmp	r3, #24
 8004674:	dd01      	ble.n	800467a <buildDataFrame+0x242>
 8004676:	f7fd fd7d 	bl	8002174 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <buildDataFrame+0x250>
 8004680:	79bb      	ldrb	r3, [r7, #6]
 8004682:	3305      	adds	r3, #5
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e000      	b.n	800468a <buildDataFrame+0x252>
 8004688:	2304      	movs	r3, #4
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	4413      	add	r3, r2
 8004690:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d905      	bls.n	80046a4 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3304      	adds	r3, #4
 80046a2:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <buildDataFrame+0x294>)
 80046a6:	2240      	movs	r2, #64	@ 0x40
 80046a8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80046ac:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <buildDataFrame+0x294>)
 80046ae:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <buildDataFrame+0x294>)
 80046b4:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	4a03      	ldr	r2, [pc, #12]	@ (80046cc <buildDataFrame+0x294>)
 80046c0:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	db03      	blt.n	80046d0 <buildDataFrame+0x298>
 80046c8:	2240      	movs	r2, #64	@ 0x40
 80046ca:	e002      	b.n	80046d2 <buildDataFrame+0x29a>
 80046cc:	20000218 	.word	0x20000218
 80046d0:	2200      	movs	r2, #0
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3b08      	subs	r3, #8
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	b25b      	sxtb	r3, r3
 80046e0:	4313      	orrs	r3, r2
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80046e6:	4b40      	ldr	r3, [pc, #256]	@ (80047e8 <buildDataFrame+0x3b0>)
 80046e8:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 80046ec:	4a3f      	ldr	r2, [pc, #252]	@ (80047ec <buildDataFrame+0x3b4>)
 80046ee:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <buildDataFrame+0x3b0>)
 80046f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7fd ff49 	bl	800258e <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 80046fc:	4b3a      	ldr	r3, [pc, #232]	@ (80047e8 <buildDataFrame+0x3b0>)
 80046fe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8004706:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004708:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800470c:	3301      	adds	r3, #1
 800470e:	4a36      	ldr	r2, [pc, #216]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004710:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8004714:	4a36      	ldr	r2, [pc, #216]	@ (80047f0 <buildDataFrame+0x3b8>)
 8004716:	4b34      	ldr	r3, [pc, #208]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004718:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29b      	uxth	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fd ff1b 	bl	8002560 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <buildDataFrame+0x3b0>)
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d03e      	beq.n	80047b6 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8004738:	4b2b      	ldr	r3, [pc, #172]	@ (80047e8 <buildDataFrame+0x3b0>)
 800473a:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8004742:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004744:	2280      	movs	r2, #128	@ 0x80
 8004746:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800474a:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <buildDataFrame+0x3b0>)
 800474c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <buildDataFrame+0x324>
 8004754:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 800475c:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <buildDataFrame+0x3b0>)
 800475e:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8004762:	4a21      	ldr	r2, [pc, #132]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4413      	add	r3, r2
 8004768:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800476c:	460a      	mov	r2, r1
 800476e:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3301      	adds	r3, #1
 8004774:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <buildDataFrame+0x3bc>)
 8004776:	4413      	add	r3, r2
 8004778:	79ba      	ldrb	r2, [r7, #6]
 800477a:	491f      	ldr	r1, [pc, #124]	@ (80047f8 <buildDataFrame+0x3c0>)
 800477c:	4618      	mov	r0, r3
 800477e:	f009 fd92 	bl	800e2a6 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8004782:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004784:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <buildDataFrame+0x358>
 800478c:	481b      	ldr	r0, [pc, #108]	@ (80047fc <buildDataFrame+0x3c4>)
 800478e:	e000      	b.n	8004792 <buildDataFrame+0x35a>
 8004790:	481b      	ldr	r0, [pc, #108]	@ (8004800 <buildDataFrame+0x3c8>)
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <buildDataFrame+0x3b0>)
 8004794:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8004798:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <buildDataFrame+0x3b0>)
 800479a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800479e:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80047a4:	4a13      	ldr	r2, [pc, #76]	@ (80047f4 <buildDataFrame+0x3bc>)
 80047a6:	4413      	add	r3, r2
 80047a8:	79ba      	ldrb	r2, [r7, #6]
 80047aa:	9201      	str	r2, [sp, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	4622      	mov	r2, r4
 80047b2:	f7fe f853 	bl	800285c <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80047b6:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <buildDataFrame+0x3b0>)
 80047b8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <buildDataFrame+0x3b0>)
 80047be:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80047c2:	1e5a      	subs	r2, r3, #1
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	3b04      	subs	r3, #4
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <buildDataFrame+0x3bc>)
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2300      	movs	r3, #0
 80047d0:	480a      	ldr	r0, [pc, #40]	@ (80047fc <buildDataFrame+0x3c4>)
 80047d2:	f7fd ffc5 	bl	8002760 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 80047d6:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <buildDataFrame+0x3b0>)
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000218 	.word	0x20000218
 80047ec:	20000361 	.word	0x20000361
 80047f0:	20000366 	.word	0x20000366
 80047f4:	20000360 	.word	0x20000360
 80047f8:	200002d5 	.word	0x200002d5
 80047fc:	2000030c 	.word	0x2000030c
 8004800:	2000031c 	.word	0x2000031c

08004804 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 800480c:	2000      	movs	r0, #0
 800480e:	f001 fdc9 	bl	80063a4 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004812:	4823      	ldr	r0, [pc, #140]	@ (80048a0 <onBcnRx+0x9c>)
 8004814:	f000 ffc6 	bl	80057a4 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8004818:	4b22      	ldr	r3, [pc, #136]	@ (80048a4 <onBcnRx+0xa0>)
 800481a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <onBcnRx+0xa0>)
 8004824:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004828:	f023 0303 	bic.w	r3, r3, #3
 800482c:	b29a      	uxth	r2, r3
 800482e:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <onBcnRx+0xa0>)
 8004830:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8004834:	2001      	movs	r0, #1
 8004836:	f7fe fead 	bl	8003594 <reportEvent>
        return;
 800483a:	e02d      	b.n	8004898 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 800483c:	f7fe ff2e 	bl	800369c <decodeBeacon>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	dc0f      	bgt.n	8004866 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8004846:	4b17      	ldr	r3, [pc, #92]	@ (80048a4 <onBcnRx+0xa0>)
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 800484e:	2003      	movs	r0, #3
 8004850:	f001 fda8 	bl	80063a4 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8004854:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <onBcnRx+0xa0>)
 8004856:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800485a:	4a13      	ldr	r2, [pc, #76]	@ (80048a8 <onBcnRx+0xa4>)
 800485c:	4619      	mov	r1, r3
 800485e:	4810      	ldr	r0, [pc, #64]	@ (80048a0 <onBcnRx+0x9c>)
 8004860:	f000 ffe4 	bl	800582c <os_setTimedCallback>
        return;
 8004864:	e018      	b.n	8004898 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8004866:	2101      	movs	r1, #1
 8004868:	200d      	movs	r0, #13
 800486a:	f7fe f983 	bl	8002b74 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <onBcnRx+0xa0>)
 8004870:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <onBcnRx+0xa0>)
 800487c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8004880:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <onBcnRx+0xa0>)
 8004882:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004886:	f043 0302 	orr.w	r3, r3, #2
 800488a:	b29a      	uxth	r2, r3
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <onBcnRx+0xa0>)
 800488e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8004892:	2002      	movs	r0, #2
 8004894:	f7fe fe7e 	bl	8003594 <reportEvent>
}
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	2000022c 	.word	0x2000022c
 80048a4:	20000218 	.word	0x20000218
 80048a8:	08004805 	.word	0x08004805

080048ac <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 80048b0:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <startScan+0xa4>)
 80048b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <startScan+0x1c>
 80048ba:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <startScan+0xa4>)
 80048bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <startScan+0x20>
 80048c8:	f7fd fc54 	bl	8002174 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 80048cc:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <startScan+0xa4>)
 80048ce:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80048d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d137      	bne.n	800494a <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <startScan+0xa4>)
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 80048e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <startScan+0xa4>)
 80048e4:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 80048e8:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <startScan+0xa4>)
 80048ea:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 80048ee:	4b18      	ldr	r3, [pc, #96]	@ (8004950 <startScan+0xa4>)
 80048f0:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80048f4:	4b16      	ldr	r3, [pc, #88]	@ (8004950 <startScan+0xa4>)
 80048f6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 80048fa:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <startScan+0xa4>)
 80048fc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800490a:	b29a      	uxth	r2, r3
 800490c:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <startScan+0xa4>)
 800490e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 8004912:	f7fe fd71 	bl	80033f8 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8004916:	f000 ff1f 	bl	8005758 <os_getTime>
 800491a:	4603      	mov	r3, r0
 800491c:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8004920:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 8004924:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <startScan+0xa4>)
 8004926:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <startScan+0xa4>)
 800492c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004930:	4a07      	ldr	r2, [pc, #28]	@ (8004950 <startScan+0xa4>)
 8004932:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8004934:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <startScan+0xa4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a06      	ldr	r2, [pc, #24]	@ (8004954 <startScan+0xa8>)
 800493a:	4619      	mov	r1, r3
 800493c:	4806      	ldr	r0, [pc, #24]	@ (8004958 <startScan+0xac>)
 800493e:	f000 ff75 	bl	800582c <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8004942:	2003      	movs	r0, #3
 8004944:	f001 fd2e 	bl	80063a4 <os_radio>
 8004948:	e000      	b.n	800494c <startScan+0xa0>
        return;
 800494a:	bf00      	nop
}
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000218 	.word	0x20000218
 8004954:	08004805 	.word	0x08004805
 8004958:	2000022c 	.word	0x2000022c

0800495c <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8004966:	4b16      	ldr	r3, [pc, #88]	@ (80049c0 <buildJoinRequest+0x64>)
 8004968:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	79fa      	ldrb	r2, [r7, #7]
 800496e:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3301      	adds	r3, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fd33 	bl	80053e0 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3309      	adds	r3, #9
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fd42 	bl	8005408 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3311      	adds	r3, #17
 8004988:	4a0e      	ldr	r2, [pc, #56]	@ (80049c4 <buildJoinRequest+0x68>)
 800498a:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f7fd fde5 	bl	8002560 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8004996:	2113      	movs	r1, #19
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7fd ff09 	bl	80027b0 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <buildJoinRequest+0x68>)
 80049a0:	2217      	movs	r2, #23
 80049a2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <buildJoinRequest+0x68>)
 80049a8:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80049ac:	3301      	adds	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <buildJoinRequest+0x68>)
 80049b2:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000360 	.word	0x20000360
 80049c4:	20000218 	.word	0x20000218

080049c8 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 80049d0:	2005      	movs	r0, #5
 80049d2:	f7fe fddf 	bl	8003594 <reportEvent>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 80049e4:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <LMIC_startJoining+0x88>)
 80049e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d138      	bne.n	8004a60 <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 80049ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <LMIC_startJoining+0x88>)
 80049f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80049f4:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <LMIC_startJoining+0x20>
 80049fc:	f7fd fbba 	bl	8002174 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8004a00:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8004a08:	4b17      	ldr	r3, [pc, #92]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a0a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a0e:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a1a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8004a1e:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8004a26:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a28:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a2e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a34:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8004a38:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a3a:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 8004a3e:	f7fe fd01 	bl	8003444 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a44:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <LMIC_startJoining+0x88>)
 8004a50:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8004a54:	4905      	ldr	r1, [pc, #20]	@ (8004a6c <LMIC_startJoining+0x8c>)
 8004a56:	4806      	ldr	r0, [pc, #24]	@ (8004a70 <LMIC_startJoining+0x90>)
 8004a58:	f000 fec2 	bl	80057e0 <os_setCallback>
        return 1;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000218 	.word	0x20000218
 8004a6c:	080049c9 	.word	0x080049c9
 8004a70:	2000022c 	.word	0x2000022c

08004a74 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <processPingRx+0x38>)
 8004a7e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00c      	beq.n	8004aa0 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8004a86:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <processPingRx+0x38>)
 8004a88:	2204      	movs	r2, #4
 8004a8a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 8004a8e:	f7fe fe99 	bl	80037c4 <decodeFrame>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8004a98:	200d      	movs	r0, #13
 8004a9a:	f7fe fd7b 	bl	8003594 <reportEvent>
            return;
 8004a9e:	e001      	b.n	8004aa4 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8004aa0:	f000 fa2a 	bl	8004ef8 <engineUpdate>
}
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000218 	.word	0x20000218

08004ab0 <processDnData>:


static bit_t processDnData (void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8004ab4:	4b76      	ldr	r3, [pc, #472]	@ (8004c90 <processDnData+0x1e0>)
 8004ab6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <processDnData+0x16>
 8004ac2:	f7fd fb57 	bl	8002174 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8004ac6:	4b72      	ldr	r3, [pc, #456]	@ (8004c90 <processDnData+0x1e0>)
 8004ac8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 80ce 	bne.w	8004c6e <processDnData+0x1be>
      norx:
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8004ad6:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8004ad8:	4b6d      	ldr	r3, [pc, #436]	@ (8004c90 <processDnData+0x1e0>)
 8004ada:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d038      	beq.n	8004b54 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8004ae2:	4b6b      	ldr	r3, [pc, #428]	@ (8004c90 <processDnData+0x1e0>)
 8004ae4:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004ae8:	2b07      	cmp	r3, #7
 8004aea:	d82e      	bhi.n	8004b4a <processDnData+0x9a>
                LMIC.txCnt += 1;
 8004aec:	4b68      	ldr	r3, [pc, #416]	@ (8004c90 <processDnData+0x1e0>)
 8004aee:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004af2:	3301      	adds	r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b66      	ldr	r3, [pc, #408]	@ (8004c90 <processDnData+0x1e0>)
 8004af8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8004afc:	4b64      	ldr	r3, [pc, #400]	@ (8004c90 <processDnData+0x1e0>)
 8004afe:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004b02:	4a63      	ldr	r2, [pc, #396]	@ (8004c90 <processDnData+0x1e0>)
 8004b04:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4a62      	ldr	r2, [pc, #392]	@ (8004c94 <processDnData+0x1e4>)
 8004b0c:	5c52      	ldrb	r2, [r2, r1]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd fcbd 	bl	8002490 <lowerDR>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	2002      	movs	r0, #2
 8004b20:	f7fe f9ea 	bl	8002ef8 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8004b24:	4b5a      	ldr	r3, [pc, #360]	@ (8004c90 <processDnData+0x1e0>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2103      	movs	r1, #3
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe f9a2 	bl	8002e74 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8004b30:	4b57      	ldr	r3, [pc, #348]	@ (8004c90 <processDnData+0x1e0>)
 8004b32:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	4b54      	ldr	r3, [pc, #336]	@ (8004c90 <processDnData+0x1e0>)
 8004b3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 8004b42:	f000 f9d9 	bl	8004ef8 <engineUpdate>
                return 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e09f      	b.n	8004c8a <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8004b4a:	4b51      	ldr	r3, [pc, #324]	@ (8004c90 <processDnData+0x1e0>)
 8004b4c:	2260      	movs	r2, #96	@ 0x60
 8004b4e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8004b52:	e003      	b.n	8004b5c <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8004b54:	4b4e      	ldr	r3, [pc, #312]	@ (8004c90 <processDnData+0x1e0>)
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8004b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c90 <processDnData+0x1e0>)
 8004b5e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004b62:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8004b66:	d009      	beq.n	8004b7c <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8004b68:	4b49      	ldr	r3, [pc, #292]	@ (8004c90 <processDnData+0x1e0>)
 8004b6a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	b25a      	sxtb	r2, r3
 8004b76:	4b46      	ldr	r3, [pc, #280]	@ (8004c90 <processDnData+0x1e0>)
 8004b78:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8004b7c:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <processDnData+0x1e0>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8004b84:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <processDnData+0x1e0>)
 8004b86:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8004b8a:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <processDnData+0x1e0>)
 8004b8c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8004b90:	e000      	b.n	8004b94 <processDnData+0xe4>
    }
    goto txcomplete;
 8004b92:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8004b94:	4b3e      	ldr	r3, [pc, #248]	@ (8004c90 <processDnData+0x1e0>)
 8004b96:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <processDnData+0x1e0>)
 8004ba2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8004ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8004c90 <processDnData+0x1e0>)
 8004ba8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <processDnData+0x12a>
 8004bb4:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <processDnData+0x1e0>)
 8004bb6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8004bc2:	4b33      	ldr	r3, [pc, #204]	@ (8004c90 <processDnData+0x1e0>)
 8004bc4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004bc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <processDnData+0x1e0>)
 8004bd0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 8004bd4:	200f      	movs	r0, #15
 8004bd6:	f7fe fcdd 	bl	8003594 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8004bda:	200a      	movs	r0, #10
 8004bdc:	f7fe fcda 	bl	8003594 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <processDnData+0x1e0>)
 8004be2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004be6:	2b18      	cmp	r3, #24
 8004be8:	dd1c      	ble.n	8004c24 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8004bea:	4b29      	ldr	r3, [pc, #164]	@ (8004c90 <processDnData+0x1e0>)
 8004bec:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fd fc1f 	bl	8002434 <decDR>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	2003      	movs	r0, #3
 8004c00:	f7fe f97a 	bl	8002ef8 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8004c04:	4b22      	ldr	r3, [pc, #136]	@ (8004c90 <processDnData+0x1e0>)
 8004c06:	220c      	movs	r2, #12
 8004c08:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004c0c:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <processDnData+0x1e0>)
 8004c0e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004c12:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <processDnData+0x1e0>)
 8004c1a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 8004c1e:	200e      	movs	r0, #14
 8004c20:	f7fe fcb8 	bl	8003594 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8004c24:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <processDnData+0x1e0>)
 8004c26:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01d      	beq.n	8004c6a <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004c2e:	4b18      	ldr	r3, [pc, #96]	@ (8004c90 <processDnData+0x1e0>)
 8004c30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8004c3c:	2002      	movs	r0, #2
 8004c3e:	f7fe fca9 	bl	8003594 <reportEvent>
                LMIC.bcninfoTries = 0;
 8004c42:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <processDnData+0x1e0>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004c4a:	e00e      	b.n	8004c6a <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8004c4c:	4b10      	ldr	r3, [pc, #64]	@ (8004c90 <processDnData+0x1e0>)
 8004c4e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <processDnData+0x1e0>)
 8004c58:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <processDnData+0x1e0>)
 8004c5e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8004c66:	f7ff fe21 	bl	80048ac <startScan>
        return 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e00d      	b.n	8004c8a <processDnData+0x1da>
    if( !decodeFrame() ) {
 8004c6e:	f7fe fda9 	bl	80037c4 <decodeFrame>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d18c      	bne.n	8004b92 <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <processDnData+0x1e0>)
 8004c7a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f43f af27 	beq.w	8004ad6 <processDnData+0x26>
            return 0;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000218 	.word	0x20000218
 8004c94:	080104e4 	.word	0x080104e4

08004c98 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8004ca0:	4b81      	ldr	r3, [pc, #516]	@ (8004ea8 <processBeacon+0x210>)
 8004ca2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004ca6:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8004ca8:	4b7f      	ldr	r3, [pc, #508]	@ (8004ea8 <processBeacon+0x210>)
 8004caa:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004cae:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8004ea8 <processBeacon+0x210>)
 8004cb2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8087 	beq.w	8004dca <processBeacon+0x132>
 8004cbc:	f7fe fcee 	bl	800369c <decodeBeacon>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f340 8081 	ble.w	8004dca <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8004cc8:	2304      	movs	r3, #4
 8004cca:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	200d      	movs	r0, #13
 8004cda:	f7fd ff4b 	bl	8002b74 <calcBcnRxWindowFromMillis>
            goto rev;
 8004cde:	e0d2      	b.n	8004e86 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	4b70      	ldr	r3, [pc, #448]	@ (8004ea8 <processBeacon+0x210>)
 8004ce6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8004cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8004ea8 <processBeacon+0x210>)
 8004cfa:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d013      	beq.n	8004d2a <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8004d02:	4b69      	ldr	r3, [pc, #420]	@ (8004ea8 <processBeacon+0x210>)
 8004d04:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d0e:	4966      	ldr	r1, [pc, #408]	@ (8004ea8 <processBeacon+0x210>)
 8004d10:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8004d14:	1a59      	subs	r1, r3, r1
 8004d16:	4b64      	ldr	r3, [pc, #400]	@ (8004ea8 <processBeacon+0x210>)
 8004d18:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	fb91 f3f3 	sdiv	r3, r1, r3
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8004d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea8 <processBeacon+0x210>)
 8004d2c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d127      	bne.n	8004d88 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8004d38:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea8 <processBeacon+0x210>)
 8004d3a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	8abb      	ldrh	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8004d48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da03      	bge.n	8004d58 <processBeacon+0xc0>
 8004d50:	8a7b      	ldrh	r3, [r7, #18]
 8004d52:	425b      	negs	r3, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8004d58:	4a53      	ldr	r2, [pc, #332]	@ (8004ea8 <processBeacon+0x210>)
 8004d5a:	8a7b      	ldrh	r3, [r7, #18]
 8004d5c:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 8004d60:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <processBeacon+0x210>)
 8004d62:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8004d66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	dd03      	ble.n	8004d76 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8004d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea8 <processBeacon+0x210>)
 8004d70:	8a7b      	ldrh	r3, [r7, #18]
 8004d72:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004d76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea8 <processBeacon+0x210>)
 8004d78:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004d7c:	f023 0308 	bic.w	r3, r3, #8
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4b49      	ldr	r3, [pc, #292]	@ (8004ea8 <processBeacon+0x210>)
 8004d84:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 8004d88:	4a47      	ldr	r2, [pc, #284]	@ (8004ea8 <processBeacon+0x210>)
 8004d8a:	8abb      	ldrh	r3, [r7, #20]
 8004d8c:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8004d90:	4b45      	ldr	r3, [pc, #276]	@ (8004ea8 <processBeacon+0x210>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8004d98:	4b43      	ldr	r3, [pc, #268]	@ (8004ea8 <processBeacon+0x210>)
 8004d9a:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004d9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ea8 <processBeacon+0x210>)
 8004da0:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004da4:	4b40      	ldr	r3, [pc, #256]	@ (8004ea8 <processBeacon+0x210>)
 8004da6:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004daa:	f023 0304 	bic.w	r3, r3, #4
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea8 <processBeacon+0x210>)
 8004db2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004db6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <processBeacon+0x210>)
 8004db8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d14c      	bne.n	8004e5e <processBeacon+0x1c6>
 8004dc4:	f7fd f9d6 	bl	8002174 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004dc8:	e049      	b.n	8004e5e <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8004dce:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <processBeacon+0x210>)
 8004dd0:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8004dd4:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <processBeacon+0x210>)
 8004dd6:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004dda:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8004dde:	4413      	add	r3, r2
 8004de0:	4a31      	ldr	r2, [pc, #196]	@ (8004ea8 <processBeacon+0x210>)
 8004de2:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004de6:	4b30      	ldr	r3, [pc, #192]	@ (8004ea8 <processBeacon+0x210>)
 8004de8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8004dec:	3380      	adds	r3, #128	@ 0x80
 8004dee:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea8 <processBeacon+0x210>)
 8004df0:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 8004df4:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea8 <processBeacon+0x210>)
 8004df6:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <processBeacon+0x210>)
 8004e00:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004e04:	4b28      	ldr	r3, [pc, #160]	@ (8004ea8 <processBeacon+0x210>)
 8004e06:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004e0a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004e0e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004e12:	2104      	movs	r1, #4
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe f82d 	bl	8002e74 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <processBeacon+0x210>)
 8004e1c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004e20:	2b14      	cmp	r3, #20
 8004e22:	d908      	bls.n	8004e36 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004e24:	4b20      	ldr	r3, [pc, #128]	@ (8004ea8 <processBeacon+0x210>)
 8004e26:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e2a:	f043 0320 	orr.w	r3, r3, #32
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <processBeacon+0x210>)
 8004e32:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004e36:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea8 <processBeacon+0x210>)
 8004e38:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004e3c:	2b64      	cmp	r3, #100	@ 0x64
 8004e3e:	d90f      	bls.n	8004e60 <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004e40:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <processBeacon+0x210>)
 8004e42:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e46:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8004e4a:	f023 0302 	bic.w	r3, r3, #2
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <processBeacon+0x210>)
 8004e52:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004e56:	200b      	movs	r0, #11
 8004e58:	f7fe fb9c 	bl	8003594 <reportEvent>
            return;
 8004e5c:	e021      	b.n	8004ea2 <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004e5e:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004e60:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <processBeacon+0x210>)
 8004e62:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004e66:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f7fd fe2d 	bl	8002acc <calcRxWindow>
 8004e72:	4603      	mov	r3, r0
 8004e74:	1ae3      	subs	r3, r4, r3
 8004e76:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea8 <processBeacon+0x210>)
 8004e78:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea8 <processBeacon+0x210>)
 8004e7e:	7c1a      	ldrb	r2, [r3, #16]
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <processBeacon+0x210>)
 8004e82:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <processBeacon+0x210>)
 8004e88:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004e94:	4805      	ldr	r0, [pc, #20]	@ (8004eac <processBeacon+0x214>)
 8004e96:	f7fd fef3 	bl	8002c80 <rxschedInit>
    reportEvent(ev);
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fb79 	bl	8003594 <reportEvent>
}
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd90      	pop	{r4, r7, pc}
 8004ea8:	20000218 	.word	0x20000218
 8004eac:	2000034c 	.word	0x2000034c

08004eb0 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004eb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <startRxBcn+0x1c>)
 8004eba:	4a05      	ldr	r2, [pc, #20]	@ (8004ed0 <startRxBcn+0x20>)
 8004ebc:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	f001 fa70 	bl	80063a4 <os_radio>
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000218 	.word	0x20000218
 8004ed0:	08004c99 	.word	0x08004c99

08004ed4 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8004edc:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <startRxPing+0x1c>)
 8004ede:	4a05      	ldr	r2, [pc, #20]	@ (8004ef4 <startRxPing+0x20>)
 8004ee0:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004ee2:	2002      	movs	r0, #2
 8004ee4:	f001 fa5e 	bl	80063a4 <os_radio>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000218 	.word	0x20000218
 8004ef4:	08004a75 	.word	0x08004a75

08004ef8 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 8004efe:	4b90      	ldr	r3, [pc, #576]	@ (8005140 <engineUpdate+0x248>)
 8004f00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f04:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f040 81ab 	bne.w	8005264 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8005140 <engineUpdate+0x248>)
 8004f10:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <engineUpdate+0x34>
 8004f18:	4b89      	ldr	r3, [pc, #548]	@ (8005140 <engineUpdate+0x248>)
 8004f1a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <engineUpdate+0x34>
        LMIC_startJoining();
 8004f26:	f7ff fd5b 	bl	80049e0 <LMIC_startJoining>
        return;
 8004f2a:	e19e      	b.n	800526a <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004f2c:	f000 fc14 	bl	8005758 <os_getTime>
 8004f30:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004f3a:	4b81      	ldr	r3, [pc, #516]	@ (8005140 <engineUpdate+0x248>)
 8004f3c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00f      	beq.n	8004f68 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005140 <engineUpdate+0x248>)
 8004f50:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd01      	ble.n	8004f5e <engineUpdate+0x66>
 8004f5a:	f7fd f90b 	bl	8002174 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004f5e:	4b78      	ldr	r3, [pc, #480]	@ (8005140 <engineUpdate+0x248>)
 8004f60:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004f64:	3b40      	subs	r3, #64	@ 0x40
 8004f66:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004f68:	4b75      	ldr	r3, [pc, #468]	@ (8005140 <engineUpdate+0x248>)
 8004f6a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f6e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80f2 	beq.w	800515c <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004f78:	4b71      	ldr	r3, [pc, #452]	@ (8005140 <engineUpdate+0x248>)
 8004f7a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f7e:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bf14      	ite	ne
 8004f86:	2301      	movne	r3, #1
 8004f88:	2300      	moveq	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 8004f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8005140 <engineUpdate+0x248>)
 8004f90:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d012      	beq.n	8004fc2 <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 8004f9c:	68b8      	ldr	r0, [r7, #8]
 8004f9e:	f7fe f98f 	bl	80032c0 <nextTx>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4a66      	ldr	r2, [pc, #408]	@ (8005140 <engineUpdate+0x248>)
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b65      	ldr	r3, [pc, #404]	@ (8005140 <engineUpdate+0x248>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 8004fae:	4b64      	ldr	r3, [pc, #400]	@ (8005140 <engineUpdate+0x248>)
 8004fb0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004fb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	4b61      	ldr	r3, [pc, #388]	@ (8005140 <engineUpdate+0x248>)
 8004fbc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8004fc0:	e002      	b.n	8004fc8 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005140 <engineUpdate+0x248>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004fc8:	4b5d      	ldr	r3, [pc, #372]	@ (8005140 <engineUpdate+0x248>)
 8004fca:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <engineUpdate+0xe8>
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005140 <engineUpdate+0x248>)
 8004fd4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <engineUpdate+0xfe>
 8004fe0:	4b57      	ldr	r3, [pc, #348]	@ (8005140 <engineUpdate+0x248>)
 8004fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da03      	bge.n	8004ff6 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 8004fee:	4b54      	ldr	r3, [pc, #336]	@ (8005140 <engineUpdate+0x248>)
 8004ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ff4:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004ff6:	4b52      	ldr	r3, [pc, #328]	@ (8005140 <engineUpdate+0x248>)
 8004ff8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d017      	beq.n	8005034 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <engineUpdate+0x116>
 800500a:	4a4e      	ldr	r2, [pc, #312]	@ (8005144 <engineUpdate+0x24c>)
 800500c:	e000      	b.n	8005010 <engineUpdate+0x118>
 800500e:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <engineUpdate+0x250>)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	441a      	add	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8005018:	2b00      	cmp	r3, #0
 800501a:	dd0b      	ble.n	8005034 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8005022:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005026:	2110      	movs	r1, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f7fd ff23 	bl	8002e74 <txDelay>
            txbeg = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8005032:	e09b      	b.n	800516c <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	3340      	adds	r3, #64	@ 0x40
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	da70      	bge.n	8005122 <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8005044:	4b3e      	ldr	r3, [pc, #248]	@ (8005140 <engineUpdate+0x248>)
 8005046:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800504a:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01d      	beq.n	800508e <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8005052:	4b3b      	ldr	r3, [pc, #236]	@ (8005140 <engineUpdate+0x248>)
 8005054:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8005060:	4b37      	ldr	r3, [pc, #220]	@ (8005140 <engineUpdate+0x248>)
 8005062:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fa10 	bl	8002490 <lowerDR>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8005074:	23c0      	movs	r3, #192	@ 0xc0
 8005076:	73bb      	strb	r3, [r7, #14]
 8005078:	e001      	b.n	800507e <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 800507a:	2300      	movs	r3, #0
 800507c:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fc6b 	bl	800495c <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8005086:	4b2e      	ldr	r3, [pc, #184]	@ (8005140 <engineUpdate+0x248>)
 8005088:	4a30      	ldr	r2, [pc, #192]	@ (800514c <engineUpdate+0x254>)
 800508a:	61da      	str	r2, [r3, #28]
 800508c:	e01d      	b.n	80050ca <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 800508e:	4b2c      	ldr	r3, [pc, #176]	@ (8005140 <engineUpdate+0x248>)
 8005090:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8005094:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8005098:	d907      	bls.n	80050aa <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 800509e:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80050a0:	492b      	ldr	r1, [pc, #172]	@ (8005150 <engineUpdate+0x258>)
 80050a2:	482c      	ldr	r0, [pc, #176]	@ (8005154 <engineUpdate+0x25c>)
 80050a4:	f000 fb9c 	bl	80057e0 <os_setCallback>
                    return;
 80050a8:	e0df      	b.n	800526a <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80050aa:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <engineUpdate+0x248>)
 80050ac:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <engineUpdate+0x1c8>
 80050b4:	4b22      	ldr	r3, [pc, #136]	@ (8005140 <engineUpdate+0x248>)
 80050b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d0ee      	beq.n	800509e <engineUpdate+0x1a6>
                }
                buildDataFrame();
 80050c0:	f7ff f9ba 	bl	8004438 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80050c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005140 <engineUpdate+0x248>)
 80050c6:	4a24      	ldr	r2, [pc, #144]	@ (8005158 <engineUpdate+0x260>)
 80050c8:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fd f98b 	bl	80023e8 <updr2rps>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461a      	mov	r2, r3
 80050d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <engineUpdate+0x248>)
 80050d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fd f91c 	bl	800231c <setCr>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <engineUpdate+0x248>)
 80050ea:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 80050ec:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <engineUpdate+0x248>)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 80050f2:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <engineUpdate+0x248>)
 80050f4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80050f8:	b21b      	sxth	r3, r3
 80050fa:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 80050fe:	b21b      	sxth	r3, r3
 8005100:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8005104:	b21b      	sxth	r3, r3
 8005106:	b29a      	uxth	r2, r3
 8005108:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <engineUpdate+0x248>)
 800510a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 800510e:	6938      	ldr	r0, [r7, #16]
 8005110:	f7fe f88c 	bl	800322c <updateTx>
            reportEvent(EV_TXSTART);
 8005114:	2011      	movs	r0, #17
 8005116:	f7fe fa3d 	bl	8003594 <reportEvent>
            os_radio(RADIO_TX);
 800511a:	2001      	movs	r0, #1
 800511c:	f001 f942 	bl	80063a4 <os_radio>
            return;
 8005120:	e0a3      	b.n	800526a <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8005122:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <engineUpdate+0x248>)
 8005124:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 808c 	beq.w	800524a <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d119      	bne.n	800516c <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3301      	adds	r3, #1
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e015      	b.n	800516c <engineUpdate+0x274>
 8005140:	20000218 	.word	0x20000218
 8005144:	00046500 	.word	0x00046500
 8005148:	0002ee00 	.word	0x0002ee00
 800514c:	080042f9 	.word	0x080042f9
 8005150:	080035b3 	.word	0x080035b3
 8005154:	2000022c 	.word	0x2000022c
 8005158:	08004409 	.word	0x08004409
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800515c:	4b44      	ldr	r3, [pc, #272]	@ (8005270 <engineUpdate+0x378>)
 800515e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d07e      	beq.n	8005268 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 800516a:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 800516c:	4b40      	ldr	r3, [pc, #256]	@ (8005270 <engineUpdate+0x378>)
 800516e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005176:	2b00      	cmp	r3, #0
 8005178:	d041      	beq.n	80051fe <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3340      	adds	r3, #64	@ 0x40
 800517e:	4619      	mov	r1, r3
 8005180:	483c      	ldr	r0, [pc, #240]	@ (8005274 <engineUpdate+0x37c>)
 8005182:	f7fd fdeb 	bl	8002d5c <rxschedNext>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d038      	beq.n	80051fe <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <engineUpdate+0x2a8>
 8005192:	4b37      	ldr	r3, [pc, #220]	@ (8005270 <engineUpdate+0x378>)
 8005194:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	db56      	blt.n	800524e <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80051a0:	4b33      	ldr	r3, [pc, #204]	@ (8005270 <engineUpdate+0x378>)
 80051a2:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 80051a6:	4b32      	ldr	r3, [pc, #200]	@ (8005270 <engineUpdate+0x378>)
 80051a8:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80051aa:	4b31      	ldr	r3, [pc, #196]	@ (8005270 <engineUpdate+0x378>)
 80051ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80051b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005270 <engineUpdate+0x378>)
 80051b2:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80051b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005270 <engineUpdate+0x378>)
 80051b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80051ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005270 <engineUpdate+0x378>)
 80051bc:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80051be:	4b2c      	ldr	r3, [pc, #176]	@ (8005270 <engineUpdate+0x378>)
 80051c0:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd f921 	bl	800240c <dndr2rps>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b28      	ldr	r3, [pc, #160]	@ (8005270 <engineUpdate+0x378>)
 80051d0:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 80051d2:	4b27      	ldr	r3, [pc, #156]	@ (8005270 <engineUpdate+0x378>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80051da:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <engineUpdate+0x378>)
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 80051e6:	da01      	bge.n	80051ec <engineUpdate+0x2f4>
 80051e8:	f7fc ffc4 	bl	8002174 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 80051ec:	4b20      	ldr	r3, [pc, #128]	@ (8005270 <engineUpdate+0x378>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	3b40      	subs	r3, #64	@ 0x40
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <engineUpdate+0x380>)
 80051f4:	4619      	mov	r1, r3
 80051f6:	4821      	ldr	r0, [pc, #132]	@ (800527c <engineUpdate+0x384>)
 80051f8:	f000 fb18 	bl	800582c <os_setTimedCallback>
            return;
 80051fc:	e035      	b.n	800526a <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <engineUpdate+0x316>
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	db21      	blt.n	8005252 <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 800520e:	f7fe f8f3 	bl	80033f8 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8005212:	4b17      	ldr	r3, [pc, #92]	@ (8005270 <engineUpdate+0x378>)
 8005214:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8005218:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <engineUpdate+0x378>)
 800521a:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 800521c:	4b14      	ldr	r3, [pc, #80]	@ (8005270 <engineUpdate+0x378>)
 800521e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8005222:	4a13      	ldr	r2, [pc, #76]	@ (8005270 <engineUpdate+0x378>)
 8005224:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	db06      	blt.n	800523e <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8005230:	4b0f      	ldr	r3, [pc, #60]	@ (8005270 <engineUpdate+0x378>)
 8005232:	4a13      	ldr	r2, [pc, #76]	@ (8005280 <engineUpdate+0x388>)
 8005234:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8005236:	2002      	movs	r0, #2
 8005238:	f001 f8b4 	bl	80063a4 <os_radio>
        return;
 800523c:	e015      	b.n	800526a <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800523e:	4a11      	ldr	r2, [pc, #68]	@ (8005284 <engineUpdate+0x38c>)
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	480e      	ldr	r0, [pc, #56]	@ (800527c <engineUpdate+0x384>)
 8005244:	f000 faf2 	bl	800582c <os_setTimedCallback>
    return;
 8005248:	e00f      	b.n	800526a <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <engineUpdate+0x35c>
                goto txdelay;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <engineUpdate+0x35c>
        goto txdelay;
 8005252:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	3b40      	subs	r3, #64	@ 0x40
 8005258:	4a0b      	ldr	r2, [pc, #44]	@ (8005288 <engineUpdate+0x390>)
 800525a:	4619      	mov	r1, r3
 800525c:	4807      	ldr	r0, [pc, #28]	@ (800527c <engineUpdate+0x384>)
 800525e:	f000 fae5 	bl	800582c <os_setTimedCallback>
 8005262:	e002      	b.n	800526a <engineUpdate+0x372>
        return;
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <engineUpdate+0x372>
            return;
 8005268:	bf00      	nop
}
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000218 	.word	0x20000218
 8005274:	2000034c 	.word	0x2000034c
 8005278:	08004ed5 	.word	0x08004ed5
 800527c:	2000022c 	.word	0x2000022c
 8005280:	08004c99 	.word	0x08004c99
 8005284:	08004eb1 	.word	0x08004eb1
 8005288:	08003581 	.word	0x08003581

0800528c <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 800528c:	b598      	push	{r3, r4, r7, lr}
 800528e:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 8005290:	2000      	movs	r0, #0
 8005292:	f001 f887 	bl	80063a4 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8005296:	4821      	ldr	r0, [pc, #132]	@ (800531c <LMIC_reset+0x90>)
 8005298:	f000 fa84 	bl	80057a4 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 800529c:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80052a0:	2100      	movs	r1, #0
 80052a2:	481f      	ldr	r0, [pc, #124]	@ (8005320 <LMIC_reset+0x94>)
 80052a4:	f008 ff83 	bl	800e1ae <memset>
    LMIC.devaddr      =  0;
 80052a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <LMIC_reset+0x94>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 80052b0:	f000 ff7c 	bl	80061ac <radio_rand1>
 80052b4:	4603      	mov	r3, r0
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	b21c      	sxth	r4, r3
 80052ba:	f000 ff77 	bl	80061ac <radio_rand1>
 80052be:	4603      	mov	r3, r0
 80052c0:	b21b      	sxth	r3, r3
 80052c2:	4323      	orrs	r3, r4
 80052c4:	b21b      	sxth	r3, r3
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	4b15      	ldr	r3, [pc, #84]	@ (8005320 <LMIC_reset+0x94>)
 80052ca:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <LMIC_reset+0x94>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 80052d6:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <LMIC_reset+0x94>)
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 80052de:	4b10      	ldr	r3, [pc, #64]	@ (8005320 <LMIC_reset+0x94>)
 80052e0:	2280      	movs	r2, #128	@ 0x80
 80052e2:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 80052e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <LMIC_reset+0x94>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 80052ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <LMIC_reset+0x94>)
 80052f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005324 <LMIC_reset+0x98>)
 80052f2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <LMIC_reset+0x94>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 80052fe:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <LMIC_reset+0x94>)
 8005300:	4a08      	ldr	r2, [pc, #32]	@ (8005324 <LMIC_reset+0x98>)
 8005302:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <LMIC_reset+0x94>)
 8005308:	2203      	movs	r2, #3
 800530a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 800530e:	4b04      	ldr	r3, [pc, #16]	@ (8005320 <LMIC_reset+0x94>)
 8005310:	22ff      	movs	r2, #255	@ 0xff
 8005312:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8005316:	bf00      	nop
 8005318:	bd98      	pop	{r3, r4, r7, pc}
 800531a:	bf00      	nop
 800531c:	2000022c 	.word	0x2000022c
 8005320:	20000218 	.word	0x20000218
 8005324:	33d3e608 	.word	0x33d3e608

08005328 <LMIC_init>:


void LMIC_init (void) {
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <LMIC_init+0x18>)
 800532e:	2240      	movs	r2, #64	@ 0x40
 8005330:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000218 	.word	0x20000218

08005344 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8005348:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <LMIC_setTxData+0x34>)
 800534a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800534e:	f043 0308 	orr.w	r3, r3, #8
 8005352:	b29a      	uxth	r2, r3
 8005354:	4b08      	ldr	r3, [pc, #32]	@ (8005378 <LMIC_setTxData+0x34>)
 8005356:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 800535a:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <LMIC_setTxData+0x34>)
 800535c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8005368:	4b03      	ldr	r3, [pc, #12]	@ (8005378 <LMIC_setTxData+0x34>)
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    engineUpdate();
 8005370:	f7ff fdc2 	bl	8004ef8 <engineUpdate>
}
 8005374:	bf00      	nop
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000218 	.word	0x20000218

0800537c <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6039      	str	r1, [r7, #0]
 8005384:	4611      	mov	r1, r2
 8005386:	461a      	mov	r2, r3
 8005388:	4603      	mov	r3, r0
 800538a:	71fb      	strb	r3, [r7, #7]
 800538c:	460b      	mov	r3, r1
 800538e:	71bb      	strb	r3, [r7, #6]
 8005390:	4613      	mov	r3, r2
 8005392:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 8005394:	79bb      	ldrb	r3, [r7, #6]
 8005396:	2b34      	cmp	r3, #52	@ 0x34
 8005398:	d902      	bls.n	80053a0 <LMIC_setTxData2+0x24>
        return -2;
 800539a:	f06f 0301 	mvn.w	r3, #1
 800539e:	e017      	b.n	80053d0 <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80053a6:	79bb      	ldrb	r3, [r7, #6]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	480a      	ldr	r0, [pc, #40]	@ (80053d8 <LMIC_setTxData2+0x5c>)
 80053ae:	f008 ff7a 	bl	800e2a6 <memcpy>
    LMIC.pendTxConf = confirmed;
 80053b2:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <LMIC_setTxData2+0x60>)
 80053b4:	797b      	ldrb	r3, [r7, #5]
 80053b6:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
    LMIC.pendTxPort = port;
 80053ba:	4a08      	ldr	r2, [pc, #32]	@ (80053dc <LMIC_setTxData2+0x60>)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
    LMIC.pendTxLen  = dlen;
 80053c2:	4a06      	ldr	r2, [pc, #24]	@ (80053dc <LMIC_setTxData2+0x60>)
 80053c4:	79bb      	ldrb	r3, [r7, #6]
 80053c6:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC_setTxData();
 80053ca:	f7ff ffbb 	bl	8005344 <LMIC_setTxData>
    return 0;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200002d5 	.word	0x200002d5
 80053dc:	20000218 	.word	0x20000218

080053e0 <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4906      	ldr	r1, [pc, #24]	@ (8005404 <os_getArtEui+0x24>)
 80053ec:	461a      	mov	r2, r3
 80053ee:	460b      	mov	r3, r1
 80053f0:	cb03      	ldmia	r3!, {r0, r1}
 80053f2:	6010      	str	r0, [r2, #0]
 80053f4:	6051      	str	r1, [r2, #4]
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	08010540 	.word	0x08010540

08005408 <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4906      	ldr	r1, [pc, #24]	@ (800542c <os_getDevEui+0x24>)
 8005414:	461a      	mov	r2, r3
 8005416:	460b      	mov	r3, r1
 8005418:	cb03      	ldmia	r3!, {r0, r1}
 800541a:	6010      	str	r0, [r2, #0]
 800541c:	6051      	str	r1, [r2, #4]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	08010548 	.word	0x08010548

08005430 <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8005430:	b4b0      	push	{r4, r5, r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a06      	ldr	r2, [pc, #24]	@ (8005454 <os_getDevKey+0x24>)
 800543c:	461c      	mov	r4, r3
 800543e:	4615      	mov	r5, r2
 8005440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005442:	6020      	str	r0, [r4, #0]
 8005444:	6061      	str	r1, [r4, #4]
 8005446:	60a2      	str	r2, [r4, #8]
 8005448:	60e3      	str	r3, [r4, #12]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bcb0      	pop	{r4, r5, r7}
 8005452:	4770      	bx	lr
 8005454:	08010550 	.word	0x08010550

08005458 <initsensor>:
void initsensor(){
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET); //alimente le capteur de temperature
 800545c:	2201      	movs	r2, #1
 800545e:	2180      	movs	r1, #128	@ 0x80
 8005460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005464:	f005 fcd8 	bl	800ae18 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8005468:	217f      	movs	r1, #127	@ 0x7f
 800546a:	4802      	ldr	r0, [pc, #8]	@ (8005474 <initsensor+0x1c>)
 800546c:	f005 f986 	bl	800a77c <HAL_ADCEx_Calibration_Start>
}
 8005470:	bf00      	nop
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000098 	.word	0x20000098

08005478 <initfunc>:

void initfunc (osjob_t* j) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 8005480:	f7ff ffea 	bl	8005458 <initsensor>
	// reset MAC state
	LMIC_reset();
 8005484:	f7ff ff02 	bl	800528c <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8005488:	f7ff faaa 	bl	80049e0 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <reportfunc>:
	return  (188686 - 147 * raw_adc1_in15);
}

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	// BME680

	if (bme68x_single_measure(&data) == 0) {
 800549c:	4831      	ldr	r0, [pc, #196]	@ (8005564 <reportfunc+0xd0>)
 800549e:	f003 fb27 	bl	8008af0 <bme68x_single_measure>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <reportfunc+0x2a>

		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 80054a8:	f003 fda0 	bl	8008fec <bme68x_iaq>
 80054ac:	eef0 7a40 	vmov.f32	s15, s0
 80054b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005564 <reportfunc+0xd0>)
 80054b2:	edc3 7a02 	vstr	s15, [r3, #8]

		HAL_Delay(2000);
 80054b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80054ba:	f003 fe7b 	bl	80091b4 <HAL_Delay>
	}


	cayenne_lpp_reset(&cayenne_packet);
 80054be:	482a      	ldr	r0, [pc, #168]	@ (8005568 <reportfunc+0xd4>)
 80054c0:	f7fc face 	bl	8001a60 <cayenne_lpp_reset>

	cayenne_lpp_add_temperature(&cayenne_packet, 0, data.temperature);
 80054c4:	4b27      	ldr	r3, [pc, #156]	@ (8005564 <reportfunc+0xd0>)
 80054c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80054ca:	eeb0 0a67 	vmov.f32	s0, s15
 80054ce:	2100      	movs	r1, #0
 80054d0:	4825      	ldr	r0, [pc, #148]	@ (8005568 <reportfunc+0xd4>)
 80054d2:	f7fc fb37 	bl	8001b44 <cayenne_lpp_add_temperature>
	cayenne_lpp_add_relative_humidity(&cayenne_packet, 1, data.humidity);
 80054d6:	4b23      	ldr	r3, [pc, #140]	@ (8005564 <reportfunc+0xd0>)
 80054d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80054dc:	eeb0 0a67 	vmov.f32	s0, s15
 80054e0:	2101      	movs	r1, #1
 80054e2:	4821      	ldr	r0, [pc, #132]	@ (8005568 <reportfunc+0xd4>)
 80054e4:	f7fc fb8c 	bl	8001c00 <cayenne_lpp_add_relative_humidity>
	cayenne_lpp_add_barometric_pressure(&cayenne_packet, 2, data.pressure);
 80054e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <reportfunc+0xd0>)
 80054ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80054ee:	eeb0 0a67 	vmov.f32	s0, s15
 80054f2:	2102      	movs	r1, #2
 80054f4:	481c      	ldr	r0, [pc, #112]	@ (8005568 <reportfunc+0xd4>)
 80054f6:	f7fc fbcf 	bl	8001c98 <cayenne_lpp_add_barometric_pressure>
	cayenne_lpp_add_analog_output(&cayenne_packet, 3, data.iaq_score);
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <reportfunc+0xd0>)
 80054fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005500:	eeb0 0a67 	vmov.f32	s0, s15
 8005504:	2103      	movs	r1, #3
 8005506:	4818      	ldr	r0, [pc, #96]	@ (8005568 <reportfunc+0xd4>)
 8005508:	f7fc fabc 	bl	8001a84 <cayenne_lpp_add_analog_output>
	cayenne_lpp_add_analog_output(&cayenne_packet, 4, (float)(data.gas_index));
 800550c:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <reportfunc+0xd0>)
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005518:	eeb0 0a67 	vmov.f32	s0, s15
 800551c:	2104      	movs	r1, #4
 800551e:	4812      	ldr	r0, [pc, #72]	@ (8005568 <reportfunc+0xd4>)
 8005520:	f7fc fab0 	bl	8001a84 <cayenne_lpp_add_analog_output>
	cayenne_lpp_add_analog_output(&cayenne_packet, 5, data.gas_resistance);
 8005524:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <reportfunc+0xd0>)
 8005526:	edd3 7a06 	vldr	s15, [r3, #24]
 800552a:	eeb0 0a67 	vmov.f32	s0, s15
 800552e:	2105      	movs	r1, #5
 8005530:	480d      	ldr	r0, [pc, #52]	@ (8005568 <reportfunc+0xd4>)
 8005532:	f7fc faa7 	bl	8001a84 <cayenne_lpp_add_analog_output>

	LMIC_setTxData2(1, cayenne_packet.buffer, sizeof(cayenne_packet.buffer), 0);
 8005536:	2300      	movs	r3, #0
 8005538:	2226      	movs	r2, #38	@ 0x26
 800553a:	490b      	ldr	r1, [pc, #44]	@ (8005568 <reportfunc+0xd4>)
 800553c:	2001      	movs	r0, #1
 800553e:	f7ff ff1d 	bl	800537c <LMIC_setTxData2>

	// reschedule job in 60 seconds
	os_setTimedCallback(j, os_getTime()+sec2osticks(15), reportfunc);
 8005542:	f000 f909 	bl	8005758 <os_getTime>
 8005546:	4603      	mov	r3, r0
 8005548:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 800554c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005550:	4a06      	ldr	r2, [pc, #24]	@ (800556c <reportfunc+0xd8>)
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f969 	bl	800582c <os_setTimedCallback>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200003f0 	.word	0x200003f0
 8005568:	200003c8 	.word	0x200003c8
 800556c:	08005495 	.word	0x08005495

08005570 <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
	switch(ev) {
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	3b01      	subs	r3, #1
 800557e:	2b0e      	cmp	r3, #14
 8005580:	d824      	bhi.n	80055cc <onEvent+0x5c>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <onEvent+0x18>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055cd 	.word	0x080055cd
 800558c:	080055cd 	.word	0x080055cd
 8005590:	080055cd 	.word	0x080055cd
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055cd 	.word	0x080055cd
 80055b0:	080055cd 	.word	0x080055cd
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055cd 	.word	0x080055cd
	// network joined, session established
		case EV_JOINING:
			break;

		case EV_JOINED:
			reportfunc(&reportjob);
 80055c4:	4804      	ldr	r0, [pc, #16]	@ (80055d8 <onEvent+0x68>)
 80055c6:	f7ff ff65 	bl	8005494 <reportfunc>
			break;
 80055ca:	e000      	b.n	80055ce <onEvent+0x5e>
		case EV_LINK_DEAD:
			break;
		case EV_LINK_ALIVE:
			break;
		default:
			break;
 80055cc:	bf00      	nop
	}
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	2000040c 	.word	0x2000040c

080055dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055e2:	f003 fd72 	bl	80090ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055e6:	f000 f839 	bl	800565c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055ea:	f7fc fbb3 	bl	8001d54 <MX_GPIO_Init>
  MX_SPI3_Init();
 80055ee:	f000 ff05 	bl	80063fc <MX_SPI3_Init>
  MX_TIM7_Init();
 80055f2:	f001 f923 	bl	800683c <MX_TIM7_Init>
  MX_TIM6_Init();
 80055f6:	f001 f8e9 	bl	80067cc <MX_TIM6_Init>
  MX_ADC1_Init();
 80055fa:	f7fb fc1f 	bl	8000e3c <MX_ADC1_Init>
  MX_I2C1_Init();
 80055fe:	f7fc fdc1 	bl	8002184 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* BME680 API forced mode test */
  bme68x_start(&data, &hi2c1);
 8005602:	4910      	ldr	r1, [pc, #64]	@ (8005644 <main+0x68>)
 8005604:	4810      	ldr	r0, [pc, #64]	@ (8005648 <main+0x6c>)
 8005606:	f003 fa1d 	bl	8008a44 <bme68x_start>



  HAL_TIM_Base_Start_IT(&htim6); //demarrage du timer 6 en interruption toutes les secondes pour la mesure temperature
 800560a:	4810      	ldr	r0, [pc, #64]	@ (800564c <main+0x70>)
 800560c:	f008 fa22 	bl	800da54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8005610:	480f      	ldr	r0, [pc, #60]	@ (8005650 <main+0x74>)
 8005612:	f008 fa1f 	bl	800da54 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <main+0x78>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <main+0x78>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005624:	601a      	str	r2, [r3, #0]

  osjob_t initjob;
  // initialize runtime env
  os_init();
 8005626:	f000 f885 	bl	8005734 <os_init>
  // setup initial job
  os_setCallback(&initjob, initfunc);
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	490a      	ldr	r1, [pc, #40]	@ (8005658 <main+0x7c>)
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f8d6 	bl	80057e0 <os_setCallback>
//  }



  // execute scheduled jobs and events
  os_runloop();
 8005634:	f000 f930 	bl	8005898 <os_runloop>
  // (not reached)
  return 0;
 8005638:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200001c4 	.word	0x200001c4
 8005648:	200003f0 	.word	0x200003f0
 800564c:	20000498 	.word	0x20000498
 8005650:	200004e4 	.word	0x200004e4
 8005654:	20000430 	.word	0x20000430
 8005658:	08005479 	.word	0x08005479

0800565c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b096      	sub	sp, #88	@ 0x58
 8005660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005662:	f107 0314 	add.w	r3, r7, #20
 8005666:	2244      	movs	r2, #68	@ 0x44
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f008 fd9f 	bl	800e1ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005670:	463b      	mov	r3, r7
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	609a      	str	r2, [r3, #8]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800567e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005682:	f006 fb17 	bl	800bcb4 <HAL_PWREx_ControlVoltageScaling>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800568c:	f000 f84c 	bl	8005728 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005690:	2302      	movs	r3, #2
 8005692:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800569a:	2310      	movs	r3, #16
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800569e:	2302      	movs	r3, #2
 80056a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80056a2:	2302      	movs	r3, #2
 80056a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80056aa:	230a      	movs	r3, #10
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80056ae:	2307      	movs	r3, #7
 80056b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80056b2:	2302      	movs	r3, #2
 80056b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80056b6:	2302      	movs	r3, #2
 80056b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056ba:	f107 0314 	add.w	r3, r7, #20
 80056be:	4618      	mov	r0, r3
 80056c0:	f006 fb4e 	bl	800bd60 <HAL_RCC_OscConfig>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80056ca:	f000 f82d 	bl	8005728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056ce:	230f      	movs	r3, #15
 80056d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056d2:	2303      	movs	r3, #3
 80056d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80056e2:	463b      	mov	r3, r7
 80056e4:	2104      	movs	r1, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f006 ff4e 	bl	800c588 <HAL_RCC_ClockConfig>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80056f2:	f000 f819 	bl	8005728 <Error_Handler>
  }
}
 80056f6:	bf00      	nop
 80056f8:	3758      	adds	r7, #88	@ 0x58
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <HAL_ADC_ConvCpltCallback>:
//	}
//}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	raw_adc1_in15 = HAL_ADC_GetValue(&hadc1);
 8005708:	4805      	ldr	r0, [pc, #20]	@ (8005720 <HAL_ADC_ConvCpltCallback+0x20>)
 800570a:	f004 f96d 	bl	80099e8 <HAL_ADC_GetValue>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <HAL_ADC_ConvCpltCallback+0x24>)
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000098 	.word	0x20000098
 8005724:	200003c4 	.word	0x200003c4

08005728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800572c:	b672      	cpsid	i
}
 800572e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <Error_Handler+0x8>

08005734 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8005738:	2208      	movs	r2, #8
 800573a:	2100      	movs	r1, #0
 800573c:	4805      	ldr	r0, [pc, #20]	@ (8005754 <os_init+0x20>)
 800573e:	f008 fd36 	bl	800e1ae <memset>
    hal_init();
 8005742:	f7fc fd01 	bl	8002148 <hal_init>
    radio_init();
 8005746:	f000 fcbd 	bl	80060c4 <radio_init>
    LMIC_init();
 800574a:	f7ff fded 	bl	8005328 <LMIC_init>
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000418 	.word	0x20000418

08005758 <os_getTime>:

ostime_t os_getTime () {
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
    return hal_ticks();
 800575c:	f7fc fc0a 	bl	8001f74 <hal_ticks>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	bd80      	pop	{r7, pc}

08005766 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8005770:	e00d      	b.n	800578e <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d105      	bne.n	8005788 <unlinkjob+0x22>
            *pnext = job->next;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
            return 1;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ed      	bne.n	8005772 <unlinkjob+0xc>
        }
    }
    return 0;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 80057ac:	f7fc fca0 	bl	80020f0 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4809      	ldr	r0, [pc, #36]	@ (80057d8 <os_clearCallback+0x34>)
 80057b4:	f7ff ffd7 	bl	8005766 <unlinkjob>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <os_clearCallback+0x26>
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4806      	ldr	r0, [pc, #24]	@ (80057dc <os_clearCallback+0x38>)
 80057c2:	f7ff ffd0 	bl	8005766 <unlinkjob>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 80057ca:	f7fc fca1 	bl	8002110 <hal_enableIRQs>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000418 	.word	0x20000418
 80057dc:	2000041c 	.word	0x2000041c

080057e0 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 80057ea:	f7fc fc81 	bl	80020f0 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	480d      	ldr	r0, [pc, #52]	@ (8005828 <os_setCallback+0x48>)
 80057f2:	f7ff ffb8 	bl	8005766 <unlinkjob>
    // fill-in job
    job->func = cb;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8005802:	4b09      	ldr	r3, [pc, #36]	@ (8005828 <os_setCallback+0x48>)
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e002      	b.n	800580e <os_setCallback+0x2e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f8      	bne.n	8005808 <os_setCallback+0x28>
    *pnext = job;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 800581c:	f7fc fc78 	bl	8002110 <hal_enableIRQs>
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	2000041c 	.word	0x2000041c

0800582c <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8005838:	f7fc fc5a 	bl	80020f0 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 800583c:	68f9      	ldr	r1, [r7, #12]
 800583e:	4815      	ldr	r0, [pc, #84]	@ (8005894 <os_setTimedCallback+0x68>)
 8005840:	f7ff ff91 	bl	8005766 <unlinkjob>
    // fill-in job
    job->deadline = time;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	605a      	str	r2, [r3, #4]
    job->func = cb;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8005856:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <os_setTimedCallback+0x68>)
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e00e      	b.n	800587a <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	dd04      	ble.n	8005874 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	601a      	str	r2, [r3, #0]
            break;
 8005872:	e006      	b.n	8005882 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ec      	bne.n	800585c <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005888:	f7fc fc42 	bl	8002110 <hal_enableIRQs>
}
 800588c:	bf00      	nop
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000418 	.word	0x20000418

08005898 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 80058a2:	f7fc fc25 	bl	80020f0 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 80058a6:	4b16      	ldr	r3, [pc, #88]	@ (8005900 <os_runloop+0x68>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <os_runloop+0x26>
            j = OS.runnablejobs;
 80058ae:	4b14      	ldr	r3, [pc, #80]	@ (8005900 <os_runloop+0x68>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a11      	ldr	r2, [pc, #68]	@ (8005900 <os_runloop+0x68>)
 80058ba:	6053      	str	r3, [r2, #4]
 80058bc:	e016      	b.n	80058ec <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 80058be:	4b10      	ldr	r3, [pc, #64]	@ (8005900 <os_runloop+0x68>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d010      	beq.n	80058e8 <os_runloop+0x50>
 80058c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005900 <os_runloop+0x68>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fc fbaf 	bl	8002030 <hal_checkTimer>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <os_runloop+0x50>
            j = OS.scheduledjobs;
 80058d8:	4b09      	ldr	r3, [pc, #36]	@ (8005900 <os_runloop+0x68>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a07      	ldr	r2, [pc, #28]	@ (8005900 <os_runloop+0x68>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e001      	b.n	80058ec <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 80058e8:	f7fc fc26 	bl	8002138 <hal_sleep>
        }
        hal_enableIRQs();
 80058ec:	f7fc fc10 	bl	8002110 <hal_enableIRQs>
        if(j) { // run job callback
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0d3      	beq.n	800589e <os_runloop+0x6>
            j->func(j);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
    while(1) {
 80058fe:	e7ce      	b.n	800589e <os_runloop+0x6>
 8005900:	20000418 	.word	0x20000418

08005904 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	460a      	mov	r2, r1
 800590e:	71fb      	strb	r3, [r7, #7]
 8005910:	4613      	mov	r3, r2
 8005912:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005914:	2000      	movs	r0, #0
 8005916:	f7fc faa5 	bl	8001e64 <hal_pin_nss>
    hal_spi(addr | 0x80);
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4618      	mov	r0, r3
 8005924:	f7fc fb00 	bl	8001f28 <hal_spi>
    hal_spi(data);
 8005928:	79bb      	ldrb	r3, [r7, #6]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fc fafc 	bl	8001f28 <hal_spi>
    hal_pin_nss(1);
 8005930:	2001      	movs	r0, #1
 8005932:	f7fc fa97 	bl	8001e64 <hal_pin_nss>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <readReg>:

static u1_t readReg (u1_t addr) {
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	4603      	mov	r3, r0
 8005946:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8005948:	2000      	movs	r0, #0
 800594a:	f7fc fa8b 	bl	8001e64 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005954:	b2db      	uxtb	r3, r3
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc fae6 	bl	8001f28 <hal_spi>
    u1_t val = hal_spi(0x00);
 800595c:	2000      	movs	r0, #0
 800595e:	f7fc fae3 	bl	8001f28 <hal_spi>
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8005966:	2001      	movs	r0, #1
 8005968:	f7fc fa7c 	bl	8001e64 <hal_pin_nss>
    return val;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	4603      	mov	r3, r0
 800597e:	6039      	str	r1, [r7, #0]
 8005980:	71fb      	strb	r3, [r7, #7]
 8005982:	4613      	mov	r3, r2
 8005984:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005986:	2000      	movs	r0, #0
 8005988:	f7fc fa6c 	bl	8001e64 <hal_pin_nss>
    hal_spi(addr | 0x80);
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005992:	b2db      	uxtb	r3, r3
 8005994:	4618      	mov	r0, r3
 8005996:	f7fc fac7 	bl	8001f28 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
 800599e:	e009      	b.n	80059b4 <writeBuf+0x3e>
        hal_spi(buf[i]);
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fc fabd 	bl	8001f28 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	3301      	adds	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	79bb      	ldrb	r3, [r7, #6]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3f1      	bcc.n	80059a0 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 80059bc:	2001      	movs	r0, #1
 80059be:	f7fc fa51 	bl	8001e64 <hal_pin_nss>
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80059ca:	b590      	push	{r4, r7, lr}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4603      	mov	r3, r0
 80059d2:	6039      	str	r1, [r7, #0]
 80059d4:	71fb      	strb	r3, [r7, #7]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80059da:	2000      	movs	r0, #0
 80059dc:	f7fc fa42 	bl	8001e64 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fc fa9d 	bl	8001f28 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	e00a      	b.n	8005a0a <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	18d4      	adds	r4, r2, r3
 80059fa:	2000      	movs	r0, #0
 80059fc:	f7fc fa94 	bl	8001f28 <hal_spi>
 8005a00:	4603      	mov	r3, r0
 8005a02:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	3301      	adds	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
 8005a0a:	7bfa      	ldrb	r2, [r7, #15]
 8005a0c:	79bb      	ldrb	r3, [r7, #6]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d3f0      	bcc.n	80059f4 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fc fa26 	bl	8001e64 <hal_pin_nss>
}
 8005a18:	bf00      	nop
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd90      	pop	{r4, r7, pc}

08005a20 <opmode>:

static void opmode (u1_t mode) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f7ff ff87 	bl	800593e <readReg>
 8005a30:	4603      	mov	r3, r0
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	f023 0307 	bic.w	r3, r3, #7
 8005a38:	b25a      	sxtb	r2, r3
 8005a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	4619      	mov	r1, r3
 8005a46:	2001      	movs	r0, #1
 8005a48:	f7ff ff5c 	bl	8005904 <writeReg>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <opmodeLora>:

static void opmodeLora() {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8005a5a:	2380      	movs	r3, #128	@ 0x80
 8005a5c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	f043 0308 	orr.w	r3, r3, #8
 8005a64:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	f7ff ff4a 	bl	8005904 <writeReg>
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <opmodeFSK>:

static void opmodeFSK() {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
    u1_t u = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	f043 0308 	orr.w	r3, r3, #8
 8005a88:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f7ff ff38 	bl	8005904 <writeReg>
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 8005aa2:	4b54      	ldr	r3, [pc, #336]	@ (8005bf4 <configLoraModem+0x158>)
 8005aa4:	89db      	ldrh	r3, [r3, #14]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fc fc04 	bl	80022b4 <getSf>
 8005aac:	4603      	mov	r3, r0
 8005aae:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	71fb      	strb	r3, [r7, #7]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	71bb      	strb	r3, [r7, #6]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8005abc:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf4 <configLoraModem+0x158>)
 8005abe:	89db      	ldrh	r3, [r3, #14]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fc fc07 	bl	80022d4 <getBw>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d010      	beq.n	8005aee <configLoraModem+0x52>
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	dc13      	bgt.n	8005af8 <configLoraModem+0x5c>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <configLoraModem+0x3e>
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d005      	beq.n	8005ae4 <configLoraModem+0x48>
 8005ad8:	e00e      	b.n	8005af8 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8005ae0:	71fb      	strb	r3, [r7, #7]
 8005ae2:	e00b      	b.n	8005afc <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aea:	71fb      	strb	r3, [r7, #7]
 8005aec:	e006      	b.n	8005afc <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8005af4:	71fb      	strb	r3, [r7, #7]
 8005af6:	e001      	b.n	8005afc <configLoraModem+0x60>
        default:
            ASSERT(0);
 8005af8:	f7fc fb3c 	bl	8002174 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005afc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf4 <configLoraModem+0x158>)
 8005afe:	89db      	ldrh	r3, [r3, #14]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fc fbf9 	bl	80022f8 <getCr>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d81f      	bhi.n	8005b4c <configLoraModem+0xb0>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <configLoraModem+0x78>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b25 	.word	0x08005b25
 8005b18:	08005b2f 	.word	0x08005b2f
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	08005b43 	.word	0x08005b43
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	f043 0302 	orr.w	r3, r3, #2
 8005b2a:	71fb      	strb	r3, [r7, #7]
 8005b2c:	e010      	b.n	8005b50 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	71fb      	strb	r3, [r7, #7]
 8005b36:	e00b      	b.n	8005b50 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	f043 0306 	orr.w	r3, r3, #6
 8005b3e:	71fb      	strb	r3, [r7, #7]
 8005b40:	e006      	b.n	8005b50 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	f043 0308 	orr.w	r3, r3, #8
 8005b48:	71fb      	strb	r3, [r7, #7]
 8005b4a:	e001      	b.n	8005b50 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8005b4c:	f7fc fb12 	bl	8002174 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8005b50:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <configLoraModem+0x158>)
 8005b52:	89db      	ldrh	r3, [r3, #14]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fc fc21 	bl	800239c <getIh>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00e      	beq.n	8005b7e <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005b68:	4b22      	ldr	r3, [pc, #136]	@ (8005bf4 <configLoraModem+0x158>)
 8005b6a:	89db      	ldrh	r3, [r3, #14]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fc fc15 	bl	800239c <getIh>
 8005b72:	4603      	mov	r3, r0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	2022      	movs	r0, #34	@ 0x22
 8005b7a:	f7ff fec3 	bl	8005904 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	4619      	mov	r1, r3
 8005b82:	201d      	movs	r0, #29
 8005b84:	f7ff febe 	bl	8005904 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8005b88:	793b      	ldrb	r3, [r7, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	3370      	adds	r3, #112	@ 0x70
 8005b94:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 8005b96:	4b17      	ldr	r3, [pc, #92]	@ (8005bf4 <configLoraModem+0x158>)
 8005b98:	89db      	ldrh	r3, [r3, #14]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fc fbd7 	bl	800234e <getNocrc>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8005ba6:	79bb      	ldrb	r3, [r7, #6]
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 8005bae:	79bb      	ldrb	r3, [r7, #6]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	201e      	movs	r0, #30
 8005bb4:	f7ff fea6 	bl	8005904 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8005bb8:	2304      	movs	r3, #4
 8005bba:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8005bbc:	793b      	ldrb	r3, [r7, #4]
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d002      	beq.n	8005bc8 <configLoraModem+0x12c>
 8005bc2:	793b      	ldrb	r3, [r7, #4]
 8005bc4:	2b06      	cmp	r3, #6
 8005bc6:	d10b      	bne.n	8005be0 <configLoraModem+0x144>
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <configLoraModem+0x158>)
 8005bca:	89db      	ldrh	r3, [r3, #14]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fc fb81 	bl	80022d4 <getBw>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8005bd8:	797b      	ldrb	r3, [r7, #5]
 8005bda:	f043 0308 	orr.w	r3, r3, #8
 8005bde:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8005be0:	797b      	ldrb	r3, [r7, #5]
 8005be2:	4619      	mov	r1, r3
 8005be4:	2026      	movs	r0, #38	@ 0x26
 8005be6:	f7ff fe8d 	bl	8005904 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000218 	.word	0x20000218

08005bf8 <configChannel>:

static void configChannel () {
 8005bf8:	b5b0      	push	{r4, r5, r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8005bfe:	4c1b      	ldr	r4, [pc, #108]	@ (8005c6c <configChannel+0x74>)
 8005c00:	68a4      	ldr	r4, [r4, #8]
 8005c02:	2500      	movs	r5, #0
 8005c04:	4622      	mov	r2, r4
 8005c06:	462b      	mov	r3, r5
 8005c08:	0b51      	lsrs	r1, r2, #13
 8005c0a:	04d0      	lsls	r0, r2, #19
 8005c0c:	4a18      	ldr	r2, [pc, #96]	@ (8005c70 <configChannel+0x78>)
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	f7fa ff9b 	bl	8000b4c <__aeabi_uldivmod>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	0c02      	lsrs	r2, r0, #16
 8005c2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005c30:	0c0b      	lsrs	r3, r1, #16
 8005c32:	b2d3      	uxtb	r3, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	2006      	movs	r0, #6
 8005c38:	f7ff fe64 	bl	8005904 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	0a02      	lsrs	r2, r0, #8
 8005c4a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005c4e:	0a0b      	lsrs	r3, r1, #8
 8005c50:	b2d3      	uxtb	r3, r2
 8005c52:	4619      	mov	r1, r3
 8005c54:	2007      	movs	r0, #7
 8005c56:	f7ff fe55 	bl	8005904 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005c5a:	783b      	ldrb	r3, [r7, #0]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	2008      	movs	r0, #8
 8005c60:	f7ff fe50 	bl	8005904 <writeReg>
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c6c:	20000218 	.word	0x20000218
 8005c70:	01e84800 	.word	0x01e84800

08005c74 <configPower>:



static void configPower () {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005c7a:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <configPower+0x5c>)
 8005c7c:	7c9b      	ldrb	r3, [r3, #18]
 8005c7e:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	dd02      	ble.n	8005c8e <configPower+0x1a>
        pw = 15;
 8005c88:	230f      	movs	r3, #15
 8005c8a:	71fb      	strb	r3, [r7, #7]
 8005c8c:	e005      	b.n	8005c9a <configPower+0x26>
    } else if(pw < 2) {
 8005c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	dc01      	bgt.n	8005c9a <configPower+0x26>
        pw = 2;
 8005c96:	2302      	movs	r3, #2
 8005c98:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ca6:	b25b      	sxtb	r3, r3
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	4619      	mov	r1, r3
 8005cac:	2009      	movs	r0, #9
 8005cae:	f7ff fe29 	bl	8005904 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 8005cb2:	205a      	movs	r0, #90	@ 0x5a
 8005cb4:	f7ff fe43 	bl	800593e <readReg>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f043 0304 	orr.w	r3, r3, #4
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	205a      	movs	r0, #90	@ 0x5a
 8005cc4:	f7ff fe1e 	bl	8005904 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000218 	.word	0x20000218

08005cd4 <txfsk>:

static void txfsk () {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8005cd8:	2110      	movs	r1, #16
 8005cda:	2001      	movs	r0, #1
 8005cdc:	f7ff fe12 	bl	8005904 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f7ff fe2c 	bl	800593e <readReg>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d001      	beq.n	8005cf0 <txfsk+0x1c>
 8005cec:	f7fc fa42 	bl	8002174 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	f7ff fe95 	bl	8005a20 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	2002      	movs	r0, #2
 8005cfa:	f7ff fe03 	bl	8005904 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005cfe:	2180      	movs	r1, #128	@ 0x80
 8005d00:	2003      	movs	r0, #3
 8005d02:	f7ff fdff 	bl	8005904 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005d06:	2101      	movs	r1, #1
 8005d08:	2004      	movs	r0, #4
 8005d0a:	f7ff fdfb 	bl	8005904 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005d0e:	2199      	movs	r1, #153	@ 0x99
 8005d10:	2005      	movs	r0, #5
 8005d12:	f7ff fdf7 	bl	8005904 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005d16:	2100      	movs	r1, #0
 8005d18:	2025      	movs	r0, #37	@ 0x25
 8005d1a:	f7ff fdf3 	bl	8005904 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005d1e:	2105      	movs	r1, #5
 8005d20:	2026      	movs	r0, #38	@ 0x26
 8005d22:	f7ff fdef 	bl	8005904 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005d26:	2112      	movs	r1, #18
 8005d28:	2027      	movs	r0, #39	@ 0x27
 8005d2a:	f7ff fdeb 	bl	8005904 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005d2e:	21d0      	movs	r1, #208	@ 0xd0
 8005d30:	2030      	movs	r0, #48	@ 0x30
 8005d32:	f7ff fde7 	bl	8005904 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005d36:	2140      	movs	r1, #64	@ 0x40
 8005d38:	2031      	movs	r0, #49	@ 0x31
 8005d3a:	f7ff fde3 	bl	8005904 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005d3e:	21c1      	movs	r1, #193	@ 0xc1
 8005d40:	2028      	movs	r0, #40	@ 0x28
 8005d42:	f7ff fddf 	bl	8005904 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005d46:	2194      	movs	r1, #148	@ 0x94
 8005d48:	2029      	movs	r0, #41	@ 0x29
 8005d4a:	f7ff fddb 	bl	8005904 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005d4e:	21c1      	movs	r1, #193	@ 0xc1
 8005d50:	202a      	movs	r0, #42	@ 0x2a
 8005d52:	f7ff fdd7 	bl	8005904 <writeReg>
    // configure frequency
    configChannel();
 8005d56:	f7ff ff4f 	bl	8005bf8 <configChannel>
    // configure output power
    configPower();
 8005d5a:	f7ff ff8b 	bl	8005c74 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005d5e:	2134      	movs	r1, #52	@ 0x34
 8005d60:	2040      	movs	r0, #64	@ 0x40
 8005d62:	f7ff fdcf 	bl	8005904 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8005d66:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <txfsk+0xd4>)
 8005d68:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	4619      	mov	r1, r3
 8005d72:	2032      	movs	r0, #50	@ 0x32
 8005d74:	f7ff fdc6 	bl	8005904 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005d78:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <txfsk+0xd4>)
 8005d7a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005d7e:	4619      	mov	r1, r3
 8005d80:	2000      	movs	r0, #0
 8005d82:	f7ff fdbf 	bl	8005904 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005d86:	4b08      	ldr	r3, [pc, #32]	@ (8005da8 <txfsk+0xd4>)
 8005d88:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4907      	ldr	r1, [pc, #28]	@ (8005dac <txfsk+0xd8>)
 8005d90:	2000      	movs	r0, #0
 8005d92:	f7ff fdf0 	bl	8005976 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fc f859 	bl	8001e4e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	f7ff fe3f 	bl	8005a20 <opmode>
}
 8005da2:	bf00      	nop
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000218 	.word	0x20000218
 8005dac:	20000360 	.word	0x20000360

08005db0 <txlora>:

static void txlora () {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8005db4:	f7ff fe4e 	bl	8005a54 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005db8:	2001      	movs	r0, #1
 8005dba:	f7ff fdc0 	bl	800593e <readReg>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	b25b      	sxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	db01      	blt.n	8005dca <txlora+0x1a>
 8005dc6:	f7fc f9d5 	bl	8002174 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f7ff fe28 	bl	8005a20 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8005dd0:	f7ff fe64 	bl	8005a9c <configLoraModem>
    // configure frequency
    configChannel();
 8005dd4:	f7ff ff10 	bl	8005bf8 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8005dd8:	200a      	movs	r0, #10
 8005dda:	f7ff fdb0 	bl	800593e <readReg>
 8005dde:	4603      	mov	r3, r0
 8005de0:	b25b      	sxtb	r3, r3
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	b25b      	sxtb	r3, r3
 8005de8:	f043 0308 	orr.w	r3, r3, #8
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	200a      	movs	r0, #10
 8005df4:	f7ff fd86 	bl	8005904 <writeReg>
    configPower();
 8005df8:	f7ff ff3c 	bl	8005c74 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005dfc:	2134      	movs	r1, #52	@ 0x34
 8005dfe:	2039      	movs	r0, #57	@ 0x39
 8005e00:	f7ff fd80 	bl	8005904 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005e04:	21f0      	movs	r1, #240	@ 0xf0
 8005e06:	2040      	movs	r0, #64	@ 0x40
 8005e08:	f7ff fd7c 	bl	8005904 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005e0c:	21ff      	movs	r1, #255	@ 0xff
 8005e0e:	2012      	movs	r0, #18
 8005e10:	f7ff fd78 	bl	8005904 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005e14:	21f7      	movs	r1, #247	@ 0xf7
 8005e16:	2011      	movs	r0, #17
 8005e18:	f7ff fd74 	bl	8005904 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	200e      	movs	r0, #14
 8005e20:	f7ff fd70 	bl	8005904 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005e24:	2100      	movs	r1, #0
 8005e26:	200d      	movs	r0, #13
 8005e28:	f7ff fd6c 	bl	8005904 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <txlora+0xac>)
 8005e2e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005e32:	4619      	mov	r1, r3
 8005e34:	2022      	movs	r0, #34	@ 0x22
 8005e36:	f7ff fd65 	bl	8005904 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005e3a:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <txlora+0xac>)
 8005e3c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005e40:	461a      	mov	r2, r3
 8005e42:	4907      	ldr	r1, [pc, #28]	@ (8005e60 <txlora+0xb0>)
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7ff fd96 	bl	8005976 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	f7fb ffff 	bl	8001e4e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005e50:	2003      	movs	r0, #3
 8005e52:	f7ff fde5 	bl	8005a20 <opmode>
}
 8005e56:	bf00      	nop
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000218 	.word	0x20000218
 8005e60:	20000360 	.word	0x20000360

08005e64 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005e68:	2001      	movs	r0, #1
 8005e6a:	f7ff fd68 	bl	800593e <readReg>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <starttx+0x18>
 8005e78:	f7fc f97c 	bl	8002174 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <starttx+0x38>)
 8005e7e:	89db      	ldrh	r3, [r3, #14]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fc fa17 	bl	80022b4 <getSf>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <starttx+0x2e>
        txfsk();
 8005e8c:	f7ff ff22 	bl	8005cd4 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005e90:	e001      	b.n	8005e96 <starttx+0x32>
        txlora();
 8005e92:	f7ff ff8d 	bl	8005db0 <txlora>
}
 8005e96:	bf00      	nop
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000218 	.word	0x20000218

08005ea0 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8005eaa:	f7ff fdd3 	bl	8005a54 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005eae:	2001      	movs	r0, #1
 8005eb0:	f7ff fd45 	bl	800593e <readReg>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	db01      	blt.n	8005ec0 <rxlora+0x20>
 8005ebc:	f7fc f95a 	bl	8002174 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f7ff fdad 	bl	8005a20 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d108      	bne.n	8005ede <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8005ecc:	210a      	movs	r1, #10
 8005ece:	201d      	movs	r0, #29
 8005ed0:	f7ff fd18 	bl	8005904 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8005ed4:	2170      	movs	r1, #112	@ 0x70
 8005ed6:	201e      	movs	r0, #30
 8005ed8:	f7ff fd14 	bl	8005904 <writeReg>
 8005edc:	e003      	b.n	8005ee6 <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8005ede:	f7ff fddd 	bl	8005a9c <configLoraModem>
        // configure frequency
        configChannel();
 8005ee2:	f7ff fe89 	bl	8005bf8 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8005ee6:	2121      	movs	r1, #33	@ 0x21
 8005ee8:	200c      	movs	r0, #12
 8005eea:	f7ff fd0b 	bl	8005904 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8005eee:	2140      	movs	r1, #64	@ 0x40
 8005ef0:	2023      	movs	r0, #35	@ 0x23
 8005ef2:	f7ff fd07 	bl	8005904 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8005ef6:	4b26      	ldr	r3, [pc, #152]	@ (8005f90 <rxlora+0xf0>)
 8005ef8:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005f00:	2033      	movs	r0, #51	@ 0x33
 8005f02:	f7ff fd1c 	bl	800593e <readReg>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	4619      	mov	r1, r3
 8005f10:	2033      	movs	r0, #51	@ 0x33
 8005f12:	f7ff fcf7 	bl	8005904 <writeReg>
 8005f16:	e00a      	b.n	8005f2e <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005f18:	2033      	movs	r0, #51	@ 0x33
 8005f1a:	f7ff fd10 	bl	800593e <readReg>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	2033      	movs	r0, #51	@ 0x33
 8005f2a:	f7ff fceb 	bl	8005904 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005f2e:	4b18      	ldr	r3, [pc, #96]	@ (8005f90 <rxlora+0xf0>)
 8005f30:	7c1b      	ldrb	r3, [r3, #16]
 8005f32:	4619      	mov	r1, r3
 8005f34:	201f      	movs	r0, #31
 8005f36:	f7ff fce5 	bl	8005904 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005f3a:	2134      	movs	r1, #52	@ 0x34
 8005f3c:	2039      	movs	r0, #57	@ 0x39
 8005f3e:	f7ff fce1 	bl	8005904 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8005f42:	21c0      	movs	r1, #192	@ 0xc0
 8005f44:	2040      	movs	r0, #64	@ 0x40
 8005f46:	f7ff fcdd 	bl	8005904 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005f4a:	21ff      	movs	r1, #255	@ 0xff
 8005f4c:	2012      	movs	r0, #18
 8005f4e:	f7ff fcd9 	bl	8005904 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	4a0f      	ldr	r2, [pc, #60]	@ (8005f94 <rxlora+0xf4>)
 8005f56:	5cd3      	ldrb	r3, [r2, r3]
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	2011      	movs	r0, #17
 8005f60:	f7ff fcd0 	bl	8005904 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005f64:	2000      	movs	r0, #0
 8005f66:	f7fb ff72 	bl	8001e4e <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d108      	bne.n	8005f82 <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005f70:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <rxlora+0xf0>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fc f84a 	bl	800200e <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005f7a:	2006      	movs	r0, #6
 8005f7c:	f7ff fd50 	bl	8005a20 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005f80:	e002      	b.n	8005f88 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 8005f82:	2005      	movs	r0, #5
 8005f84:	f7ff fd4c 	bl	8005a20 <opmode>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000218 	.word	0x20000218
 8005f94:	08010560 	.word	0x08010560

08005f98 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <rxfsk+0x14>
 8005fa8:	f7fc f8e4 	bl	8002174 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005fac:	f7ff fd64 	bl	8005a78 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f7ff fcc4 	bl	800593e <readReg>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da01      	bge.n	8005fc2 <rxfsk+0x2a>
 8005fbe:	f7fc f8d9 	bl	8002174 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	f7ff fd2c 	bl	8005a20 <opmode>
    // configure frequency
    configChannel();
 8005fc8:	f7ff fe16 	bl	8005bf8 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8005fcc:	2121      	movs	r1, #33	@ 0x21
 8005fce:	200c      	movs	r0, #12
 8005fd0:	f7ff fc98 	bl	8005904 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8005fd4:	211e      	movs	r1, #30
 8005fd6:	200d      	movs	r0, #13
 8005fd8:	f7ff fc94 	bl	8005904 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8005fdc:	210b      	movs	r1, #11
 8005fde:	2012      	movs	r0, #18
 8005fe0:	f7ff fc90 	bl	8005904 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8005fe4:	2112      	movs	r1, #18
 8005fe6:	2013      	movs	r0, #19
 8005fe8:	f7ff fc8c 	bl	8005904 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005fec:	21aa      	movs	r1, #170	@ 0xaa
 8005fee:	201f      	movs	r0, #31
 8005ff0:	f7ff fc88 	bl	8005904 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8005ff4:	2112      	movs	r1, #18
 8005ff6:	2027      	movs	r0, #39	@ 0x27
 8005ff8:	f7ff fc84 	bl	8005904 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005ffc:	21d8      	movs	r1, #216	@ 0xd8
 8005ffe:	2030      	movs	r0, #48	@ 0x30
 8006000:	f7ff fc80 	bl	8005904 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8006004:	2140      	movs	r1, #64	@ 0x40
 8006006:	2031      	movs	r0, #49	@ 0x31
 8006008:	f7ff fc7c 	bl	8005904 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 800600c:	21c1      	movs	r1, #193	@ 0xc1
 800600e:	2028      	movs	r0, #40	@ 0x28
 8006010:	f7ff fc78 	bl	8005904 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8006014:	2194      	movs	r1, #148	@ 0x94
 8006016:	2029      	movs	r0, #41	@ 0x29
 8006018:	f7ff fc74 	bl	8005904 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 800601c:	21c1      	movs	r1, #193	@ 0xc1
 800601e:	202a      	movs	r0, #42	@ 0x2a
 8006020:	f7ff fc70 	bl	8005904 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8006024:	21ff      	movs	r1, #255	@ 0xff
 8006026:	2021      	movs	r0, #33	@ 0x21
 8006028:	f7ff fc6c 	bl	8005904 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 800602c:	2102      	movs	r1, #2
 800602e:	2002      	movs	r0, #2
 8006030:	f7ff fc68 	bl	8005904 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8006034:	2180      	movs	r1, #128	@ 0x80
 8006036:	2003      	movs	r0, #3
 8006038:	f7ff fc64 	bl	8005904 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 800603c:	2101      	movs	r1, #1
 800603e:	2004      	movs	r0, #4
 8006040:	f7ff fc60 	bl	8005904 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8006044:	2199      	movs	r1, #153	@ 0x99
 8006046:	2005      	movs	r0, #5
 8006048:	f7ff fc5c 	bl	8005904 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 800604c:	2138      	movs	r1, #56	@ 0x38
 800604e:	2040      	movs	r0, #64	@ 0x40
 8006050:	f7ff fc58 	bl	8005904 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8006054:	2000      	movs	r0, #0
 8006056:	f7fb fefa 	bl	8001e4e <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 800605a:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <rxfsk+0xdc>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fb ffd5 	bl	800200e <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8006064:	2005      	movs	r0, #5
 8006066:	f7ff fcdb 	bl	8005a20 <opmode>
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000218 	.word	0x20000218

08006078 <startrx>:

static void startrx (u1_t rxmode) {
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8006082:	2001      	movs	r0, #1
 8006084:	f7ff fc5b 	bl	800593e <readReg>
 8006088:	4603      	mov	r3, r0
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <startrx+0x1e>
 8006092:	f7fc f86f 	bl	8002174 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8006096:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <startrx+0x48>)
 8006098:	89db      	ldrh	r3, [r3, #14]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fc f90a 	bl	80022b4 <getSf>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <startrx+0x38>
        rxfsk(rxmode);
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ff75 	bl	8005f98 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80060ae:	e003      	b.n	80060b8 <startrx+0x40>
        rxlora(rxmode);
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fef4 	bl	8005ea0 <rxlora>
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000218 	.word	0x20000218

080060c4 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80060c4:	b590      	push	{r4, r7, lr}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80060ca:	f7fc f811 	bl	80020f0 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80060ce:	2000      	movs	r0, #0
 80060d0:	f7fb fed9 	bl	8001e86 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80060d4:	f7ff fb40 	bl	8005758 <os_getTime>
 80060d8:	4603      	mov	r3, r0
 80060da:	3320      	adds	r3, #32
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fb ff96 	bl	800200e <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80060e2:	2002      	movs	r0, #2
 80060e4:	f7fb fecf 	bl	8001e86 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80060e8:	f7ff fb36 	bl	8005758 <os_getTime>
 80060ec:	4603      	mov	r3, r0
 80060ee:	33a0      	adds	r3, #160	@ 0xa0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fb ff8c 	bl	800200e <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7ff fc92 	bl	8005a20 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80060fc:	2042      	movs	r0, #66	@ 0x42
 80060fe:	f7ff fc1e 	bl	800593e <readReg>
 8006102:	4603      	mov	r3, r0
 8006104:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	2b12      	cmp	r3, #18
 800610a:	d001      	beq.n	8006110 <radio_init+0x4c>
 800610c:	f7fc f832 	bl	8002174 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8006110:	2002      	movs	r0, #2
 8006112:	f7ff fec5 	bl	8005ea0 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8006116:	bf00      	nop
 8006118:	2001      	movs	r0, #1
 800611a:	f7ff fc10 	bl	800593e <readReg>
 800611e:	4603      	mov	r3, r0
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	2b05      	cmp	r3, #5
 8006126:	d1f7      	bne.n	8006118 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8006128:	2301      	movs	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e02c      	b.n	8006188 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	e023      	b.n	800617c <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8006134:	bf00      	nop
 8006136:	202c      	movs	r0, #44	@ 0x2c
 8006138:	f7ff fc01 	bl	800593e <readReg>
 800613c:	4603      	mov	r3, r0
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	71bb      	strb	r3, [r7, #6]
 8006144:	79bc      	ldrb	r4, [r7, #6]
 8006146:	202c      	movs	r0, #44	@ 0x2c
 8006148:	f7ff fbf9 	bl	800593e <readReg>
 800614c:	4603      	mov	r3, r0
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	429c      	cmp	r4, r3
 8006154:	d0ef      	beq.n	8006136 <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8006156:	4a14      	ldr	r2, [pc, #80]	@ (80061a8 <radio_init+0xe4>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	b25a      	sxtb	r2, r3
 8006162:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006166:	4313      	orrs	r3, r2
 8006168:	b25b      	sxtb	r3, r3
 800616a:	b2d9      	uxtb	r1, r3
 800616c:	4a0e      	ldr	r2, [pc, #56]	@ (80061a8 <radio_init+0xe4>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	460a      	mov	r2, r1
 8006174:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3301      	adds	r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b07      	cmp	r3, #7
 8006180:	ddd8      	ble.n	8006134 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3301      	adds	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	ddcf      	ble.n	800612e <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 800618e:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <radio_init+0xe4>)
 8006190:	2210      	movs	r2, #16
 8006192:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8006194:	2000      	movs	r0, #0
 8006196:	f7ff fc43 	bl	8005a20 <opmode>

    hal_enableIRQs();
 800619a:	f7fb ffb9 	bl	8002110 <hal_enableIRQs>
}
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000420 	.word	0x20000420

080061ac <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80061b2:	4b10      	ldr	r3, [pc, #64]	@ (80061f4 <radio_rand1+0x48>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <radio_rand1+0x16>
 80061be:	f7fb ffd9 	bl	8002174 <hal_failed>
    if( i==16 ) {
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d106      	bne.n	80061d6 <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80061c8:	2210      	movs	r2, #16
 80061ca:	490a      	ldr	r1, [pc, #40]	@ (80061f4 <radio_rand1+0x48>)
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7fa ff83 	bl	80010d8 <os_aes>
        i = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	71fa      	strb	r2, [r7, #7]
 80061dc:	461a      	mov	r2, r3
 80061de:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <radio_rand1+0x48>)
 80061e0:	5c9b      	ldrb	r3, [r3, r2]
 80061e2:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80061e4:	4a03      	ldr	r2, [pc, #12]	@ (80061f4 <radio_rand1+0x48>)
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	7013      	strb	r3, [r2, #0]
    return v;
 80061ea:	79bb      	ldrb	r3, [r7, #6]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000420 	.word	0x20000420

080061f8 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 8006202:	f7ff faa9 	bl	8005758 <os_getTime>
 8006206:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8006208:	2001      	movs	r0, #1
 800620a:	f7ff fb98 	bl	800593e <readReg>
 800620e:	4603      	mov	r3, r0
 8006210:	b25b      	sxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	da74      	bge.n	8006300 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 8006216:	2012      	movs	r0, #18
 8006218:	f7ff fb91 	bl	800593e <readReg>
 800621c:	4603      	mov	r3, r0
 800621e:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8006220:	7a7b      	ldrb	r3, [r7, #9]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a59      	ldr	r2, [pc, #356]	@ (8006394 <radio_irq_handler+0x19c>)
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e05c      	b.n	80062ee <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8006234:	7a7b      	ldrb	r3, [r7, #9]
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d04f      	beq.n	80062de <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 800623e:	4b55      	ldr	r3, [pc, #340]	@ (8006394 <radio_irq_handler+0x19c>)
 8006240:	89db      	ldrh	r3, [r3, #14]
 8006242:	4618      	mov	r0, r3
 8006244:	f7fc f846 	bl	80022d4 <getBw>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10d      	bne.n	800626a <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 800624e:	4b51      	ldr	r3, [pc, #324]	@ (8006394 <radio_irq_handler+0x19c>)
 8006250:	89db      	ldrh	r3, [r3, #14]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fc f82e 	bl	80022b4 <getSf>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	4b4e      	ldr	r3, [pc, #312]	@ (8006398 <radio_irq_handler+0x1a0>)
 800625e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006262:	461a      	mov	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 800626a:	4a4a      	ldr	r2, [pc, #296]	@ (8006394 <radio_irq_handler+0x19c>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8006270:	201d      	movs	r0, #29
 8006272:	f7ff fb64 	bl	800593e <readReg>
 8006276:	4603      	mov	r3, r0
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8006280:	2022      	movs	r0, #34	@ 0x22
 8006282:	f7ff fb5c 	bl	800593e <readReg>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	e004      	b.n	8006296 <radio_irq_handler+0x9e>
 800628c:	2013      	movs	r0, #19
 800628e:	f7ff fb56 	bl	800593e <readReg>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8006296:	4b3f      	ldr	r3, [pc, #252]	@ (8006394 <radio_irq_handler+0x19c>)
 8006298:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 800629c:	2010      	movs	r0, #16
 800629e:	f7ff fb4e 	bl	800593e <readReg>
 80062a2:	4603      	mov	r3, r0
 80062a4:	4619      	mov	r1, r3
 80062a6:	200d      	movs	r0, #13
 80062a8:	f7ff fb2c 	bl	8005904 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80062ac:	4b39      	ldr	r3, [pc, #228]	@ (8006394 <radio_irq_handler+0x19c>)
 80062ae:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80062b2:	461a      	mov	r2, r3
 80062b4:	4939      	ldr	r1, [pc, #228]	@ (800639c <radio_irq_handler+0x1a4>)
 80062b6:	2000      	movs	r0, #0
 80062b8:	f7ff fb87 	bl	80059ca <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80062bc:	2019      	movs	r0, #25
 80062be:	f7ff fb3e 	bl	800593e <readReg>
 80062c2:	4603      	mov	r3, r0
 80062c4:	b25a      	sxtb	r2, r3
 80062c6:	4b33      	ldr	r3, [pc, #204]	@ (8006394 <radio_irq_handler+0x19c>)
 80062c8:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80062ca:	201a      	movs	r0, #26
 80062cc:	f7ff fb37 	bl	800593e <readReg>
 80062d0:	4603      	mov	r3, r0
 80062d2:	3b3d      	subs	r3, #61	@ 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	b25a      	sxtb	r2, r3
 80062d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006394 <radio_irq_handler+0x19c>)
 80062da:	731a      	strb	r2, [r3, #12]
 80062dc:	e007      	b.n	80062ee <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80062de:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da03      	bge.n	80062ee <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80062e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006394 <radio_irq_handler+0x19c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 80062ee:	21ff      	movs	r1, #255	@ 0xff
 80062f0:	2011      	movs	r0, #17
 80062f2:	f7ff fb07 	bl	8005904 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80062f6:	21ff      	movs	r1, #255	@ 0xff
 80062f8:	2012      	movs	r0, #18
 80062fa:	f7ff fb03 	bl	8005904 <writeReg>
 80062fe:	e03c      	b.n	800637a <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8006300:	203e      	movs	r0, #62	@ 0x3e
 8006302:	f7ff fb1c 	bl	800593e <readReg>
 8006306:	4603      	mov	r3, r0
 8006308:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 800630a:	203f      	movs	r0, #63	@ 0x3f
 800630c:	f7ff fb17 	bl	800593e <readReg>
 8006310:	4603      	mov	r3, r0
 8006312:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8006314:	7abb      	ldrb	r3, [r7, #10]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 800631e:	4a1d      	ldr	r2, [pc, #116]	@ (8006394 <radio_irq_handler+0x19c>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e029      	b.n	800637a <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8006326:	7abb      	ldrb	r3, [r7, #10]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d019      	beq.n	8006364 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8006330:	4a18      	ldr	r2, [pc, #96]	@ (8006394 <radio_irq_handler+0x19c>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8006336:	2032      	movs	r0, #50	@ 0x32
 8006338:	f7ff fb01 	bl	800593e <readReg>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	4b14      	ldr	r3, [pc, #80]	@ (8006394 <radio_irq_handler+0x19c>)
 8006342:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006346:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <radio_irq_handler+0x19c>)
 8006348:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800634c:	461a      	mov	r2, r3
 800634e:	4913      	ldr	r1, [pc, #76]	@ (800639c <radio_irq_handler+0x1a4>)
 8006350:	2000      	movs	r0, #0
 8006352:	f7ff fb3a 	bl	80059ca <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8006356:	4b0f      	ldr	r3, [pc, #60]	@ (8006394 <radio_irq_handler+0x19c>)
 8006358:	2200      	movs	r2, #0
 800635a:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <radio_irq_handler+0x19c>)
 800635e:	2200      	movs	r2, #0
 8006360:	731a      	strb	r2, [r3, #12]
 8006362:	e00a      	b.n	800637a <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 800636e:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <radio_irq_handler+0x19c>)
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8006376:	e000      	b.n	800637a <radio_irq_handler+0x182>
        } else {
            while(1);
 8006378:	e7fe      	b.n	8006378 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 800637a:	2000      	movs	r0, #0
 800637c:	f7ff fb50 	bl	8005a20 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8006380:	4b04      	ldr	r3, [pc, #16]	@ (8006394 <radio_irq_handler+0x19c>)
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	4619      	mov	r1, r3
 8006386:	4806      	ldr	r0, [pc, #24]	@ (80063a0 <radio_irq_handler+0x1a8>)
 8006388:	f7ff fa2a 	bl	80057e0 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000218 	.word	0x20000218
 8006398:	08010564 	.word	0x08010564
 800639c:	20000360 	.word	0x20000360
 80063a0:	2000022c 	.word	0x2000022c

080063a4 <os_radio>:

void os_radio (u1_t mode) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 80063ae:	f7fb fe9f 	bl	80020f0 <hal_disableIRQs>
    switch (mode) {
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d81a      	bhi.n	80063ee <os_radio+0x4a>
 80063b8:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <os_radio+0x1c>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063d9 	.word	0x080063d9
 80063c8:	080063df 	.word	0x080063df
 80063cc:	080063e7 	.word	0x080063e7
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 80063d0:	2000      	movs	r0, #0
 80063d2:	f7ff fb25 	bl	8005a20 <opmode>
        break;
 80063d6:	e00a      	b.n	80063ee <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 80063d8:	f7ff fd44 	bl	8005e64 <starttx>
        break;
 80063dc:	e007      	b.n	80063ee <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 80063de:	2000      	movs	r0, #0
 80063e0:	f7ff fe4a 	bl	8006078 <startrx>
        break;
 80063e4:	e003      	b.n	80063ee <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 80063e6:	2001      	movs	r0, #1
 80063e8:	f7ff fe46 	bl	8006078 <startrx>
        break;
 80063ec:	bf00      	nop
    }
    hal_enableIRQs();
 80063ee:	f7fb fe8f 	bl	8002110 <hal_enableIRQs>
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006400:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006402:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <MX_SPI3_Init+0x78>)
 8006404:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006406:	4b1a      	ldr	r3, [pc, #104]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800640c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800640e:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006414:	4b16      	ldr	r3, [pc, #88]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006416:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800641a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800641c:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <MX_SPI3_Init+0x74>)
 800641e:	2200      	movs	r2, #0
 8006420:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006422:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006424:	2200      	movs	r2, #0
 8006426:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006428:	4b11      	ldr	r3, [pc, #68]	@ (8006470 <MX_SPI3_Init+0x74>)
 800642a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800642e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006430:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006432:	2228      	movs	r2, #40	@ 0x28
 8006434:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006436:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006438:	2200      	movs	r2, #0
 800643a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800643c:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <MX_SPI3_Init+0x74>)
 800643e:	2200      	movs	r2, #0
 8006440:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006442:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006444:	2200      	movs	r2, #0
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <MX_SPI3_Init+0x74>)
 800644a:	2207      	movs	r2, #7
 800644c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800644e:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <MX_SPI3_Init+0x74>)
 8006456:	2208      	movs	r2, #8
 8006458:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800645a:	4805      	ldr	r0, [pc, #20]	@ (8006470 <MX_SPI3_Init+0x74>)
 800645c:	f006 fd68 	bl	800cf30 <HAL_SPI_Init>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006466:	f7ff f95f 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800646a:	bf00      	nop
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000430 	.word	0x20000430
 8006474:	40003c00 	.word	0x40003c00

08006478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	@ 0x28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006480:	f107 0314 	add.w	r3, r7, #20
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	605a      	str	r2, [r3, #4]
 800648a:	609a      	str	r2, [r3, #8]
 800648c:	60da      	str	r2, [r3, #12]
 800648e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <HAL_SPI_MspInit+0x8c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d12f      	bne.n	80064fa <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800649a:	4b1b      	ldr	r3, [pc, #108]	@ (8006508 <HAL_SPI_MspInit+0x90>)
 800649c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649e:	4a1a      	ldr	r2, [pc, #104]	@ (8006508 <HAL_SPI_MspInit+0x90>)
 80064a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80064a6:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <HAL_SPI_MspInit+0x90>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b2:	4b15      	ldr	r3, [pc, #84]	@ (8006508 <HAL_SPI_MspInit+0x90>)
 80064b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b6:	4a14      	ldr	r2, [pc, #80]	@ (8006508 <HAL_SPI_MspInit+0x90>)
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064be:	4b12      	ldr	r3, [pc, #72]	@ (8006508 <HAL_SPI_MspInit+0x90>)
 80064c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80064ca:	2338      	movs	r3, #56	@ 0x38
 80064cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ce:	2302      	movs	r3, #2
 80064d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d6:	2303      	movs	r3, #3
 80064d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80064da:	2306      	movs	r3, #6
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064de:	f107 0314 	add.w	r3, r7, #20
 80064e2:	4619      	mov	r1, r3
 80064e4:	4809      	ldr	r0, [pc, #36]	@ (800650c <HAL_SPI_MspInit+0x94>)
 80064e6:	f004 fb2d 	bl	800ab44 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80064ea:	2200      	movs	r2, #0
 80064ec:	2100      	movs	r1, #0
 80064ee:	2033      	movs	r0, #51	@ 0x33
 80064f0:	f004 fab1 	bl	800aa56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80064f4:	2033      	movs	r0, #51	@ 0x33
 80064f6:	f004 faca 	bl	800aa8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80064fa:	bf00      	nop
 80064fc:	3728      	adds	r7, #40	@ 0x28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40003c00 	.word	0x40003c00
 8006508:	40021000 	.word	0x40021000
 800650c:	48000400 	.word	0x48000400

08006510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006516:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <HAL_MspInit+0x44>)
 8006518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651a:	4a0e      	ldr	r2, [pc, #56]	@ (8006554 <HAL_MspInit+0x44>)
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	6613      	str	r3, [r2, #96]	@ 0x60
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <HAL_MspInit+0x44>)
 8006524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <HAL_MspInit+0x44>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006532:	4a08      	ldr	r2, [pc, #32]	@ (8006554 <HAL_MspInit+0x44>)
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006538:	6593      	str	r3, [r2, #88]	@ 0x58
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <HAL_MspInit+0x44>)
 800653c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40021000 	.word	0x40021000

08006558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <NMI_Handler+0x4>

08006560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <HardFault_Handler+0x4>

08006568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800656c:	bf00      	nop
 800656e:	e7fd      	b.n	800656c <MemManage_Handler+0x4>

08006570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <BusFault_Handler+0x4>

08006578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <UsageFault_Handler+0x4>

08006580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800658e:	b480      	push	{r7}
 8006590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006592:	bf00      	nop
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065ae:	f002 fde1 	bl	8009174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80065bc:	4802      	ldr	r0, [pc, #8]	@ (80065c8 <ADC1_IRQHandler+0x10>)
 80065be:	f003 fa20 	bl	8009a02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000098 	.word	0x20000098

080065cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80065d0:	2040      	movs	r0, #64	@ 0x40
 80065d2:	f004 fc39 	bl	800ae48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80065d6:	2080      	movs	r0, #128	@ 0x80
 80065d8:	f004 fc36 	bl	800ae48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80065dc:	bf00      	nop
 80065de:	bd80      	pop	{r7, pc}

080065e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80065e4:	4802      	ldr	r0, [pc, #8]	@ (80065f0 <SPI3_IRQHandler+0x10>)
 80065e6:	f006 ff65 	bl	800d4b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000430 	.word	0x20000430

080065f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80065f8:	4802      	ldr	r0, [pc, #8]	@ (8006604 <TIM6_DAC_IRQHandler+0x10>)
 80065fa:	f007 fa7f 	bl	800dafc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000498 	.word	0x20000498

08006608 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800660c:	4802      	ldr	r0, [pc, #8]	@ (8006618 <TIM7_IRQHandler+0x10>)
 800660e:	f007 fa75 	bl	800dafc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200004e4 	.word	0x200004e4

0800661c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  return 1;
 8006620:	2301      	movs	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <_kill>:

int _kill(int pid, int sig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006636:	f007 fe09 	bl	800e24c <__errno>
 800663a:	4603      	mov	r3, r0
 800663c:	2216      	movs	r2, #22
 800663e:	601a      	str	r2, [r3, #0]
  return -1;
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <_exit>:

void _exit (int status)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006654:	f04f 31ff 	mov.w	r1, #4294967295
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ffe7 	bl	800662c <_kill>
  while (1) {}    /* Make sure we hang here */
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <_exit+0x12>

08006662 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e00a      	b.n	800668a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006674:	f3af 8000 	nop.w
 8006678:	4601      	mov	r1, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	60ba      	str	r2, [r7, #8]
 8006680:	b2ca      	uxtb	r2, r1
 8006682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	dbf0      	blt.n	8006674 <_read+0x12>
  }

  return len;
 8006692:	687b      	ldr	r3, [r7, #4]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e009      	b.n	80066c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	60ba      	str	r2, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	3301      	adds	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	dbf1      	blt.n	80066ae <_write+0x12>
  }
  return len;
 80066ca:	687b      	ldr	r3, [r7, #4]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_close>:

int _close(int file)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80066dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066fc:	605a      	str	r2, [r3, #4]
  return 0;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <_isatty>:

int _isatty(int file)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006714:	2301      	movs	r3, #1
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006744:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <_sbrk+0x5c>)
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <_sbrk+0x60>)
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006750:	4b13      	ldr	r3, [pc, #76]	@ (80067a0 <_sbrk+0x64>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006758:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <_sbrk+0x64>)
 800675a:	4a12      	ldr	r2, [pc, #72]	@ (80067a4 <_sbrk+0x68>)
 800675c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800675e:	4b10      	ldr	r3, [pc, #64]	@ (80067a0 <_sbrk+0x64>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	429a      	cmp	r2, r3
 800676a:	d207      	bcs.n	800677c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800676c:	f007 fd6e 	bl	800e24c <__errno>
 8006770:	4603      	mov	r3, r0
 8006772:	220c      	movs	r2, #12
 8006774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e009      	b.n	8006790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <_sbrk+0x64>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006782:	4b07      	ldr	r3, [pc, #28]	@ (80067a0 <_sbrk+0x64>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	4a05      	ldr	r2, [pc, #20]	@ (80067a0 <_sbrk+0x64>)
 800678c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20010000 	.word	0x20010000
 800679c:	00000400 	.word	0x00000400
 80067a0:	20000494 	.word	0x20000494
 80067a4:	20000760 	.word	0x20000760

080067a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80067ac:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <SystemInit+0x20>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b2:	4a05      	ldr	r2, [pc, #20]	@ (80067c8 <SystemInit+0x20>)
 80067b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80067bc:	bf00      	nop
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	e000ed00 	.word	0xe000ed00

080067cc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067d2:	1d3b      	adds	r3, r7, #4
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80067dc:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <MX_TIM6_Init+0x68>)
 80067de:	4a16      	ldr	r2, [pc, #88]	@ (8006838 <MX_TIM6_Init+0x6c>)
 80067e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1221-1;
 80067e2:	4b14      	ldr	r3, [pc, #80]	@ (8006834 <MX_TIM6_Init+0x68>)
 80067e4:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 80067e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ea:	4b12      	ldr	r3, [pc, #72]	@ (8006834 <MX_TIM6_Init+0x68>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 80067f0:	4b10      	ldr	r3, [pc, #64]	@ (8006834 <MX_TIM6_Init+0x68>)
 80067f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006834 <MX_TIM6_Init+0x68>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80067fe:	480d      	ldr	r0, [pc, #52]	@ (8006834 <MX_TIM6_Init+0x68>)
 8006800:	f007 f8d0 	bl	800d9a4 <HAL_TIM_Base_Init>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800680a:	f7fe ff8d 	bl	8005728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4806      	ldr	r0, [pc, #24]	@ (8006834 <MX_TIM6_Init+0x68>)
 800681c:	f007 fb0e 	bl	800de3c <HAL_TIMEx_MasterConfigSynchronization>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8006826:	f7fe ff7f 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000498 	.word	0x20000498
 8006838:	40001000 	.word	0x40001000

0800683c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800684c:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <MX_TIM7_Init+0x68>)
 800684e:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <MX_TIM7_Init+0x6c>)
 8006850:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 8006852:	4b14      	ldr	r3, [pc, #80]	@ (80068a4 <MX_TIM7_Init+0x68>)
 8006854:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8006858:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800685a:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <MX_TIM7_Init+0x68>)
 800685c:	2200      	movs	r2, #0
 800685e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8006860:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <MX_TIM7_Init+0x68>)
 8006862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006866:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006868:	4b0e      	ldr	r3, [pc, #56]	@ (80068a4 <MX_TIM7_Init+0x68>)
 800686a:	2200      	movs	r2, #0
 800686c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800686e:	480d      	ldr	r0, [pc, #52]	@ (80068a4 <MX_TIM7_Init+0x68>)
 8006870:	f007 f898 	bl	800d9a4 <HAL_TIM_Base_Init>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800687a:	f7fe ff55 	bl	8005728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4806      	ldr	r0, [pc, #24]	@ (80068a4 <MX_TIM7_Init+0x68>)
 800688c:	f007 fad6 	bl	800de3c <HAL_TIMEx_MasterConfigSynchronization>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8006896:	f7fe ff47 	bl	8005728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200004e4 	.word	0x200004e4
 80068a8:	40001400 	.word	0x40001400

080068ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006924 <HAL_TIM_Base_MspInit+0x78>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d114      	bne.n	80068e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80068be:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <HAL_TIM_Base_MspInit+0x7c>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <HAL_TIM_Base_MspInit+0x7c>)
 80068c4:	f043 0310 	orr.w	r3, r3, #16
 80068c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ca:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <HAL_TIM_Base_MspInit+0x7c>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80068d6:	2200      	movs	r2, #0
 80068d8:	2100      	movs	r1, #0
 80068da:	2036      	movs	r0, #54	@ 0x36
 80068dc:	f004 f8bb 	bl	800aa56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80068e0:	2036      	movs	r0, #54	@ 0x36
 80068e2:	f004 f8d4 	bl	800aa8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80068e6:	e018      	b.n	800691a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a0f      	ldr	r2, [pc, #60]	@ (800692c <HAL_TIM_Base_MspInit+0x80>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d113      	bne.n	800691a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <HAL_TIM_Base_MspInit+0x7c>)
 80068f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006928 <HAL_TIM_Base_MspInit+0x7c>)
 80068f8:	f043 0320 	orr.w	r3, r3, #32
 80068fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80068fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <HAL_TIM_Base_MspInit+0x7c>)
 8006900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	2037      	movs	r0, #55	@ 0x37
 8006910:	f004 f8a1 	bl	800aa56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006914:	2037      	movs	r0, #55	@ 0x37
 8006916:	f004 f8ba 	bl	800aa8e <HAL_NVIC_EnableIRQ>
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40001000 	.word	0x40001000
 8006928:	40021000 	.word	0x40021000
 800692c:	40001400 	.word	0x40001400

08006930 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bme68x_soft_reset(dev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f901 	bl	8006b40 <bme68x_soft_reset>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8006942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d120      	bne.n	800698c <bme68x_init+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	20d0      	movs	r0, #208	@ 0xd0
 8006952:	f000 f8b1 	bl	8006ab8 <bme68x_get_regs>
 8006956:	4603      	mov	r3, r0
 8006958:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d114      	bne.n	800698c <bme68x_init+0x5c>
        {
            if (dev->chip_id == BME68X_CHIP_ID)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b61      	cmp	r3, #97	@ 0x61
 8006968:	d10e      	bne.n	8006988 <bme68x_init+0x58>
            {
                /* Read Variant ID */
                rslt = read_variant_id(dev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f002 f84c 	bl	8008a08 <read_variant_id>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME68X_OK)
 8006974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d107      	bne.n	800698c <bme68x_init+0x5c>
                {
                    /* Get the Calibration data */
                    rslt = get_calib_data(dev);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 ff3f 	bl	8008800 <get_calib_data>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
 8006986:	e001      	b.n	800698c <bme68x_init+0x5c>
                }
            }
            else
            {
                rslt = BME68X_E_DEV_NOT_FOUND;
 8006988:	23fd      	movs	r3, #253	@ 0xfd
 800698a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800698c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8006998:	b5b0      	push	{r4, r5, r7, lr}
 800699a:	b08a      	sub	sp, #40	@ 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	f107 0314 	add.w	r3, r7, #20
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	609a      	str	r2, [r3, #8]
 80069b6:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80069b8:	6838      	ldr	r0, [r7, #0]
 80069ba:	f001 fcfb 	bl	80083b4 <null_ptr_check>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 80069c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d16c      	bne.n	8006aa6 <bme68x_set_regs+0x10e>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d069      	beq.n	8006aa6 <bme68x_set_regs+0x10e>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d066      	beq.n	8006aa6 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d05d      	beq.n	8006a9a <bme68x_set_regs+0x102>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b0a      	cmp	r3, #10
 80069e2:	d85a      	bhi.n	8006a9a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80069e8:	e034      	b.n	8006a54 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	7b1b      	ldrb	r3, [r3, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d118      	bne.n	8006a24 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80069f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 fc18 	bl	8008232 <set_mem_page>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8006a08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	3328      	adds	r3, #40	@ 0x28
 8006a1c:	443b      	add	r3, r7
 8006a1e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8006a22:	e009      	b.n	8006a38 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8006a24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	441a      	add	r2, r3
 8006a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	3328      	adds	r3, #40	@ 0x28
 8006a32:	443b      	add	r3, r7
 8006a34:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8006a38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	441a      	add	r2, r3
 8006a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	3301      	adds	r3, #1
 8006a44:	7812      	ldrb	r2, [r2, #0]
 8006a46:	3328      	adds	r3, #40	@ 0x28
 8006a48:	443b      	add	r3, r7
 8006a4a:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8006a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a50:	3301      	adds	r3, #1
 8006a52:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d8c6      	bhi.n	80069ea <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8006a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11e      	bne.n	8006aa2 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8006a68:	7c38      	ldrb	r0, [r7, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	1e5a      	subs	r2, r3, #1
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685d      	ldr	r5, [r3, #4]
 8006a74:	f107 0310 	add.w	r3, r7, #16
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	47a0      	blx	r4
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8006a92:	23fe      	movs	r3, #254	@ 0xfe
 8006a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8006a98:	e003      	b.n	8006aa2 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8006a9a:	23fc      	movs	r3, #252	@ 0xfc
 8006a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006aa0:	e004      	b.n	8006aac <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8006aa2:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006aa4:	e002      	b.n	8006aac <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006aa6:	23ff      	movs	r3, #255	@ 0xff
 8006aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	@ 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bdb0      	pop	{r4, r5, r7, pc}

08006ab8 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006ac8:	6838      	ldr	r0, [r7, #0]
 8006aca:	f001 fc73 	bl	80083b4 <null_ptr_check>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8006ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d12a      	bne.n	8006b30 <bme68x_get_regs+0x78>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d027      	beq.n	8006b30 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	7b1b      	ldrb	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10e      	bne.n	8006b06 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fba0 	bl	8008232 <set_mem_page>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8006af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b04:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	7bf8      	ldrb	r0, [r7, #15]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	47a0      	blx	r4
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8006b2a:	23fe      	movs	r3, #254	@ 0xfe
 8006b2c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8006b2e:	e001      	b.n	8006b34 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006b30:	23ff      	movs	r3, #255	@ 0xff
 8006b32:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}

08006b40 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8006b48:	23e0      	movs	r3, #224	@ 0xe0
 8006b4a:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8006b4c:	23b6      	movs	r3, #182	@ 0xb6
 8006b4e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fc2f 	bl	80083b4 <null_ptr_check>
 8006b56:	4603      	mov	r3, r0
 8006b58:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8006b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d12b      	bne.n	8006bba <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	7b1b      	ldrb	r3, [r3, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d104      	bne.n	8006b74 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fbc6 	bl	80082fc <get_mem_page>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8006b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11e      	bne.n	8006bba <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8006b7c:	f107 010d 	add.w	r1, r7, #13
 8006b80:	f107 000e 	add.w	r0, r7, #14
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f7ff ff06 	bl	8006998 <bme68x_set_regs>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]

            /* Wait for 5ms */
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6852      	ldr	r2, [r2, #4]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8006b9e:	4798      	blx	r3
            if (rslt == BME68X_OK)
 8006ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <bme68x_soft_reset+0x7a>
            {
                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7b1b      	ldrb	r3, [r3, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 fba3 	bl	80082fc <get_mem_page>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8006bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	77bb      	strb	r3, [r7, #30]
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8006bda:	4a7c      	ldr	r2, [pc, #496]	@ (8006dcc <bme68x_set_conf+0x204>)
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006be4:	6018      	str	r0, [r3, #0]
 8006be6:	3304      	adds	r3, #4
 8006be8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8006bf2:	f107 031c 	add.w	r3, r7, #28
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f94a 	bl	8006e92 <bme68x_get_op_mode>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8006c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f000 f8df 	bl	8006dd0 <bme68x_set_op_mode>
 8006c12:	4603      	mov	r3, r0
 8006c14:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8006c1c:	23ff      	movs	r3, #255	@ 0xff
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e0b2      	b.n	8006d88 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8006c22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 80ae 	bne.w	8006d88 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8006c2c:	7d38      	ldrb	r0, [r7, #20]
 8006c2e:	f107 010c 	add.w	r1, r7, #12
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2205      	movs	r2, #5
 8006c36:	f7ff ff3f 	bl	8006ab8 <bme68x_get_regs>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8006c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3303      	adds	r3, #3
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	2107      	movs	r1, #7
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 fb7f 	bl	800835a <boundary_check>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d108      	bne.n	8006c7a <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	2105      	movs	r1, #5
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fb72 	bl	800835a <boundary_check>
 8006c76:	4603      	mov	r3, r0
 8006c78:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3302      	adds	r3, #2
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	2105      	movs	r1, #5
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fb65 	bl	800835a <boundary_check>
 8006c90:	4603      	mov	r3, r0
 8006c92:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d107      	bne.n	8006cac <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	2105      	movs	r1, #5
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 fb59 	bl	800835a <boundary_check>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006cac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	2108      	movs	r1, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 fb4c 	bl	800835a <boundary_check>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006cc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d15c      	bne.n	8006d88 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8006cce:	7c3b      	ldrb	r3, [r7, #16]
 8006cd0:	b25b      	sxtb	r3, r3
 8006cd2:	f023 031c 	bic.w	r3, r3, #28
 8006cd6:	b25a      	sxtb	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	78db      	ldrb	r3, [r3, #3]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	b25b      	sxtb	r3, r3
 8006ce0:	f003 031c 	and.w	r3, r3, #28
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	b25b      	sxtb	r3, r3
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	b25a      	sxtb	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	f023 031c 	bic.w	r3, r3, #28
 8006d10:	b25a      	sxtb	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	789b      	ldrb	r3, [r3, #2]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	f003 031c 	and.w	r3, r3, #28
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	4313      	orrs	r3, r2
 8006d22:	b25b      	sxtb	r3, r3
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8006d28:	7b7b      	ldrb	r3, [r7, #13]
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	f023 0307 	bic.w	r3, r3, #7
 8006d30:	b25a      	sxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	b25b      	sxtb	r3, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	b25b      	sxtb	r3, r3
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	791b      	ldrb	r3, [r3, #4]
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d004      	beq.n	8006d58 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8006d58:	7c3b      	ldrb	r3, [r7, #16]
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	b25a      	sxtb	r2, r3
 8006d62:	7fbb      	ldrb	r3, [r7, #30]
 8006d64:	015b      	lsls	r3, r3, #5
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8006d70:	7b3b      	ldrb	r3, [r7, #12]
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d78:	b25a      	sxtb	r2, r3
 8006d7a:	7f7b      	ldrb	r3, [r7, #29]
 8006d7c:	01db      	lsls	r3, r3, #7
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8006d88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8006d90:	f107 010c 	add.w	r1, r7, #12
 8006d94:	f107 0014 	add.w	r0, r7, #20
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	f7ff fdfc 	bl	8006998 <bme68x_set_regs>
 8006da0:	4603      	mov	r3, r0
 8006da2:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006da4:	7f3b      	ldrb	r3, [r7, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <bme68x_set_conf+0x1f8>
 8006daa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8006db2:	7f3b      	ldrb	r3, [r7, #28]
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f80a 	bl	8006dd0 <bme68x_set_op_mode>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006dc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3720      	adds	r7, #32
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0800f268 	.word	0x0800f268

08006dd0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	6039      	str	r1, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8006de0:	2374      	movs	r3, #116	@ 0x74
 8006de2:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8006de4:	f107 010d 	add.w	r1, r7, #13
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2201      	movs	r2, #1
 8006dec:	2074      	movs	r0, #116	@ 0x74
 8006dee:	f7ff fe63 	bl	8006ab8 <bme68x_get_regs>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8006df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d11d      	bne.n	8006e3a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8006dfe:	7b7b      	ldrb	r3, [r7, #13]
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d016      	beq.n	8006e3a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8006e0c:	7b7b      	ldrb	r3, [r7, #13]
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006e16:	f107 010d 	add.w	r1, r7, #13
 8006e1a:	f107 000c 	add.w	r0, r7, #12
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f7ff fdb9 	bl	8006998 <bme68x_set_regs>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	6852      	ldr	r2, [r2, #4]
 8006e32:	4611      	mov	r1, r2
 8006e34:	f242 7010 	movw	r0, #10000	@ 0x2710
 8006e38:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <bme68x_set_op_mode+0x78>
 8006e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0cd      	beq.n	8006de4 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01b      	beq.n	8006e86 <bme68x_set_op_mode+0xb6>
 8006e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d117      	bne.n	8006e86 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8006e56:	7b7b      	ldrb	r3, [r7, #13]
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	b25a      	sxtb	r2, r3
 8006e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	b25b      	sxtb	r3, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006e72:	f107 010d 	add.w	r1, r7, #13
 8006e76:	f107 000c 	add.w	r0, r7, #12
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f7ff fd8b 	bl	8006998 <bme68x_set_regs>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00f      	beq.n	8006ec2 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8006ea2:	f107 010e 	add.w	r1, r7, #14
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	2074      	movs	r0, #116	@ 0x74
 8006eac:	f7ff fe04 	bl	8006ab8 <bme68x_get_regs>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e001      	b.n	8006ec6 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006ec2:	23ff      	movs	r3, #255	@ 0xff
 8006ec4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	@ 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8006ee6:	4a34      	ldr	r2, [pc, #208]	@ (8006fb8 <bme68x_get_meas_dur+0xe4>)
 8006ee8:	f107 0314 	add.w	r3, r7, #20
 8006eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ef0:	6018      	str	r0, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d058      	beq.n	8006fae <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	3301      	adds	r3, #1
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	2105      	movs	r1, #5
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fa28 	bl	800835a <boundary_check>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 8006f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	3302      	adds	r3, #2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	2105      	movs	r1, #5
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fa1a 	bl	800835a <boundary_check>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d108      	bne.n	8006f46 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	2105      	movs	r1, #5
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fa0d 	bl	800835a <boundary_check>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006f46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d12f      	bne.n	8006fae <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	3328      	adds	r3, #40	@ 0x28
 8006f54:	443b      	add	r3, r7
 8006f56:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f5a:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	789b      	ldrb	r3, [r3, #2]
 8006f60:	3328      	adds	r3, #40	@ 0x28
 8006f62:	443b      	add	r3, r7
 8006f64:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	3328      	adds	r3, #40	@ 0x28
 8006f76:	443b      	add	r3, r7
 8006f78:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8006f96:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8006f9e:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d003      	beq.n	8006fae <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006fac:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8006fae:	6a3b      	ldr	r3, [r7, #32]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	@ 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	0800f270 	.word	0x0800f270

08006fbc <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8006fbc:	b5b0      	push	{r4, r5, r7, lr}
 8006fbe:	b09e      	sub	sp, #120	@ 0x78
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    struct bme68x_data *field_ptr[3] = { 0 };
 8006fde:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	2254      	movs	r2, #84	@ 0x54
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f007 f8db 	bl	800e1ae <memset>

    field_ptr[0] = &field_data[0];
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
    field_ptr[1] = &field_data[1];
 8006ffe:	f107 0314 	add.w	r3, r7, #20
 8007002:	331c      	adds	r3, #28
 8007004:	66fb      	str	r3, [r7, #108]	@ 0x6c
    field_ptr[2] = &field_data[2];
 8007006:	f107 0314 	add.w	r3, r7, #20
 800700a:	3338      	adds	r3, #56	@ 0x38
 800700c:	673b      	str	r3, [r7, #112]	@ 0x70

    rslt = null_ptr_check(dev);
 800700e:	6838      	ldr	r0, [r7, #0]
 8007010:	f001 f9d0 	bl	80083b4 <null_ptr_check>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if ((rslt == BME68X_OK) && (data != NULL))
 800701a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 80c1 	bne.w	80071a6 <bme68x_get_data+0x1ea>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80bd 	beq.w	80071a6 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d11c      	bne.n	800706c <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	2000      	movs	r0, #0
 8007038:	f000 fd8b 	bl	8007b52 <read_field_data>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (rslt == BME68X_OK)
 8007042:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 80a1 	bne.w	800718e <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	b25b      	sxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	da03      	bge.n	800705e <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800705c:	e097      	b.n	800718e <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
                    rslt = BME68X_W_NO_NEW_DATA;
 8007064:	2302      	movs	r3, #2
 8007066:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800706a:	e090      	b.n	800718e <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d003      	beq.n	800707a <bme68x_get_data+0xbe>
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b03      	cmp	r3, #3
 8007076:	f040 8087 	bne.w	8007188 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 800707a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 feaa 	bl	8007dda <read_all_field_data>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            new_fields = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8007092:	2300      	movs	r3, #0
 8007094:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007098:	e014      	b.n	80070c4 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 800709a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	3378      	adds	r3, #120	@ 0x78
 80070a2:	443b      	add	r3, r7
 80070a4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	da04      	bge.n	80070ba <bme68x_get_data+0xfe>
                {
                    new_fields++;
 80070b0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80070b4:	3301      	adds	r3, #1
 80070b6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80070ba:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070be:	3301      	adds	r3, #1
 80070c0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80070c4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d803      	bhi.n	80070d4 <bme68x_get_data+0x118>
 80070cc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0e2      	beq.n	800709a <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80070da:	e01c      	b.n	8007116 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 80070dc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070e0:	3301      	adds	r3, #1
 80070e2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80070e6:	e00d      	b.n	8007104 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 80070e8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80070ec:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 80070f0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fb09 	bl	800870c <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80070fa:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80070fe:	3301      	adds	r3, #1
 8007100:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8007104:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8007108:	2b02      	cmp	r3, #2
 800710a:	d9ed      	bls.n	80070e8 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800710c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007110:	3301      	adds	r3, #1
 8007112:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007116:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800711a:	2b01      	cmp	r3, #1
 800711c:	d803      	bhi.n	8007126 <bme68x_get_data+0x16a>
 800711e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0da      	beq.n	80070dc <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007126:	2300      	movs	r3, #0
 8007128:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800712c:	e01c      	b.n	8007168 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 800712e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	3378      	adds	r3, #120	@ 0x78
 8007136:	443b      	add	r3, r7
 8007138:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800713c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	461a      	mov	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	4413      	add	r3, r2
 800714e:	461c      	mov	r4, r3
 8007150:	460d      	mov	r5, r1
 8007152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007156:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800715a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800715e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007162:	3301      	adds	r3, #1
 8007164:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007168:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800716c:	2b02      	cmp	r3, #2
 800716e:	d803      	bhi.n	8007178 <bme68x_get_data+0x1bc>
 8007170:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0da      	beq.n	800712e <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8007178:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8007180:	2302      	movs	r3, #2
 8007182:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (new_fields == 0)
 8007186:	e002      	b.n	800718e <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8007188:	2301      	movs	r3, #1
 800718a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        }

        if (n_data == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8007194:	23ff      	movs	r3, #255	@ 0xff
 8007196:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        if (n_data == NULL)
 800719a:	e007      	b.n	80071ac <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 80071a2:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80071a4:	e002      	b.n	80071ac <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80071a6:	23ff      	movs	r3, #255	@ 0xff
 80071a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    }

    return rslt;
 80071ac:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3778      	adds	r7, #120	@ 0x78
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bdb0      	pop	{r4, r5, r7, pc}

080071b8 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80071ce:	f247 1370 	movw	r3, #29040	@ 0x7170
 80071d2:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d06e      	beq.n	80072b8 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	2000      	movs	r0, #0
 80071de:	f7ff fdf7 	bl	8006dd0 <bme68x_set_op_mode>
 80071e2:	4603      	mov	r3, r0
 80071e4:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80071e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d108      	bne.n	8007200 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80071ee:	f107 021c 	add.w	r2, r7, #28
 80071f2:	7bf9      	ldrb	r1, [r7, #15]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68b8      	ldr	r0, [r7, #8]
 80071f8:	f001 f8fc 	bl	80083f4 <set_conf>
 80071fc:	4603      	mov	r3, r0
 80071fe:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8007200:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d159      	bne.n	80072bc <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8007208:	f107 0118 	add.w	r1, r7, #24
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	2070      	movs	r0, #112	@ 0x70
 8007212:	f7ff fc51 	bl	8006ab8 <bme68x_get_regs>
 8007216:	4603      	mov	r3, r0
 8007218:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 800721a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d14c      	bne.n	80072bc <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d10b      	bne.n	8007242 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 800722a:	2300      	movs	r3, #0
 800722c:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d102      	bne.n	800723c <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8007236:	2302      	movs	r3, #2
 8007238:	777b      	strb	r3, [r7, #29]
 800723a:	e006      	b.n	800724a <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800723c:	2301      	movs	r3, #1
 800723e:	777b      	strb	r3, [r7, #29]
 8007240:	e003      	b.n	800724a <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8007242:	2301      	movs	r3, #1
 8007244:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8007246:	2300      	movs	r3, #0
 8007248:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800724a:	7e3b      	ldrb	r3, [r7, #24]
 800724c:	b25b      	sxtb	r3, r3
 800724e:	f023 0308 	bic.w	r3, r3, #8
 8007252:	b25a      	sxtb	r2, r3
 8007254:	7fbb      	ldrb	r3, [r7, #30]
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	b25b      	sxtb	r3, r3
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	b25b      	sxtb	r3, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	b25b      	sxtb	r3, r3
 8007264:	b2db      	uxtb	r3, r3
 8007266:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8007268:	7e7b      	ldrb	r3, [r7, #25]
 800726a:	b25b      	sxtb	r3, r3
 800726c:	f023 030f 	bic.w	r3, r3, #15
 8007270:	b25a      	sxtb	r2, r3
 8007272:	7f3b      	ldrb	r3, [r7, #28]
 8007274:	b25b      	sxtb	r3, r3
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	b25b      	sxtb	r3, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	b25b      	sxtb	r3, r3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8007284:	7e7b      	ldrb	r3, [r7, #25]
 8007286:	b25b      	sxtb	r3, r3
 8007288:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800728c:	b25a      	sxtb	r2, r3
 800728e:	7f7b      	ldrb	r3, [r7, #29]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	b25b      	sxtb	r3, r3
 8007294:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007298:	b25b      	sxtb	r3, r3
 800729a:	4313      	orrs	r3, r2
 800729c:	b25b      	sxtb	r3, r3
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80072a2:	f107 0118 	add.w	r1, r7, #24
 80072a6:	f107 0014 	add.w	r0, r7, #20
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f7ff fb73 	bl	8006998 <bme68x_set_regs>
 80072b2:	4603      	mov	r3, r0
 80072b4:	77fb      	strb	r3, [r7, #31]
 80072b6:	e001      	b.n	80072bc <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80072b8:	23ff      	movs	r3, #255	@ 0xff
 80072ba:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80072bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072dc:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073c0 <calc_temperature+0xf8>
 80072e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	8bdb      	ldrh	r3, [r3, #30]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f0:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80073c4 <calc_temperature+0xfc>
 80072f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80072f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80073c8 <calc_temperature+0x100>
 8007320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	8bdb      	ldrh	r3, [r3, #30]
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007330:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80073cc <calc_temperature+0x104>
 8007334:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007338:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80073c8 <calc_temperature+0x100>
 800734a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	8bdb      	ldrh	r3, [r3, #30]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800735a:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80073cc <calc_temperature+0x104>
 800735e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007362:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8007366:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007378:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800737c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8007380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007384:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8007388:	ed97 7a05 	vldr	s14, [r7, #20]
 800738c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80073a0:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80073d0 <calc_temperature+0x108>
 80073a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073a8:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	ee07 3a90 	vmov	s15, r3
}
 80073b2:	eeb0 0a67 	vmov.f32	s0, s15
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	46800000 	.word	0x46800000
 80073c4:	44800000 	.word	0x44800000
 80073c8:	48000000 	.word	0x48000000
 80073cc:	46000000 	.word	0x46000000
 80073d0:	45a00000 	.word	0x45a00000

080073d4 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80073e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80073e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073ec:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8007628 <calc_pressure+0x254>
 80073f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073f4:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80073f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80073fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800740e:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 800762c <calc_pressure+0x258>
 8007412:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800742c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007434:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007438:	ed97 7a03 	vldr	s14, [r7, #12]
 800743c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007440:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8007444:	edd7 7a03 	vldr	s15, [r7, #12]
 8007448:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800744c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800745e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8007630 <calc_pressure+0x25c>
 8007462:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800746a:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800747c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007484:	edd7 7a04 	vldr	s15, [r7, #16]
 8007488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007634 <calc_pressure+0x260>
 8007490:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80074a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80074a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ae:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8007638 <calc_pressure+0x264>
 80074b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074b6:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80074ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80074be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800763c <calc_pressure+0x268>
 80074c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ec:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8007640 <calc_pressure+0x26c>
 80074f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074f4:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 80074f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80074fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007500:	ee17 3a90 	vmov	r3, s15
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8081 	beq.w	800760c <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800750a:	ed97 7a03 	vldr	s14, [r7, #12]
 800750e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8007644 <calc_pressure+0x270>
 8007512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007516:	ed97 7a05 	vldr	s14, [r7, #20]
 800751a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800751e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8007648 <calc_pressure+0x274>
 8007522:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007526:	ed97 7a04 	vldr	s14, [r7, #16]
 800752a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752e:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007540:	edd7 7a05 	vldr	s15, [r7, #20]
 8007544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007548:	edd7 7a05 	vldr	s15, [r7, #20]
 800754c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007550:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 800764c <calc_pressure+0x278>
 8007554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007558:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800756a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800763c <calc_pressure+0x268>
 800756e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007572:	ed97 7a05 	vldr	s14, [r7, #20]
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 800757e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007582:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007650 <calc_pressure+0x27c>
 8007586:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800758a:	edd7 6a05 	vldr	s13, [r7, #20]
 800758e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8007650 <calc_pressure+0x27c>
 8007592:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800759a:	edd7 6a05 	vldr	s13, [r7, #20]
 800759e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8007650 <calc_pressure+0x27c>
 80075a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80075a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075b8:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 800762c <calc_pressure+0x258>
 80075bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80075c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c4:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 80075c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80075cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80075d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80075d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ea:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007654 <calc_pressure+0x280>
 80075ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075f6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80075fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8007602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007606:	edc7 7a05 	vstr	s15, [r7, #20]
 800760a:	e002      	b.n	8007612 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	ee07 3a90 	vmov	s15, r3
}
 8007618:	eeb0 0a67 	vmov.f32	s0, s15
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	477a0000 	.word	0x477a0000
 800762c:	48000000 	.word	0x48000000
 8007630:	47800000 	.word	0x47800000
 8007634:	46800000 	.word	0x46800000
 8007638:	49000000 	.word	0x49000000
 800763c:	47000000 	.word	0x47000000
 8007640:	49800000 	.word	0x49800000
 8007644:	45800000 	.word	0x45800000
 8007648:	45c35000 	.word	0x45c35000
 800764c:	4f000000 	.word	0x4f000000
 8007650:	43800000 	.word	0x43800000
 8007654:	43000000 	.word	0x43000000

08007658 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8007658:	b480      	push	{r7}
 800765a:	b089      	sub	sp, #36	@ 0x24
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800766a:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80077d4 <calc_humidity+0x17c>
 800766e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007672:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	8a1b      	ldrh	r3, [r3, #16]
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8007690:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a2:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80076a6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80076aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80076ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 80076b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ba:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	8a5b      	ldrh	r3, [r3, #18]
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80077d8 <calc_humidity+0x180>
 80076ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80076d8:	ee07 3a90 	vmov	s15, r3
 80076dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076e0:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80077dc <calc_humidity+0x184>
 80076e4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80076e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80076ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f4:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007706:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80077e0 <calc_humidity+0x188>
 800770a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800770e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007712:	ee26 6a27 	vmul.f32	s12, s12, s15
 8007716:	edd7 7a06 	vldr	s15, [r7, #24]
 800771a:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800771e:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8007726:	ed97 7a05 	vldr	s14, [r7, #20]
 800772a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772e:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	7ddb      	ldrb	r3, [r3, #23]
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800773e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80077dc <calc_humidity+0x184>
 8007742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007746:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007758:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80077e4 <calc_humidity+0x18c>
 800775c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007760:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8007764:	ed97 7a02 	vldr	s14, [r7, #8]
 8007768:	edd7 7a06 	vldr	s15, [r7, #24]
 800776c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007770:	edd7 7a03 	vldr	s15, [r7, #12]
 8007774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007778:	edd7 7a04 	vldr	s15, [r7, #16]
 800777c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007780:	edd7 7a04 	vldr	s15, [r7, #16]
 8007784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007788:	ed97 7a04 	vldr	s14, [r7, #16]
 800778c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007790:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8007794:	edd7 7a07 	vldr	s15, [r7, #28]
 8007798:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80077e8 <calc_humidity+0x190>
 800779c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a4:	dd02      	ble.n	80077ac <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 80077a6:	4b11      	ldr	r3, [pc, #68]	@ (80077ec <calc_humidity+0x194>)
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e009      	b.n	80077c0 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 80077ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80077b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b8:	d502      	bpl.n	80077c0 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	ee07 3a90 	vmov	s15, r3
}
 80077c6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ca:	3724      	adds	r7, #36	@ 0x24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	45a00000 	.word	0x45a00000
 80077d8:	48800000 	.word	0x48800000
 80077dc:	46800000 	.word	0x46800000
 80077e0:	49800000 	.word	0x49800000
 80077e4:	4a000000 	.word	0x4a000000
 80077e8:	42c80000 	.word	0x42c80000
 80077ec:	42c80000 	.word	0x42c80000

080077f0 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 80077f0:	b4b0      	push	{r4, r5, r7}
 80077f2:	b0a9      	sub	sp, #164	@ 0xa4
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	603a      	str	r2, [r7, #0]
 80077fa:	80fb      	strh	r3, [r7, #6]
 80077fc:	460b      	mov	r3, r1
 80077fe:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8007800:	88fb      	ldrh	r3, [r7, #6]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 800780e:	797b      	ldrb	r3, [r7, #5]
 8007810:	2201      	movs	r2, #1
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 8007822:	4b3e      	ldr	r3, [pc, #248]	@ (800791c <calc_gas_resistance_low+0x12c>)
 8007824:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8007828:	461d      	mov	r5, r3
 800782a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800782c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800782e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007836:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800783a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 800783e:	4b38      	ldr	r3, [pc, #224]	@ (8007920 <calc_gas_resistance_low+0x130>)
 8007840:	f107 0408 	add.w	r4, r7, #8
 8007844:	461d      	mov	r5, r3
 8007846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800784a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800784c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800784e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007868:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800786c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007870:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8007924 <calc_gas_resistance_low+0x134>
 8007874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007878:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 800787c:	797b      	ldrb	r3, [r7, #5]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	33a0      	adds	r3, #160	@ 0xa0
 8007882:	443b      	add	r3, r7
 8007884:	3b58      	subs	r3, #88	@ 0x58
 8007886:	ed93 7a00 	vldr	s14, [r3]
 800788a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007928 <calc_gas_resistance_low+0x138>
 800788e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007896:	ee77 7a87 	vadd.f32	s15, s15, s14
 800789a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800789e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80078a6:	797b      	ldrb	r3, [r7, #5]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	33a0      	adds	r3, #160	@ 0xa0
 80078ac:	443b      	add	r3, r7
 80078ae:	3b98      	subs	r3, #152	@ 0x98
 80078b0:	ed93 7a00 	vldr	s14, [r3]
 80078b4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8007928 <calc_gas_resistance_low+0x138>
 80078b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078c4:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80078c8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80078cc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800792c <calc_gas_resistance_low+0x13c>
 80078d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078d4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80078d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078dc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80078e0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8007930 <calc_gas_resistance_low+0x140>
 80078e4:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80078e8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80078ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80078f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007904:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 8007908:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800790c:	ee07 3a90 	vmov	s15, r3
}
 8007910:	eeb0 0a67 	vmov.f32	s0, s15
 8007914:	37a4      	adds	r7, #164	@ 0xa4
 8007916:	46bd      	mov	sp, r7
 8007918:	bcb0      	pop	{r4, r5, r7}
 800791a:	4770      	bx	lr
 800791c:	0800f278 	.word	0x0800f278
 8007920:	0800f2b8 	.word	0x0800f2b8
 8007924:	44a78000 	.word	0x44a78000
 8007928:	42c80000 	.word	0x42c80000
 800792c:	340637bd 	.word	0x340637bd
 8007930:	44000000 	.word	0x44000000

08007934 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	460a      	mov	r2, r1
 800793e:	80fb      	strh	r3, [r7, #6]
 8007940:	4613      	mov	r3, r2
 8007942:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8007944:	797b      	ldrb	r3, [r7, #5]
 8007946:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8007950:	88fb      	ldrh	r3, [r7, #6]
 8007952:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007956:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4613      	mov	r3, r2
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4413      	add	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007968:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007974:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80079a4 <calc_gas_resistance_high+0x70>
 8007978:	ee67 6a87 	vmul.f32	s13, s15, s14
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798a:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	ee07 3a90 	vmov	s15, r3
}
 8007994:	eeb0 0a67 	vmov.f32	s0, s15
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	49742400 	.word	0x49742400

080079a8 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b08b      	sub	sp, #44	@ 0x2c
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80079b4:	89fb      	ldrh	r3, [r7, #14]
 80079b6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80079ba:	d902      	bls.n	80079c2 <calc_res_heat+0x1a>
    {
        temp = 400;
 80079bc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80079c0:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079d0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80079d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079d8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007aec <calc_res_heat+0x144>
 80079dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079f2:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8007af0 <calc_res_heat+0x148>
 80079f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079fa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8007af4 <calc_res_heat+0x14c>
 80079fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a02:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8007af8 <calc_res_heat+0x150>
 8007a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a0a:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a1c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007afc <calc_res_heat+0x154>
 8007a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a24:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a32:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a42:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a64:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a6c:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8007a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a86:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8007a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a92:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aa4:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8007b00 <calc_res_heat+0x158>
 8007aa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007aac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ab0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007ab4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007ab8:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8007abc:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007ac0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8007ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8007ac8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007b04 <calc_res_heat+0x15c>
 8007acc:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8007ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad4:	edc7 7a01 	vstr	s15, [r7, #4]
 8007ad8:	793b      	ldrb	r3, [r7, #4]
 8007ada:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8007adc:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	372c      	adds	r7, #44	@ 0x2c
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	42440000 	.word	0x42440000
 8007af0:	47000000 	.word	0x47000000
 8007af4:	3a03126f 	.word	0x3a03126f
 8007af8:	3b1a0275 	.word	0x3b1a0275
 8007afc:	44800000 	.word	0x44800000
 8007b00:	3b03126f 	.word	0x3b03126f
 8007b04:	4059999a 	.word	0x4059999a

08007b08 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8007b1c:	d308      	bcc.n	8007b30 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8007b1e:	23ff      	movs	r3, #255	@ 0xff
 8007b20:	73bb      	strb	r3, [r7, #14]
 8007b22:	e00f      	b.n	8007b44 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	089b      	lsrs	r3, r3, #2
 8007b28:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b34:	d8f6      	bhi.n	8007b24 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	019b      	lsls	r3, r3, #6
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b08e      	sub	sp, #56	@ 0x38
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	4603      	mov	r3, r0
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	f107 0314 	add.w	r3, r7, #20
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	605a      	str	r2, [r3, #4]
 8007b74:	609a      	str	r2, [r3, #8]
 8007b76:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8007b78:	2305      	movs	r3, #5
 8007b7a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 8007b7e:	e11d      	b.n	8007dbc <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	461a      	mov	r2, r3
 8007b84:	0112      	lsls	r2, r2, #4
 8007b86:	4413      	add	r3, r2
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	331d      	adds	r3, #29
 8007b8c:	b2d8      	uxtb	r0, r3
 8007b8e:	f107 0110 	add.w	r1, r7, #16
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2211      	movs	r2, #17
 8007b96:	f7fe ff8f 	bl	8006ab8 <bme68x_get_regs>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 8007ba6:	23ff      	movs	r3, #255	@ 0xff
 8007ba8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8007bac:	e10f      	b.n	8007dce <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8007bae:	7c3b      	ldrb	r3, [r7, #16]
 8007bb0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8007bba:	7c3b      	ldrb	r3, [r7, #16]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8007bc6:	7c7a      	ldrb	r2, [r7, #17]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8007bcc:	7cbb      	ldrb	r3, [r7, #18]
 8007bce:	031a      	lsls	r2, r3, #12
 8007bd0:	7cfb      	ldrb	r3, [r7, #19]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	7d3a      	ldrb	r2, [r7, #20]
 8007bd8:	0912      	lsrs	r2, r2, #4
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8007be0:	7d7b      	ldrb	r3, [r7, #21]
 8007be2:	031a      	lsls	r2, r3, #12
 8007be4:	7dbb      	ldrb	r3, [r7, #22]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	4313      	orrs	r3, r2
 8007bea:	7dfa      	ldrb	r2, [r7, #23]
 8007bec:	0912      	lsrs	r2, r2, #4
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8007bf4:	7e3b      	ldrb	r3, [r7, #24]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	7e7a      	ldrb	r2, [r7, #25]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8007c00:	7f7b      	ldrb	r3, [r7, #29]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	7fba      	ldrb	r2, [r7, #30]
 8007c08:	0992      	lsrs	r2, r2, #6
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8007c10:	7ffb      	ldrb	r3, [r7, #31]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007c1a:	0992      	lsrs	r2, r2, #6
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8007c22:	7fbb      	ldrb	r3, [r7, #30]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8007c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d11c      	bne.n	8007c7a <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	b25a      	sxtb	r2, r3
 8007c46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c4a:	b25b      	sxtb	r3, r3
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	b25b      	sxtb	r3, r3
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	b25a      	sxtb	r2, r3
 8007c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b25b      	sxtb	r3, r3
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e019      	b.n	8007cae <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	b25a      	sxtb	r2, r3
 8007c80:	7fbb      	ldrb	r3, [r7, #30]
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	b25b      	sxtb	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	b25a      	sxtb	r2, r3
 8007c9a:	7fbb      	ldrb	r3, [r7, #30]
 8007c9c:	b25b      	sxtb	r3, r3
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b25b      	sxtb	r3, r3
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b25b      	sxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da70      	bge.n	8007d9a <read_field_data+0x248>
 8007cb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d16c      	bne.n	8007d9a <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	335a      	adds	r3, #90	@ 0x5a
 8007cc6:	b2d8      	uxtb	r0, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	1cd9      	adds	r1, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f7fe fef2 	bl	8006ab8 <bme68x_get_regs>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 8007cda:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	785b      	ldrb	r3, [r3, #1]
 8007ce6:	3350      	adds	r3, #80	@ 0x50
 8007ce8:	b2d8      	uxtb	r0, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	1d19      	adds	r1, r3, #4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f7fe fee1 	bl	8006ab8 <bme68x_get_regs>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8007cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10c      	bne.n	8007d1e <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	3364      	adds	r3, #100	@ 0x64
 8007d0a:	b2d8      	uxtb	r0, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	1d59      	adds	r1, r3, #5
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f7fe fed0 	bl	8006ab8 <bme68x_get_regs>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8007d1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d139      	bne.n	8007d9a <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d2a:	f7ff facd 	bl	80072c8 <calc_temperature>
 8007d2e:	eef0 7a40 	vmov.f32	s15, s0
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	edc3 7a03 	vstr	s15, [r3, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d3c:	f7ff fb4a 	bl	80073d4 <calc_pressure>
 8007d40:	eef0 7a40 	vmov.f32	s15, s0
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	edc3 7a04 	vstr	s15, [r3, #16]
                data->humidity = calc_humidity(adc_hum, dev);
 8007d4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fc82 	bl	8007658 <calc_humidity>
 8007d54:	eef0 7a40 	vmov.f32	s15, s0
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	edc3 7a05 	vstr	s15, [r3, #20]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d10c      	bne.n	8007d80 <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8007d66:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007d6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fde0 	bl	8007934 <calc_gas_resistance_high>
 8007d74:	eef0 7a40 	vmov.f32	s15, s0
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	edc3 7a06 	vstr	s15, [r3, #24]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8007d7e:	e026      	b.n	8007dce <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8007d80:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007d84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff fd31 	bl	80077f0 <calc_gas_resistance_low>
 8007d8e:	eef0 7a40 	vmov.f32	s15, s0
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	edc3 7a06 	vstr	s15, [r3, #24]
                break;
 8007d98:	e019      	b.n	8007dce <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 8007d9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d107      	bne.n	8007db2 <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6852      	ldr	r2, [r2, #4]
 8007daa:	4611      	mov	r1, r2
 8007dac:	f242 7010 	movw	r0, #10000	@ 0x2710
 8007db0:	4798      	blx	r3
        }

        tries--;
 8007db2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007db6:	3b01      	subs	r3, #1
 8007db8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 8007dbc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <read_field_data+0x27c>
 8007dc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f43f aed9 	beq.w	8007b80 <read_field_data+0x2e>
    }

    return rslt;
 8007dce:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3738      	adds	r7, #56	@ 0x38
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8007dda:	b590      	push	{r4, r7, lr}
 8007ddc:	b09d      	sub	sp, #116	@ 0x74
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8007dea:	2300      	movs	r3, #0
 8007dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007df2:	222f      	movs	r2, #47	@ 0x2f
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f006 f9d9 	bl	800e1ae <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60bb      	str	r3, [r7, #8]
 8007e00:	f107 030c 	add.w	r3, r7, #12
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	60da      	str	r2, [r3, #12]
 8007e0e:	611a      	str	r2, [r3, #16]
 8007e10:	615a      	str	r2, [r3, #20]
 8007e12:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10c      	bne.n	8007e36 <read_all_field_data+0x5c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <read_all_field_data+0x5c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8007e30:	23ff      	movs	r3, #255	@ 0xff
 8007e32:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007e36:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8007e3e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2233      	movs	r2, #51	@ 0x33
 8007e46:	201d      	movs	r0, #29
 8007e48:	f7fe fe36 	bl	8006ab8 <bme68x_get_regs>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007e52:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8007e5a:	f107 0108 	add.w	r1, r7, #8
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	221e      	movs	r2, #30
 8007e62:	2050      	movs	r0, #80	@ 0x50
 8007e64:	f7fe fe28 	bl	8006ab8 <bme68x_get_regs>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007e74:	e1ce      	b.n	8008214 <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8007e76:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	0112      	lsls	r2, r2, #4
 8007e7e:	4413      	add	r3, r2
 8007e80:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8007e84:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007e88:	3370      	adds	r3, #112	@ 0x70
 8007e8a:	443b      	add	r3, r7
 8007e8c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007e90:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	440b      	add	r3, r1
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8007ea4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ea8:	3370      	adds	r3, #112	@ 0x70
 8007eaa:	443b      	add	r3, r7
 8007eac:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007eb0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	440b      	add	r3, r1
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f002 020f 	and.w	r2, r2, #15
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8007ec4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	440b      	add	r3, r1
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3270      	adds	r2, #112	@ 0x70
 8007ed8:	443a      	add	r2, r7
 8007eda:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007ede:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8007ee0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	3370      	adds	r3, #112	@ 0x70
 8007ee8:	443b      	add	r3, r7
 8007eea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007eee:	031a      	lsls	r2, r3, #12
 8007ef0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ef4:	3303      	adds	r3, #3
 8007ef6:	3370      	adds	r3, #112	@ 0x70
 8007ef8:	443b      	add	r3, r7
 8007efa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8007f02:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f06:	3204      	adds	r2, #4
 8007f08:	3270      	adds	r2, #112	@ 0x70
 8007f0a:	443a      	add	r2, r7
 8007f0c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f10:	0912      	lsrs	r2, r2, #4
 8007f12:	b2d2      	uxtb	r2, r2
        adc_pres =
 8007f14:	4313      	orrs	r3, r2
 8007f16:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8007f18:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f1c:	3305      	adds	r3, #5
 8007f1e:	3370      	adds	r3, #112	@ 0x70
 8007f20:	443b      	add	r3, r7
 8007f22:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f26:	031a      	lsls	r2, r3, #12
 8007f28:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f2c:	3306      	adds	r3, #6
 8007f2e:	3370      	adds	r3, #112	@ 0x70
 8007f30:	443b      	add	r3, r7
 8007f32:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8007f3a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f3e:	3207      	adds	r2, #7
 8007f40:	3270      	adds	r2, #112	@ 0x70
 8007f42:	443a      	add	r2, r7
 8007f44:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f48:	0912      	lsrs	r2, r2, #4
 8007f4a:	b2d2      	uxtb	r2, r2
        adc_temp =
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8007f50:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f54:	3308      	adds	r3, #8
 8007f56:	3370      	adds	r3, #112	@ 0x70
 8007f58:	443b      	add	r3, r7
 8007f5a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f66:	3209      	adds	r2, #9
 8007f68:	3270      	adds	r2, #112	@ 0x70
 8007f6a:	443a      	add	r2, r7
 8007f6c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8007f76:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f7a:	330d      	adds	r3, #13
 8007f7c:	3370      	adds	r3, #112	@ 0x70
 8007f7e:	443b      	add	r3, r7
 8007f80:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f8c:	320e      	adds	r2, #14
 8007f8e:	3270      	adds	r2, #112	@ 0x70
 8007f90:	443a      	add	r2, r7
 8007f92:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f96:	0992      	lsrs	r2, r2, #6
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8007fa0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007fa4:	330f      	adds	r3, #15
 8007fa6:	3370      	adds	r3, #112	@ 0x70
 8007fa8:	443b      	add	r3, r7
 8007faa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007fb6:	3210      	adds	r2, #16
 8007fb8:	3270      	adds	r2, #112	@ 0x70
 8007fba:	443a      	add	r2, r7
 8007fbc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007fc0:	0992      	lsrs	r2, r2, #6
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8007fca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007fce:	330e      	adds	r3, #14
 8007fd0:	3370      	adds	r3, #112	@ 0x70
 8007fd2:	443b      	add	r3, r7
 8007fd4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8007fe0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	3370      	adds	r3, #112	@ 0x70
 8007fe8:	443b      	add	r3, r7
 8007fea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d13a      	bne.n	8008074 <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8007ffe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4413      	add	r3, r2
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b25a      	sxtb	r2, r3
 800800e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8008012:	3310      	adds	r3, #16
 8008014:	3370      	adds	r3, #112	@ 0x70
 8008016:	443b      	add	r3, r7
 8008018:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	b25b      	sxtb	r3, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	b259      	sxtb	r1, r3
 8008028:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	b2ca      	uxtb	r2, r1
 8008036:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8008038:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4413      	add	r3, r2
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b25a      	sxtb	r2, r3
 8008048:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800804c:	3310      	adds	r3, #16
 800804e:	3370      	adds	r3, #112	@ 0x70
 8008050:	443b      	add	r3, r7
 8008052:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008056:	b25b      	sxtb	r3, r3
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	b25b      	sxtb	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b259      	sxtb	r1, r3
 8008062:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4413      	add	r3, r2
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	b2ca      	uxtb	r2, r1
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e039      	b.n	80080e8 <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8008074:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b25a      	sxtb	r2, r3
 8008084:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8008088:	330e      	adds	r3, #14
 800808a:	3370      	adds	r3, #112	@ 0x70
 800808c:	443b      	add	r3, r7
 800808e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008092:	b25b      	sxtb	r3, r3
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	b25b      	sxtb	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b259      	sxtb	r1, r3
 800809e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	b2ca      	uxtb	r2, r1
 80080ac:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80080ae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b25a      	sxtb	r2, r3
 80080be:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80080c2:	330e      	adds	r3, #14
 80080c4:	3370      	adds	r3, #112	@ 0x70
 80080c6:	443b      	add	r3, r7
 80080c8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80080cc:	b25b      	sxtb	r3, r3
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	b25b      	sxtb	r3, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b259      	sxtb	r1, r3
 80080d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	b2ca      	uxtb	r2, r1
 80080e6:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80080e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	4619      	mov	r1, r3
 80080f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8008108:	443a      	add	r2, r7
 800810a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800810e:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8008110:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4413      	add	r3, r2
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	f103 020a 	add.w	r2, r3, #10
 8008122:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	440b      	add	r3, r1
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3270      	adds	r2, #112	@ 0x70
 8008130:	443a      	add	r2, r7
 8008132:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8008136:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8008138:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	f103 0214 	add.w	r2, r3, #20
 800814a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	440b      	add	r3, r1
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3270      	adds	r2, #112	@ 0x70
 8008158:	443a      	add	r2, r7
 800815a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800815e:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8008160:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	681c      	ldr	r4, [r3, #0]
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8008170:	f7ff f8aa 	bl	80072c8 <calc_temperature>
 8008174:	eef0 7a40 	vmov.f32	s15, s0
 8008178:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800817c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	681c      	ldr	r4, [r3, #0]
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800818c:	f7ff f922 	bl	80073d4 <calc_pressure>
 8008190:	eef0 7a40 	vmov.f32	s15, s0
 8008194:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8008198:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	681c      	ldr	r4, [r3, #0]
 80081a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fa54 	bl	8007658 <calc_humidity>
 80081b0:	eef0 7a40 	vmov.f32	s15, s0
 80081b4:	edc4 7a05 	vstr	s15, [r4, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d112      	bne.n	80081e6 <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80081c0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	681c      	ldr	r4, [r3, #0]
 80081cc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80081d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff fbac 	bl	8007934 <calc_gas_resistance_high>
 80081dc:	eef0 7a40 	vmov.f32	s15, s0
 80081e0:	edc4 7a06 	vstr	s15, [r4, #24]
 80081e4:	e011      	b.n	800820a <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80081e6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	681c      	ldr	r4, [r3, #0]
 80081f2:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 80081f6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff faf7 	bl	80077f0 <calc_gas_resistance_low>
 8008202:	eef0 7a40 	vmov.f32	s15, s0
 8008206:	edc4 7a06 	vstr	s15, [r4, #24]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800820a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800820e:	3301      	adds	r3, #1
 8008210:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8008214:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008218:	2b02      	cmp	r3, #2
 800821a:	d804      	bhi.n	8008226 <read_all_field_data+0x44c>
 800821c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008220:	2b00      	cmp	r3, #0
 8008222:	f43f ae28 	beq.w	8007e76 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8008226:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800822a:	4618      	mov	r0, r3
 800822c:	3774      	adds	r7, #116	@ 0x74
 800822e:	46bd      	mov	sp, r7
 8008230:	bd90      	pop	{r4, r7, pc}

08008232 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8008232:	b590      	push	{r4, r7, lr}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	4603      	mov	r3, r0
 800823a:	6039      	str	r1, [r7, #0]
 800823c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800823e:	6838      	ldr	r0, [r7, #0]
 8008240:	f000 f8b8 	bl	80083b4 <null_ptr_check>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8008248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d14f      	bne.n	80082f0 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8008250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008254:	2b00      	cmp	r3, #0
 8008256:	da02      	bge.n	800825e <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]
 800825c:	e001      	b.n	8008262 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800825e:	2310      	movs	r3, #16
 8008260:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	7b5b      	ldrb	r3, [r3, #13]
 8008266:	7bba      	ldrb	r2, [r7, #14]
 8008268:	429a      	cmp	r2, r3
 800826a:	d041      	beq.n	80082f0 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	7bba      	ldrb	r2, [r7, #14]
 8008270:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f107 010d 	add.w	r1, r7, #13
 800827e:	2201      	movs	r2, #1
 8008280:	20f3      	movs	r0, #243	@ 0xf3
 8008282:	47a0      	blx	r4
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8008298:	23fe      	movs	r3, #254	@ 0xfe
 800829a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800829c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d125      	bne.n	80082f0 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80082a4:	7b7b      	ldrb	r3, [r7, #13]
 80082a6:	f023 0310 	bic.w	r3, r3, #16
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	7b5b      	ldrb	r3, [r3, #13]
 80082b2:	b25b      	sxtb	r3, r3
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	b25a      	sxtb	r2, r3
 80082ba:	7b7b      	ldrb	r3, [r7, #13]
 80082bc:	b25b      	sxtb	r3, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f107 010d 	add.w	r1, r7, #13
 80082d2:	2201      	movs	r2, #1
 80082d4:	2073      	movs	r0, #115	@ 0x73
 80082d6:	47a0      	blx	r4
 80082d8:	4603      	mov	r3, r0
 80082da:	461a      	mov	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 80082ec:	23fe      	movs	r3, #254	@ 0xfe
 80082ee:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80082f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}

080082fc <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f855 	bl	80083b4 <null_ptr_check>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800830e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d11b      	bne.n	800834e <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f107 010e 	add.w	r1, r7, #14
 8008322:	2201      	movs	r2, #1
 8008324:	20f3      	movs	r0, #243	@ 0xf3
 8008326:	47a0      	blx	r4
 8008328:	4603      	mov	r3, r0
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 800833c:	23fe      	movs	r3, #254	@ 0xfe
 800833e:	73fb      	strb	r3, [r7, #15]
 8008340:	e005      	b.n	800834e <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800834e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	bd90      	pop	{r4, r7, pc}

0800835a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	460b      	mov	r3, r1
 8008364:	607a      	str	r2, [r7, #4]
 8008366:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f823 	bl	80083b4 <null_ptr_check>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d015      	beq.n	80083a4 <boundary_check+0x4a>
 8008378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d111      	bne.n	80083a4 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	7afa      	ldrb	r2, [r7, #11]
 8008386:	429a      	cmp	r2, r3
 8008388:	d20e      	bcs.n	80083a8 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	7afa      	ldrb	r2, [r7, #11]
 800838e:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	b2da      	uxtb	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 80083a2:	e001      	b.n	80083a8 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80083a4:	23ff      	movs	r3, #255	@ 0xff
 80083a6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80083a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <null_ptr_check+0x2a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <null_ptr_check+0x2a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <null_ptr_check+0x2a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80083de:	23ff      	movs	r3, #255	@ 0xff
 80083e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80083e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b093      	sub	sp, #76	@ 0x4c
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	460b      	mov	r3, r1
 8008402:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8008410:	236e      	movs	r3, #110	@ 0x6e
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008416:	4aa1      	ldr	r2, [pc, #644]	@ (800869c <set_conf+0x2a8>)
 8008418:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800841c:	ca07      	ldmia	r2, {r0, r1, r2}
 800841e:	c303      	stmia	r3!, {r0, r1}
 8008420:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008422:	4a9e      	ldr	r2, [pc, #632]	@ (800869c <set_conf+0x2a8>)
 8008424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008428:	ca07      	ldmia	r2, {r0, r1, r2}
 800842a:	c303      	stmia	r3!, {r0, r1}
 800842c:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800842e:	4a9b      	ldr	r2, [pc, #620]	@ (800869c <set_conf+0x2a8>)
 8008430:	f107 0320 	add.w	r3, r7, #32
 8008434:	ca07      	ldmia	r2, {r0, r1, r2}
 8008436:	c303      	stmia	r3!, {r0, r1}
 8008438:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800843a:	4a98      	ldr	r2, [pc, #608]	@ (800869c <set_conf+0x2a8>)
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	ca07      	ldmia	r2, {r0, r1, r2}
 8008442:	c303      	stmia	r3!, {r0, r1}
 8008444:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d024      	beq.n	8008496 <set_conf+0xa2>
 800844c:	2b03      	cmp	r3, #3
 800844e:	f300 80f9 	bgt.w	8008644 <set_conf+0x250>
 8008452:	2b01      	cmp	r3, #1
 8008454:	d002      	beq.n	800845c <set_conf+0x68>
 8008456:	2b02      	cmp	r3, #2
 8008458:	d07c      	beq.n	8008554 <set_conf+0x160>
 800845a:	e0f3      	b.n	8008644 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 800845c:	235a      	movs	r3, #90	@ 0x5a
 800845e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fa9d 	bl	80079a8 <calc_res_heat>
 800846e:	4603      	mov	r3, r0
 8008470:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8008474:	2364      	movs	r3, #100	@ 0x64
 8008476:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	889b      	ldrh	r3, [r3, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff fb42 	bl	8007b08 <calc_gas_wait>
 8008484:	4603      	mov	r3, r0
 8008486:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8008494:	e0db      	b.n	800864e <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <set_conf+0xb2>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80084a6:	23ff      	movs	r3, #255	@ 0xff
 80084a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80084ac:	e0cf      	b.n	800864e <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80084b4:	e03f      	b.n	8008536 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80084b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084ba:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80084be:	325a      	adds	r2, #90	@ 0x5a
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	3348      	adds	r3, #72	@ 0x48
 80084c4:	443b      	add	r3, r7
 80084c6:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff fa62 	bl	80079a8 <calc_res_heat>
 80084e4:	4603      	mov	r3, r0
 80084e6:	461a      	mov	r2, r3
 80084e8:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80084ec:	443b      	add	r3, r7
 80084ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80084f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084f6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80084fa:	3264      	adds	r2, #100	@ 0x64
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	3348      	adds	r3, #72	@ 0x48
 8008500:	443b      	add	r3, r7
 8008502:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	4413      	add	r3, r2
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff faf5 	bl	8007b08 <calc_gas_wait>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8008526:	443b      	add	r3, r7
 8008528:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 800852c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008530:	3301      	adds	r3, #1
 8008532:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	7c1b      	ldrb	r3, [r3, #16]
 800853a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800853e:	429a      	cmp	r2, r3
 8008540:	d3b9      	bcc.n	80084b6 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	7c1a      	ldrb	r2, [r3, #16]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	7c1b      	ldrb	r3, [r3, #16]
 800854e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8008552:	e07c      	b.n	800864e <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <set_conf+0x170>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d103      	bne.n	800856c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8008564:	23ff      	movs	r3, #255	@ 0xff
 8008566:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 800856a:	e070      	b.n	800864e <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8a5b      	ldrh	r3, [r3, #18]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8008574:	2303      	movs	r3, #3
 8008576:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 800857a:	2300      	movs	r3, #0
 800857c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008580:	e03a      	b.n	80085f8 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8008582:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008586:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800858a:	325a      	adds	r2, #90	@ 0x5a
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	3348      	adds	r3, #72	@ 0x48
 8008590:	443b      	add	r3, r7
 8008592:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	4413      	add	r3, r2
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff f9fc 	bl	80079a8 <calc_res_heat>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
 80085b4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80085b8:	443b      	add	r3, r7
 80085ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80085be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085c2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80085c6:	3264      	adds	r2, #100	@ 0x64
 80085c8:	b2d2      	uxtb	r2, r2
 80085ca:	3348      	adds	r3, #72	@ 0x48
 80085cc:	443b      	add	r3, r7
 80085ce:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	4413      	add	r3, r2
 80085de:	881a      	ldrh	r2, [r3, #0]
 80085e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	3348      	adds	r3, #72	@ 0x48
 80085e8:	443b      	add	r3, r7
 80085ea:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 80085ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085f2:	3301      	adds	r3, #1
 80085f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	7c1b      	ldrb	r3, [r3, #16]
 80085fc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008600:	429a      	cmp	r2, r3
 8008602:	d3be      	bcc.n	8008582 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	7c1a      	ldrb	r2, [r3, #16]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	7c1b      	ldrb	r3, [r3, #16]
 8008610:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8a5b      	ldrh	r3, [r3, #18]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 f841 	bl	80086a0 <calc_heatr_dur_shared>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8008624:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10f      	bne.n	800864c <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 800862c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8008630:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2201      	movs	r2, #1
 8008638:	f7fe f9ae 	bl	8006998 <bme68x_set_regs>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8008642:	e003      	b.n	800864c <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800864a:	e000      	b.n	800864e <set_conf+0x25a>
            break;
 800864c:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 800864e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8008656:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800865a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800865e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	f7fe f998 	bl	8006998 <bme68x_set_regs>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 800866e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8008676:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800867a:	f107 0114 	add.w	r1, r7, #20
 800867e:	f107 0020 	add.w	r0, r7, #32
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	f7fe f988 	bl	8006998 <bme68x_set_regs>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 800868e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8008692:	4618      	mov	r0, r3
 8008694:	374c      	adds	r7, #76	@ 0x4c
 8008696:	46bd      	mov	sp, r7
 8008698:	bd90      	pop	{r4, r7, pc}
 800869a:	bf00      	nop
 800869c:	0800f2f8 	.word	0x0800f2f8

080086a0 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	f240 7282 	movw	r2, #1922	@ 0x782
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d902      	bls.n	80086be <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 80086b8:	23ff      	movs	r3, #255	@ 0xff
 80086ba:	73bb      	strb	r3, [r7, #14]
 80086bc:	e01d      	b.n	80086fa <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80086c4:	fb03 f202 	mul.w	r2, r3, r2
 80086c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <calc_heatr_dur_shared+0x68>)
 80086ca:	fba3 1302 	umull	r1, r3, r3, r2
 80086ce:	1ad2      	subs	r2, r2, r3
 80086d0:	0852      	lsrs	r2, r2, #1
 80086d2:	4413      	add	r3, r2
 80086d4:	0a1b      	lsrs	r3, r3, #8
 80086d6:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 80086d8:	e005      	b.n	80086e6 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 80086da:	88fb      	ldrh	r3, [r7, #6]
 80086dc:	089b      	lsrs	r3, r3, #2
 80086de:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	3301      	adds	r3, #1
 80086e4:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80086ea:	d8f6      	bhi.n	80086da <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	019b      	lsls	r3, r3, #6
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	12c8b89f 	.word	0x12c8b89f

0800870c <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	603a      	str	r2, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
 8008718:	460b      	mov	r3, r1
 800871a:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	4413      	add	r3, r2
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	789b      	ldrb	r3, [r3, #2]
 8008728:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 800872a:	79bb      	ldrb	r3, [r7, #6]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4413      	add	r3, r2
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	789b      	ldrb	r3, [r3, #2]
 8008736:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	4413      	add	r3, r2
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	b25b      	sxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	da21      	bge.n	800878e <sort_sensor_data+0x82>
 800874a:	79bb      	ldrb	r3, [r7, #6]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4413      	add	r3, r2
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	b25b      	sxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	da18      	bge.n	800878e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 800875c:	89ba      	ldrh	r2, [r7, #12]
 800875e:	89fb      	ldrh	r3, [r7, #14]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	b29b      	uxth	r3, r3
 8008764:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8008766:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800876a:	f113 0f02 	cmn.w	r3, #2
 800876e:	db03      	blt.n	8008778 <sort_sensor_data+0x6c>
 8008770:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008774:	2b00      	cmp	r3, #0
 8008776:	db03      	blt.n	8008780 <sort_sensor_data+0x74>
 8008778:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800877c:	2b02      	cmp	r3, #2
 800877e:	dd16      	ble.n	80087ae <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8008780:	79b9      	ldrb	r1, [r7, #6]
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f816 	bl	80087b8 <swap_fields>
    {
 800878c:	e00f      	b.n	80087ae <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800878e:	79bb      	ldrb	r3, [r7, #6]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4413      	add	r3, r2
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	b25b      	sxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	da07      	bge.n	80087b0 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 80087a0:	79b9      	ldrb	r1, [r7, #6]
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f806 	bl	80087b8 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 80087ac:	e000      	b.n	80087b0 <sort_sensor_data+0xa4>
    {
 80087ae:	bf00      	nop
}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	603a      	str	r2, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
 80087c4:	460b      	mov	r3, r1
 80087c6:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	4413      	add	r3, r2
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 80087d4:	79bb      	ldrb	r3, [r7, #6]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	441a      	add	r2, r3
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	440b      	add	r3, r1
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 80087e8:	79bb      	ldrb	r3, [r7, #6]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	4413      	add	r3, r2
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08e      	sub	sp, #56	@ 0x38
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8008808:	f107 010c 	add.w	r1, r7, #12
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2217      	movs	r2, #23
 8008810:	208a      	movs	r0, #138	@ 0x8a
 8008812:	f7fe f951 	bl	8006ab8 <bme68x_get_regs>
 8008816:	4603      	mov	r3, r0
 8008818:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 800881c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	f103 0117 	add.w	r1, r3, #23
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220e      	movs	r2, #14
 8008830:	20e1      	movs	r0, #225	@ 0xe1
 8008832:	f7fe f941 	bl	8006ab8 <bme68x_get_regs>
 8008836:	4603      	mov	r3, r0
 8008838:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 800883c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10b      	bne.n	800885c <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2205      	movs	r2, #5
 8008850:	2000      	movs	r0, #0
 8008852:	f7fe f931 	bl	8006ab8 <bme68x_get_regs>
 8008856:	4603      	mov	r3, r0
 8008858:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 800885c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 80cb 	bne.w	80089fc <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8008866:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	b21a      	sxth	r2, r3
 800886e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008872:	b21b      	sxth	r3, r3
 8008874:	4313      	orrs	r3, r2
 8008876:	b21b      	sxth	r3, r3
 8008878:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 800887e:	7b7b      	ldrb	r3, [r7, #13]
 8008880:	021b      	lsls	r3, r3, #8
 8008882:	b21a      	sxth	r2, r3
 8008884:	7b3b      	ldrb	r3, [r7, #12]
 8008886:	b21b      	sxth	r3, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	b25a      	sxtb	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800889a:	7c7b      	ldrb	r3, [r7, #17]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	b21a      	sxth	r2, r3
 80088a0:	7c3b      	ldrb	r3, [r7, #16]
 80088a2:	b21b      	sxth	r3, r3
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 80088ae:	7cfb      	ldrb	r3, [r7, #19]
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	b21a      	sxth	r2, r3
 80088b4:	7cbb      	ldrb	r3, [r7, #18]
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80088c0:	7d3b      	ldrb	r3, [r7, #20]
 80088c2:	b25a      	sxtb	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	021b      	lsls	r3, r3, #8
 80088ce:	b21a      	sxth	r2, r3
 80088d0:	7dbb      	ldrb	r3, [r7, #22]
 80088d2:	b21b      	sxth	r3, r3
 80088d4:	4313      	orrs	r3, r2
 80088d6:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 80088dc:	7e7b      	ldrb	r3, [r7, #25]
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	b21a      	sxth	r2, r3
 80088e2:	7e3b      	ldrb	r3, [r7, #24]
 80088e4:	b21b      	sxth	r3, r3
 80088e6:	4313      	orrs	r3, r2
 80088e8:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80088ee:	7efb      	ldrb	r3, [r7, #27]
 80088f0:	b25a      	sxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80088f8:	7ebb      	ldrb	r3, [r7, #26]
 80088fa:	b25a      	sxtb	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8008902:	7ffb      	ldrb	r3, [r7, #31]
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	b21a      	sxth	r2, r3
 8008908:	7fbb      	ldrb	r3, [r7, #30]
 800890a:	b21b      	sxth	r3, r3
 800890c:	4313      	orrs	r3, r2
 800890e:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8008914:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	b21a      	sxth	r2, r3
 800891c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008920:	b21b      	sxth	r3, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 800892a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008934:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 800893c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008940:	b21b      	sxth	r3, r3
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008948:	4313      	orrs	r3, r2
 800894a:	b21b      	sxth	r3, r3
 800894c:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8008952:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	b21a      	sxth	r2, r3
 800895a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800895e:	091b      	lsrs	r3, r3, #4
 8008960:	b2db      	uxtb	r3, r3
 8008962:	b21b      	sxth	r3, r3
 8008964:	4313      	orrs	r3, r2
 8008966:	b21b      	sxth	r3, r3
 8008968:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 800896e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008972:	b25a      	sxtb	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8008978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800897c:	b25a      	sxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8008982:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008986:	b25a      	sxtb	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 800898c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8008994:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008998:	b25a      	sxtb	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 800899e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089a2:	b25a      	sxtb	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 80089a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	b21a      	sxth	r2, r3
 80089b0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80089b4:	b21b      	sxth	r3, r3
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 80089be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80089c2:	b25a      	sxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 80089c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80089cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	da00      	bge.n	80089d6 <get_calib_data+0x1d6>
 80089d4:	330f      	adds	r3, #15
 80089d6:	111b      	asrs	r3, r3, #4
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80089e0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80089e4:	b25a      	sxtb	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80089ec:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80089f0:	b25b      	sxtb	r3, r3
 80089f2:	111b      	asrs	r3, r3, #4
 80089f4:	b25a      	sxtb	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 80089fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3738      	adds	r7, #56	@ 0x38
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8008a14:	f107 010e 	add.w	r1, r7, #14
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	20f0      	movs	r0, #240	@ 0xf0
 8008a1e:	f7fe f84b 	bl	8006ab8 <bme68x_get_regs>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8008a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d103      	bne.n	8008a36 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	461a      	mov	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8008a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <bme68x_start>:


volatile uint8_t err_code_2;

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8008a4e:	2254      	movs	r2, #84	@ 0x54
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	4820      	ldr	r0, [pc, #128]	@ (8008ad4 <bme68x_start+0x90>)
 8008a54:	f005 fc27 	bl	800e2a6 <memcpy>

	// Init.
	//TODO: bme mal init ici ........!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	err_code_2 = bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8008a58:	2101      	movs	r1, #1
 8008a5a:	481f      	ldr	r0, [pc, #124]	@ (8008ad8 <bme68x_start+0x94>)
 8008a5c:	f000 f8f0 	bl	8008c40 <bme68x_interface_init>
 8008a60:	4603      	mov	r3, r0
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	4b1d      	ldr	r3, [pc, #116]	@ (8008adc <bme68x_start+0x98>)
 8008a66:	701a      	strb	r2, [r3, #0]
	bme68x_init(&bme);
 8008a68:	481b      	ldr	r0, [pc, #108]	@ (8008ad8 <bme68x_start+0x94>)
 8008a6a:	f7fd ff61 	bl	8006930 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae0 <bme68x_start+0x9c>)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8008a74:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae4 <bme68x_start+0xa0>)
 8008a76:	2202      	movs	r2, #2
 8008a78:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae4 <bme68x_start+0xa0>)
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8008a80:	4b18      	ldr	r3, [pc, #96]	@ (8008ae4 <bme68x_start+0xa0>)
 8008a82:	2202      	movs	r2, #2
 8008a84:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8008a86:	4b17      	ldr	r3, [pc, #92]	@ (8008ae4 <bme68x_start+0xa0>)
 8008a88:	2203      	movs	r2, #3
 8008a8a:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8008a8c:	4b15      	ldr	r3, [pc, #84]	@ (8008ae4 <bme68x_start+0xa0>)
 8008a8e:	2204      	movs	r2, #4
 8008a90:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8008a92:	4911      	ldr	r1, [pc, #68]	@ (8008ad8 <bme68x_start+0x94>)
 8008a94:	4813      	ldr	r0, [pc, #76]	@ (8008ae4 <bme68x_start+0xa0>)
 8008a96:	f7fe f897 	bl	8006bc8 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8008a9a:	4b13      	ldr	r3, [pc, #76]	@ (8008ae8 <bme68x_start+0xa4>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8008aa0:	4b11      	ldr	r3, [pc, #68]	@ (8008ae8 <bme68x_start+0xa4>)
 8008aa2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8008aa6:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8008aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae8 <bme68x_start+0xa4>)
 8008aaa:	2296      	movs	r2, #150	@ 0x96
 8008aac:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8008aae:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad8 <bme68x_start+0x94>)
 8008ab0:	490d      	ldr	r1, [pc, #52]	@ (8008ae8 <bme68x_start+0xa4>)
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f7fe fb80 	bl	80071b8 <bme68x_set_heatr_conf>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	461a      	mov	r2, r3
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <bme68x_start+0xa8>)
 8008abe:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8008ac0:	f000 f908 	bl	8008cd4 <bme68x_GetGasReference>

	return rslt;
 8008ac4:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <bme68x_start+0xa8>)
 8008ac6:	f993 3000 	ldrsb.w	r3, [r3]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000530 	.word	0x20000530
 8008ad8:	20000584 	.word	0x20000584
 8008adc:	20000609 	.word	0x20000609
 8008ae0:	200005d4 	.word	0x200005d4
 8008ae4:	200005dc 	.word	0x200005dc
 8008ae8:	200005e4 	.word	0x200005e4
 8008aec:	200005d8 	.word	0x200005d8

08008af0 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8008af8:	4916      	ldr	r1, [pc, #88]	@ (8008b54 <bme68x_single_measure+0x64>)
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fe f968 	bl	8006dd0 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8008b00:	4a14      	ldr	r2, [pc, #80]	@ (8008b54 <bme68x_single_measure+0x64>)
 8008b02:	4915      	ldr	r1, [pc, #84]	@ (8008b58 <bme68x_single_measure+0x68>)
 8008b04:	2001      	movs	r0, #1
 8008b06:	f7fe f9e5 	bl	8006ed4 <bme68x_get_meas_dur>
 8008b0a:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8008b0c:	4a13      	ldr	r2, [pc, #76]	@ (8008b5c <bme68x_single_measure+0x6c>)
 8008b0e:	8892      	ldrh	r2, [r2, #4]
 8008b10:	4611      	mov	r1, r2
 8008b12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b16:	fb01 f202 	mul.w	r2, r1, r2
 8008b1a:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8008b1c:	4a10      	ldr	r2, [pc, #64]	@ (8008b60 <bme68x_single_measure+0x70>)
 8008b1e:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000); // modification pour la compatibilite stack lora
 8008b20:	4b0f      	ldr	r3, [pc, #60]	@ (8008b60 <bme68x_single_measure+0x70>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0f      	ldr	r2, [pc, #60]	@ (8008b64 <bme68x_single_measure+0x74>)
 8008b26:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2a:	099b      	lsrs	r3, r3, #6
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 fb41 	bl	80091b4 <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8008b32:	4b08      	ldr	r3, [pc, #32]	@ (8008b54 <bme68x_single_measure+0x64>)
 8008b34:	4a0c      	ldr	r2, [pc, #48]	@ (8008b68 <bme68x_single_measure+0x78>)
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f7fe fa3f 	bl	8006fbc <bme68x_get_data>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <bme68x_single_measure+0x7c>)
 8008b44:	701a      	strb	r2, [r3, #0]
	return rslt;
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <bme68x_single_measure+0x7c>)
 8008b48:	f993 3000 	ldrsb.w	r3, [r3]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000584 	.word	0x20000584
 8008b58:	200005dc 	.word	0x200005dc
 8008b5c:	200005e4 	.word	0x200005e4
 8008b60:	200005f8 	.word	0x200005f8
 8008b64:	10624dd3 	.word	0x10624dd3
 8008b68:	200005fc 	.word	0x200005fc
 8008b6c:	200005d8 	.word	0x200005d8

08008b70 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	@ 0x28
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	200f      	movs	r0, #15
 8008b98:	9002      	str	r0, [sp, #8]
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4806      	ldr	r0, [pc, #24]	@ (8008bbc <bme68x_i2c_write+0x4c>)
 8008ba4:	f002 fa04 	bl	800afb0 <HAL_I2C_Mem_Write>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e000      	b.n	8008bb4 <bme68x_i2c_write+0x44>

	return 1;
 8008bb2:	2301      	movs	r3, #1
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000530 	.word	0x20000530

08008bc0 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	@ 0x28
 8008bc4:	af04      	add	r7, sp, #16
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	b21b      	sxth	r3, r3
 8008be2:	b299      	uxth	r1, r3
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	200f      	movs	r0, #15
 8008bee:	9002      	str	r0, [sp, #8]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4806      	ldr	r0, [pc, #24]	@ (8008c14 <bme68x_i2c_read+0x54>)
 8008bfa:	f002 faed 	bl	800b1d8 <HAL_I2C_Mem_Read>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <bme68x_i2c_read+0x4a>

	return 1;
 8008c08:	2301      	movs	r3, #1
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000530 	.word	0x20000530

08008c18 <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a05      	ldr	r2, [pc, #20]	@ (8008c3c <bme68x_delay_us+0x24>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	099b      	lsrs	r3, r3, #6
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 fac1 	bl	80091b4 <HAL_Delay>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	10624dd3 	.word	0x10624dd3

08008c40 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d02c      	beq.n	8008cb0 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8008c56:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc0 <bme68x_interface_init+0x80>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	b299      	uxth	r1, r3
 8008c5e:	2305      	movs	r3, #5
 8008c60:	2205      	movs	r2, #5
 8008c62:	4818      	ldr	r0, [pc, #96]	@ (8008cc4 <bme68x_interface_init+0x84>)
 8008c64:	f002 fbd2 	bl	800b40c <HAL_I2C_IsDeviceReady>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <bme68x_interface_init+0x3a>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d118      	bne.n	8008caa <bme68x_interface_init+0x6a>
 8008c78:	e004      	b.n	8008c84 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8008c7a:	23fe      	movs	r3, #254	@ 0xfe
 8008c7c:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8008c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c82:	e019      	b.n	8008cb8 <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a10      	ldr	r2, [pc, #64]	@ (8008cc8 <bme68x_interface_init+0x88>)
 8008c88:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8008ccc <bme68x_interface_init+0x8c>)
 8008c8e:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a0d      	ldr	r2, [pc, #52]	@ (8008cd0 <bme68x_interface_init+0x90>)
 8008c9a:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a08      	ldr	r2, [pc, #32]	@ (8008cc0 <bme68x_interface_init+0x80>)
 8008ca0:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	221e      	movs	r2, #30
 8008ca6:	739a      	strb	r2, [r3, #14]
 8008ca8:	e004      	b.n	8008cb4 <bme68x_interface_init+0x74>
			return -2;
 8008caa:	f06f 0301 	mvn.w	r3, #1
 8008cae:	e003      	b.n	8008cb8 <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8008cb0:	23ff      	movs	r3, #255	@ 0xff
 8008cb2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8008cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000004 	.word	0x20000004
 8008cc4:	20000530 	.word	0x20000530
 8008cc8:	08008bc1 	.word	0x08008bc1
 8008ccc:	08008b71 	.word	0x08008b71
 8008cd0:	08008c19 	.word	0x08008c19

08008cd4 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8008cda:	230a      	movs	r3, #10
 8008cdc:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8008cde:	2301      	movs	r3, #1
 8008ce0:	607b      	str	r3, [r7, #4]
 8008ce2:	e013      	b.n	8008d0c <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8008ce4:	4b14      	ldr	r3, [pc, #80]	@ (8008d38 <bme68x_GetGasReference+0x64>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff ff01 	bl	8008af0 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8008cee:	4b12      	ldr	r3, [pc, #72]	@ (8008d38 <bme68x_GetGasReference+0x64>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	ed93 7a06 	vldr	s14, [r3, #24]
 8008cf6:	4b11      	ldr	r3, [pc, #68]	@ (8008d3c <bme68x_GetGasReference+0x68>)
 8008cf8:	edd3 7a00 	vldr	s15, [r3]
 8008cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d00:	4b0e      	ldr	r3, [pc, #56]	@ (8008d3c <bme68x_GetGasReference+0x68>)
 8008d02:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	607b      	str	r3, [r7, #4]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	dde7      	ble.n	8008ce4 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8008d14:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <bme68x_GetGasReference+0x68>)
 8008d16:	edd3 6a00 	vldr	s13, [r3]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	ee07 3a90 	vmov	s15, r3
 8008d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d28:	4b04      	ldr	r3, [pc, #16]	@ (8008d3c <bme68x_GetGasReference+0x68>)
 8008d2a:	edc3 7a00 	vstr	s15, [r3]

}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200005d4 	.word	0x200005d4
 8008d3c:	20000008 	.word	0x20000008

08008d40 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8008d40:	b5b0      	push	{r4, r5, r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8008d46:	4b52      	ldr	r3, [pc, #328]	@ (8008e90 <bme68x_GetHumidityScore+0x150>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d4e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008e94 <bme68x_GetHumidityScore+0x154>
 8008d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	db0e      	blt.n	8008d7a <bme68x_GetHumidityScore+0x3a>
 8008d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8008e90 <bme68x_GetHumidityScore+0x150>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d64:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8008e98 <bme68x_GetHumidityScore+0x158>
 8008d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d70:	d803      	bhi.n	8008d7a <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8008d72:	4b4a      	ldr	r3, [pc, #296]	@ (8008e9c <bme68x_GetHumidityScore+0x15c>)
 8008d74:	4a4a      	ldr	r2, [pc, #296]	@ (8008ea0 <bme68x_GetHumidityScore+0x160>)
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	e076      	b.n	8008e68 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8008d7a:	4b45      	ldr	r3, [pc, #276]	@ (8008e90 <bme68x_GetHumidityScore+0x150>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d82:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8008e94 <bme68x_GetHumidityScore+0x154>
 8008d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8e:	d52e      	bpl.n	8008dee <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8008d90:	4b44      	ldr	r3, [pc, #272]	@ (8008ea4 <bme68x_GetHumidityScore+0x164>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7f7 fbcf 	bl	8000538 <__aeabi_f2d>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	f04f 0000 	mov.w	r0, #0
 8008da2:	4941      	ldr	r1, [pc, #260]	@ (8008ea8 <bme68x_GetHumidityScore+0x168>)
 8008da4:	f7f7 fd4a 	bl	800083c <__aeabi_ddiv>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4614      	mov	r4, r2
 8008dae:	461d      	mov	r5, r3
 8008db0:	4b37      	ldr	r3, [pc, #220]	@ (8008e90 <bme68x_GetHumidityScore+0x150>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 fbbe 	bl	8000538 <__aeabi_f2d>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f7f7 fc10 	bl	80005e8 <__aeabi_dmul>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	4b35      	ldr	r3, [pc, #212]	@ (8008eac <bme68x_GetHumidityScore+0x16c>)
 8008dd6:	f7f7 fc07 	bl	80005e8 <__aeabi_dmul>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4610      	mov	r0, r2
 8008de0:	4619      	mov	r1, r3
 8008de2:	f7f7 fe13 	bl	8000a0c <__aeabi_d2f>
 8008de6:	4603      	mov	r3, r0
 8008de8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e9c <bme68x_GetHumidityScore+0x15c>)
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	e03c      	b.n	8008e68 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008dee:	4b2d      	ldr	r3, [pc, #180]	@ (8008ea4 <bme68x_GetHumidityScore+0x164>)
 8008df0:	edd3 7a00 	vldr	s15, [r3]
 8008df4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8008eb0 <bme68x_GetHumidityScore+0x170>
 8008df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dfc:	ee17 0a90 	vmov	r0, s15
 8008e00:	f7f7 fb9a 	bl	8000538 <__aeabi_f2d>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	f04f 0000 	mov.w	r0, #0
 8008e0c:	4929      	ldr	r1, [pc, #164]	@ (8008eb4 <bme68x_GetHumidityScore+0x174>)
 8008e0e:	f7f7 fd15 	bl	800083c <__aeabi_ddiv>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4614      	mov	r4, r2
 8008e18:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 8008e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e90 <bme68x_GetHumidityScore+0x150>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7f7 fb89 	bl	8000538 <__aeabi_f2d>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	f7f7 fbdb 	bl	80005e8 <__aeabi_dmul>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	a313      	add	r3, pc, #76	@ (adr r3, 8008e88 <bme68x_GetHumidityScore+0x148>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 fa1c 	bl	800027c <__adddf3>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	f04f 0200 	mov.w	r2, #0
 8008e50:	4b16      	ldr	r3, [pc, #88]	@ (8008eac <bme68x_GetHumidityScore+0x16c>)
 8008e52:	f7f7 fbc9 	bl	80005e8 <__aeabi_dmul>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7f7 fdd5 	bl	8000a0c <__aeabi_d2f>
 8008e62:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008e64:	4a0d      	ldr	r2, [pc, #52]	@ (8008e9c <bme68x_GetHumidityScore+0x15c>)
 8008e66:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8008e68:	4b0c      	ldr	r3, [pc, #48]	@ (8008e9c <bme68x_GetHumidityScore+0x15c>)
 8008e6a:	edd3 7a00 	vldr	s15, [r3]
 8008e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e72:	edc7 7a01 	vstr	s15, [r7, #4]
 8008e76:	793b      	ldrb	r3, [r7, #4]
 8008e78:	b25b      	sxtb	r3, r3
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bdb0      	pop	{r4, r5, r7, pc}
 8008e82:	bf00      	nop
 8008e84:	f3af 8000 	nop.w
 8008e88:	ded6ba8c 	.word	0xded6ba8c
 8008e8c:	3fdaaaa7 	.word	0x3fdaaaa7
 8008e90:	200005d4 	.word	0x200005d4
 8008e94:	42180000 	.word	0x42180000
 8008e98:	42280000 	.word	0x42280000
 8008e9c:	20000600 	.word	0x20000600
 8008ea0:	41c80000 	.word	0x41c80000
 8008ea4:	2000000c 	.word	0x2000000c
 8008ea8:	3fd00000 	.word	0x3fd00000
 8008eac:	40590000 	.word	0x40590000
 8008eb0:	42c80000 	.word	0x42c80000
 8008eb4:	bfd00000 	.word	0xbfd00000

08008eb8 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 8008eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008ec0:	4b42      	ldr	r3, [pc, #264]	@ (8008fcc <bme68x_GetGasScore+0x114>)
 8008ec2:	ed93 7a00 	vldr	s14, [r3]
 8008ec6:	4b42      	ldr	r3, [pc, #264]	@ (8008fd0 <bme68x_GetGasScore+0x118>)
 8008ec8:	edd3 7a00 	vldr	s15, [r3]
 8008ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ed0:	ee17 0a90 	vmov	r0, s15
 8008ed4:	f7f7 fb30 	bl	8000538 <__aeabi_f2d>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	f04f 0000 	mov.w	r0, #0
 8008ee0:	493c      	ldr	r1, [pc, #240]	@ (8008fd4 <bme68x_GetGasScore+0x11c>)
 8008ee2:	f7f7 fcab 	bl	800083c <__aeabi_ddiv>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4614      	mov	r4, r2
 8008eec:	461d      	mov	r5, r3
 8008eee:	4b3a      	ldr	r3, [pc, #232]	@ (8008fd8 <bme68x_GetGasScore+0x120>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f7 fb20 	bl	8000538 <__aeabi_f2d>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 fb72 	bl	80005e8 <__aeabi_dmul>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4690      	mov	r8, r2
 8008f0a:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8008f0c:	4b30      	ldr	r3, [pc, #192]	@ (8008fd0 <bme68x_GetGasScore+0x118>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7f7 fb11 	bl	8000538 <__aeabi_f2d>
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8008fcc <bme68x_GetGasScore+0x114>)
 8008f1c:	ed93 7a00 	vldr	s14, [r3]
 8008f20:	4b2b      	ldr	r3, [pc, #172]	@ (8008fd0 <bme68x_GetGasScore+0x118>)
 8008f22:	edd3 7a00 	vldr	s15, [r3]
 8008f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f2a:	ee17 0a90 	vmov	r0, s15
 8008f2e:	f7f7 fb03 	bl	8000538 <__aeabi_f2d>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	f04f 0000 	mov.w	r0, #0
 8008f3a:	4926      	ldr	r1, [pc, #152]	@ (8008fd4 <bme68x_GetGasScore+0x11c>)
 8008f3c:	f7f7 fc7e 	bl	800083c <__aeabi_ddiv>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fb4e 	bl	80005e8 <__aeabi_dmul>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4640      	mov	r0, r8
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 f990 	bl	8000278 <__aeabi_dsub>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
			* 100.00;
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	4b1d      	ldr	r3, [pc, #116]	@ (8008fdc <bme68x_GetGasScore+0x124>)
 8008f66:	f7f7 fb3f 	bl	80005e8 <__aeabi_dmul>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7f7 fd4b 	bl	8000a0c <__aeabi_d2f>
 8008f76:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008f78:	4a19      	ldr	r2, [pc, #100]	@ (8008fe0 <bme68x_GetGasScore+0x128>)
 8008f7a:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8008f7c:	4b18      	ldr	r3, [pc, #96]	@ (8008fe0 <bme68x_GetGasScore+0x128>)
 8008f7e:	edd3 7a00 	vldr	s15, [r3]
 8008f82:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008fe4 <bme68x_GetGasScore+0x12c>
 8008f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	dd02      	ble.n	8008f96 <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8008f90:	4b13      	ldr	r3, [pc, #76]	@ (8008fe0 <bme68x_GetGasScore+0x128>)
 8008f92:	4a15      	ldr	r2, [pc, #84]	@ (8008fe8 <bme68x_GetGasScore+0x130>)
 8008f94:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 8008f96:	4b12      	ldr	r3, [pc, #72]	@ (8008fe0 <bme68x_GetGasScore+0x128>)
 8008f98:	edd3 7a00 	vldr	s15, [r3]
 8008f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	d503      	bpl.n	8008fae <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 8008fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe0 <bme68x_GetGasScore+0x128>)
 8008fa8:	f04f 0200 	mov.w	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]

	return gas_score;
 8008fae:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe0 <bme68x_GetGasScore+0x128>)
 8008fb0:	edd3 7a00 	vldr	s15, [r3]
 8008fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8008fbc:	793b      	ldrb	r3, [r7, #4]
 8008fbe:	b25b      	sxtb	r3, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000014 	.word	0x20000014
 8008fd0:	20000010 	.word	0x20000010
 8008fd4:	3fe80000 	.word	0x3fe80000
 8008fd8:	20000008 	.word	0x20000008
 8008fdc:	40590000 	.word	0x40590000
 8008fe0:	20000604 	.word	0x20000604
 8008fe4:	42960000 	.word	0x42960000
 8008fe8:	42960000 	.word	0x42960000

08008fec <bme68x_iaq>:

float bme68x_iaq() {
 8008fec:	b590      	push	{r4, r7, lr}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800906c <bme68x_iaq+0x80>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fea2 	bl	8008d40 <bme68x_GetHumidityScore>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8009000:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <bme68x_iaq+0x80>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff ff57 	bl	8008eb8 <bme68x_GetGasScore>
 800900a:	4603      	mov	r3, r0
 800900c:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 800900e:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
	float air_quality_score = (100
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009020:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8009024:	4b12      	ldr	r3, [pc, #72]	@ (8009070 <bme68x_iaq+0x84>)
 8009026:	f993 2000 	ldrsb.w	r2, [r3]
 800902a:	b2d3      	uxtb	r3, r2
 800902c:	3301      	adds	r3, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	b259      	sxtb	r1, r3
 8009032:	4b0f      	ldr	r3, [pc, #60]	@ (8009070 <bme68x_iaq+0x84>)
 8009034:	7019      	strb	r1, [r3, #0]
 8009036:	4b0f      	ldr	r3, [pc, #60]	@ (8009074 <bme68x_iaq+0x88>)
 8009038:	fb83 1302 	smull	r1, r3, r3, r2
 800903c:	1059      	asrs	r1, r3, #1
 800903e:	17d3      	asrs	r3, r2, #31
 8009040:	1ac9      	subs	r1, r1, r3
 8009042:	460b      	mov	r3, r1
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	b25b      	sxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8009050:	4b06      	ldr	r3, [pc, #24]	@ (800906c <bme68x_iaq+0x80>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff fe3d 	bl	8008cd4 <bme68x_GetGasReference>

	return air_quality_score;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	ee07 3a90 	vmov	s15, r3

}
 8009060:	eeb0 0a67 	vmov.f32	s0, s15
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bd90      	pop	{r4, r7, pc}
 800906a:	bf00      	nop
 800906c:	200005d4 	.word	0x200005d4
 8009070:	20000608 	.word	0x20000608
 8009074:	66666667 	.word	0x66666667

08009078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80090b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800907c:	f7fd fb94 	bl	80067a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009080:	480c      	ldr	r0, [pc, #48]	@ (80090b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009082:	490d      	ldr	r1, [pc, #52]	@ (80090b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009084:	4a0d      	ldr	r2, [pc, #52]	@ (80090bc <LoopForever+0xe>)
  movs r3, #0
 8009086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009088:	e002      	b.n	8009090 <LoopCopyDataInit>

0800908a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800908a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800908c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800908e:	3304      	adds	r3, #4

08009090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009094:	d3f9      	bcc.n	800908a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009096:	4a0a      	ldr	r2, [pc, #40]	@ (80090c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009098:	4c0a      	ldr	r4, [pc, #40]	@ (80090c4 <LoopForever+0x16>)
  movs r3, #0
 800909a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800909c:	e001      	b.n	80090a2 <LoopFillZerobss>

0800909e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800909e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090a0:	3204      	adds	r2, #4

080090a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090a4:	d3fb      	bcc.n	800909e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80090a6:	f005 f8d7 	bl	800e258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80090aa:	f7fc fa97 	bl	80055dc <main>

080090ae <LoopForever>:

LoopForever:
    b LoopForever
 80090ae:	e7fe      	b.n	80090ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80090b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80090b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80090b8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80090bc:	08010634 	.word	0x08010634
  ldr r2, =_sbss
 80090c0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80090c4:	2000075c 	.word	0x2000075c

080090c8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80090c8:	e7fe      	b.n	80090c8 <CAN1_RX0_IRQHandler>

080090ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090d4:	2003      	movs	r0, #3
 80090d6:	f001 fcb3 	bl	800aa40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090da:	200f      	movs	r0, #15
 80090dc:	f000 f80e 	bl	80090fc <HAL_InitTick>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	71fb      	strb	r3, [r7, #7]
 80090ea:	e001      	b.n	80090f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80090ec:	f7fd fa10 	bl	8006510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80090f0:	79fb      	ldrb	r3, [r7, #7]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009108:	4b17      	ldr	r3, [pc, #92]	@ (8009168 <HAL_InitTick+0x6c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d023      	beq.n	8009158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009110:	4b16      	ldr	r3, [pc, #88]	@ (800916c <HAL_InitTick+0x70>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	4b14      	ldr	r3, [pc, #80]	@ (8009168 <HAL_InitTick+0x6c>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800911e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009122:	fbb2 f3f3 	udiv	r3, r2, r3
 8009126:	4618      	mov	r0, r3
 8009128:	f001 fcbf 	bl	800aaaa <HAL_SYSTICK_Config>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10f      	bne.n	8009152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b0f      	cmp	r3, #15
 8009136:	d809      	bhi.n	800914c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009138:	2200      	movs	r2, #0
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	f001 fc89 	bl	800aa56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009144:	4a0a      	ldr	r2, [pc, #40]	@ (8009170 <HAL_InitTick+0x74>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e007      	b.n	800915c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	73fb      	strb	r3, [r7, #15]
 8009150:	e004      	b.n	800915c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
 8009156:	e001      	b.n	800915c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	2000001c 	.word	0x2000001c
 800916c:	20000000 	.word	0x20000000
 8009170:	20000018 	.word	0x20000018

08009174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009178:	4b06      	ldr	r3, [pc, #24]	@ (8009194 <HAL_IncTick+0x20>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	4b06      	ldr	r3, [pc, #24]	@ (8009198 <HAL_IncTick+0x24>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4413      	add	r3, r2
 8009184:	4a04      	ldr	r2, [pc, #16]	@ (8009198 <HAL_IncTick+0x24>)
 8009186:	6013      	str	r3, [r2, #0]
}
 8009188:	bf00      	nop
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	2000001c 	.word	0x2000001c
 8009198:	2000060c 	.word	0x2000060c

0800919c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  return uwTick;
 80091a0:	4b03      	ldr	r3, [pc, #12]	@ (80091b0 <HAL_GetTick+0x14>)
 80091a2:	681b      	ldr	r3, [r3, #0]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	2000060c 	.word	0x2000060c

080091b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091bc:	f7ff ffee 	bl	800919c <HAL_GetTick>
 80091c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d005      	beq.n	80091da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80091ce:	4b0a      	ldr	r3, [pc, #40]	@ (80091f8 <HAL_Delay+0x44>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80091da:	bf00      	nop
 80091dc:	f7ff ffde 	bl	800919c <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d8f7      	bhi.n	80091dc <HAL_Delay+0x28>
  {
  }
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	2000001c 	.word	0x2000001c

080091fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	609a      	str	r2, [r3, #8]
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	431a      	orrs	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3360      	adds	r3, #96	@ 0x60
 8009276:	461a      	mov	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4b08      	ldr	r3, [pc, #32]	@ (80092a8 <LL_ADC_SetOffset+0x44>)
 8009286:	4013      	ands	r3, r2
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	4313      	orrs	r3, r2
 8009294:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800929c:	bf00      	nop
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	03fff000 	.word	0x03fff000

080092ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3360      	adds	r3, #96	@ 0x60
 80092ba:	461a      	mov	r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3360      	adds	r3, #96	@ 0x60
 80092e8:	461a      	mov	r2, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	431a      	orrs	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009302:	bf00      	nop
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3330      	adds	r3, #48	@ 0x30
 8009344:	461a      	mov	r2, r3
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	0a1b      	lsrs	r3, r3, #8
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	f003 030c 	and.w	r3, r3, #12
 8009350:	4413      	add	r3, r2
 8009352:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 031f 	and.w	r3, r3, #31
 800935e:	211f      	movs	r1, #31
 8009360:	fa01 f303 	lsl.w	r3, r1, r3
 8009364:	43db      	mvns	r3, r3
 8009366:	401a      	ands	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	0e9b      	lsrs	r3, r3, #26
 800936c:	f003 011f 	and.w	r1, r3, #31
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f003 031f 	and.w	r3, r3, #31
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	431a      	orrs	r2, r3
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009380:	bf00      	nop
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009398:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b087      	sub	sp, #28
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3314      	adds	r3, #20
 80093c2:	461a      	mov	r2, r3
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	0e5b      	lsrs	r3, r3, #25
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	4413      	add	r3, r2
 80093d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	0d1b      	lsrs	r3, r3, #20
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	2107      	movs	r1, #7
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	43db      	mvns	r3, r3
 80093e6:	401a      	ands	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	0d1b      	lsrs	r3, r3, #20
 80093ec:	f003 031f 	and.w	r3, r3, #31
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	fa01 f303 	lsl.w	r3, r1, r3
 80093f6:	431a      	orrs	r2, r3
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009420:	43db      	mvns	r3, r3
 8009422:	401a      	ands	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f003 0318 	and.w	r3, r3, #24
 800942a:	4908      	ldr	r1, [pc, #32]	@ (800944c <LL_ADC_SetChannelSingleDiff+0x44>)
 800942c:	40d9      	lsrs	r1, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	400b      	ands	r3, r1
 8009432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009436:	431a      	orrs	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	0007ffff 	.word	0x0007ffff

08009450 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6093      	str	r3, [r2, #8]
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009488:	d101      	bne.n	800948e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80094ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094d8:	d101      	bne.n	80094de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009500:	f043 0201 	orr.w	r2, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009528:	f043 0202 	orr.w	r2, r3, #2
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b01      	cmp	r3, #1
 800954e:	d101      	bne.n	8009554 <LL_ADC_IsEnabled+0x18>
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <LL_ADC_IsEnabled+0x1a>
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b02      	cmp	r3, #2
 8009574:	d101      	bne.n	800957a <LL_ADC_IsDisableOngoing+0x18>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <LL_ADC_IsDisableOngoing+0x1a>
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800959c:	f043 0204 	orr.w	r2, r3, #4
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d101      	bne.n	80095c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d101      	bne.n	80095ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009608:	2300      	movs	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e126      	b.n	8009864 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009620:	2b00      	cmp	r3, #0
 8009622:	d109      	bne.n	8009638 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7f7 fc6d 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff ff19 	bl	8009474 <LL_ADC_IsDeepPowerDownEnabled>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff feff 	bl	8009450 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff ff34 	bl	80094c4 <LL_ADC_IsInternalRegulatorEnabled>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d115      	bne.n	800968e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff ff18 	bl	800949c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800966c:	4b7f      	ldr	r3, [pc, #508]	@ (800986c <HAL_ADC_Init+0x270>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	099b      	lsrs	r3, r3, #6
 8009672:	4a7f      	ldr	r2, [pc, #508]	@ (8009870 <HAL_ADC_Init+0x274>)
 8009674:	fba2 2303 	umull	r2, r3, r2, r3
 8009678:	099b      	lsrs	r3, r3, #6
 800967a:	3301      	adds	r3, #1
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009680:	e002      	b.n	8009688 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b01      	subs	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1f9      	bne.n	8009682 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff ff16 	bl	80094c4 <LL_ADC_IsInternalRegulatorEnabled>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10d      	bne.n	80096ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a2:	f043 0210 	orr.w	r2, r3, #16
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ae:	f043 0201 	orr.w	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff ff76 	bl	80095b0 <LL_ADC_REG_IsConversionOngoing>
 80096c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ca:	f003 0310 	and.w	r3, r3, #16
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f040 80bf 	bne.w	8009852 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f040 80bb 	bne.w	8009852 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80096e4:	f043 0202 	orr.w	r2, r3, #2
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff ff23 	bl	800953c <LL_ADC_IsEnabled>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10b      	bne.n	8009714 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80096fc:	485d      	ldr	r0, [pc, #372]	@ (8009874 <HAL_ADC_Init+0x278>)
 80096fe:	f7ff ff1d 	bl	800953c <LL_ADC_IsEnabled>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d105      	bne.n	8009714 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4619      	mov	r1, r3
 800970e:	485a      	ldr	r0, [pc, #360]	@ (8009878 <HAL_ADC_Init+0x27c>)
 8009710:	f7ff fd74 	bl	80091fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7e5b      	ldrb	r3, [r3, #25]
 8009718:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800971e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009724:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800972a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009732:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009734:	4313      	orrs	r3, r2
 8009736:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d106      	bne.n	8009750 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009746:	3b01      	subs	r3, #1
 8009748:	045b      	lsls	r3, r3, #17
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	4313      	orrs	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009764:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	4313      	orrs	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	4b42      	ldr	r3, [pc, #264]	@ (800987c <HAL_ADC_Init+0x280>)
 8009774:	4013      	ands	r3, r2
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	6812      	ldr	r2, [r2, #0]
 800977a:	69b9      	ldr	r1, [r7, #24]
 800977c:	430b      	orrs	r3, r1
 800977e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff ff26 	bl	80095d6 <LL_ADC_INJ_IsConversionOngoing>
 800978a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d13d      	bne.n	800980e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d13a      	bne.n	800980e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800979c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80097a6:	4313      	orrs	r3, r2
 80097a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097b4:	f023 0302 	bic.w	r3, r3, #2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	69b9      	ldr	r1, [r7, #24]
 80097be:	430b      	orrs	r3, r1
 80097c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d118      	bne.n	80097fe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80097d6:	f023 0304 	bic.w	r3, r3, #4
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80097e2:	4311      	orrs	r1, r2
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80097e8:	4311      	orrs	r1, r2
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80097ee:	430a      	orrs	r2, r1
 80097f0:	431a      	orrs	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0201 	orr.w	r2, r2, #1
 80097fa:	611a      	str	r2, [r3, #16]
 80097fc:	e007      	b.n	800980e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0201 	bic.w	r2, r2, #1
 800980c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d10c      	bne.n	8009830 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981c:	f023 010f 	bic.w	r1, r3, #15
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	1e5a      	subs	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	631a      	str	r2, [r3, #48]	@ 0x30
 800982e:	e007      	b.n	8009840 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 020f 	bic.w	r2, r2, #15
 800983e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	f043 0201 	orr.w	r2, r3, #1
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009850:	e007      	b.n	8009862 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009856:	f043 0210 	orr.w	r2, r3, #16
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009862:	7ffb      	ldrb	r3, [r7, #31]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000000 	.word	0x20000000
 8009870:	053e2d63 	.word	0x053e2d63
 8009874:	50040000 	.word	0x50040000
 8009878:	50040300 	.word	0x50040300
 800987c:	fff0c007 	.word	0xfff0c007

08009880 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff fe8f 	bl	80095b0 <LL_ADC_REG_IsConversionOngoing>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 80a0 	bne.w	80099da <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d101      	bne.n	80098a8 <HAL_ADC_Start_IT+0x28>
 80098a4:	2302      	movs	r3, #2
 80098a6:	e09b      	b.n	80099e0 <HAL_ADC_Start_IT+0x160>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fe51 	bl	800a558 <ADC_Enable>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f040 8087 	bne.w	80099d0 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80098ca:	f023 0301 	bic.w	r3, r3, #1
 80098ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e6:	f023 0206 	bic.w	r2, r3, #6
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80098ee:	e002      	b.n	80098f6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	221c      	movs	r2, #28
 80098fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 021c 	bic.w	r2, r2, #28
 8009914:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	2b08      	cmp	r3, #8
 800991c:	d108      	bne.n	8009930 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0208 	orr.w	r2, r2, #8
 800992c:	605a      	str	r2, [r3, #4]
          break;
 800992e:	e008      	b.n	8009942 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0204 	orr.w	r2, r2, #4
 800993e:	605a      	str	r2, [r3, #4]
          break;
 8009940:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009946:	2b00      	cmp	r3, #0
 8009948:	d107      	bne.n	800995a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0210 	orr.w	r2, r2, #16
 8009958:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d02d      	beq.n	80099c4 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009970:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	2b08      	cmp	r3, #8
 800997e:	d110      	bne.n	80099a2 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0220 	bic.w	r2, r2, #32
 800998e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800999e:	605a      	str	r2, [r3, #4]
            break;
 80099a0:	e010      	b.n	80099c4 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099b0:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f042 0220 	orr.w	r2, r2, #32
 80099c0:	605a      	str	r2, [r3, #4]
            break;
 80099c2:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff fddd 	bl	8009588 <LL_ADC_REG_StartConversion>
 80099ce:	e006      	b.n	80099de <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80099d8:	e001      	b.n	80099de <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80099da:	2302      	movs	r3, #2
 80099dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b088      	sub	sp, #32
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d017      	beq.n	8009a58 <HAL_ADC_IRQHandler+0x56>
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a36:	f003 0310 	and.w	r3, r3, #16
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a42:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 ff1e 	bl	800a88c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2202      	movs	r2, #2
 8009a56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <HAL_ADC_IRQHandler+0x6a>
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d109      	bne.n	8009a80 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d05e      	beq.n	8009b34 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f003 0308 	and.w	r3, r3, #8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d059      	beq.n	8009b34 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff fc36 	bl	800930e <LL_ADC_REG_IsTriggerSourceSWStart>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d03e      	beq.n	8009b26 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d135      	bne.n	8009b26 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0308 	and.w	r3, r3, #8
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d12e      	bne.n	8009b26 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff fd6f 	bl	80095b0 <LL_ADC_REG_IsConversionOngoing>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d11a      	bne.n	8009b0e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 020c 	bic.w	r2, r2, #12
 8009ae6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d112      	bne.n	8009b26 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b04:	f043 0201 	orr.w	r2, r3, #1
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8009b0c:	e00b      	b.n	8009b26 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b12:	f043 0210 	orr.w	r2, r3, #16
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1e:	f043 0201 	orr.w	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7fb fdea 	bl	8005700 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	220c      	movs	r2, #12
 8009b32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <HAL_ADC_IRQHandler+0x146>
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d109      	bne.n	8009b5c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d072      	beq.n	8009c38 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d06d      	beq.n	8009c38 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d105      	bne.n	8009b74 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7ff fc07 	bl	800938c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009b7e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff fbc2 	bl	800930e <LL_ADC_REG_IsTriggerSourceSWStart>
 8009b8a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d047      	beq.n	8009c2a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <HAL_ADC_IRQHandler+0x1b2>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d03f      	beq.n	8009c2a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d13a      	bne.n	8009c2a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bbe:	2b40      	cmp	r3, #64	@ 0x40
 8009bc0:	d133      	bne.n	8009c2a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d12e      	bne.n	8009c2a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fd00 	bl	80095d6 <LL_ADC_INJ_IsConversionOngoing>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11a      	bne.n	8009c12 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009bea:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d112      	bne.n	8009c2a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c08:	f043 0201 	orr.w	r2, r3, #1
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c10:	e00b      	b.n	8009c2a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c16:	f043 0210 	orr.w	r2, r3, #16
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c22:	f043 0201 	orr.w	r2, r3, #1
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fe06 	bl	800a83c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2260      	movs	r2, #96	@ 0x60
 8009c36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d011      	beq.n	8009c66 <HAL_ADC_IRQHandler+0x264>
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00c      	beq.n	8009c66 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f886 	bl	8009d6a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2280      	movs	r2, #128	@ 0x80
 8009c64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d012      	beq.n	8009c96 <HAL_ADC_IRQHandler+0x294>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00d      	beq.n	8009c96 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fdec 	bl	800a864 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d012      	beq.n	8009cc6 <HAL_ADC_IRQHandler+0x2c4>
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00d      	beq.n	8009cc6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fdde 	bl	800a878 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02a      	beq.n	8009d26 <HAL_ADC_IRQHandler+0x324>
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f003 0310 	and.w	r3, r3, #16
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d025      	beq.n	8009d26 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d102      	bne.n	8009ce8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	e008      	b.n	8009cfa <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10e      	bne.n	8009d1e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d04:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d10:	f043 0202 	orr.w	r2, r3, #2
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f830 	bl	8009d7e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2210      	movs	r2, #16
 8009d24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d018      	beq.n	8009d62 <HAL_ADC_IRQHandler+0x360>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d013      	beq.n	8009d62 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4a:	f043 0208 	orr.w	r2, r3, #8
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd77 	bl	800a850 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009d62:	bf00      	nop
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
	...

08009d94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b0b6      	sub	sp, #216	@ 0xd8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <HAL_ADC_ConfigChannel+0x22>
 8009db2:	2302      	movs	r3, #2
 8009db4:	e3bb      	b.n	800a52e <HAL_ADC_ConfigChannel+0x79a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fbf4 	bl	80095b0 <LL_ADC_REG_IsConversionOngoing>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 83a0 	bne.w	800a510 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2b05      	cmp	r3, #5
 8009dde:	d824      	bhi.n	8009e2a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	3b02      	subs	r3, #2
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d81b      	bhi.n	8009e22 <HAL_ADC_ConfigChannel+0x8e>
 8009dea:	a201      	add	r2, pc, #4	@ (adr r2, 8009df0 <HAL_ADC_ConfigChannel+0x5c>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e09 	.word	0x08009e09
 8009df8:	08009e11 	.word	0x08009e11
 8009dfc:	08009e19 	.word	0x08009e19
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009e00:	230c      	movs	r3, #12
 8009e02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e06:	e010      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009e08:	2312      	movs	r3, #18
 8009e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e0e:	e00c      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009e10:	2318      	movs	r3, #24
 8009e12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e16:	e008      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e20:	e003      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8009e22:	2306      	movs	r3, #6
 8009e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e28:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009e38:	f7ff fa7c 	bl	8009334 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff fbb5 	bl	80095b0 <LL_ADC_REG_IsConversionOngoing>
 8009e46:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fbc1 	bl	80095d6 <LL_ADC_INJ_IsConversionOngoing>
 8009e54:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 81a4 	bne.w	800a1aa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f040 819f 	bne.w	800a1aa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	f7ff fa9a 	bl	80093b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	695a      	ldr	r2, [r3, #20]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	08db      	lsrs	r3, r3, #3
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	fa02 f303 	lsl.w	r3, r2, r3
 8009e94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d00a      	beq.n	8009eb6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	6919      	ldr	r1, [r3, #16]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009eb0:	f7ff f9d8 	bl	8009264 <LL_ADC_SetOffset>
 8009eb4:	e179      	b.n	800a1aa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2100      	movs	r1, #0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff f9f5 	bl	80092ac <LL_ADC_GetOffsetChannel>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <HAL_ADC_ConfigChannel+0x14e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff f9ea 	bl	80092ac <LL_ADC_GetOffsetChannel>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	0e9b      	lsrs	r3, r3, #26
 8009edc:	f003 021f 	and.w	r2, r3, #31
 8009ee0:	e01e      	b.n	8009f20 <HAL_ADC_ConfigChannel+0x18c>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff f9df 	bl	80092ac <LL_ADC_GetOffsetChannel>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ef8:	fa93 f3a3 	rbit	r3, r3
 8009efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8009f10:	2320      	movs	r3, #32
 8009f12:	e004      	b.n	8009f1e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8009f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009f18:	fab3 f383 	clz	r3, r3
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d105      	bne.n	8009f38 <HAL_ADC_ConfigChannel+0x1a4>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	0e9b      	lsrs	r3, r3, #26
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	e018      	b.n	8009f6a <HAL_ADC_ConfigChannel+0x1d6>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f44:	fa93 f3a3 	rbit	r3, r3
 8009f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8009f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	e004      	b.n	8009f6a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009f64:	fab3 f383 	clz	r3, r3
 8009f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d106      	bne.n	8009f7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff f9ae 	bl	80092d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2101      	movs	r1, #1
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff f992 	bl	80092ac <LL_ADC_GetOffsetChannel>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10a      	bne.n	8009fa8 <HAL_ADC_ConfigChannel+0x214>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2101      	movs	r1, #1
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7ff f987 	bl	80092ac <LL_ADC_GetOffsetChannel>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	0e9b      	lsrs	r3, r3, #26
 8009fa2:	f003 021f 	and.w	r2, r3, #31
 8009fa6:	e01e      	b.n	8009fe6 <HAL_ADC_ConfigChannel+0x252>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2101      	movs	r1, #1
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff f97c 	bl	80092ac <LL_ADC_GetOffsetChannel>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fbe:	fa93 f3a3 	rbit	r3, r3
 8009fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8009fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8009fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8009fd6:	2320      	movs	r3, #32
 8009fd8:	e004      	b.n	8009fe4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8009fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fde:	fab3 f383 	clz	r3, r3
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d105      	bne.n	8009ffe <HAL_ADC_ConfigChannel+0x26a>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	0e9b      	lsrs	r3, r3, #26
 8009ff8:	f003 031f 	and.w	r3, r3, #31
 8009ffc:	e018      	b.n	800a030 <HAL_ADC_ConfigChannel+0x29c>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a006:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a00a:	fa93 f3a3 	rbit	r3, r3
 800a00e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a012:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a016:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a01a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a022:	2320      	movs	r3, #32
 800a024:	e004      	b.n	800a030 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800a026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a02a:	fab3 f383 	clz	r3, r3
 800a02e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a030:	429a      	cmp	r2, r3
 800a032:	d106      	bne.n	800a042 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2200      	movs	r2, #0
 800a03a:	2101      	movs	r1, #1
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7ff f94b 	bl	80092d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2102      	movs	r1, #2
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff f92f 	bl	80092ac <LL_ADC_GetOffsetChannel>
 800a04e:	4603      	mov	r3, r0
 800a050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <HAL_ADC_ConfigChannel+0x2da>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2102      	movs	r1, #2
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff f924 	bl	80092ac <LL_ADC_GetOffsetChannel>
 800a064:	4603      	mov	r3, r0
 800a066:	0e9b      	lsrs	r3, r3, #26
 800a068:	f003 021f 	and.w	r2, r3, #31
 800a06c:	e01e      	b.n	800a0ac <HAL_ADC_ConfigChannel+0x318>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2102      	movs	r1, #2
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff f919 	bl	80092ac <LL_ADC_GetOffsetChannel>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a084:	fa93 f3a3 	rbit	r3, r3
 800a088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a08c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800a09c:	2320      	movs	r3, #32
 800a09e:	e004      	b.n	800a0aa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800a0a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0a4:	fab3 f383 	clz	r3, r3
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d105      	bne.n	800a0c4 <HAL_ADC_ConfigChannel+0x330>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	0e9b      	lsrs	r3, r3, #26
 800a0be:	f003 031f 	and.w	r3, r3, #31
 800a0c2:	e014      	b.n	800a0ee <HAL_ADC_ConfigChannel+0x35a>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0cc:	fa93 f3a3 	rbit	r3, r3
 800a0d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a0d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a0d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800a0e0:	2320      	movs	r3, #32
 800a0e2:	e004      	b.n	800a0ee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800a0e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0e8:	fab3 f383 	clz	r3, r3
 800a0ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d106      	bne.n	800a100 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2102      	movs	r1, #2
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff f8ec 	bl	80092d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2103      	movs	r1, #3
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff f8d0 	bl	80092ac <LL_ADC_GetOffsetChannel>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10a      	bne.n	800a12c <HAL_ADC_ConfigChannel+0x398>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2103      	movs	r1, #3
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff f8c5 	bl	80092ac <LL_ADC_GetOffsetChannel>
 800a122:	4603      	mov	r3, r0
 800a124:	0e9b      	lsrs	r3, r3, #26
 800a126:	f003 021f 	and.w	r2, r3, #31
 800a12a:	e017      	b.n	800a15c <HAL_ADC_ConfigChannel+0x3c8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2103      	movs	r1, #3
 800a132:	4618      	mov	r0, r3
 800a134:	f7ff f8ba 	bl	80092ac <LL_ADC_GetOffsetChannel>
 800a138:	4603      	mov	r3, r0
 800a13a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a13c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a13e:	fa93 f3a3 	rbit	r3, r3
 800a142:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a146:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a148:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800a14e:	2320      	movs	r3, #32
 800a150:	e003      	b.n	800a15a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800a152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a154:	fab3 f383 	clz	r3, r3
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a164:	2b00      	cmp	r3, #0
 800a166:	d105      	bne.n	800a174 <HAL_ADC_ConfigChannel+0x3e0>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	0e9b      	lsrs	r3, r3, #26
 800a16e:	f003 031f 	and.w	r3, r3, #31
 800a172:	e011      	b.n	800a198 <HAL_ADC_ConfigChannel+0x404>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a17a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a17c:	fa93 f3a3 	rbit	r3, r3
 800a180:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a184:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800a18c:	2320      	movs	r3, #32
 800a18e:	e003      	b.n	800a198 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800a190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a192:	fab3 f383 	clz	r3, r3
 800a196:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a198:	429a      	cmp	r2, r3
 800a19a:	d106      	bne.n	800a1aa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2103      	movs	r1, #3
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff f897 	bl	80092d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff f9c4 	bl	800953c <LL_ADC_IsEnabled>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f040 8140 	bne.w	800a43c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	f7ff f91d 	bl	8009408 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	4a8f      	ldr	r2, [pc, #572]	@ (800a410 <HAL_ADC_ConfigChannel+0x67c>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	f040 8131 	bne.w	800a43c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10b      	bne.n	800a202 <HAL_ADC_ConfigChannel+0x46e>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	0e9b      	lsrs	r3, r3, #26
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	f003 031f 	and.w	r3, r3, #31
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	bf94      	ite	ls
 800a1fa:	2301      	movls	r3, #1
 800a1fc:	2300      	movhi	r3, #0
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	e019      	b.n	800a236 <HAL_ADC_ConfigChannel+0x4a2>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a208:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a20a:	fa93 f3a3 	rbit	r3, r3
 800a20e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a212:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a214:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a21a:	2320      	movs	r3, #32
 800a21c:	e003      	b.n	800a226 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a220:	fab3 f383 	clz	r3, r3
 800a224:	b2db      	uxtb	r3, r3
 800a226:	3301      	adds	r3, #1
 800a228:	f003 031f 	and.w	r3, r3, #31
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	bf94      	ite	ls
 800a230:	2301      	movls	r3, #1
 800a232:	2300      	movhi	r3, #0
 800a234:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a236:	2b00      	cmp	r3, #0
 800a238:	d079      	beq.n	800a32e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <HAL_ADC_ConfigChannel+0x4c2>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	0e9b      	lsrs	r3, r3, #26
 800a24c:	3301      	adds	r3, #1
 800a24e:	069b      	lsls	r3, r3, #26
 800a250:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a254:	e015      	b.n	800a282 <HAL_ADC_ConfigChannel+0x4ee>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a25e:	fa93 f3a3 	rbit	r3, r3
 800a262:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a266:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a26e:	2320      	movs	r3, #32
 800a270:	e003      	b.n	800a27a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a274:	fab3 f383 	clz	r3, r3
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	3301      	adds	r3, #1
 800a27c:	069b      	lsls	r3, r3, #26
 800a27e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d109      	bne.n	800a2a2 <HAL_ADC_ConfigChannel+0x50e>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	0e9b      	lsrs	r3, r3, #26
 800a294:	3301      	adds	r3, #1
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	2101      	movs	r1, #1
 800a29c:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a0:	e017      	b.n	800a2d2 <HAL_ADC_ConfigChannel+0x53e>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2aa:	fa93 f3a3 	rbit	r3, r3
 800a2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a2ba:	2320      	movs	r3, #32
 800a2bc:	e003      	b.n	800a2c6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a2be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2c0:	fab3 f383 	clz	r3, r3
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	f003 031f 	and.w	r3, r3, #31
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d2:	ea42 0103 	orr.w	r1, r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10a      	bne.n	800a2f8 <HAL_ADC_ConfigChannel+0x564>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	0e9b      	lsrs	r3, r3, #26
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	f003 021f 	and.w	r2, r3, #31
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	e018      	b.n	800a32a <HAL_ADC_ConfigChannel+0x596>
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a300:	fa93 f3a3 	rbit	r3, r3
 800a304:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a310:	2320      	movs	r3, #32
 800a312:	e003      	b.n	800a31c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	fab3 f383 	clz	r3, r3
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	3301      	adds	r3, #1
 800a31e:	f003 021f 	and.w	r2, r3, #31
 800a322:	4613      	mov	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4413      	add	r3, r2
 800a328:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a32a:	430b      	orrs	r3, r1
 800a32c:	e081      	b.n	800a432 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a336:	2b00      	cmp	r3, #0
 800a338:	d107      	bne.n	800a34a <HAL_ADC_ConfigChannel+0x5b6>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	0e9b      	lsrs	r3, r3, #26
 800a340:	3301      	adds	r3, #1
 800a342:	069b      	lsls	r3, r3, #26
 800a344:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a348:	e015      	b.n	800a376 <HAL_ADC_ConfigChannel+0x5e2>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a352:	fa93 f3a3 	rbit	r3, r3
 800a356:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a362:	2320      	movs	r3, #32
 800a364:	e003      	b.n	800a36e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a368:	fab3 f383 	clz	r3, r3
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	3301      	adds	r3, #1
 800a370:	069b      	lsls	r3, r3, #26
 800a372:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <HAL_ADC_ConfigChannel+0x602>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	0e9b      	lsrs	r3, r3, #26
 800a388:	3301      	adds	r3, #1
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	2101      	movs	r1, #1
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	e017      	b.n	800a3c6 <HAL_ADC_ConfigChannel+0x632>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	fa93 f3a3 	rbit	r3, r3
 800a3a2:	61bb      	str	r3, [r7, #24]
  return result;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a3ae:	2320      	movs	r3, #32
 800a3b0:	e003      	b.n	800a3ba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	fab3 f383 	clz	r3, r3
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	f003 031f 	and.w	r3, r3, #31
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c6:	ea42 0103 	orr.w	r1, r2, r3
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10d      	bne.n	800a3f2 <HAL_ADC_ConfigChannel+0x65e>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	0e9b      	lsrs	r3, r3, #26
 800a3dc:	3301      	adds	r3, #1
 800a3de:	f003 021f 	and.w	r2, r3, #31
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3b1e      	subs	r3, #30
 800a3ea:	051b      	lsls	r3, r3, #20
 800a3ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a3f0:	e01e      	b.n	800a430 <HAL_ADC_ConfigChannel+0x69c>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	fa93 f3a3 	rbit	r3, r3
 800a3fe:	60fb      	str	r3, [r7, #12]
  return result;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d104      	bne.n	800a414 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a40a:	2320      	movs	r3, #32
 800a40c:	e006      	b.n	800a41c <HAL_ADC_ConfigChannel+0x688>
 800a40e:	bf00      	nop
 800a410:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	fab3 f383 	clz	r3, r3
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	3301      	adds	r3, #1
 800a41e:	f003 021f 	and.w	r2, r3, #31
 800a422:	4613      	mov	r3, r2
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	4413      	add	r3, r2
 800a428:	3b1e      	subs	r3, #30
 800a42a:	051b      	lsls	r3, r3, #20
 800a42c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a430:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a436:	4619      	mov	r1, r3
 800a438:	f7fe ffbb 	bl	80093b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	4b3d      	ldr	r3, [pc, #244]	@ (800a538 <HAL_ADC_ConfigChannel+0x7a4>)
 800a442:	4013      	ands	r3, r2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d06c      	beq.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a448:	483c      	ldr	r0, [pc, #240]	@ (800a53c <HAL_ADC_ConfigChannel+0x7a8>)
 800a44a:	f7fe fefd 	bl	8009248 <LL_ADC_GetCommonPathInternalCh>
 800a44e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a3a      	ldr	r2, [pc, #232]	@ (800a540 <HAL_ADC_ConfigChannel+0x7ac>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d127      	bne.n	800a4ac <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a45c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d121      	bne.n	800a4ac <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a35      	ldr	r2, [pc, #212]	@ (800a544 <HAL_ADC_ConfigChannel+0x7b0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d157      	bne.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a476:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a47a:	4619      	mov	r1, r3
 800a47c:	482f      	ldr	r0, [pc, #188]	@ (800a53c <HAL_ADC_ConfigChannel+0x7a8>)
 800a47e:	f7fe fed0 	bl	8009222 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a482:	4b31      	ldr	r3, [pc, #196]	@ (800a548 <HAL_ADC_ConfigChannel+0x7b4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	099b      	lsrs	r3, r3, #6
 800a488:	4a30      	ldr	r2, [pc, #192]	@ (800a54c <HAL_ADC_ConfigChannel+0x7b8>)
 800a48a:	fba2 2303 	umull	r2, r3, r2, r3
 800a48e:	099b      	lsrs	r3, r3, #6
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	4613      	mov	r3, r2
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a49c:	e002      	b.n	800a4a4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f9      	bne.n	800a49e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a4aa:	e03a      	b.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a27      	ldr	r2, [pc, #156]	@ (800a550 <HAL_ADC_ConfigChannel+0x7bc>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d113      	bne.n	800a4de <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a4b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10d      	bne.n	800a4de <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a544 <HAL_ADC_ConfigChannel+0x7b0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d12a      	bne.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a4cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4819      	ldr	r0, [pc, #100]	@ (800a53c <HAL_ADC_ConfigChannel+0x7a8>)
 800a4d8:	f7fe fea3 	bl	8009222 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a4dc:	e021      	b.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a554 <HAL_ADC_ConfigChannel+0x7c0>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d11c      	bne.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a4e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d116      	bne.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a12      	ldr	r2, [pc, #72]	@ (800a544 <HAL_ADC_ConfigChannel+0x7b0>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d111      	bne.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a4fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a502:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a506:	4619      	mov	r1, r3
 800a508:	480c      	ldr	r0, [pc, #48]	@ (800a53c <HAL_ADC_ConfigChannel+0x7a8>)
 800a50a:	f7fe fe8a 	bl	8009222 <LL_ADC_SetCommonPathInternalCh>
 800a50e:	e008      	b.n	800a522 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a514:	f043 0220 	orr.w	r2, r3, #32
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a52a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a52e:	4618      	mov	r0, r3
 800a530:	37d8      	adds	r7, #216	@ 0xd8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	80080000 	.word	0x80080000
 800a53c:	50040300 	.word	0x50040300
 800a540:	c7520000 	.word	0xc7520000
 800a544:	50040000 	.word	0x50040000
 800a548:	20000000 	.word	0x20000000
 800a54c:	053e2d63 	.word	0x053e2d63
 800a550:	cb840000 	.word	0xcb840000
 800a554:	80000001 	.word	0x80000001

0800a558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a560:	2300      	movs	r3, #0
 800a562:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe ffe7 	bl	800953c <LL_ADC_IsEnabled>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d169      	bne.n	800a648 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689a      	ldr	r2, [r3, #8]
 800a57a:	4b36      	ldr	r3, [pc, #216]	@ (800a654 <ADC_Enable+0xfc>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00d      	beq.n	800a59e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a586:	f043 0210 	orr.w	r2, r3, #16
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a592:	f043 0201 	orr.w	r2, r3, #1
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e055      	b.n	800a64a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe ffa2 	bl	80094ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a5a8:	482b      	ldr	r0, [pc, #172]	@ (800a658 <ADC_Enable+0x100>)
 800a5aa:	f7fe fe4d 	bl	8009248 <LL_ADC_GetCommonPathInternalCh>
 800a5ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a5b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d013      	beq.n	800a5e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a5b8:	4b28      	ldr	r3, [pc, #160]	@ (800a65c <ADC_Enable+0x104>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	099b      	lsrs	r3, r3, #6
 800a5be:	4a28      	ldr	r2, [pc, #160]	@ (800a660 <ADC_Enable+0x108>)
 800a5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c4:	099b      	lsrs	r3, r3, #6
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a5d2:	e002      	b.n	800a5da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1f9      	bne.n	800a5d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a5e0:	f7fe fddc 	bl	800919c <HAL_GetTick>
 800a5e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a5e6:	e028      	b.n	800a63a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe ffa5 	bl	800953c <LL_ADC_IsEnabled>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d104      	bne.n	800a602 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe ff75 	bl	80094ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a602:	f7fe fdcb 	bl	800919c <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d914      	bls.n	800a63a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d00d      	beq.n	800a63a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a622:	f043 0210 	orr.w	r2, r3, #16
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a62e:	f043 0201 	orr.w	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e007      	b.n	800a64a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b01      	cmp	r3, #1
 800a646:	d1cf      	bne.n	800a5e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	8000003f 	.word	0x8000003f
 800a658:	50040300 	.word	0x50040300
 800a65c:	20000000 	.word	0x20000000
 800a660:	053e2d63 	.word	0x053e2d63

0800a664 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe ff76 	bl	8009562 <LL_ADC_IsDisableOngoing>
 800a676:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe ff5d 	bl	800953c <LL_ADC_IsEnabled>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d047      	beq.n	800a718 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d144      	bne.n	800a718 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f003 030d 	and.w	r3, r3, #13
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d10c      	bne.n	800a6b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe ff37 	bl	8009514 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a6ae:	f7fe fd75 	bl	800919c <HAL_GetTick>
 800a6b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a6b4:	e029      	b.n	800a70a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ba:	f043 0210 	orr.w	r2, r3, #16
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c6:	f043 0201 	orr.w	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e023      	b.n	800a71a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a6d2:	f7fe fd63 	bl	800919c <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d914      	bls.n	800a70a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00d      	beq.n	800a70a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f2:	f043 0210 	orr.w	r2, r3, #16
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6fe:	f043 0201 	orr.w	r2, r3, #1
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e007      	b.n	800a71a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1dc      	bne.n	800a6d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <LL_ADC_StartCalibration>:
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a734:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a73e:	4313      	orrs	r3, r2
 800a740:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	609a      	str	r2, [r3, #8]
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <LL_ADC_IsCalibrationOnGoing>:
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a768:	d101      	bne.n	800a76e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a786:	2300      	movs	r3, #0
 800a788:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_ADCEx_Calibration_Start+0x1c>
 800a794:	2302      	movs	r3, #2
 800a796:	e04d      	b.n	800a834 <HAL_ADCEx_Calibration_Start+0xb8>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff5f 	bl	800a664 <ADC_Disable>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d136      	bne.n	800a81e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a7b8:	f023 0302 	bic.w	r3, r3, #2
 800a7bc:	f043 0202 	orr.w	r2, r3, #2
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff ffa9 	bl	800a722 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a7d0:	e014      	b.n	800a7fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800a7de:	d30d      	bcc.n	800a7fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e4:	f023 0312 	bic.w	r3, r3, #18
 800a7e8:	f043 0210 	orr.w	r2, r3, #16
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e01b      	b.n	800a834 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff ffa7 	bl	800a754 <LL_ADC_IsCalibrationOnGoing>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e2      	bne.n	800a7d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a810:	f023 0303 	bic.w	r3, r3, #3
 800a814:	f043 0201 	orr.w	r2, r3, #1
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a81c:	e005      	b.n	800a82a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a822:	f043 0210 	orr.w	r2, r3, #16
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a8bc:	4013      	ands	r3, r2
 800a8be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a8c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a8cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a8d2:	4a04      	ldr	r2, [pc, #16]	@ (800a8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	60d3      	str	r3, [r2, #12]
}
 800a8d8:	bf00      	nop
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	e000ed00 	.word	0xe000ed00

0800a8e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a8ec:	4b04      	ldr	r3, [pc, #16]	@ (800a900 <__NVIC_GetPriorityGrouping+0x18>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	0a1b      	lsrs	r3, r3, #8
 800a8f2:	f003 0307 	and.w	r3, r3, #7
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	e000ed00 	.word	0xe000ed00

0800a904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a912:	2b00      	cmp	r3, #0
 800a914:	db0b      	blt.n	800a92e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	f003 021f 	and.w	r2, r3, #31
 800a91c:	4907      	ldr	r1, [pc, #28]	@ (800a93c <__NVIC_EnableIRQ+0x38>)
 800a91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a922:	095b      	lsrs	r3, r3, #5
 800a924:	2001      	movs	r0, #1
 800a926:	fa00 f202 	lsl.w	r2, r0, r2
 800a92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	e000e100 	.word	0xe000e100

0800a940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a94c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a950:	2b00      	cmp	r3, #0
 800a952:	db0a      	blt.n	800a96a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	b2da      	uxtb	r2, r3
 800a958:	490c      	ldr	r1, [pc, #48]	@ (800a98c <__NVIC_SetPriority+0x4c>)
 800a95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a95e:	0112      	lsls	r2, r2, #4
 800a960:	b2d2      	uxtb	r2, r2
 800a962:	440b      	add	r3, r1
 800a964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a968:	e00a      	b.n	800a980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	4908      	ldr	r1, [pc, #32]	@ (800a990 <__NVIC_SetPriority+0x50>)
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	3b04      	subs	r3, #4
 800a978:	0112      	lsls	r2, r2, #4
 800a97a:	b2d2      	uxtb	r2, r2
 800a97c:	440b      	add	r3, r1
 800a97e:	761a      	strb	r2, [r3, #24]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	e000e100 	.word	0xe000e100
 800a990:	e000ed00 	.word	0xe000ed00

0800a994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a994:	b480      	push	{r7}
 800a996:	b089      	sub	sp, #36	@ 0x24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f003 0307 	and.w	r3, r3, #7
 800a9a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	f1c3 0307 	rsb	r3, r3, #7
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	bf28      	it	cs
 800a9b2:	2304      	movcs	r3, #4
 800a9b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	2b06      	cmp	r3, #6
 800a9bc:	d902      	bls.n	800a9c4 <NVIC_EncodePriority+0x30>
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	3b03      	subs	r3, #3
 800a9c2:	e000      	b.n	800a9c6 <NVIC_EncodePriority+0x32>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d2:	43da      	mvns	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	401a      	ands	r2, r3
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a9dc:	f04f 31ff 	mov.w	r1, #4294967295
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e6:	43d9      	mvns	r1, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9ec:	4313      	orrs	r3, r2
         );
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3724      	adds	r7, #36	@ 0x24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa0c:	d301      	bcc.n	800aa12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e00f      	b.n	800aa32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aa12:	4a0a      	ldr	r2, [pc, #40]	@ (800aa3c <SysTick_Config+0x40>)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aa1a:	210f      	movs	r1, #15
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	f7ff ff8e 	bl	800a940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <SysTick_Config+0x40>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa2a:	4b04      	ldr	r3, [pc, #16]	@ (800aa3c <SysTick_Config+0x40>)
 800aa2c:	2207      	movs	r2, #7
 800aa2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	e000e010 	.word	0xe000e010

0800aa40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff ff29 	bl	800a8a0 <__NVIC_SetPriorityGrouping>
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b086      	sub	sp, #24
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800aa64:	2300      	movs	r3, #0
 800aa66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800aa68:	f7ff ff3e 	bl	800a8e8 <__NVIC_GetPriorityGrouping>
 800aa6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	6978      	ldr	r0, [r7, #20]
 800aa74:	f7ff ff8e 	bl	800a994 <NVIC_EncodePriority>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff ff5d 	bl	800a940 <__NVIC_SetPriority>
}
 800aa86:	bf00      	nop
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	4603      	mov	r3, r0
 800aa96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff ff31 	bl	800a904 <__NVIC_EnableIRQ>
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff ffa2 	bl	800a9fc <SysTick_Config>
 800aab8:	4603      	mov	r3, r0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d005      	beq.n	800aae6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2204      	movs	r2, #4
 800aade:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
 800aae4:	e029      	b.n	800ab3a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 020e 	bic.w	r2, r2, #14
 800aaf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0201 	bic.w	r2, r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab0a:	f003 021c 	and.w	r2, r3, #28
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab12:	2101      	movs	r1, #1
 800ab14:	fa01 f202 	lsl.w	r2, r1, r2
 800ab18:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
    }
  }
  return status;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab52:	e148      	b.n	800ade6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	2101      	movs	r1, #1
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab60:	4013      	ands	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 813a 	beq.w	800ade0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d005      	beq.n	800ab84 <HAL_GPIO_Init+0x40>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d130      	bne.n	800abe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	2203      	movs	r2, #3
 800ab90:	fa02 f303 	lsl.w	r3, r2, r3
 800ab94:	43db      	mvns	r3, r3
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4013      	ands	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	fa02 f303 	lsl.w	r3, r2, r3
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	4313      	orrs	r3, r2
 800abac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800abba:	2201      	movs	r2, #1
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	fa02 f303 	lsl.w	r3, r2, r3
 800abc2:	43db      	mvns	r3, r3
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	4013      	ands	r3, r2
 800abc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	091b      	lsrs	r3, r3, #4
 800abd0:	f003 0201 	and.w	r2, r3, #1
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	fa02 f303 	lsl.w	r3, r2, r3
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	4313      	orrs	r3, r2
 800abde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d017      	beq.n	800ac22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	2203      	movs	r2, #3
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	43db      	mvns	r3, r3
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4013      	ands	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	fa02 f303 	lsl.w	r3, r2, r3
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d123      	bne.n	800ac76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	08da      	lsrs	r2, r3, #3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3208      	adds	r2, #8
 800ac36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	220f      	movs	r2, #15
 800ac46:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4a:	43db      	mvns	r3, r3
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4013      	ands	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	691a      	ldr	r2, [r3, #16]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	08da      	lsrs	r2, r3, #3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3208      	adds	r2, #8
 800ac70:	6939      	ldr	r1, [r7, #16]
 800ac72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	2203      	movs	r2, #3
 800ac82:	fa02 f303 	lsl.w	r3, r2, r3
 800ac86:	43db      	mvns	r3, r3
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f003 0203 	and.w	r2, r3, #3
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 8094 	beq.w	800ade0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acb8:	4b52      	ldr	r3, [pc, #328]	@ (800ae04 <HAL_GPIO_Init+0x2c0>)
 800acba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acbc:	4a51      	ldr	r2, [pc, #324]	@ (800ae04 <HAL_GPIO_Init+0x2c0>)
 800acbe:	f043 0301 	orr.w	r3, r3, #1
 800acc2:	6613      	str	r3, [r2, #96]	@ 0x60
 800acc4:	4b4f      	ldr	r3, [pc, #316]	@ (800ae04 <HAL_GPIO_Init+0x2c0>)
 800acc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	60bb      	str	r3, [r7, #8]
 800acce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800acd0:	4a4d      	ldr	r2, [pc, #308]	@ (800ae08 <HAL_GPIO_Init+0x2c4>)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	089b      	lsrs	r3, r3, #2
 800acd6:	3302      	adds	r3, #2
 800acd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f003 0303 	and.w	r3, r3, #3
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	220f      	movs	r2, #15
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	43db      	mvns	r3, r3
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4013      	ands	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800acfa:	d00d      	beq.n	800ad18 <HAL_GPIO_Init+0x1d4>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a43      	ldr	r2, [pc, #268]	@ (800ae0c <HAL_GPIO_Init+0x2c8>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d007      	beq.n	800ad14 <HAL_GPIO_Init+0x1d0>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a42      	ldr	r2, [pc, #264]	@ (800ae10 <HAL_GPIO_Init+0x2cc>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d101      	bne.n	800ad10 <HAL_GPIO_Init+0x1cc>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e004      	b.n	800ad1a <HAL_GPIO_Init+0x1d6>
 800ad10:	2307      	movs	r3, #7
 800ad12:	e002      	b.n	800ad1a <HAL_GPIO_Init+0x1d6>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e000      	b.n	800ad1a <HAL_GPIO_Init+0x1d6>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	f002 0203 	and.w	r2, r2, #3
 800ad20:	0092      	lsls	r2, r2, #2
 800ad22:	4093      	lsls	r3, r2
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ad2a:	4937      	ldr	r1, [pc, #220]	@ (800ae08 <HAL_GPIO_Init+0x2c4>)
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	089b      	lsrs	r3, r3, #2
 800ad30:	3302      	adds	r3, #2
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ad38:	4b36      	ldr	r3, [pc, #216]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	43db      	mvns	r3, r3
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4013      	ands	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ad5c:	4a2d      	ldr	r2, [pc, #180]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ad62:	4b2c      	ldr	r3, [pc, #176]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	43db      	mvns	r3, r3
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	4013      	ands	r3, r2
 800ad70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ad86:	4a23      	ldr	r2, [pc, #140]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ad8c:	4b21      	ldr	r3, [pc, #132]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	43db      	mvns	r3, r3
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4313      	orrs	r3, r2
 800adae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800adb0:	4a18      	ldr	r2, [pc, #96]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800adb6:	4b17      	ldr	r3, [pc, #92]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	43db      	mvns	r3, r3
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	4013      	ands	r3, r2
 800adc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4313      	orrs	r3, r2
 800add8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800adda:	4a0e      	ldr	r2, [pc, #56]	@ (800ae14 <HAL_GPIO_Init+0x2d0>)
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	3301      	adds	r3, #1
 800ade4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	fa22 f303 	lsr.w	r3, r2, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f47f aeaf 	bne.w	800ab54 <HAL_GPIO_Init+0x10>
  }
}
 800adf6:	bf00      	nop
 800adf8:	bf00      	nop
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	40021000 	.word	0x40021000
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	48000400 	.word	0x48000400
 800ae10:	48000800 	.word	0x48000800
 800ae14:	40010400 	.word	0x40010400

0800ae18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	807b      	strh	r3, [r7, #2]
 800ae24:	4613      	mov	r3, r2
 800ae26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae28:	787b      	ldrb	r3, [r7, #1]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ae2e:	887a      	ldrh	r2, [r7, #2]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ae34:	e002      	b.n	800ae3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ae36:	887a      	ldrh	r2, [r7, #2]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ae52:	4b08      	ldr	r3, [pc, #32]	@ (800ae74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae54:	695a      	ldr	r2, [r3, #20]
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d006      	beq.n	800ae6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae5e:	4a05      	ldr	r2, [pc, #20]	@ (800ae74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae64:	88fb      	ldrh	r3, [r7, #6]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f7 f842 	bl	8001ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	40010400 	.word	0x40010400

0800ae78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e08d      	b.n	800afa6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d106      	bne.n	800aea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7f7 f9b0 	bl	8002204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2224      	movs	r2, #36	@ 0x24
 800aea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0201 	bic.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800aec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d107      	bne.n	800aef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aeee:	609a      	str	r2, [r3, #8]
 800aef0:	e006      	b.n	800af00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689a      	ldr	r2, [r3, #8]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800aefe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	2b02      	cmp	r3, #2
 800af06:	d108      	bne.n	800af1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af16:	605a      	str	r2, [r3, #4]
 800af18:	e007      	b.n	800af2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	6812      	ldr	r2, [r2, #0]
 800af34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800af38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800af4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	430a      	orrs	r2, r1
 800af66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	69d9      	ldr	r1, [r3, #28]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a1a      	ldr	r2, [r3, #32]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f042 0201 	orr.w	r2, r2, #1
 800af86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2220      	movs	r2, #32
 800af92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af02      	add	r7, sp, #8
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	4608      	mov	r0, r1
 800afba:	4611      	mov	r1, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	4603      	mov	r3, r0
 800afc0:	817b      	strh	r3, [r7, #10]
 800afc2:	460b      	mov	r3, r1
 800afc4:	813b      	strh	r3, [r7, #8]
 800afc6:	4613      	mov	r3, r2
 800afc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	f040 80f9 	bne.w	800b1ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <HAL_I2C_Mem_Write+0x34>
 800afde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d105      	bne.n	800aff0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e0ed      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d101      	bne.n	800affe <HAL_I2C_Mem_Write+0x4e>
 800affa:	2302      	movs	r3, #2
 800affc:	e0e6      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b006:	f7fe f8c9 	bl	800919c <HAL_GetTick>
 800b00a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	2319      	movs	r3, #25
 800b012:	2201      	movs	r2, #1
 800b014:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 fbaf 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0d1      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2221      	movs	r2, #33	@ 0x21
 800b02c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2240      	movs	r2, #64	@ 0x40
 800b034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6a3a      	ldr	r2, [r7, #32]
 800b042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b048:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b050:	88f8      	ldrh	r0, [r7, #6]
 800b052:	893a      	ldrh	r2, [r7, #8]
 800b054:	8979      	ldrh	r1, [r7, #10]
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	4603      	mov	r3, r0
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f000 fabf 	bl	800b5e4 <I2C_RequestMemoryWrite>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e0a9      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	2bff      	cmp	r3, #255	@ 0xff
 800b080:	d90e      	bls.n	800b0a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	22ff      	movs	r2, #255	@ 0xff
 800b086:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	8979      	ldrh	r1, [r7, #10]
 800b090:	2300      	movs	r3, #0
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fd33 	bl	800bb04 <I2C_TransferConfig>
 800b09e:	e00f      	b.n	800b0c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	8979      	ldrh	r1, [r7, #10]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 fd22 	bl	800bb04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 fbb2 	bl	800b82e <I2C_WaitOnTXISFlagUntilTimeout>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e07b      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d034      	beq.n	800b178 <HAL_I2C_Mem_Write+0x1c8>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b112:	2b00      	cmp	r3, #0
 800b114:	d130      	bne.n	800b178 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11c:	2200      	movs	r2, #0
 800b11e:	2180      	movs	r1, #128	@ 0x80
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fb2b 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e04d      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b134:	b29b      	uxth	r3, r3
 800b136:	2bff      	cmp	r3, #255	@ 0xff
 800b138:	d90e      	bls.n	800b158 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	22ff      	movs	r2, #255	@ 0xff
 800b13e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b144:	b2da      	uxtb	r2, r3
 800b146:	8979      	ldrh	r1, [r7, #10]
 800b148:	2300      	movs	r3, #0
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 fcd7 	bl	800bb04 <I2C_TransferConfig>
 800b156:	e00f      	b.n	800b178 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b166:	b2da      	uxtb	r2, r3
 800b168:	8979      	ldrh	r1, [r7, #10]
 800b16a:	2300      	movs	r3, #0
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 fcc6 	bl	800bb04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d19e      	bne.n	800b0c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fb98 	bl	800b8bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e01a      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2220      	movs	r2, #32
 800b19c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6859      	ldr	r1, [r3, #4]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <HAL_I2C_Mem_Write+0x224>)
 800b1aa:	400b      	ands	r3, r1
 800b1ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e000      	b.n	800b1cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b1ca:	2302      	movs	r3, #2
  }
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	fe00e800 	.word	0xfe00e800

0800b1d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	817b      	strh	r3, [r7, #10]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	813b      	strh	r3, [r7, #8]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b20      	cmp	r3, #32
 800b1fc:	f040 80fd 	bne.w	800b3fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <HAL_I2C_Mem_Read+0x34>
 800b206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d105      	bne.n	800b218 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b212:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e0f1      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d101      	bne.n	800b226 <HAL_I2C_Mem_Read+0x4e>
 800b222:	2302      	movs	r3, #2
 800b224:	e0ea      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b22e:	f7fd ffb5 	bl	800919c <HAL_GetTick>
 800b232:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	2319      	movs	r3, #25
 800b23a:	2201      	movs	r2, #1
 800b23c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 fa9b 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e0d5      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2222      	movs	r2, #34	@ 0x22
 800b254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2240      	movs	r2, #64	@ 0x40
 800b25c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6a3a      	ldr	r2, [r7, #32]
 800b26a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b278:	88f8      	ldrh	r0, [r7, #6]
 800b27a:	893a      	ldrh	r2, [r7, #8]
 800b27c:	8979      	ldrh	r1, [r7, #10]
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	4603      	mov	r3, r0
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 f9ff 	bl	800b68c <I2C_RequestMemoryRead>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e0ad      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2bff      	cmp	r3, #255	@ 0xff
 800b2a8:	d90e      	bls.n	800b2c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	8979      	ldrh	r1, [r7, #10]
 800b2b8:	4b52      	ldr	r3, [pc, #328]	@ (800b404 <HAL_I2C_Mem_Read+0x22c>)
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 fc1f 	bl	800bb04 <I2C_TransferConfig>
 800b2c6:	e00f      	b.n	800b2e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	8979      	ldrh	r1, [r7, #10]
 800b2da:	4b4a      	ldr	r3, [pc, #296]	@ (800b404 <HAL_I2C_Mem_Read+0x22c>)
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fc0e 	bl	800bb04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2104      	movs	r1, #4
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f000 fa42 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e07c      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b31e:	3b01      	subs	r3, #1
 800b320:	b29a      	uxth	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	3b01      	subs	r3, #1
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d034      	beq.n	800b3a8 <HAL_I2C_Mem_Read+0x1d0>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b342:	2b00      	cmp	r3, #0
 800b344:	d130      	bne.n	800b3a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34c:	2200      	movs	r2, #0
 800b34e:	2180      	movs	r1, #128	@ 0x80
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 fa13 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e04d      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b364:	b29b      	uxth	r3, r3
 800b366:	2bff      	cmp	r3, #255	@ 0xff
 800b368:	d90e      	bls.n	800b388 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2201      	movs	r2, #1
 800b36e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b374:	b2da      	uxtb	r2, r3
 800b376:	8979      	ldrh	r1, [r7, #10]
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fbbf 	bl	800bb04 <I2C_TransferConfig>
 800b386:	e00f      	b.n	800b3a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b396:	b2da      	uxtb	r2, r3
 800b398:	8979      	ldrh	r1, [r7, #10]
 800b39a:	2300      	movs	r3, #0
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f000 fbae 	bl	800bb04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d19a      	bne.n	800b2e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 fa80 	bl	800b8bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e01a      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6859      	ldr	r1, [r3, #4]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b408 <HAL_I2C_Mem_Read+0x230>)
 800b3da:	400b      	ands	r3, r1
 800b3dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e000      	b.n	800b3fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b3fa:	2302      	movs	r3, #2
  }
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	80002400 	.word	0x80002400
 800b408:	fe00e800 	.word	0xfe00e800

0800b40c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08a      	sub	sp, #40	@ 0x28
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	607a      	str	r2, [r7, #4]
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	460b      	mov	r3, r1
 800b41a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b20      	cmp	r3, #32
 800b42a:	f040 80d6 	bne.w	800b5da <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b43c:	d101      	bne.n	800b442 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b43e:	2302      	movs	r3, #2
 800b440:	e0cc      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <HAL_I2C_IsDeviceReady+0x44>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e0c5      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2224      	movs	r2, #36	@ 0x24
 800b45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d107      	bne.n	800b47e <HAL_I2C_IsDeviceReady+0x72>
 800b46e:	897b      	ldrh	r3, [r7, #10]
 800b470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b478:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b47c:	e006      	b.n	800b48c <HAL_I2C_IsDeviceReady+0x80>
 800b47e:	897b      	ldrh	r3, [r7, #10]
 800b480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b484:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b488:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	6812      	ldr	r2, [r2, #0]
 800b490:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b492:	f7fd fe83 	bl	800919c <HAL_GetTick>
 800b496:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	f003 0320 	and.w	r3, r3, #32
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	bf0c      	ite	eq
 800b4a6:	2301      	moveq	r3, #1
 800b4a8:	2300      	movne	r3, #0
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	f003 0310 	and.w	r3, r3, #16
 800b4b8:	2b10      	cmp	r3, #16
 800b4ba:	bf0c      	ite	eq
 800b4bc:	2301      	moveq	r3, #1
 800b4be:	2300      	movne	r3, #0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b4c4:	e034      	b.n	800b530 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4cc:	d01a      	beq.n	800b504 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b4ce:	f7fd fe65 	bl	800919c <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d302      	bcc.n	800b4e4 <HAL_I2C_IsDeviceReady+0xd8>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10f      	bne.n	800b504 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f0:	f043 0220 	orr.w	r2, r3, #32
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e06b      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b20      	cmp	r3, #32
 800b510:	bf0c      	ite	eq
 800b512:	2301      	moveq	r3, #1
 800b514:	2300      	movne	r3, #0
 800b516:	b2db      	uxtb	r3, r3
 800b518:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	f003 0310 	and.w	r3, r3, #16
 800b524:	2b10      	cmp	r3, #16
 800b526:	bf0c      	ite	eq
 800b528:	2301      	moveq	r3, #1
 800b52a:	2300      	movne	r3, #0
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b530:	7ffb      	ldrb	r3, [r7, #31]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <HAL_I2C_IsDeviceReady+0x130>
 800b536:	7fbb      	ldrb	r3, [r7, #30]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d0c4      	beq.n	800b4c6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	f003 0310 	and.w	r3, r3, #16
 800b546:	2b10      	cmp	r3, #16
 800b548:	d01a      	beq.n	800b580 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2200      	movs	r2, #0
 800b552:	2120      	movs	r1, #32
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f000 f911 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e03b      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2220      	movs	r2, #32
 800b56a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2220      	movs	r2, #32
 800b570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	e02d      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2200      	movs	r2, #0
 800b588:	2120      	movs	r1, #32
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f000 f8f6 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e020      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2210      	movs	r2, #16
 800b5a0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	f63f af56 	bhi.w	800b466 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c6:	f043 0220 	orr.w	r2, r3, #32
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e000      	b.n	800b5dc <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800b5da:	2302      	movs	r3, #2
  }
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3720      	adds	r7, #32
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	817b      	strh	r3, [r7, #10]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	813b      	strh	r3, [r7, #8]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b5fe:	88fb      	ldrh	r3, [r7, #6]
 800b600:	b2da      	uxtb	r2, r3
 800b602:	8979      	ldrh	r1, [r7, #10]
 800b604:	4b20      	ldr	r3, [pc, #128]	@ (800b688 <I2C_RequestMemoryWrite+0xa4>)
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fa79 	bl	800bb04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b612:	69fa      	ldr	r2, [r7, #28]
 800b614:	69b9      	ldr	r1, [r7, #24]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 f909 	bl	800b82e <I2C_WaitOnTXISFlagUntilTimeout>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e02c      	b.n	800b680 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b626:	88fb      	ldrh	r3, [r7, #6]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d105      	bne.n	800b638 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b62c:	893b      	ldrh	r3, [r7, #8]
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	629a      	str	r2, [r3, #40]	@ 0x28
 800b636:	e015      	b.n	800b664 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b638:	893b      	ldrh	r3, [r7, #8]
 800b63a:	0a1b      	lsrs	r3, r3, #8
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	69b9      	ldr	r1, [r7, #24]
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 f8ef 	bl	800b82e <I2C_WaitOnTXISFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e012      	b.n	800b680 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b65a:	893b      	ldrh	r3, [r7, #8]
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2200      	movs	r2, #0
 800b66c:	2180      	movs	r1, #128	@ 0x80
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 f884 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	80002000 	.word	0x80002000

0800b68c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af02      	add	r7, sp, #8
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	461a      	mov	r2, r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	817b      	strh	r3, [r7, #10]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	813b      	strh	r3, [r7, #8]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b6a6:	88fb      	ldrh	r3, [r7, #6]
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	8979      	ldrh	r1, [r7, #10]
 800b6ac:	4b20      	ldr	r3, [pc, #128]	@ (800b730 <I2C_RequestMemoryRead+0xa4>)
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 fa26 	bl	800bb04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6b8:	69fa      	ldr	r2, [r7, #28]
 800b6ba:	69b9      	ldr	r1, [r7, #24]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f8b6 	bl	800b82e <I2C_WaitOnTXISFlagUntilTimeout>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e02c      	b.n	800b726 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6cc:	88fb      	ldrh	r3, [r7, #6]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d105      	bne.n	800b6de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6d2:	893b      	ldrh	r3, [r7, #8]
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6dc:	e015      	b.n	800b70a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b6de:	893b      	ldrh	r3, [r7, #8]
 800b6e0:	0a1b      	lsrs	r3, r3, #8
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ec:	69fa      	ldr	r2, [r7, #28]
 800b6ee:	69b9      	ldr	r1, [r7, #24]
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f89c 	bl	800b82e <I2C_WaitOnTXISFlagUntilTimeout>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e012      	b.n	800b726 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b700:	893b      	ldrh	r3, [r7, #8]
 800b702:	b2da      	uxtb	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	2200      	movs	r2, #0
 800b712:	2140      	movs	r1, #64	@ 0x40
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 f831 	bl	800b77c <I2C_WaitOnFlagUntilTimeout>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e000      	b.n	800b726 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	80002000 	.word	0x80002000

0800b734 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	f003 0302 	and.w	r3, r3, #2
 800b746:	2b02      	cmp	r3, #2
 800b748:	d103      	bne.n	800b752 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2200      	movs	r2, #0
 800b750:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d007      	beq.n	800b770 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	699a      	ldr	r2, [r3, #24]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f042 0201 	orr.w	r2, r2, #1
 800b76e:	619a      	str	r2, [r3, #24]
  }
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	4613      	mov	r3, r2
 800b78a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b78c:	e03b      	b.n	800b806 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 f8d6 	bl	800b944 <I2C_IsErrorOccurred>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e041      	b.n	800b826 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d02d      	beq.n	800b806 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7aa:	f7fd fcf7 	bl	800919c <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d302      	bcc.n	800b7c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d122      	bne.n	800b806 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bf0c      	ite	eq
 800b7d0:	2301      	moveq	r3, #1
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d113      	bne.n	800b806 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7e2:	f043 0220 	orr.w	r2, r3, #32
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2220      	movs	r2, #32
 800b7ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e00f      	b.n	800b826 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	699a      	ldr	r2, [r3, #24]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4013      	ands	r3, r2
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	429a      	cmp	r2, r3
 800b814:	bf0c      	ite	eq
 800b816:	2301      	moveq	r3, #1
 800b818:	2300      	movne	r3, #0
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	461a      	mov	r2, r3
 800b81e:	79fb      	ldrb	r3, [r7, #7]
 800b820:	429a      	cmp	r2, r3
 800b822:	d0b4      	beq.n	800b78e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b83a:	e033      	b.n	800b8a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	68b9      	ldr	r1, [r7, #8]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f87f 	bl	800b944 <I2C_IsErrorOccurred>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e031      	b.n	800b8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d025      	beq.n	800b8a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b858:	f7fd fca0 	bl	800919c <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	429a      	cmp	r2, r3
 800b866:	d302      	bcc.n	800b86e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d11a      	bne.n	800b8a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d013      	beq.n	800b8a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b880:	f043 0220 	orr.w	r2, r3, #32
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2220      	movs	r2, #32
 800b88c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e007      	b.n	800b8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	699b      	ldr	r3, [r3, #24]
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d1c4      	bne.n	800b83c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8c8:	e02f      	b.n	800b92a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	68b9      	ldr	r1, [r7, #8]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f838 	bl	800b944 <I2C_IsErrorOccurred>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e02d      	b.n	800b93a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8de:	f7fd fc5d 	bl	800919c <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d302      	bcc.n	800b8f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d11a      	bne.n	800b92a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	f003 0320 	and.w	r3, r3, #32
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	d013      	beq.n	800b92a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b906:	f043 0220 	orr.w	r2, r3, #32
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2220      	movs	r2, #32
 800b912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e007      	b.n	800b93a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	f003 0320 	and.w	r3, r3, #32
 800b934:	2b20      	cmp	r3, #32
 800b936:	d1c8      	bne.n	800b8ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08a      	sub	sp, #40	@ 0x28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	f003 0310 	and.w	r3, r3, #16
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d068      	beq.n	800ba42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2210      	movs	r2, #16
 800b976:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b978:	e049      	b.n	800ba0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b980:	d045      	beq.n	800ba0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b982:	f7fd fc0b 	bl	800919c <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d302      	bcc.n	800b998 <I2C_IsErrorOccurred+0x54>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d13a      	bne.n	800ba0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9ba:	d121      	bne.n	800ba00 <I2C_IsErrorOccurred+0xbc>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9c2:	d01d      	beq.n	800ba00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b9c4:	7cfb      	ldrb	r3, [r7, #19]
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d01a      	beq.n	800ba00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b9da:	f7fd fbdf 	bl	800919c <HAL_GetTick>
 800b9de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9e0:	e00e      	b.n	800ba00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9e2:	f7fd fbdb 	bl	800919c <HAL_GetTick>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	2b19      	cmp	r3, #25
 800b9ee:	d907      	bls.n	800ba00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	f043 0320 	orr.w	r3, r3, #32
 800b9f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b9fe:	e006      	b.n	800ba0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b20      	cmp	r3, #32
 800ba0c:	d1e9      	bne.n	800b9e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	2b20      	cmp	r3, #32
 800ba1a:	d003      	beq.n	800ba24 <I2C_IsErrorOccurred+0xe0>
 800ba1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0aa      	beq.n	800b97a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ba24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2220      	movs	r2, #32
 800ba32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	f043 0304 	orr.w	r3, r3, #4
 800ba3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00b      	beq.n	800ba6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	f043 0301 	orr.w	r3, r3, #1
 800ba5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00b      	beq.n	800ba8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	f043 0308 	orr.w	r3, r3, #8
 800ba7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ba86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00b      	beq.n	800bab0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	f043 0302 	orr.w	r3, r3, #2
 800ba9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800baa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d01c      	beq.n	800baf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff fe3b 	bl	800b734 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6859      	ldr	r1, [r3, #4]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	4b0d      	ldr	r3, [pc, #52]	@ (800bb00 <I2C_IsErrorOccurred+0x1bc>)
 800baca:	400b      	ands	r3, r1
 800bacc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	431a      	orrs	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2220      	movs	r2, #32
 800bade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800baf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3728      	adds	r7, #40	@ 0x28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	fe00e800 	.word	0xfe00e800

0800bb04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	817b      	strh	r3, [r7, #10]
 800bb12:	4613      	mov	r3, r2
 800bb14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb16:	897b      	ldrh	r3, [r7, #10]
 800bb18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb1c:	7a7b      	ldrb	r3, [r7, #9]
 800bb1e:	041b      	lsls	r3, r3, #16
 800bb20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	0d5b      	lsrs	r3, r3, #21
 800bb3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bb42:	4b08      	ldr	r3, [pc, #32]	@ (800bb64 <I2C_TransferConfig+0x60>)
 800bb44:	430b      	orrs	r3, r1
 800bb46:	43db      	mvns	r3, r3
 800bb48:	ea02 0103 	and.w	r1, r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	430a      	orrs	r2, r1
 800bb54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb56:	bf00      	nop
 800bb58:	371c      	adds	r7, #28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	03ff63ff 	.word	0x03ff63ff

0800bb68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b20      	cmp	r3, #32
 800bb7c:	d138      	bne.n	800bbf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e032      	b.n	800bbf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2224      	movs	r2, #36	@ 0x24
 800bb98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0201 	bic.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bbba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6819      	ldr	r1, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0201 	orr.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	e000      	b.n	800bbf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbf0:	2302      	movs	r3, #2
  }
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d139      	bne.n	800bc88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d101      	bne.n	800bc22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bc1e:	2302      	movs	r3, #2
 800bc20:	e033      	b.n	800bc8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2224      	movs	r2, #36	@ 0x24
 800bc2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f022 0201 	bic.w	r2, r2, #1
 800bc40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bc50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	021b      	lsls	r3, r3, #8
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f042 0201 	orr.w	r2, r2, #1
 800bc72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	e000      	b.n	800bc8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc88:	2302      	movs	r3, #2
  }
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
	...

0800bc98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bc9c:	4b04      	ldr	r3, [pc, #16]	@ (800bcb0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	40007000 	.word	0x40007000

0800bcb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcc2:	d130      	bne.n	800bd26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bcc4:	4b23      	ldr	r3, [pc, #140]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcd0:	d038      	beq.n	800bd44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bcd2:	4b20      	ldr	r3, [pc, #128]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bcda:	4a1e      	ldr	r2, [pc, #120]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bce2:	4b1d      	ldr	r3, [pc, #116]	@ (800bd58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2232      	movs	r2, #50	@ 0x32
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	4a1b      	ldr	r2, [pc, #108]	@ (800bd5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bcee:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf2:	0c9b      	lsrs	r3, r3, #18
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcf8:	e002      	b.n	800bd00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bd00:	4b14      	ldr	r3, [pc, #80]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd0c:	d102      	bne.n	800bd14 <HAL_PWREx_ControlVoltageScaling+0x60>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1f2      	bne.n	800bcfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bd14:	4b0f      	ldr	r3, [pc, #60]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd20:	d110      	bne.n	800bd44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e00f      	b.n	800bd46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bd26:	4b0b      	ldr	r3, [pc, #44]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd32:	d007      	beq.n	800bd44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bd34:	4b07      	ldr	r3, [pc, #28]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bd3c:	4a05      	ldr	r2, [pc, #20]	@ (800bd54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bd3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	40007000 	.word	0x40007000
 800bd58:	20000000 	.word	0x20000000
 800bd5c:	431bde83 	.word	0x431bde83

0800bd60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	f000 bc02 	b.w	800c578 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd74:	4b96      	ldr	r3, [pc, #600]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f003 030c 	and.w	r3, r3, #12
 800bd7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd7e:	4b94      	ldr	r3, [pc, #592]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f003 0303 	and.w	r3, r3, #3
 800bd86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0310 	and.w	r3, r3, #16
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 80e4 	beq.w	800bf5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <HAL_RCC_OscConfig+0x4c>
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	2b0c      	cmp	r3, #12
 800bda0:	f040 808b 	bne.w	800beba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	f040 8087 	bne.w	800beba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bdac:	4b88      	ldr	r3, [pc, #544]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <HAL_RCC_OscConfig+0x64>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e3d9      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a1a      	ldr	r2, [r3, #32]
 800bdc8:	4b81      	ldr	r3, [pc, #516]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0308 	and.w	r3, r3, #8
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d004      	beq.n	800bdde <HAL_RCC_OscConfig+0x7e>
 800bdd4:	4b7e      	ldr	r3, [pc, #504]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bddc:	e005      	b.n	800bdea <HAL_RCC_OscConfig+0x8a>
 800bdde:	4b7c      	ldr	r3, [pc, #496]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bde0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bde4:	091b      	lsrs	r3, r3, #4
 800bde6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d223      	bcs.n	800be36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fd54 	bl	800c8a0 <RCC_SetFlashLatencyFromMSIRange>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e3ba      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be02:	4b73      	ldr	r3, [pc, #460]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a72      	ldr	r2, [pc, #456]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be08:	f043 0308 	orr.w	r3, r3, #8
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	4b70      	ldr	r3, [pc, #448]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	496d      	ldr	r1, [pc, #436]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be20:	4b6b      	ldr	r3, [pc, #428]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	69db      	ldr	r3, [r3, #28]
 800be2c:	021b      	lsls	r3, r3, #8
 800be2e:	4968      	ldr	r1, [pc, #416]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be30:	4313      	orrs	r3, r2
 800be32:	604b      	str	r3, [r1, #4]
 800be34:	e025      	b.n	800be82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be36:	4b66      	ldr	r3, [pc, #408]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a65      	ldr	r2, [pc, #404]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be3c:	f043 0308 	orr.w	r3, r3, #8
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	4b63      	ldr	r3, [pc, #396]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	4960      	ldr	r1, [pc, #384]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be50:	4313      	orrs	r3, r2
 800be52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be54:	4b5e      	ldr	r3, [pc, #376]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	69db      	ldr	r3, [r3, #28]
 800be60:	021b      	lsls	r3, r3, #8
 800be62:	495b      	ldr	r1, [pc, #364]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be64:	4313      	orrs	r3, r2
 800be66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 fd14 	bl	800c8a0 <RCC_SetFlashLatencyFromMSIRange>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e37a      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800be82:	f000 fc81 	bl	800c788 <HAL_RCC_GetSysClockFreq>
 800be86:	4602      	mov	r2, r0
 800be88:	4b51      	ldr	r3, [pc, #324]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	091b      	lsrs	r3, r3, #4
 800be8e:	f003 030f 	and.w	r3, r3, #15
 800be92:	4950      	ldr	r1, [pc, #320]	@ (800bfd4 <HAL_RCC_OscConfig+0x274>)
 800be94:	5ccb      	ldrb	r3, [r1, r3]
 800be96:	f003 031f 	and.w	r3, r3, #31
 800be9a:	fa22 f303 	lsr.w	r3, r2, r3
 800be9e:	4a4e      	ldr	r2, [pc, #312]	@ (800bfd8 <HAL_RCC_OscConfig+0x278>)
 800bea0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bea2:	4b4e      	ldr	r3, [pc, #312]	@ (800bfdc <HAL_RCC_OscConfig+0x27c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fd f928 	bl	80090fc <HAL_InitTick>
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d052      	beq.n	800bf5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	e35e      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d032      	beq.n	800bf28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bec2:	4b43      	ldr	r3, [pc, #268]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a42      	ldr	r2, [pc, #264]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bec8:	f043 0301 	orr.w	r3, r3, #1
 800becc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bece:	f7fd f965 	bl	800919c <HAL_GetTick>
 800bed2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bed4:	e008      	b.n	800bee8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bed6:	f7fd f961 	bl	800919c <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d901      	bls.n	800bee8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e347      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bee8:	4b39      	ldr	r3, [pc, #228]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d0f0      	beq.n	800bed6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bef4:	4b36      	ldr	r3, [pc, #216]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a35      	ldr	r2, [pc, #212]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800befa:	f043 0308 	orr.w	r3, r3, #8
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	4b33      	ldr	r3, [pc, #204]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	4930      	ldr	r1, [pc, #192]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf12:	4b2f      	ldr	r3, [pc, #188]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	69db      	ldr	r3, [r3, #28]
 800bf1e:	021b      	lsls	r3, r3, #8
 800bf20:	492b      	ldr	r1, [pc, #172]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	604b      	str	r3, [r1, #4]
 800bf26:	e01a      	b.n	800bf5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bf28:	4b29      	ldr	r3, [pc, #164]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a28      	ldr	r2, [pc, #160]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bf34:	f7fd f932 	bl	800919c <HAL_GetTick>
 800bf38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf3a:	e008      	b.n	800bf4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf3c:	f7fd f92e 	bl	800919c <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d901      	bls.n	800bf4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e314      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf4e:	4b20      	ldr	r3, [pc, #128]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1f0      	bne.n	800bf3c <HAL_RCC_OscConfig+0x1dc>
 800bf5a:	e000      	b.n	800bf5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d073      	beq.n	800c052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	2b08      	cmp	r3, #8
 800bf6e:	d005      	beq.n	800bf7c <HAL_RCC_OscConfig+0x21c>
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b0c      	cmp	r3, #12
 800bf74:	d10e      	bne.n	800bf94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d10b      	bne.n	800bf94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf7c:	4b14      	ldr	r3, [pc, #80]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d063      	beq.n	800c050 <HAL_RCC_OscConfig+0x2f0>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d15f      	bne.n	800c050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e2f1      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf9c:	d106      	bne.n	800bfac <HAL_RCC_OscConfig+0x24c>
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a0b      	ldr	r2, [pc, #44]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bfa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfa8:	6013      	str	r3, [r2, #0]
 800bfaa:	e025      	b.n	800bff8 <HAL_RCC_OscConfig+0x298>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bfb4:	d114      	bne.n	800bfe0 <HAL_RCC_OscConfig+0x280>
 800bfb6:	4b06      	ldr	r3, [pc, #24]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a05      	ldr	r2, [pc, #20]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bfbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	4b03      	ldr	r3, [pc, #12]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a02      	ldr	r2, [pc, #8]	@ (800bfd0 <HAL_RCC_OscConfig+0x270>)
 800bfc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	e013      	b.n	800bff8 <HAL_RCC_OscConfig+0x298>
 800bfd0:	40021000 	.word	0x40021000
 800bfd4:	08010574 	.word	0x08010574
 800bfd8:	20000000 	.word	0x20000000
 800bfdc:	20000018 	.word	0x20000018
 800bfe0:	4ba0      	ldr	r3, [pc, #640]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a9f      	ldr	r2, [pc, #636]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800bfe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	4b9d      	ldr	r3, [pc, #628]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a9c      	ldr	r2, [pc, #624]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800bff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d013      	beq.n	800c028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c000:	f7fd f8cc 	bl	800919c <HAL_GetTick>
 800c004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c006:	e008      	b.n	800c01a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c008:	f7fd f8c8 	bl	800919c <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	2b64      	cmp	r3, #100	@ 0x64
 800c014:	d901      	bls.n	800c01a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c016:	2303      	movs	r3, #3
 800c018:	e2ae      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c01a:	4b92      	ldr	r3, [pc, #584]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0f0      	beq.n	800c008 <HAL_RCC_OscConfig+0x2a8>
 800c026:	e014      	b.n	800c052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c028:	f7fd f8b8 	bl	800919c <HAL_GetTick>
 800c02c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c02e:	e008      	b.n	800c042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c030:	f7fd f8b4 	bl	800919c <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	2b64      	cmp	r3, #100	@ 0x64
 800c03c:	d901      	bls.n	800c042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e29a      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c042:	4b88      	ldr	r3, [pc, #544]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1f0      	bne.n	800c030 <HAL_RCC_OscConfig+0x2d0>
 800c04e:	e000      	b.n	800c052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d060      	beq.n	800c120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	2b04      	cmp	r3, #4
 800c062:	d005      	beq.n	800c070 <HAL_RCC_OscConfig+0x310>
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b0c      	cmp	r3, #12
 800c068:	d119      	bne.n	800c09e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d116      	bne.n	800c09e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c070:	4b7c      	ldr	r3, [pc, #496]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <HAL_RCC_OscConfig+0x328>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e277      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c088:	4b76      	ldr	r3, [pc, #472]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	061b      	lsls	r3, r3, #24
 800c096:	4973      	ldr	r1, [pc, #460]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c098:	4313      	orrs	r3, r2
 800c09a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c09c:	e040      	b.n	800c120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d023      	beq.n	800c0ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c0a6:	4b6f      	ldr	r3, [pc, #444]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a6e      	ldr	r2, [pc, #440]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0b2:	f7fd f873 	bl	800919c <HAL_GetTick>
 800c0b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c0b8:	e008      	b.n	800c0cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0ba:	f7fd f86f 	bl	800919c <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d901      	bls.n	800c0cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e255      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c0cc:	4b65      	ldr	r3, [pc, #404]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0f0      	beq.n	800c0ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0d8:	4b62      	ldr	r3, [pc, #392]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	061b      	lsls	r3, r3, #24
 800c0e6:	495f      	ldr	r1, [pc, #380]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	604b      	str	r3, [r1, #4]
 800c0ec:	e018      	b.n	800c120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0ee:	4b5d      	ldr	r3, [pc, #372]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a5c      	ldr	r2, [pc, #368]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c0f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0fa:	f7fd f84f 	bl	800919c <HAL_GetTick>
 800c0fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c100:	e008      	b.n	800c114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c102:	f7fd f84b 	bl	800919c <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d901      	bls.n	800c114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e231      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c114:	4b53      	ldr	r3, [pc, #332]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1f0      	bne.n	800c102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 0308 	and.w	r3, r3, #8
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d03c      	beq.n	800c1a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d01c      	beq.n	800c16e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c134:	4b4b      	ldr	r3, [pc, #300]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c13a:	4a4a      	ldr	r2, [pc, #296]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c13c:	f043 0301 	orr.w	r3, r3, #1
 800c140:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c144:	f7fd f82a 	bl	800919c <HAL_GetTick>
 800c148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c14a:	e008      	b.n	800c15e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c14c:	f7fd f826 	bl	800919c <HAL_GetTick>
 800c150:	4602      	mov	r2, r0
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	2b02      	cmp	r3, #2
 800c158:	d901      	bls.n	800c15e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e20c      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c15e:	4b41      	ldr	r3, [pc, #260]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0ef      	beq.n	800c14c <HAL_RCC_OscConfig+0x3ec>
 800c16c:	e01b      	b.n	800c1a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c16e:	4b3d      	ldr	r3, [pc, #244]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c174:	4a3b      	ldr	r2, [pc, #236]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c176:	f023 0301 	bic.w	r3, r3, #1
 800c17a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c17e:	f7fd f80d 	bl	800919c <HAL_GetTick>
 800c182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c184:	e008      	b.n	800c198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c186:	f7fd f809 	bl	800919c <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	2b02      	cmp	r3, #2
 800c192:	d901      	bls.n	800c198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e1ef      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c198:	4b32      	ldr	r3, [pc, #200]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c19a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c19e:	f003 0302 	and.w	r3, r3, #2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1ef      	bne.n	800c186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 0304 	and.w	r3, r3, #4
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 80a6 	beq.w	800c300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c1b8:	4b2a      	ldr	r3, [pc, #168]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10d      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1c4:	4b27      	ldr	r3, [pc, #156]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1c8:	4a26      	ldr	r2, [pc, #152]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c1ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1d0:	4b24      	ldr	r3, [pc, #144]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c1d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1d8:	60bb      	str	r3, [r7, #8]
 800c1da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1e0:	4b21      	ldr	r3, [pc, #132]	@ (800c268 <HAL_RCC_OscConfig+0x508>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d118      	bne.n	800c21e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1ec:	4b1e      	ldr	r3, [pc, #120]	@ (800c268 <HAL_RCC_OscConfig+0x508>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c268 <HAL_RCC_OscConfig+0x508>)
 800c1f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1f8:	f7fc ffd0 	bl	800919c <HAL_GetTick>
 800c1fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1fe:	e008      	b.n	800c212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c200:	f7fc ffcc 	bl	800919c <HAL_GetTick>
 800c204:	4602      	mov	r2, r0
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d901      	bls.n	800c212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e1b2      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c212:	4b15      	ldr	r3, [pc, #84]	@ (800c268 <HAL_RCC_OscConfig+0x508>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0f0      	beq.n	800c200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d108      	bne.n	800c238 <HAL_RCC_OscConfig+0x4d8>
 800c226:	4b0f      	ldr	r3, [pc, #60]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c22c:	4a0d      	ldr	r2, [pc, #52]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c22e:	f043 0301 	orr.w	r3, r3, #1
 800c232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c236:	e029      	b.n	800c28c <HAL_RCC_OscConfig+0x52c>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	2b05      	cmp	r3, #5
 800c23e:	d115      	bne.n	800c26c <HAL_RCC_OscConfig+0x50c>
 800c240:	4b08      	ldr	r3, [pc, #32]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c246:	4a07      	ldr	r2, [pc, #28]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c248:	f043 0304 	orr.w	r3, r3, #4
 800c24c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c250:	4b04      	ldr	r3, [pc, #16]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c256:	4a03      	ldr	r2, [pc, #12]	@ (800c264 <HAL_RCC_OscConfig+0x504>)
 800c258:	f043 0301 	orr.w	r3, r3, #1
 800c25c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c260:	e014      	b.n	800c28c <HAL_RCC_OscConfig+0x52c>
 800c262:	bf00      	nop
 800c264:	40021000 	.word	0x40021000
 800c268:	40007000 	.word	0x40007000
 800c26c:	4b9a      	ldr	r3, [pc, #616]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c272:	4a99      	ldr	r2, [pc, #612]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c274:	f023 0301 	bic.w	r3, r3, #1
 800c278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c27c:	4b96      	ldr	r3, [pc, #600]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c282:	4a95      	ldr	r2, [pc, #596]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c284:	f023 0304 	bic.w	r3, r3, #4
 800c288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d016      	beq.n	800c2c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c294:	f7fc ff82 	bl	800919c <HAL_GetTick>
 800c298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c29a:	e00a      	b.n	800c2b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c29c:	f7fc ff7e 	bl	800919c <HAL_GetTick>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d901      	bls.n	800c2b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e162      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c2b2:	4b89      	ldr	r3, [pc, #548]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b8:	f003 0302 	and.w	r3, r3, #2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0ed      	beq.n	800c29c <HAL_RCC_OscConfig+0x53c>
 800c2c0:	e015      	b.n	800c2ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2c2:	f7fc ff6b 	bl	800919c <HAL_GetTick>
 800c2c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2c8:	e00a      	b.n	800c2e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2ca:	f7fc ff67 	bl	800919c <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d901      	bls.n	800c2e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e14b      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2e0:	4b7d      	ldr	r3, [pc, #500]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e6:	f003 0302 	and.w	r3, r3, #2
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1ed      	bne.n	800c2ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2ee:	7ffb      	ldrb	r3, [r7, #31]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d105      	bne.n	800c300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2f4:	4b78      	ldr	r3, [pc, #480]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c2f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2f8:	4a77      	ldr	r2, [pc, #476]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c2fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0320 	and.w	r3, r3, #32
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d03c      	beq.n	800c386 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	d01c      	beq.n	800c34e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c314:	4b70      	ldr	r3, [pc, #448]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c31a:	4a6f      	ldr	r2, [pc, #444]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c31c:	f043 0301 	orr.w	r3, r3, #1
 800c320:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c324:	f7fc ff3a 	bl	800919c <HAL_GetTick>
 800c328:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c32a:	e008      	b.n	800c33e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c32c:	f7fc ff36 	bl	800919c <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e11c      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c33e:	4b66      	ldr	r3, [pc, #408]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c340:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d0ef      	beq.n	800c32c <HAL_RCC_OscConfig+0x5cc>
 800c34c:	e01b      	b.n	800c386 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c34e:	4b62      	ldr	r3, [pc, #392]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c350:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c354:	4a60      	ldr	r2, [pc, #384]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c356:	f023 0301 	bic.w	r3, r3, #1
 800c35a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c35e:	f7fc ff1d 	bl	800919c <HAL_GetTick>
 800c362:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c364:	e008      	b.n	800c378 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c366:	f7fc ff19 	bl	800919c <HAL_GetTick>
 800c36a:	4602      	mov	r2, r0
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d901      	bls.n	800c378 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e0ff      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c378:	4b57      	ldr	r3, [pc, #348]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c37a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c37e:	f003 0302 	and.w	r3, r3, #2
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1ef      	bne.n	800c366 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80f3 	beq.w	800c576 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c394:	2b02      	cmp	r3, #2
 800c396:	f040 80c9 	bne.w	800c52c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c39a:	4b4f      	ldr	r3, [pc, #316]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f003 0203 	and.w	r2, r3, #3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d12c      	bne.n	800c408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d123      	bne.n	800c408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d11b      	bne.n	800c408 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d113      	bne.n	800c408 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ea:	085b      	lsrs	r3, r3, #1
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d109      	bne.n	800c408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3fe:	085b      	lsrs	r3, r3, #1
 800c400:	3b01      	subs	r3, #1
 800c402:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c404:	429a      	cmp	r2, r3
 800c406:	d06b      	beq.n	800c4e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	2b0c      	cmp	r3, #12
 800c40c:	d062      	beq.n	800c4d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c40e:	4b32      	ldr	r3, [pc, #200]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e0ac      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c41e:	4b2e      	ldr	r3, [pc, #184]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a2d      	ldr	r2, [pc, #180]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c424:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c428:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c42a:	f7fc feb7 	bl	800919c <HAL_GetTick>
 800c42e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c430:	e008      	b.n	800c444 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c432:	f7fc feb3 	bl	800919c <HAL_GetTick>
 800c436:	4602      	mov	r2, r0
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d901      	bls.n	800c444 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e099      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c444:	4b24      	ldr	r3, [pc, #144]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1f0      	bne.n	800c432 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c450:	4b21      	ldr	r3, [pc, #132]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c452:	68da      	ldr	r2, [r3, #12]
 800c454:	4b21      	ldr	r3, [pc, #132]	@ (800c4dc <HAL_RCC_OscConfig+0x77c>)
 800c456:	4013      	ands	r3, r2
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c460:	3a01      	subs	r2, #1
 800c462:	0112      	lsls	r2, r2, #4
 800c464:	4311      	orrs	r1, r2
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c46a:	0212      	lsls	r2, r2, #8
 800c46c:	4311      	orrs	r1, r2
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c472:	0852      	lsrs	r2, r2, #1
 800c474:	3a01      	subs	r2, #1
 800c476:	0552      	lsls	r2, r2, #21
 800c478:	4311      	orrs	r1, r2
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c47e:	0852      	lsrs	r2, r2, #1
 800c480:	3a01      	subs	r2, #1
 800c482:	0652      	lsls	r2, r2, #25
 800c484:	4311      	orrs	r1, r2
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c48a:	06d2      	lsls	r2, r2, #27
 800c48c:	430a      	orrs	r2, r1
 800c48e:	4912      	ldr	r1, [pc, #72]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c490:	4313      	orrs	r3, r2
 800c492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c494:	4b10      	ldr	r3, [pc, #64]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a0f      	ldr	r2, [pc, #60]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c49a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c49e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c4a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c4a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c4ac:	f7fc fe76 	bl	800919c <HAL_GetTick>
 800c4b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4b2:	e008      	b.n	800c4c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4b4:	f7fc fe72 	bl	800919c <HAL_GetTick>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d901      	bls.n	800c4c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e058      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4c6:	4b04      	ldr	r3, [pc, #16]	@ (800c4d8 <HAL_RCC_OscConfig+0x778>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0f0      	beq.n	800c4b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c4d2:	e050      	b.n	800c576 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e04f      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
 800c4d8:	40021000 	.word	0x40021000
 800c4dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4e0:	4b27      	ldr	r3, [pc, #156]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d144      	bne.n	800c576 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c4ec:	4b24      	ldr	r3, [pc, #144]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a23      	ldr	r2, [pc, #140]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c4f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c4f8:	4b21      	ldr	r3, [pc, #132]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	4a20      	ldr	r2, [pc, #128]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c4fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c504:	f7fc fe4a 	bl	800919c <HAL_GetTick>
 800c508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c50a:	e008      	b.n	800c51e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c50c:	f7fc fe46 	bl	800919c <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d901      	bls.n	800c51e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e02c      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c51e:	4b18      	ldr	r3, [pc, #96]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0f0      	beq.n	800c50c <HAL_RCC_OscConfig+0x7ac>
 800c52a:	e024      	b.n	800c576 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	2b0c      	cmp	r3, #12
 800c530:	d01f      	beq.n	800c572 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c532:	4b13      	ldr	r3, [pc, #76]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a12      	ldr	r2, [pc, #72]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c538:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c53c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c53e:	f7fc fe2d 	bl	800919c <HAL_GetTick>
 800c542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c544:	e008      	b.n	800c558 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c546:	f7fc fe29 	bl	800919c <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d901      	bls.n	800c558 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e00f      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c558:	4b09      	ldr	r3, [pc, #36]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1f0      	bne.n	800c546 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c564:	4b06      	ldr	r3, [pc, #24]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c566:	68da      	ldr	r2, [r3, #12]
 800c568:	4905      	ldr	r1, [pc, #20]	@ (800c580 <HAL_RCC_OscConfig+0x820>)
 800c56a:	4b06      	ldr	r3, [pc, #24]	@ (800c584 <HAL_RCC_OscConfig+0x824>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	60cb      	str	r3, [r1, #12]
 800c570:	e001      	b.n	800c576 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e000      	b.n	800c578 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3720      	adds	r7, #32
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	40021000 	.word	0x40021000
 800c584:	feeefffc 	.word	0xfeeefffc

0800c588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e0e7      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c59c:	4b75      	ldr	r3, [pc, #468]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0307 	and.w	r3, r3, #7
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d910      	bls.n	800c5cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5aa:	4b72      	ldr	r3, [pc, #456]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f023 0207 	bic.w	r2, r3, #7
 800c5b2:	4970      	ldr	r1, [pc, #448]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5ba:	4b6e      	ldr	r3, [pc, #440]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d001      	beq.n	800c5cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e0cf      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0302 	and.w	r3, r3, #2
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d010      	beq.n	800c5fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	689a      	ldr	r2, [r3, #8]
 800c5dc:	4b66      	ldr	r3, [pc, #408]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d908      	bls.n	800c5fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5e8:	4b63      	ldr	r3, [pc, #396]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	4960      	ldr	r1, [pc, #384]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	2b00      	cmp	r3, #0
 800c604:	d04c      	beq.n	800c6a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d107      	bne.n	800c61e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c60e:	4b5a      	ldr	r3, [pc, #360]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c616:	2b00      	cmp	r3, #0
 800c618:	d121      	bne.n	800c65e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e0a6      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	2b02      	cmp	r3, #2
 800c624:	d107      	bne.n	800c636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c626:	4b54      	ldr	r3, [pc, #336]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d115      	bne.n	800c65e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e09a      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d107      	bne.n	800c64e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c63e:	4b4e      	ldr	r3, [pc, #312]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0302 	and.w	r3, r3, #2
 800c646:	2b00      	cmp	r3, #0
 800c648:	d109      	bne.n	800c65e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e08e      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c64e:	4b4a      	ldr	r3, [pc, #296]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e086      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c65e:	4b46      	ldr	r3, [pc, #280]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	f023 0203 	bic.w	r2, r3, #3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	4943      	ldr	r1, [pc, #268]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c66c:	4313      	orrs	r3, r2
 800c66e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c670:	f7fc fd94 	bl	800919c <HAL_GetTick>
 800c674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c676:	e00a      	b.n	800c68e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c678:	f7fc fd90 	bl	800919c <HAL_GetTick>
 800c67c:	4602      	mov	r2, r0
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c686:	4293      	cmp	r3, r2
 800c688:	d901      	bls.n	800c68e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e06e      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c68e:	4b3a      	ldr	r3, [pc, #232]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	f003 020c 	and.w	r2, r3, #12
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d1eb      	bne.n	800c678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0302 	and.w	r3, r3, #2
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d010      	beq.n	800c6ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	4b31      	ldr	r3, [pc, #196]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d208      	bcs.n	800c6ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c6bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	492b      	ldr	r1, [pc, #172]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c6ce:	4b29      	ldr	r3, [pc, #164]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f003 0307 	and.w	r3, r3, #7
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d210      	bcs.n	800c6fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6dc:	4b25      	ldr	r3, [pc, #148]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f023 0207 	bic.w	r2, r3, #7
 800c6e4:	4923      	ldr	r1, [pc, #140]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ec:	4b21      	ldr	r3, [pc, #132]	@ (800c774 <HAL_RCC_ClockConfig+0x1ec>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 0307 	and.w	r3, r3, #7
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d001      	beq.n	800c6fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e036      	b.n	800c76c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 0304 	and.w	r3, r3, #4
 800c706:	2b00      	cmp	r3, #0
 800c708:	d008      	beq.n	800c71c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c70a:	4b1b      	ldr	r3, [pc, #108]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	4918      	ldr	r1, [pc, #96]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c718:	4313      	orrs	r3, r2
 800c71a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0308 	and.w	r3, r3, #8
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c728:	4b13      	ldr	r3, [pc, #76]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	00db      	lsls	r3, r3, #3
 800c736:	4910      	ldr	r1, [pc, #64]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c738:	4313      	orrs	r3, r2
 800c73a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c73c:	f000 f824 	bl	800c788 <HAL_RCC_GetSysClockFreq>
 800c740:	4602      	mov	r2, r0
 800c742:	4b0d      	ldr	r3, [pc, #52]	@ (800c778 <HAL_RCC_ClockConfig+0x1f0>)
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	091b      	lsrs	r3, r3, #4
 800c748:	f003 030f 	and.w	r3, r3, #15
 800c74c:	490b      	ldr	r1, [pc, #44]	@ (800c77c <HAL_RCC_ClockConfig+0x1f4>)
 800c74e:	5ccb      	ldrb	r3, [r1, r3]
 800c750:	f003 031f 	and.w	r3, r3, #31
 800c754:	fa22 f303 	lsr.w	r3, r2, r3
 800c758:	4a09      	ldr	r2, [pc, #36]	@ (800c780 <HAL_RCC_ClockConfig+0x1f8>)
 800c75a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c75c:	4b09      	ldr	r3, [pc, #36]	@ (800c784 <HAL_RCC_ClockConfig+0x1fc>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4618      	mov	r0, r3
 800c762:	f7fc fccb 	bl	80090fc <HAL_InitTick>
 800c766:	4603      	mov	r3, r0
 800c768:	72fb      	strb	r3, [r7, #11]

  return status;
 800c76a:	7afb      	ldrb	r3, [r7, #11]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	40022000 	.word	0x40022000
 800c778:	40021000 	.word	0x40021000
 800c77c:	08010574 	.word	0x08010574
 800c780:	20000000 	.word	0x20000000
 800c784:	20000018 	.word	0x20000018

0800c788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c788:	b480      	push	{r7}
 800c78a:	b089      	sub	sp, #36	@ 0x24
 800c78c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	61fb      	str	r3, [r7, #28]
 800c792:	2300      	movs	r3, #0
 800c794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c796:	4b3e      	ldr	r3, [pc, #248]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f003 030c 	and.w	r3, r3, #12
 800c79e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7a0:	4b3b      	ldr	r3, [pc, #236]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f003 0303 	and.w	r3, r3, #3
 800c7a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d005      	beq.n	800c7bc <HAL_RCC_GetSysClockFreq+0x34>
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	2b0c      	cmp	r3, #12
 800c7b4:	d121      	bne.n	800c7fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d11e      	bne.n	800c7fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c7bc:	4b34      	ldr	r3, [pc, #208]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f003 0308 	and.w	r3, r3, #8
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d107      	bne.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c7c8:	4b31      	ldr	r3, [pc, #196]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7ce:	0a1b      	lsrs	r3, r3, #8
 800c7d0:	f003 030f 	and.w	r3, r3, #15
 800c7d4:	61fb      	str	r3, [r7, #28]
 800c7d6:	e005      	b.n	800c7e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c7d8:	4b2d      	ldr	r3, [pc, #180]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	091b      	lsrs	r3, r3, #4
 800c7de:	f003 030f 	and.w	r3, r3, #15
 800c7e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c7e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c894 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10d      	bne.n	800c810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c7f8:	e00a      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b04      	cmp	r3, #4
 800c7fe:	d102      	bne.n	800c806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c800:	4b25      	ldr	r3, [pc, #148]	@ (800c898 <HAL_RCC_GetSysClockFreq+0x110>)
 800c802:	61bb      	str	r3, [r7, #24]
 800c804:	e004      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b08      	cmp	r3, #8
 800c80a:	d101      	bne.n	800c810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c80c:	4b23      	ldr	r3, [pc, #140]	@ (800c89c <HAL_RCC_GetSysClockFreq+0x114>)
 800c80e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	2b0c      	cmp	r3, #12
 800c814:	d134      	bne.n	800c880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c816:	4b1e      	ldr	r3, [pc, #120]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	f003 0303 	and.w	r3, r3, #3
 800c81e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d003      	beq.n	800c82e <HAL_RCC_GetSysClockFreq+0xa6>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d003      	beq.n	800c834 <HAL_RCC_GetSysClockFreq+0xac>
 800c82c:	e005      	b.n	800c83a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c82e:	4b1a      	ldr	r3, [pc, #104]	@ (800c898 <HAL_RCC_GetSysClockFreq+0x110>)
 800c830:	617b      	str	r3, [r7, #20]
      break;
 800c832:	e005      	b.n	800c840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c834:	4b19      	ldr	r3, [pc, #100]	@ (800c89c <HAL_RCC_GetSysClockFreq+0x114>)
 800c836:	617b      	str	r3, [r7, #20]
      break;
 800c838:	e002      	b.n	800c840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	617b      	str	r3, [r7, #20]
      break;
 800c83e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c840:	4b13      	ldr	r3, [pc, #76]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	091b      	lsrs	r3, r3, #4
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	3301      	adds	r3, #1
 800c84c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c84e:	4b10      	ldr	r3, [pc, #64]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	0a1b      	lsrs	r3, r3, #8
 800c854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	fb03 f202 	mul.w	r2, r3, r2
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	fbb2 f3f3 	udiv	r3, r2, r3
 800c864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c866:	4b0a      	ldr	r3, [pc, #40]	@ (800c890 <HAL_RCC_GetSysClockFreq+0x108>)
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	0e5b      	lsrs	r3, r3, #25
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	3301      	adds	r3, #1
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c880:	69bb      	ldr	r3, [r7, #24]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3724      	adds	r7, #36	@ 0x24
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	40021000 	.word	0x40021000
 800c894:	08010584 	.word	0x08010584
 800c898:	00f42400 	.word	0x00f42400
 800c89c:	007a1200 	.word	0x007a1200

0800c8a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c8ac:	4b2a      	ldr	r3, [pc, #168]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c8b8:	f7ff f9ee 	bl	800bc98 <HAL_PWREx_GetVoltageRange>
 800c8bc:	6178      	str	r0, [r7, #20]
 800c8be:	e014      	b.n	800c8ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c8c0:	4b25      	ldr	r3, [pc, #148]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8c4:	4a24      	ldr	r2, [pc, #144]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8cc:	4b22      	ldr	r3, [pc, #136]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c8d8:	f7ff f9de 	bl	800bc98 <HAL_PWREx_GetVoltageRange>
 800c8dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c8de:	4b1e      	ldr	r3, [pc, #120]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8e2:	4a1d      	ldr	r2, [pc, #116]	@ (800c958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8f0:	d10b      	bne.n	800c90a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b80      	cmp	r3, #128	@ 0x80
 800c8f6:	d919      	bls.n	800c92c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2ba0      	cmp	r3, #160	@ 0xa0
 800c8fc:	d902      	bls.n	800c904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c8fe:	2302      	movs	r3, #2
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	e013      	b.n	800c92c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c904:	2301      	movs	r3, #1
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	e010      	b.n	800c92c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b80      	cmp	r3, #128	@ 0x80
 800c90e:	d902      	bls.n	800c916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c910:	2303      	movs	r3, #3
 800c912:	613b      	str	r3, [r7, #16]
 800c914:	e00a      	b.n	800c92c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b80      	cmp	r3, #128	@ 0x80
 800c91a:	d102      	bne.n	800c922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c91c:	2302      	movs	r3, #2
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	e004      	b.n	800c92c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b70      	cmp	r3, #112	@ 0x70
 800c926:	d101      	bne.n	800c92c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c928:	2301      	movs	r3, #1
 800c92a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c92c:	4b0b      	ldr	r3, [pc, #44]	@ (800c95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f023 0207 	bic.w	r2, r3, #7
 800c934:	4909      	ldr	r1, [pc, #36]	@ (800c95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	4313      	orrs	r3, r2
 800c93a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c93c:	4b07      	ldr	r3, [pc, #28]	@ (800c95c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0307 	and.w	r3, r3, #7
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	429a      	cmp	r2, r3
 800c948:	d001      	beq.n	800c94e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e000      	b.n	800c950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	40021000 	.word	0x40021000
 800c95c:	40022000 	.word	0x40022000

0800c960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c968:	2300      	movs	r3, #0
 800c96a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c96c:	2300      	movs	r3, #0
 800c96e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d031      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c980:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c984:	d01a      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c986:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c98a:	d814      	bhi.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d009      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c990:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c994:	d10f      	bne.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c996:	4b5d      	ldr	r3, [pc, #372]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	4a5c      	ldr	r2, [pc, #368]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c99c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c9a2:	e00c      	b.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f9ce 	bl	800cd4c <RCCEx_PLLSAI1_Config>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c9b4:	e003      	b.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	74fb      	strb	r3, [r7, #19]
      break;
 800c9ba:	e000      	b.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c9bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9be:	7cfb      	ldrb	r3, [r7, #19]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10b      	bne.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9c4:	4b51      	ldr	r3, [pc, #324]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9d2:	494e      	ldr	r1, [pc, #312]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800c9da:	e001      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9dc:	7cfb      	ldrb	r3, [r7, #19]
 800c9de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 809e 	beq.w	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c9f2:	4b46      	ldr	r3, [pc, #280]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c9f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e000      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800ca02:	2300      	movs	r3, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00d      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca08:	4b40      	ldr	r3, [pc, #256]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca0c:	4a3f      	ldr	r2, [pc, #252]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca12:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca14:	4b3d      	ldr	r3, [pc, #244]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca1c:	60bb      	str	r3, [r7, #8]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca20:	2301      	movs	r3, #1
 800ca22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca24:	4b3a      	ldr	r3, [pc, #232]	@ (800cb10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a39      	ldr	r2, [pc, #228]	@ (800cb10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ca2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca30:	f7fc fbb4 	bl	800919c <HAL_GetTick>
 800ca34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ca36:	e009      	b.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca38:	f7fc fbb0 	bl	800919c <HAL_GetTick>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d902      	bls.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	74fb      	strb	r3, [r7, #19]
        break;
 800ca4a:	e005      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ca4c:	4b30      	ldr	r3, [pc, #192]	@ (800cb10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0ef      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800ca58:	7cfb      	ldrb	r3, [r7, #19]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d15a      	bne.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ca5e:	4b2b      	ldr	r3, [pc, #172]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01e      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d019      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ca7a:	4b24      	ldr	r3, [pc, #144]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca86:	4b21      	ldr	r3, [pc, #132]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca8c:	4a1f      	ldr	r2, [pc, #124]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ca96:	4b1d      	ldr	r3, [pc, #116]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca9c:	4a1b      	ldr	r2, [pc, #108]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800caa6:	4a19      	ldr	r2, [pc, #100]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d016      	beq.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab8:	f7fc fb70 	bl	800919c <HAL_GetTick>
 800cabc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cabe:	e00b      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cac0:	f7fc fb6c 	bl	800919c <HAL_GetTick>
 800cac4:	4602      	mov	r2, r0
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cace:	4293      	cmp	r3, r2
 800cad0:	d902      	bls.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	74fb      	strb	r3, [r7, #19]
            break;
 800cad6:	e006      	b.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cad8:	4b0c      	ldr	r3, [pc, #48]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cade:	f003 0302 	and.w	r3, r3, #2
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0ec      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800cae6:	7cfb      	ldrb	r3, [r7, #19]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10b      	bne.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800caec:	4b07      	ldr	r3, [pc, #28]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800caee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cafa:	4904      	ldr	r1, [pc, #16]	@ (800cb0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cafc:	4313      	orrs	r3, r2
 800cafe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cb02:	e009      	b.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb04:	7cfb      	ldrb	r3, [r7, #19]
 800cb06:	74bb      	strb	r3, [r7, #18]
 800cb08:	e006      	b.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800cb0a:	bf00      	nop
 800cb0c:	40021000 	.word	0x40021000
 800cb10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb14:	7cfb      	ldrb	r3, [r7, #19]
 800cb16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb18:	7c7b      	ldrb	r3, [r7, #17]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d105      	bne.n	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb1e:	4b8a      	ldr	r3, [pc, #552]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb22:	4a89      	ldr	r2, [pc, #548]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00a      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cb36:	4b84      	ldr	r3, [pc, #528]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb3c:	f023 0203 	bic.w	r2, r3, #3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	4980      	ldr	r1, [pc, #512]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0302 	and.w	r3, r3, #2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00a      	beq.n	800cb6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cb58:	4b7b      	ldr	r3, [pc, #492]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb5e:	f023 020c 	bic.w	r2, r3, #12
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb66:	4978      	ldr	r1, [pc, #480]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 0320 	and.w	r3, r3, #32
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00a      	beq.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cb7a:	4b73      	ldr	r3, [pc, #460]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb88:	496f      	ldr	r1, [pc, #444]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00a      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cb9c:	4b6a      	ldr	r3, [pc, #424]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cba2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbaa:	4967      	ldr	r1, [pc, #412]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbac:	4313      	orrs	r3, r2
 800cbae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cbbe:	4b62      	ldr	r3, [pc, #392]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbcc:	495e      	ldr	r1, [pc, #376]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00a      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cbe0:	4b59      	ldr	r3, [pc, #356]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbe6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbee:	4956      	ldr	r1, [pc, #344]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cc02:	4b51      	ldr	r3, [pc, #324]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc10:	494d      	ldr	r1, [pc, #308]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc12:	4313      	orrs	r3, r2
 800cc14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d028      	beq.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cc24:	4b48      	ldr	r3, [pc, #288]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc32:	4945      	ldr	r1, [pc, #276]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc34:	4313      	orrs	r3, r2
 800cc36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc42:	d106      	bne.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cc44:	4b40      	ldr	r3, [pc, #256]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	4a3f      	ldr	r2, [pc, #252]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc4e:	60d3      	str	r3, [r2, #12]
 800cc50:	e011      	b.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc5a:	d10c      	bne.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	2101      	movs	r1, #1
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 f872 	bl	800cd4c <RCCEx_PLLSAI1_Config>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cc6c:	7cfb      	ldrb	r3, [r7, #19]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800cc72:	7cfb      	ldrb	r3, [r7, #19]
 800cc74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d028      	beq.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc82:	4b31      	ldr	r3, [pc, #196]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc90:	492d      	ldr	r1, [pc, #180]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc92:	4313      	orrs	r3, r2
 800cc94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cca0:	d106      	bne.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cca2:	4b29      	ldr	r3, [pc, #164]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	4a28      	ldr	r2, [pc, #160]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cca8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccac:	60d3      	str	r3, [r2, #12]
 800ccae:	e011      	b.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ccb8:	d10c      	bne.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	3304      	adds	r3, #4
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 f843 	bl	800cd4c <RCCEx_PLLSAI1_Config>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ccca:	7cfb      	ldrb	r3, [r7, #19]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d001      	beq.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800ccd0:	7cfb      	ldrb	r3, [r7, #19]
 800ccd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01c      	beq.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cce0:	4b19      	ldr	r3, [pc, #100]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cce6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccee:	4916      	ldr	r1, [pc, #88]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccfe:	d10c      	bne.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3304      	adds	r3, #4
 800cd04:	2102      	movs	r1, #2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f000 f820 	bl	800cd4c <RCCEx_PLLSAI1_Config>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cd10:	7cfb      	ldrb	r3, [r7, #19]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800cd16:	7cfb      	ldrb	r3, [r7, #19]
 800cd18:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cd26:	4b08      	ldr	r3, [pc, #32]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd2c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd34:	4904      	ldr	r1, [pc, #16]	@ (800cd48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cd3c:	7cbb      	ldrb	r3, [r7, #18]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	40021000 	.word	0x40021000

0800cd4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd5a:	4b74      	ldr	r3, [pc, #464]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	f003 0303 	and.w	r3, r3, #3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d018      	beq.n	800cd98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cd66:	4b71      	ldr	r3, [pc, #452]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	f003 0203 	and.w	r2, r3, #3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d10d      	bne.n	800cd92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
       ||
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d009      	beq.n	800cd92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cd7e:	4b6b      	ldr	r3, [pc, #428]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	091b      	lsrs	r3, r3, #4
 800cd84:	f003 0307 	and.w	r3, r3, #7
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
       ||
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d047      	beq.n	800ce22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	73fb      	strb	r3, [r7, #15]
 800cd96:	e044      	b.n	800ce22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d018      	beq.n	800cdd2 <RCCEx_PLLSAI1_Config+0x86>
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d825      	bhi.n	800cdf0 <RCCEx_PLLSAI1_Config+0xa4>
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d002      	beq.n	800cdae <RCCEx_PLLSAI1_Config+0x62>
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d009      	beq.n	800cdc0 <RCCEx_PLLSAI1_Config+0x74>
 800cdac:	e020      	b.n	800cdf0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cdae:	4b5f      	ldr	r3, [pc, #380]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d11d      	bne.n	800cdf6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdbe:	e01a      	b.n	800cdf6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cdc0:	4b5a      	ldr	r3, [pc, #360]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d116      	bne.n	800cdfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdd0:	e013      	b.n	800cdfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cdd2:	4b56      	ldr	r3, [pc, #344]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10f      	bne.n	800cdfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cdde:	4b53      	ldr	r3, [pc, #332]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d109      	bne.n	800cdfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdee:	e006      	b.n	800cdfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf4:	e004      	b.n	800ce00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cdf6:	bf00      	nop
 800cdf8:	e002      	b.n	800ce00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cdfa:	bf00      	nop
 800cdfc:	e000      	b.n	800ce00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cdfe:	bf00      	nop
    }

    if(status == HAL_OK)
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10d      	bne.n	800ce22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ce06:	4b49      	ldr	r3, [pc, #292]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6819      	ldr	r1, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	3b01      	subs	r3, #1
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	430b      	orrs	r3, r1
 800ce1c:	4943      	ldr	r1, [pc, #268]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d17c      	bne.n	800cf22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ce28:	4b40      	ldr	r3, [pc, #256]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a3f      	ldr	r2, [pc, #252]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce34:	f7fc f9b2 	bl	800919c <HAL_GetTick>
 800ce38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce3a:	e009      	b.n	800ce50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce3c:	f7fc f9ae 	bl	800919c <HAL_GetTick>
 800ce40:	4602      	mov	r2, r0
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d902      	bls.n	800ce50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	73fb      	strb	r3, [r7, #15]
        break;
 800ce4e:	e005      	b.n	800ce5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce50:	4b36      	ldr	r3, [pc, #216]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1ef      	bne.n	800ce3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d15f      	bne.n	800cf22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d110      	bne.n	800ce8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ce68:	4b30      	ldr	r3, [pc, #192]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800ce70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	6892      	ldr	r2, [r2, #8]
 800ce78:	0211      	lsls	r1, r2, #8
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	68d2      	ldr	r2, [r2, #12]
 800ce7e:	06d2      	lsls	r2, r2, #27
 800ce80:	430a      	orrs	r2, r1
 800ce82:	492a      	ldr	r1, [pc, #168]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce84:	4313      	orrs	r3, r2
 800ce86:	610b      	str	r3, [r1, #16]
 800ce88:	e027      	b.n	800ceda <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d112      	bne.n	800ceb6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ce90:	4b26      	ldr	r3, [pc, #152]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800ce98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6892      	ldr	r2, [r2, #8]
 800cea0:	0211      	lsls	r1, r2, #8
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	6912      	ldr	r2, [r2, #16]
 800cea6:	0852      	lsrs	r2, r2, #1
 800cea8:	3a01      	subs	r2, #1
 800ceaa:	0552      	lsls	r2, r2, #21
 800ceac:	430a      	orrs	r2, r1
 800ceae:	491f      	ldr	r1, [pc, #124]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	610b      	str	r3, [r1, #16]
 800ceb4:	e011      	b.n	800ceda <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ceb6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800cebe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	6892      	ldr	r2, [r2, #8]
 800cec6:	0211      	lsls	r1, r2, #8
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	6952      	ldr	r2, [r2, #20]
 800cecc:	0852      	lsrs	r2, r2, #1
 800cece:	3a01      	subs	r2, #1
 800ced0:	0652      	lsls	r2, r2, #25
 800ced2:	430a      	orrs	r2, r1
 800ced4:	4915      	ldr	r1, [pc, #84]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ceda:	4b14      	ldr	r3, [pc, #80]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a13      	ldr	r2, [pc, #76]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cee0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cee4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cee6:	f7fc f959 	bl	800919c <HAL_GetTick>
 800ceea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ceec:	e009      	b.n	800cf02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ceee:	f7fc f955 	bl	800919c <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d902      	bls.n	800cf02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cefc:	2303      	movs	r3, #3
 800cefe:	73fb      	strb	r3, [r7, #15]
          break;
 800cf00:	e005      	b.n	800cf0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cf02:	4b0a      	ldr	r3, [pc, #40]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d0ef      	beq.n	800ceee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cf14:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf16:	691a      	ldr	r2, [r3, #16]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	4903      	ldr	r1, [pc, #12]	@ (800cf2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	40021000 	.word	0x40021000

0800cf30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e095      	b.n	800d06e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d108      	bne.n	800cf5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf52:	d009      	beq.n	800cf68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	61da      	str	r2, [r3, #28]
 800cf5a:	e005      	b.n	800cf68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7f9 fa78 	bl	8006478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cfa8:	d902      	bls.n	800cfb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	60fb      	str	r3, [r7, #12]
 800cfae:	e002      	b.n	800cfb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cfb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cfbe:	d007      	beq.n	800cfd0 <HAL_SPI_Init+0xa0>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cfc8:	d002      	beq.n	800cfd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cfe0:	431a      	orrs	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	f003 0302 	and.w	r3, r3, #2
 800cfea:	431a      	orrs	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	431a      	orrs	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cffe:	431a      	orrs	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d008:	431a      	orrs	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d012:	ea42 0103 	orr.w	r1, r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d01a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	430a      	orrs	r2, r1
 800d024:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	0c1b      	lsrs	r3, r3, #16
 800d02c:	f003 0204 	and.w	r2, r3, #4
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d034:	f003 0310 	and.w	r3, r3, #16
 800d038:	431a      	orrs	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03e:	f003 0308 	and.w	r3, r3, #8
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d04c:	ea42 0103 	orr.w	r1, r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	430a      	orrs	r2, r1
 800d05c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b08a      	sub	sp, #40	@ 0x28
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	60f8      	str	r0, [r7, #12]
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	607a      	str	r2, [r7, #4]
 800d082:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d084:	2301      	movs	r3, #1
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d088:	f7fc f888 	bl	800919c <HAL_GetTick>
 800d08c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d094:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d09c:	887b      	ldrh	r3, [r7, #2]
 800d09e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d0a0:	887b      	ldrh	r3, [r7, #2]
 800d0a2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d0a4:	7ffb      	ldrb	r3, [r7, #31]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d00c      	beq.n	800d0c4 <HAL_SPI_TransmitReceive+0x4e>
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d0b0:	d106      	bne.n	800d0c0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d102      	bne.n	800d0c0 <HAL_SPI_TransmitReceive+0x4a>
 800d0ba:	7ffb      	ldrb	r3, [r7, #31]
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	d001      	beq.n	800d0c4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	e1f3      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d005      	beq.n	800d0d6 <HAL_SPI_TransmitReceive+0x60>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <HAL_SPI_TransmitReceive+0x60>
 800d0d0:	887b      	ldrh	r3, [r7, #2]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e1e8      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d101      	bne.n	800d0e8 <HAL_SPI_TransmitReceive+0x72>
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	e1e1      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b04      	cmp	r3, #4
 800d0fa:	d003      	beq.n	800d104 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2205      	movs	r2, #5
 800d100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	887a      	ldrh	r2, [r7, #2]
 800d114:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	887a      	ldrh	r2, [r7, #2]
 800d11c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	887a      	ldrh	r2, [r7, #2]
 800d12a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	887a      	ldrh	r2, [r7, #2]
 800d130:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d146:	d802      	bhi.n	800d14e <HAL_SPI_TransmitReceive+0xd8>
 800d148:	8abb      	ldrh	r3, [r7, #20]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d908      	bls.n	800d160 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	685a      	ldr	r2, [r3, #4]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d15c:	605a      	str	r2, [r3, #4]
 800d15e:	e007      	b.n	800d170 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d16e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d17a:	2b40      	cmp	r3, #64	@ 0x40
 800d17c:	d007      	beq.n	800d18e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d18c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d196:	f240 8083 	bls.w	800d2a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <HAL_SPI_TransmitReceive+0x132>
 800d1a2:	8afb      	ldrh	r3, [r7, #22]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d16f      	bne.n	800d288 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1ac:	881a      	ldrh	r2, [r3, #0]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b8:	1c9a      	adds	r2, r3, #2
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1cc:	e05c      	b.n	800d288 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f003 0302 	and.w	r3, r3, #2
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d11b      	bne.n	800d214 <HAL_SPI_TransmitReceive+0x19e>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d016      	beq.n	800d214 <HAL_SPI_TransmitReceive+0x19e>
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d113      	bne.n	800d214 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f0:	881a      	ldrh	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1fc:	1c9a      	adds	r2, r3, #2
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d206:	b29b      	uxth	r3, r3
 800d208:	3b01      	subs	r3, #1
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d210:	2300      	movs	r3, #0
 800d212:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	f003 0301 	and.w	r3, r3, #1
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d11c      	bne.n	800d25c <HAL_SPI_TransmitReceive+0x1e6>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d228:	b29b      	uxth	r3, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d016      	beq.n	800d25c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68da      	ldr	r2, [r3, #12]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d238:	b292      	uxth	r2, r2
 800d23a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d240:	1c9a      	adds	r2, r3, #2
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d258:	2301      	movs	r3, #1
 800d25a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d25c:	f7fb ff9e 	bl	800919c <HAL_GetTick>
 800d260:	4602      	mov	r2, r0
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d268:	429a      	cmp	r2, r3
 800d26a:	d80d      	bhi.n	800d288 <HAL_SPI_TransmitReceive+0x212>
 800d26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d272:	d009      	beq.n	800d288 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d284:	2303      	movs	r3, #3
 800d286:	e111      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d19d      	bne.n	800d1ce <HAL_SPI_TransmitReceive+0x158>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d298:	b29b      	uxth	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d197      	bne.n	800d1ce <HAL_SPI_TransmitReceive+0x158>
 800d29e:	e0e5      	b.n	800d46c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d003      	beq.n	800d2b0 <HAL_SPI_TransmitReceive+0x23a>
 800d2a8:	8afb      	ldrh	r3, [r7, #22]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	f040 80d1 	bne.w	800d452 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d912      	bls.n	800d2e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2be:	881a      	ldrh	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ca:	1c9a      	adds	r2, r3, #2
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	3b02      	subs	r3, #2
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d2de:	e0b8      	b.n	800d452 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	330c      	adds	r3, #12
 800d2ea:	7812      	ldrb	r2, [r2, #0]
 800d2ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	3b01      	subs	r3, #1
 800d300:	b29a      	uxth	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d306:	e0a4      	b.n	800d452 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	f003 0302 	and.w	r3, r3, #2
 800d312:	2b02      	cmp	r3, #2
 800d314:	d134      	bne.n	800d380 <HAL_SPI_TransmitReceive+0x30a>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d02f      	beq.n	800d380 <HAL_SPI_TransmitReceive+0x30a>
 800d320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d322:	2b01      	cmp	r3, #1
 800d324:	d12c      	bne.n	800d380 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d912      	bls.n	800d356 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d340:	1c9a      	adds	r2, r3, #2
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	3b02      	subs	r3, #2
 800d34e:	b29a      	uxth	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d354:	e012      	b.n	800d37c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	330c      	adds	r3, #12
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d372:	b29b      	uxth	r3, r3
 800d374:	3b01      	subs	r3, #1
 800d376:	b29a      	uxth	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d37c:	2300      	movs	r3, #0
 800d37e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d148      	bne.n	800d420 <HAL_SPI_TransmitReceive+0x3aa>
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d394:	b29b      	uxth	r3, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	d042      	beq.n	800d420 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d923      	bls.n	800d3ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68da      	ldr	r2, [r3, #12]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b0:	b292      	uxth	r2, r2
 800d3b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b8:	1c9a      	adds	r2, r3, #2
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	3b02      	subs	r3, #2
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d81f      	bhi.n	800d41c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d3ea:	605a      	str	r2, [r3, #4]
 800d3ec:	e016      	b.n	800d41c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f103 020c 	add.w	r2, r3, #12
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3fa:	7812      	ldrb	r2, [r2, #0]
 800d3fc:	b2d2      	uxtb	r2, r2
 800d3fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d410:	b29b      	uxth	r3, r3
 800d412:	3b01      	subs	r3, #1
 800d414:	b29a      	uxth	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d41c:	2301      	movs	r3, #1
 800d41e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d420:	f7fb febc 	bl	800919c <HAL_GetTick>
 800d424:	4602      	mov	r2, r0
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d803      	bhi.n	800d438 <HAL_SPI_TransmitReceive+0x3c2>
 800d430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d436:	d102      	bne.n	800d43e <HAL_SPI_TransmitReceive+0x3c8>
 800d438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e02c      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d456:	b29b      	uxth	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f47f af55 	bne.w	800d308 <HAL_SPI_TransmitReceive+0x292>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d464:	b29b      	uxth	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	f47f af4e 	bne.w	800d308 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d46c:	6a3a      	ldr	r2, [r7, #32]
 800d46e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f000 fa51 	bl	800d918 <SPI_EndRxTxTransaction>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d008      	beq.n	800d48e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2220      	movs	r2, #32
 800d480:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e00e      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e000      	b.n	800d4ac <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
  }
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3728      	adds	r7, #40	@ 0x28
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10e      	bne.n	800d4f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d009      	beq.n	800d4f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d004      	beq.n	800d4f4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	4798      	blx	r3
    return;
 800d4f2:	e0ce      	b.n	800d692 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	f003 0302 	and.w	r3, r3, #2
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d009      	beq.n	800d512 <HAL_SPI_IRQHandler+0x5e>
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d504:	2b00      	cmp	r3, #0
 800d506:	d004      	beq.n	800d512 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	4798      	blx	r3
    return;
 800d510:	e0bf      	b.n	800d692 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	f003 0320 	and.w	r3, r3, #32
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10a      	bne.n	800d532 <HAL_SPI_IRQHandler+0x7e>
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d522:	2b00      	cmp	r3, #0
 800d524:	d105      	bne.n	800d532 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80b0 	beq.w	800d692 <HAL_SPI_IRQHandler+0x1de>
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	f003 0320 	and.w	r3, r3, #32
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 80aa 	beq.w	800d692 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d544:	2b00      	cmp	r3, #0
 800d546:	d023      	beq.n	800d590 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2b03      	cmp	r3, #3
 800d552:	d011      	beq.n	800d578 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d558:	f043 0204 	orr.w	r2, r3, #4
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d560:	2300      	movs	r3, #0
 800d562:	617b      	str	r3, [r7, #20]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	617b      	str	r3, [r7, #20]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	e00b      	b.n	800d590 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d578:	2300      	movs	r3, #0
 800d57a:	613b      	str	r3, [r7, #16]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	613b      	str	r3, [r7, #16]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	613b      	str	r3, [r7, #16]
 800d58c:	693b      	ldr	r3, [r7, #16]
        return;
 800d58e:	e080      	b.n	800d692 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d014      	beq.n	800d5c4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d59e:	f043 0201 	orr.w	r2, r3, #1
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	60fb      	str	r3, [r7, #12]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5d2:	f043 0208 	orr.w	r2, r3, #8
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60bb      	str	r3, [r7, #8]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	60bb      	str	r3, [r7, #8]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d04f      	beq.n	800d690 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d5fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	f003 0302 	and.w	r3, r3, #2
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d104      	bne.n	800d61c <HAL_SPI_IRQHandler+0x168>
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	f003 0301 	and.w	r3, r3, #1
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d034      	beq.n	800d686 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f022 0203 	bic.w	r2, r2, #3
 800d62a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d630:	2b00      	cmp	r3, #0
 800d632:	d011      	beq.n	800d658 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d638:	4a17      	ldr	r2, [pc, #92]	@ (800d698 <HAL_SPI_IRQHandler+0x1e4>)
 800d63a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d640:	4618      	mov	r0, r3
 800d642:	f7fd fa3e 	bl	800aac2 <HAL_DMA_Abort_IT>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d005      	beq.n	800d658 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d650:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d016      	beq.n	800d68e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d664:	4a0c      	ldr	r2, [pc, #48]	@ (800d698 <HAL_SPI_IRQHandler+0x1e4>)
 800d666:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fd fa28 	bl	800aac2 <HAL_DMA_Abort_IT>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d67c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800d684:	e003      	b.n	800d68e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f808 	bl	800d69c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d68c:	e000      	b.n	800d690 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d68e:	bf00      	nop
    return;
 800d690:	bf00      	nop
  }
}
 800d692:	3720      	adds	r7, #32
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	0800d6b1 	.word	0x0800d6b1

0800d69c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f7ff ffe5 	bl	800d69c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d6ec:	f7fb fd56 	bl	800919c <HAL_GetTick>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d6fc:	f7fb fd4e 	bl	800919c <HAL_GetTick>
 800d700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d702:	4b39      	ldr	r3, [pc, #228]	@ (800d7e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	015b      	lsls	r3, r3, #5
 800d708:	0d1b      	lsrs	r3, r3, #20
 800d70a:	69fa      	ldr	r2, [r7, #28]
 800d70c:	fb02 f303 	mul.w	r3, r2, r3
 800d710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d712:	e054      	b.n	800d7be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d050      	beq.n	800d7be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d71c:	f7fb fd3e 	bl	800919c <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	69fa      	ldr	r2, [r7, #28]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d902      	bls.n	800d732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d13d      	bne.n	800d7ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d74a:	d111      	bne.n	800d770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d754:	d004      	beq.n	800d760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d75e:	d107      	bne.n	800d770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d76e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d778:	d10f      	bne.n	800d79a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	e017      	b.n	800d7de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d101      	bne.n	800d7b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	689a      	ldr	r2, [r3, #8]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	bf0c      	ite	eq
 800d7ce:	2301      	moveq	r3, #1
 800d7d0:	2300      	movne	r3, #0
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d19b      	bne.n	800d714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3720      	adds	r7, #32
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20000000 	.word	0x20000000

0800d7ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08a      	sub	sp, #40	@ 0x28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d7fe:	f7fb fccd 	bl	800919c <HAL_GetTick>
 800d802:	4602      	mov	r2, r0
 800d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	4413      	add	r3, r2
 800d80c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d80e:	f7fb fcc5 	bl	800919c <HAL_GetTick>
 800d812:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	330c      	adds	r3, #12
 800d81a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d81c:	4b3d      	ldr	r3, [pc, #244]	@ (800d914 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	4613      	mov	r3, r2
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4413      	add	r3, r2
 800d826:	00da      	lsls	r2, r3, #3
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	0d1b      	lsrs	r3, r3, #20
 800d82c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d82e:	fb02 f303 	mul.w	r3, r2, r3
 800d832:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d834:	e060      	b.n	800d8f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d83c:	d107      	bne.n	800d84e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d104      	bne.n	800d84e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d84c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d854:	d050      	beq.n	800d8f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d856:	f7fb fca1 	bl	800919c <HAL_GetTick>
 800d85a:	4602      	mov	r2, r0
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d862:	429a      	cmp	r2, r3
 800d864:	d902      	bls.n	800d86c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d13d      	bne.n	800d8e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d87a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d884:	d111      	bne.n	800d8aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d88e:	d004      	beq.n	800d89a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d898:	d107      	bne.n	800d8aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d8a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8b2:	d10f      	bne.n	800d8d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d8d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d8e4:	2303      	movs	r3, #3
 800d8e6:	e010      	b.n	800d90a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	689a      	ldr	r2, [r3, #8]
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	4013      	ands	r3, r2
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	429a      	cmp	r2, r3
 800d906:	d196      	bne.n	800d836 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3728      	adds	r7, #40	@ 0x28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	20000000 	.word	0x20000000

0800d918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff ff5b 	bl	800d7ec <SPI_WaitFifoStateUntilTimeout>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d007      	beq.n	800d94c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d940:	f043 0220 	orr.w	r2, r3, #32
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d948:	2303      	movs	r3, #3
 800d94a:	e027      	b.n	800d99c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	2200      	movs	r2, #0
 800d954:	2180      	movs	r1, #128	@ 0x80
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff fec0 	bl	800d6dc <SPI_WaitFlagStateUntilTimeout>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d966:	f043 0220 	orr.w	r2, r3, #32
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d96e:	2303      	movs	r3, #3
 800d970:	e014      	b.n	800d99c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2200      	movs	r2, #0
 800d97a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff ff34 	bl	800d7ec <SPI_WaitFifoStateUntilTimeout>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d007      	beq.n	800d99a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d98e:	f043 0220 	orr.w	r2, r3, #32
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d996:	2303      	movs	r3, #3
 800d998:	e000      	b.n	800d99c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d101      	bne.n	800d9b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e049      	b.n	800da4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7f8 ff6e 	bl	80068ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4610      	mov	r0, r2
 800d9e4:	f000 f9ba 	bl	800dd5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b01      	cmp	r3, #1
 800da66:	d001      	beq.n	800da6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	e03b      	b.n	800dae4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f042 0201 	orr.w	r2, r2, #1
 800da82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a19      	ldr	r2, [pc, #100]	@ (800daf0 <HAL_TIM_Base_Start_IT+0x9c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d009      	beq.n	800daa2 <HAL_TIM_Base_Start_IT+0x4e>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da96:	d004      	beq.n	800daa2 <HAL_TIM_Base_Start_IT+0x4e>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a15      	ldr	r2, [pc, #84]	@ (800daf4 <HAL_TIM_Base_Start_IT+0xa0>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d115      	bne.n	800dace <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	689a      	ldr	r2, [r3, #8]
 800daa8:	4b13      	ldr	r3, [pc, #76]	@ (800daf8 <HAL_TIM_Base_Start_IT+0xa4>)
 800daaa:	4013      	ands	r3, r2
 800daac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b06      	cmp	r3, #6
 800dab2:	d015      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x8c>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daba:	d011      	beq.n	800dae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f042 0201 	orr.w	r2, r2, #1
 800daca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dacc:	e008      	b.n	800dae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f042 0201 	orr.w	r2, r2, #1
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	e000      	b.n	800dae2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	40012c00 	.word	0x40012c00
 800daf4:	40014000 	.word	0x40014000
 800daf8:	00010007 	.word	0x00010007

0800dafc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f003 0302 	and.w	r3, r3, #2
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d020      	beq.n	800db60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f003 0302 	and.w	r3, r3, #2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01b      	beq.n	800db60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f06f 0202 	mvn.w	r2, #2
 800db30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	f003 0303 	and.w	r3, r3, #3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 f8e9 	bl	800dd1e <HAL_TIM_IC_CaptureCallback>
 800db4c:	e005      	b.n	800db5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f8db 	bl	800dd0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f8ec 	bl	800dd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	f003 0304 	and.w	r3, r3, #4
 800db66:	2b00      	cmp	r3, #0
 800db68:	d020      	beq.n	800dbac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f003 0304 	and.w	r3, r3, #4
 800db70:	2b00      	cmp	r3, #0
 800db72:	d01b      	beq.n	800dbac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f06f 0204 	mvn.w	r2, #4
 800db7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2202      	movs	r2, #2
 800db82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f8c3 	bl	800dd1e <HAL_TIM_IC_CaptureCallback>
 800db98:	e005      	b.n	800dba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 f8b5 	bl	800dd0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f8c6 	bl	800dd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f003 0308 	and.w	r3, r3, #8
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d020      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f003 0308 	and.w	r3, r3, #8
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d01b      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f06f 0208 	mvn.w	r2, #8
 800dbc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2204      	movs	r2, #4
 800dbce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	69db      	ldr	r3, [r3, #28]
 800dbd6:	f003 0303 	and.w	r3, r3, #3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f89d 	bl	800dd1e <HAL_TIM_IC_CaptureCallback>
 800dbe4:	e005      	b.n	800dbf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f88f 	bl	800dd0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 f8a0 	bl	800dd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f003 0310 	and.w	r3, r3, #16
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d020      	beq.n	800dc44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f003 0310 	and.w	r3, r3, #16
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d01b      	beq.n	800dc44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f06f 0210 	mvn.w	r2, #16
 800dc14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2208      	movs	r2, #8
 800dc1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	69db      	ldr	r3, [r3, #28]
 800dc22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 f877 	bl	800dd1e <HAL_TIM_IC_CaptureCallback>
 800dc30:	e005      	b.n	800dc3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 f869 	bl	800dd0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f87a 	bl	800dd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00c      	beq.n	800dc68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d007      	beq.n	800dc68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f06f 0201 	mvn.w	r2, #1
 800dc60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7f4 fa22 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d104      	bne.n	800dc7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00c      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 f943 	bl	800df1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00c      	beq.n	800dcba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dcb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 f93b 	bl	800df30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00c      	beq.n	800dcde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f834 	bl	800dd46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f003 0320 	and.w	r3, r3, #32
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00c      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f003 0320 	and.w	r3, r3, #32
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d007      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f06f 0220 	mvn.w	r2, #32
 800dcfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f903 	bl	800df08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd02:	bf00      	nop
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd0a:	b480      	push	{r7}
 800dd0c:	b083      	sub	sp, #12
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd12:	bf00      	nop
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd1e:	b480      	push	{r7}
 800dd20:	b083      	sub	sp, #12
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd26:	bf00      	nop
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b083      	sub	sp, #12
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd3a:	bf00      	nop
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b083      	sub	sp, #12
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd4e:	bf00      	nop
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
	...

0800dd5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a30      	ldr	r2, [pc, #192]	@ (800de30 <TIM_Base_SetConfig+0xd4>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d003      	beq.n	800dd7c <TIM_Base_SetConfig+0x20>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd7a:	d108      	bne.n	800dd8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a27      	ldr	r2, [pc, #156]	@ (800de30 <TIM_Base_SetConfig+0xd4>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00b      	beq.n	800ddae <TIM_Base_SetConfig+0x52>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd9c:	d007      	beq.n	800ddae <TIM_Base_SetConfig+0x52>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a24      	ldr	r2, [pc, #144]	@ (800de34 <TIM_Base_SetConfig+0xd8>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d003      	beq.n	800ddae <TIM_Base_SetConfig+0x52>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a23      	ldr	r2, [pc, #140]	@ (800de38 <TIM_Base_SetConfig+0xdc>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d108      	bne.n	800ddc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ddb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	689a      	ldr	r2, [r3, #8]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a12      	ldr	r2, [pc, #72]	@ (800de30 <TIM_Base_SetConfig+0xd4>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d007      	beq.n	800ddfc <TIM_Base_SetConfig+0xa0>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a11      	ldr	r2, [pc, #68]	@ (800de34 <TIM_Base_SetConfig+0xd8>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d003      	beq.n	800ddfc <TIM_Base_SetConfig+0xa0>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a10      	ldr	r2, [pc, #64]	@ (800de38 <TIM_Base_SetConfig+0xdc>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d103      	bne.n	800de04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	691a      	ldr	r2, [r3, #16]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	2b01      	cmp	r3, #1
 800de14:	d105      	bne.n	800de22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	f023 0201 	bic.w	r2, r3, #1
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	611a      	str	r2, [r3, #16]
  }
}
 800de22:	bf00      	nop
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	40012c00 	.word	0x40012c00
 800de34:	40014000 	.word	0x40014000
 800de38:	40014400 	.word	0x40014400

0800de3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d101      	bne.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de50:	2302      	movs	r3, #2
 800de52:	e04f      	b.n	800def4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2202      	movs	r2, #2
 800de60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a21      	ldr	r2, [pc, #132]	@ (800df00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d108      	bne.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800de84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a14      	ldr	r2, [pc, #80]	@ (800df00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d009      	beq.n	800dec8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800debc:	d004      	beq.n	800dec8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a10      	ldr	r2, [pc, #64]	@ (800df04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d10c      	bne.n	800dee2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dece:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	40012c00 	.word	0x40012c00
 800df04:	40014000 	.word	0x40014000

0800df08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <__assert_func>:
 800df44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df46:	4614      	mov	r4, r2
 800df48:	461a      	mov	r2, r3
 800df4a:	4b09      	ldr	r3, [pc, #36]	@ (800df70 <__assert_func+0x2c>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4605      	mov	r5, r0
 800df50:	68d8      	ldr	r0, [r3, #12]
 800df52:	b954      	cbnz	r4, 800df6a <__assert_func+0x26>
 800df54:	4b07      	ldr	r3, [pc, #28]	@ (800df74 <__assert_func+0x30>)
 800df56:	461c      	mov	r4, r3
 800df58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df5c:	9100      	str	r1, [sp, #0]
 800df5e:	462b      	mov	r3, r5
 800df60:	4905      	ldr	r1, [pc, #20]	@ (800df78 <__assert_func+0x34>)
 800df62:	f000 f8b1 	bl	800e0c8 <fiprintf>
 800df66:	f000 f9ac 	bl	800e2c2 <abort>
 800df6a:	4b04      	ldr	r3, [pc, #16]	@ (800df7c <__assert_func+0x38>)
 800df6c:	e7f4      	b.n	800df58 <__assert_func+0x14>
 800df6e:	bf00      	nop
 800df70:	2000002c 	.word	0x2000002c
 800df74:	080105ef 	.word	0x080105ef
 800df78:	080105c1 	.word	0x080105c1
 800df7c:	080105b4 	.word	0x080105b4

0800df80 <std>:
 800df80:	2300      	movs	r3, #0
 800df82:	b510      	push	{r4, lr}
 800df84:	4604      	mov	r4, r0
 800df86:	e9c0 3300 	strd	r3, r3, [r0]
 800df8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df8e:	6083      	str	r3, [r0, #8]
 800df90:	8181      	strh	r1, [r0, #12]
 800df92:	6643      	str	r3, [r0, #100]	@ 0x64
 800df94:	81c2      	strh	r2, [r0, #14]
 800df96:	6183      	str	r3, [r0, #24]
 800df98:	4619      	mov	r1, r3
 800df9a:	2208      	movs	r2, #8
 800df9c:	305c      	adds	r0, #92	@ 0x5c
 800df9e:	f000 f906 	bl	800e1ae <memset>
 800dfa2:	4b0d      	ldr	r3, [pc, #52]	@ (800dfd8 <std+0x58>)
 800dfa4:	6263      	str	r3, [r4, #36]	@ 0x24
 800dfa6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfdc <std+0x5c>)
 800dfa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe0 <std+0x60>)
 800dfac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dfae:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <std+0x64>)
 800dfb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800dfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe8 <std+0x68>)
 800dfb4:	6224      	str	r4, [r4, #32]
 800dfb6:	429c      	cmp	r4, r3
 800dfb8:	d006      	beq.n	800dfc8 <std+0x48>
 800dfba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dfbe:	4294      	cmp	r4, r2
 800dfc0:	d002      	beq.n	800dfc8 <std+0x48>
 800dfc2:	33d0      	adds	r3, #208	@ 0xd0
 800dfc4:	429c      	cmp	r4, r3
 800dfc6:	d105      	bne.n	800dfd4 <std+0x54>
 800dfc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd0:	f000 b966 	b.w	800e2a0 <__retarget_lock_init_recursive>
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	bf00      	nop
 800dfd8:	0800e129 	.word	0x0800e129
 800dfdc:	0800e14b 	.word	0x0800e14b
 800dfe0:	0800e183 	.word	0x0800e183
 800dfe4:	0800e1a7 	.word	0x0800e1a7
 800dfe8:	20000610 	.word	0x20000610

0800dfec <stdio_exit_handler>:
 800dfec:	4a02      	ldr	r2, [pc, #8]	@ (800dff8 <stdio_exit_handler+0xc>)
 800dfee:	4903      	ldr	r1, [pc, #12]	@ (800dffc <stdio_exit_handler+0x10>)
 800dff0:	4803      	ldr	r0, [pc, #12]	@ (800e000 <stdio_exit_handler+0x14>)
 800dff2:	f000 b87b 	b.w	800e0ec <_fwalk_sglue>
 800dff6:	bf00      	nop
 800dff8:	20000020 	.word	0x20000020
 800dffc:	0800eb69 	.word	0x0800eb69
 800e000:	20000030 	.word	0x20000030

0800e004 <cleanup_stdio>:
 800e004:	6841      	ldr	r1, [r0, #4]
 800e006:	4b0c      	ldr	r3, [pc, #48]	@ (800e038 <cleanup_stdio+0x34>)
 800e008:	4299      	cmp	r1, r3
 800e00a:	b510      	push	{r4, lr}
 800e00c:	4604      	mov	r4, r0
 800e00e:	d001      	beq.n	800e014 <cleanup_stdio+0x10>
 800e010:	f000 fdaa 	bl	800eb68 <_fflush_r>
 800e014:	68a1      	ldr	r1, [r4, #8]
 800e016:	4b09      	ldr	r3, [pc, #36]	@ (800e03c <cleanup_stdio+0x38>)
 800e018:	4299      	cmp	r1, r3
 800e01a:	d002      	beq.n	800e022 <cleanup_stdio+0x1e>
 800e01c:	4620      	mov	r0, r4
 800e01e:	f000 fda3 	bl	800eb68 <_fflush_r>
 800e022:	68e1      	ldr	r1, [r4, #12]
 800e024:	4b06      	ldr	r3, [pc, #24]	@ (800e040 <cleanup_stdio+0x3c>)
 800e026:	4299      	cmp	r1, r3
 800e028:	d004      	beq.n	800e034 <cleanup_stdio+0x30>
 800e02a:	4620      	mov	r0, r4
 800e02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e030:	f000 bd9a 	b.w	800eb68 <_fflush_r>
 800e034:	bd10      	pop	{r4, pc}
 800e036:	bf00      	nop
 800e038:	20000610 	.word	0x20000610
 800e03c:	20000678 	.word	0x20000678
 800e040:	200006e0 	.word	0x200006e0

0800e044 <global_stdio_init.part.0>:
 800e044:	b510      	push	{r4, lr}
 800e046:	4b0b      	ldr	r3, [pc, #44]	@ (800e074 <global_stdio_init.part.0+0x30>)
 800e048:	4c0b      	ldr	r4, [pc, #44]	@ (800e078 <global_stdio_init.part.0+0x34>)
 800e04a:	4a0c      	ldr	r2, [pc, #48]	@ (800e07c <global_stdio_init.part.0+0x38>)
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	4620      	mov	r0, r4
 800e050:	2200      	movs	r2, #0
 800e052:	2104      	movs	r1, #4
 800e054:	f7ff ff94 	bl	800df80 <std>
 800e058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e05c:	2201      	movs	r2, #1
 800e05e:	2109      	movs	r1, #9
 800e060:	f7ff ff8e 	bl	800df80 <std>
 800e064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e068:	2202      	movs	r2, #2
 800e06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e06e:	2112      	movs	r1, #18
 800e070:	f7ff bf86 	b.w	800df80 <std>
 800e074:	20000748 	.word	0x20000748
 800e078:	20000610 	.word	0x20000610
 800e07c:	0800dfed 	.word	0x0800dfed

0800e080 <__sfp_lock_acquire>:
 800e080:	4801      	ldr	r0, [pc, #4]	@ (800e088 <__sfp_lock_acquire+0x8>)
 800e082:	f000 b90e 	b.w	800e2a2 <__retarget_lock_acquire_recursive>
 800e086:	bf00      	nop
 800e088:	20000751 	.word	0x20000751

0800e08c <__sfp_lock_release>:
 800e08c:	4801      	ldr	r0, [pc, #4]	@ (800e094 <__sfp_lock_release+0x8>)
 800e08e:	f000 b909 	b.w	800e2a4 <__retarget_lock_release_recursive>
 800e092:	bf00      	nop
 800e094:	20000751 	.word	0x20000751

0800e098 <__sinit>:
 800e098:	b510      	push	{r4, lr}
 800e09a:	4604      	mov	r4, r0
 800e09c:	f7ff fff0 	bl	800e080 <__sfp_lock_acquire>
 800e0a0:	6a23      	ldr	r3, [r4, #32]
 800e0a2:	b11b      	cbz	r3, 800e0ac <__sinit+0x14>
 800e0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a8:	f7ff bff0 	b.w	800e08c <__sfp_lock_release>
 800e0ac:	4b04      	ldr	r3, [pc, #16]	@ (800e0c0 <__sinit+0x28>)
 800e0ae:	6223      	str	r3, [r4, #32]
 800e0b0:	4b04      	ldr	r3, [pc, #16]	@ (800e0c4 <__sinit+0x2c>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1f5      	bne.n	800e0a4 <__sinit+0xc>
 800e0b8:	f7ff ffc4 	bl	800e044 <global_stdio_init.part.0>
 800e0bc:	e7f2      	b.n	800e0a4 <__sinit+0xc>
 800e0be:	bf00      	nop
 800e0c0:	0800e005 	.word	0x0800e005
 800e0c4:	20000748 	.word	0x20000748

0800e0c8 <fiprintf>:
 800e0c8:	b40e      	push	{r1, r2, r3}
 800e0ca:	b503      	push	{r0, r1, lr}
 800e0cc:	4601      	mov	r1, r0
 800e0ce:	ab03      	add	r3, sp, #12
 800e0d0:	4805      	ldr	r0, [pc, #20]	@ (800e0e8 <fiprintf+0x20>)
 800e0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0d6:	6800      	ldr	r0, [r0, #0]
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f000 fa1b 	bl	800e514 <_vfiprintf_r>
 800e0de:	b002      	add	sp, #8
 800e0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0e4:	b003      	add	sp, #12
 800e0e6:	4770      	bx	lr
 800e0e8:	2000002c 	.word	0x2000002c

0800e0ec <_fwalk_sglue>:
 800e0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f0:	4607      	mov	r7, r0
 800e0f2:	4688      	mov	r8, r1
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	2600      	movs	r6, #0
 800e0f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0fc:	f1b9 0901 	subs.w	r9, r9, #1
 800e100:	d505      	bpl.n	800e10e <_fwalk_sglue+0x22>
 800e102:	6824      	ldr	r4, [r4, #0]
 800e104:	2c00      	cmp	r4, #0
 800e106:	d1f7      	bne.n	800e0f8 <_fwalk_sglue+0xc>
 800e108:	4630      	mov	r0, r6
 800e10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10e:	89ab      	ldrh	r3, [r5, #12]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d907      	bls.n	800e124 <_fwalk_sglue+0x38>
 800e114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e118:	3301      	adds	r3, #1
 800e11a:	d003      	beq.n	800e124 <_fwalk_sglue+0x38>
 800e11c:	4629      	mov	r1, r5
 800e11e:	4638      	mov	r0, r7
 800e120:	47c0      	blx	r8
 800e122:	4306      	orrs	r6, r0
 800e124:	3568      	adds	r5, #104	@ 0x68
 800e126:	e7e9      	b.n	800e0fc <_fwalk_sglue+0x10>

0800e128 <__sread>:
 800e128:	b510      	push	{r4, lr}
 800e12a:	460c      	mov	r4, r1
 800e12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e130:	f000 f868 	bl	800e204 <_read_r>
 800e134:	2800      	cmp	r0, #0
 800e136:	bfab      	itete	ge
 800e138:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e13a:	89a3      	ldrhlt	r3, [r4, #12]
 800e13c:	181b      	addge	r3, r3, r0
 800e13e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e142:	bfac      	ite	ge
 800e144:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e146:	81a3      	strhlt	r3, [r4, #12]
 800e148:	bd10      	pop	{r4, pc}

0800e14a <__swrite>:
 800e14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14e:	461f      	mov	r7, r3
 800e150:	898b      	ldrh	r3, [r1, #12]
 800e152:	05db      	lsls	r3, r3, #23
 800e154:	4605      	mov	r5, r0
 800e156:	460c      	mov	r4, r1
 800e158:	4616      	mov	r6, r2
 800e15a:	d505      	bpl.n	800e168 <__swrite+0x1e>
 800e15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e160:	2302      	movs	r3, #2
 800e162:	2200      	movs	r2, #0
 800e164:	f000 f83c 	bl	800e1e0 <_lseek_r>
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e16e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	4632      	mov	r2, r6
 800e176:	463b      	mov	r3, r7
 800e178:	4628      	mov	r0, r5
 800e17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e17e:	f000 b853 	b.w	800e228 <_write_r>

0800e182 <__sseek>:
 800e182:	b510      	push	{r4, lr}
 800e184:	460c      	mov	r4, r1
 800e186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e18a:	f000 f829 	bl	800e1e0 <_lseek_r>
 800e18e:	1c43      	adds	r3, r0, #1
 800e190:	89a3      	ldrh	r3, [r4, #12]
 800e192:	bf15      	itete	ne
 800e194:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e196:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e19a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e19e:	81a3      	strheq	r3, [r4, #12]
 800e1a0:	bf18      	it	ne
 800e1a2:	81a3      	strhne	r3, [r4, #12]
 800e1a4:	bd10      	pop	{r4, pc}

0800e1a6 <__sclose>:
 800e1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1aa:	f000 b809 	b.w	800e1c0 <_close_r>

0800e1ae <memset>:
 800e1ae:	4402      	add	r2, r0
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d100      	bne.n	800e1b8 <memset+0xa>
 800e1b6:	4770      	bx	lr
 800e1b8:	f803 1b01 	strb.w	r1, [r3], #1
 800e1bc:	e7f9      	b.n	800e1b2 <memset+0x4>
	...

0800e1c0 <_close_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d06      	ldr	r5, [pc, #24]	@ (800e1dc <_close_r+0x1c>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	602b      	str	r3, [r5, #0]
 800e1cc:	f7f8 fa82 	bl	80066d4 <_close>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_close_r+0x1a>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_close_r+0x1a>
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	2000074c 	.word	0x2000074c

0800e1e0 <_lseek_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4d07      	ldr	r5, [pc, #28]	@ (800e200 <_lseek_r+0x20>)
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	4608      	mov	r0, r1
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	602a      	str	r2, [r5, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	f7f8 fa97 	bl	8006722 <_lseek>
 800e1f4:	1c43      	adds	r3, r0, #1
 800e1f6:	d102      	bne.n	800e1fe <_lseek_r+0x1e>
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	b103      	cbz	r3, 800e1fe <_lseek_r+0x1e>
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	2000074c 	.word	0x2000074c

0800e204 <_read_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d07      	ldr	r5, [pc, #28]	@ (800e224 <_read_r+0x20>)
 800e208:	4604      	mov	r4, r0
 800e20a:	4608      	mov	r0, r1
 800e20c:	4611      	mov	r1, r2
 800e20e:	2200      	movs	r2, #0
 800e210:	602a      	str	r2, [r5, #0]
 800e212:	461a      	mov	r2, r3
 800e214:	f7f8 fa25 	bl	8006662 <_read>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_read_r+0x1e>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_read_r+0x1e>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	2000074c 	.word	0x2000074c

0800e228 <_write_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d07      	ldr	r5, [pc, #28]	@ (800e248 <_write_r+0x20>)
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	2200      	movs	r2, #0
 800e234:	602a      	str	r2, [r5, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f7f8 fa30 	bl	800669c <_write>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_write_r+0x1e>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_write_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	2000074c 	.word	0x2000074c

0800e24c <__errno>:
 800e24c:	4b01      	ldr	r3, [pc, #4]	@ (800e254 <__errno+0x8>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	2000002c 	.word	0x2000002c

0800e258 <__libc_init_array>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	4d0d      	ldr	r5, [pc, #52]	@ (800e290 <__libc_init_array+0x38>)
 800e25c:	4c0d      	ldr	r4, [pc, #52]	@ (800e294 <__libc_init_array+0x3c>)
 800e25e:	1b64      	subs	r4, r4, r5
 800e260:	10a4      	asrs	r4, r4, #2
 800e262:	2600      	movs	r6, #0
 800e264:	42a6      	cmp	r6, r4
 800e266:	d109      	bne.n	800e27c <__libc_init_array+0x24>
 800e268:	4d0b      	ldr	r5, [pc, #44]	@ (800e298 <__libc_init_array+0x40>)
 800e26a:	4c0c      	ldr	r4, [pc, #48]	@ (800e29c <__libc_init_array+0x44>)
 800e26c:	f000 fe10 	bl	800ee90 <_init>
 800e270:	1b64      	subs	r4, r4, r5
 800e272:	10a4      	asrs	r4, r4, #2
 800e274:	2600      	movs	r6, #0
 800e276:	42a6      	cmp	r6, r4
 800e278:	d105      	bne.n	800e286 <__libc_init_array+0x2e>
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
 800e27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e280:	4798      	blx	r3
 800e282:	3601      	adds	r6, #1
 800e284:	e7ee      	b.n	800e264 <__libc_init_array+0xc>
 800e286:	f855 3b04 	ldr.w	r3, [r5], #4
 800e28a:	4798      	blx	r3
 800e28c:	3601      	adds	r6, #1
 800e28e:	e7f2      	b.n	800e276 <__libc_init_array+0x1e>
 800e290:	0801062c 	.word	0x0801062c
 800e294:	0801062c 	.word	0x0801062c
 800e298:	0801062c 	.word	0x0801062c
 800e29c:	08010630 	.word	0x08010630

0800e2a0 <__retarget_lock_init_recursive>:
 800e2a0:	4770      	bx	lr

0800e2a2 <__retarget_lock_acquire_recursive>:
 800e2a2:	4770      	bx	lr

0800e2a4 <__retarget_lock_release_recursive>:
 800e2a4:	4770      	bx	lr

0800e2a6 <memcpy>:
 800e2a6:	440a      	add	r2, r1
 800e2a8:	4291      	cmp	r1, r2
 800e2aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2ae:	d100      	bne.n	800e2b2 <memcpy+0xc>
 800e2b0:	4770      	bx	lr
 800e2b2:	b510      	push	{r4, lr}
 800e2b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2bc:	4291      	cmp	r1, r2
 800e2be:	d1f9      	bne.n	800e2b4 <memcpy+0xe>
 800e2c0:	bd10      	pop	{r4, pc}

0800e2c2 <abort>:
 800e2c2:	b508      	push	{r3, lr}
 800e2c4:	2006      	movs	r0, #6
 800e2c6:	f000 fd33 	bl	800ed30 <raise>
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	f7f8 f9be 	bl	800664c <_exit>

0800e2d0 <_free_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	2900      	cmp	r1, #0
 800e2d6:	d041      	beq.n	800e35c <_free_r+0x8c>
 800e2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2dc:	1f0c      	subs	r4, r1, #4
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfb8      	it	lt
 800e2e2:	18e4      	addlt	r4, r4, r3
 800e2e4:	f000 f8e0 	bl	800e4a8 <__malloc_lock>
 800e2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e360 <_free_r+0x90>)
 800e2ea:	6813      	ldr	r3, [r2, #0]
 800e2ec:	b933      	cbnz	r3, 800e2fc <_free_r+0x2c>
 800e2ee:	6063      	str	r3, [r4, #4]
 800e2f0:	6014      	str	r4, [r2, #0]
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2f8:	f000 b8dc 	b.w	800e4b4 <__malloc_unlock>
 800e2fc:	42a3      	cmp	r3, r4
 800e2fe:	d908      	bls.n	800e312 <_free_r+0x42>
 800e300:	6820      	ldr	r0, [r4, #0]
 800e302:	1821      	adds	r1, r4, r0
 800e304:	428b      	cmp	r3, r1
 800e306:	bf01      	itttt	eq
 800e308:	6819      	ldreq	r1, [r3, #0]
 800e30a:	685b      	ldreq	r3, [r3, #4]
 800e30c:	1809      	addeq	r1, r1, r0
 800e30e:	6021      	streq	r1, [r4, #0]
 800e310:	e7ed      	b.n	800e2ee <_free_r+0x1e>
 800e312:	461a      	mov	r2, r3
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	b10b      	cbz	r3, 800e31c <_free_r+0x4c>
 800e318:	42a3      	cmp	r3, r4
 800e31a:	d9fa      	bls.n	800e312 <_free_r+0x42>
 800e31c:	6811      	ldr	r1, [r2, #0]
 800e31e:	1850      	adds	r0, r2, r1
 800e320:	42a0      	cmp	r0, r4
 800e322:	d10b      	bne.n	800e33c <_free_r+0x6c>
 800e324:	6820      	ldr	r0, [r4, #0]
 800e326:	4401      	add	r1, r0
 800e328:	1850      	adds	r0, r2, r1
 800e32a:	4283      	cmp	r3, r0
 800e32c:	6011      	str	r1, [r2, #0]
 800e32e:	d1e0      	bne.n	800e2f2 <_free_r+0x22>
 800e330:	6818      	ldr	r0, [r3, #0]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	6053      	str	r3, [r2, #4]
 800e336:	4408      	add	r0, r1
 800e338:	6010      	str	r0, [r2, #0]
 800e33a:	e7da      	b.n	800e2f2 <_free_r+0x22>
 800e33c:	d902      	bls.n	800e344 <_free_r+0x74>
 800e33e:	230c      	movs	r3, #12
 800e340:	602b      	str	r3, [r5, #0]
 800e342:	e7d6      	b.n	800e2f2 <_free_r+0x22>
 800e344:	6820      	ldr	r0, [r4, #0]
 800e346:	1821      	adds	r1, r4, r0
 800e348:	428b      	cmp	r3, r1
 800e34a:	bf04      	itt	eq
 800e34c:	6819      	ldreq	r1, [r3, #0]
 800e34e:	685b      	ldreq	r3, [r3, #4]
 800e350:	6063      	str	r3, [r4, #4]
 800e352:	bf04      	itt	eq
 800e354:	1809      	addeq	r1, r1, r0
 800e356:	6021      	streq	r1, [r4, #0]
 800e358:	6054      	str	r4, [r2, #4]
 800e35a:	e7ca      	b.n	800e2f2 <_free_r+0x22>
 800e35c:	bd38      	pop	{r3, r4, r5, pc}
 800e35e:	bf00      	nop
 800e360:	20000758 	.word	0x20000758

0800e364 <sbrk_aligned>:
 800e364:	b570      	push	{r4, r5, r6, lr}
 800e366:	4e0f      	ldr	r6, [pc, #60]	@ (800e3a4 <sbrk_aligned+0x40>)
 800e368:	460c      	mov	r4, r1
 800e36a:	6831      	ldr	r1, [r6, #0]
 800e36c:	4605      	mov	r5, r0
 800e36e:	b911      	cbnz	r1, 800e376 <sbrk_aligned+0x12>
 800e370:	f000 fcfa 	bl	800ed68 <_sbrk_r>
 800e374:	6030      	str	r0, [r6, #0]
 800e376:	4621      	mov	r1, r4
 800e378:	4628      	mov	r0, r5
 800e37a:	f000 fcf5 	bl	800ed68 <_sbrk_r>
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	d103      	bne.n	800e38a <sbrk_aligned+0x26>
 800e382:	f04f 34ff 	mov.w	r4, #4294967295
 800e386:	4620      	mov	r0, r4
 800e388:	bd70      	pop	{r4, r5, r6, pc}
 800e38a:	1cc4      	adds	r4, r0, #3
 800e38c:	f024 0403 	bic.w	r4, r4, #3
 800e390:	42a0      	cmp	r0, r4
 800e392:	d0f8      	beq.n	800e386 <sbrk_aligned+0x22>
 800e394:	1a21      	subs	r1, r4, r0
 800e396:	4628      	mov	r0, r5
 800e398:	f000 fce6 	bl	800ed68 <_sbrk_r>
 800e39c:	3001      	adds	r0, #1
 800e39e:	d1f2      	bne.n	800e386 <sbrk_aligned+0x22>
 800e3a0:	e7ef      	b.n	800e382 <sbrk_aligned+0x1e>
 800e3a2:	bf00      	nop
 800e3a4:	20000754 	.word	0x20000754

0800e3a8 <_malloc_r>:
 800e3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3ac:	1ccd      	adds	r5, r1, #3
 800e3ae:	f025 0503 	bic.w	r5, r5, #3
 800e3b2:	3508      	adds	r5, #8
 800e3b4:	2d0c      	cmp	r5, #12
 800e3b6:	bf38      	it	cc
 800e3b8:	250c      	movcc	r5, #12
 800e3ba:	2d00      	cmp	r5, #0
 800e3bc:	4606      	mov	r6, r0
 800e3be:	db01      	blt.n	800e3c4 <_malloc_r+0x1c>
 800e3c0:	42a9      	cmp	r1, r5
 800e3c2:	d904      	bls.n	800e3ce <_malloc_r+0x26>
 800e3c4:	230c      	movs	r3, #12
 800e3c6:	6033      	str	r3, [r6, #0]
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4a4 <_malloc_r+0xfc>
 800e3d2:	f000 f869 	bl	800e4a8 <__malloc_lock>
 800e3d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e3da:	461c      	mov	r4, r3
 800e3dc:	bb44      	cbnz	r4, 800e430 <_malloc_r+0x88>
 800e3de:	4629      	mov	r1, r5
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7ff ffbf 	bl	800e364 <sbrk_aligned>
 800e3e6:	1c43      	adds	r3, r0, #1
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	d158      	bne.n	800e49e <_malloc_r+0xf6>
 800e3ec:	f8d8 4000 	ldr.w	r4, [r8]
 800e3f0:	4627      	mov	r7, r4
 800e3f2:	2f00      	cmp	r7, #0
 800e3f4:	d143      	bne.n	800e47e <_malloc_r+0xd6>
 800e3f6:	2c00      	cmp	r4, #0
 800e3f8:	d04b      	beq.n	800e492 <_malloc_r+0xea>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	4630      	mov	r0, r6
 800e400:	eb04 0903 	add.w	r9, r4, r3
 800e404:	f000 fcb0 	bl	800ed68 <_sbrk_r>
 800e408:	4581      	cmp	r9, r0
 800e40a:	d142      	bne.n	800e492 <_malloc_r+0xea>
 800e40c:	6821      	ldr	r1, [r4, #0]
 800e40e:	1a6d      	subs	r5, r5, r1
 800e410:	4629      	mov	r1, r5
 800e412:	4630      	mov	r0, r6
 800e414:	f7ff ffa6 	bl	800e364 <sbrk_aligned>
 800e418:	3001      	adds	r0, #1
 800e41a:	d03a      	beq.n	800e492 <_malloc_r+0xea>
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	442b      	add	r3, r5
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	f8d8 3000 	ldr.w	r3, [r8]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	bb62      	cbnz	r2, 800e484 <_malloc_r+0xdc>
 800e42a:	f8c8 7000 	str.w	r7, [r8]
 800e42e:	e00f      	b.n	800e450 <_malloc_r+0xa8>
 800e430:	6822      	ldr	r2, [r4, #0]
 800e432:	1b52      	subs	r2, r2, r5
 800e434:	d420      	bmi.n	800e478 <_malloc_r+0xd0>
 800e436:	2a0b      	cmp	r2, #11
 800e438:	d917      	bls.n	800e46a <_malloc_r+0xc2>
 800e43a:	1961      	adds	r1, r4, r5
 800e43c:	42a3      	cmp	r3, r4
 800e43e:	6025      	str	r5, [r4, #0]
 800e440:	bf18      	it	ne
 800e442:	6059      	strne	r1, [r3, #4]
 800e444:	6863      	ldr	r3, [r4, #4]
 800e446:	bf08      	it	eq
 800e448:	f8c8 1000 	streq.w	r1, [r8]
 800e44c:	5162      	str	r2, [r4, r5]
 800e44e:	604b      	str	r3, [r1, #4]
 800e450:	4630      	mov	r0, r6
 800e452:	f000 f82f 	bl	800e4b4 <__malloc_unlock>
 800e456:	f104 000b 	add.w	r0, r4, #11
 800e45a:	1d23      	adds	r3, r4, #4
 800e45c:	f020 0007 	bic.w	r0, r0, #7
 800e460:	1ac2      	subs	r2, r0, r3
 800e462:	bf1c      	itt	ne
 800e464:	1a1b      	subne	r3, r3, r0
 800e466:	50a3      	strne	r3, [r4, r2]
 800e468:	e7af      	b.n	800e3ca <_malloc_r+0x22>
 800e46a:	6862      	ldr	r2, [r4, #4]
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	bf0c      	ite	eq
 800e470:	f8c8 2000 	streq.w	r2, [r8]
 800e474:	605a      	strne	r2, [r3, #4]
 800e476:	e7eb      	b.n	800e450 <_malloc_r+0xa8>
 800e478:	4623      	mov	r3, r4
 800e47a:	6864      	ldr	r4, [r4, #4]
 800e47c:	e7ae      	b.n	800e3dc <_malloc_r+0x34>
 800e47e:	463c      	mov	r4, r7
 800e480:	687f      	ldr	r7, [r7, #4]
 800e482:	e7b6      	b.n	800e3f2 <_malloc_r+0x4a>
 800e484:	461a      	mov	r2, r3
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	42a3      	cmp	r3, r4
 800e48a:	d1fb      	bne.n	800e484 <_malloc_r+0xdc>
 800e48c:	2300      	movs	r3, #0
 800e48e:	6053      	str	r3, [r2, #4]
 800e490:	e7de      	b.n	800e450 <_malloc_r+0xa8>
 800e492:	230c      	movs	r3, #12
 800e494:	6033      	str	r3, [r6, #0]
 800e496:	4630      	mov	r0, r6
 800e498:	f000 f80c 	bl	800e4b4 <__malloc_unlock>
 800e49c:	e794      	b.n	800e3c8 <_malloc_r+0x20>
 800e49e:	6005      	str	r5, [r0, #0]
 800e4a0:	e7d6      	b.n	800e450 <_malloc_r+0xa8>
 800e4a2:	bf00      	nop
 800e4a4:	20000758 	.word	0x20000758

0800e4a8 <__malloc_lock>:
 800e4a8:	4801      	ldr	r0, [pc, #4]	@ (800e4b0 <__malloc_lock+0x8>)
 800e4aa:	f7ff befa 	b.w	800e2a2 <__retarget_lock_acquire_recursive>
 800e4ae:	bf00      	nop
 800e4b0:	20000750 	.word	0x20000750

0800e4b4 <__malloc_unlock>:
 800e4b4:	4801      	ldr	r0, [pc, #4]	@ (800e4bc <__malloc_unlock+0x8>)
 800e4b6:	f7ff bef5 	b.w	800e2a4 <__retarget_lock_release_recursive>
 800e4ba:	bf00      	nop
 800e4bc:	20000750 	.word	0x20000750

0800e4c0 <__sfputc_r>:
 800e4c0:	6893      	ldr	r3, [r2, #8]
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	b410      	push	{r4}
 800e4c8:	6093      	str	r3, [r2, #8]
 800e4ca:	da08      	bge.n	800e4de <__sfputc_r+0x1e>
 800e4cc:	6994      	ldr	r4, [r2, #24]
 800e4ce:	42a3      	cmp	r3, r4
 800e4d0:	db01      	blt.n	800e4d6 <__sfputc_r+0x16>
 800e4d2:	290a      	cmp	r1, #10
 800e4d4:	d103      	bne.n	800e4de <__sfputc_r+0x1e>
 800e4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4da:	f000 bb6d 	b.w	800ebb8 <__swbuf_r>
 800e4de:	6813      	ldr	r3, [r2, #0]
 800e4e0:	1c58      	adds	r0, r3, #1
 800e4e2:	6010      	str	r0, [r2, #0]
 800e4e4:	7019      	strb	r1, [r3, #0]
 800e4e6:	4608      	mov	r0, r1
 800e4e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <__sfputs_r>:
 800e4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f0:	4606      	mov	r6, r0
 800e4f2:	460f      	mov	r7, r1
 800e4f4:	4614      	mov	r4, r2
 800e4f6:	18d5      	adds	r5, r2, r3
 800e4f8:	42ac      	cmp	r4, r5
 800e4fa:	d101      	bne.n	800e500 <__sfputs_r+0x12>
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	e007      	b.n	800e510 <__sfputs_r+0x22>
 800e500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e504:	463a      	mov	r2, r7
 800e506:	4630      	mov	r0, r6
 800e508:	f7ff ffda 	bl	800e4c0 <__sfputc_r>
 800e50c:	1c43      	adds	r3, r0, #1
 800e50e:	d1f3      	bne.n	800e4f8 <__sfputs_r+0xa>
 800e510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e514 <_vfiprintf_r>:
 800e514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	460d      	mov	r5, r1
 800e51a:	b09d      	sub	sp, #116	@ 0x74
 800e51c:	4614      	mov	r4, r2
 800e51e:	4698      	mov	r8, r3
 800e520:	4606      	mov	r6, r0
 800e522:	b118      	cbz	r0, 800e52c <_vfiprintf_r+0x18>
 800e524:	6a03      	ldr	r3, [r0, #32]
 800e526:	b90b      	cbnz	r3, 800e52c <_vfiprintf_r+0x18>
 800e528:	f7ff fdb6 	bl	800e098 <__sinit>
 800e52c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e52e:	07d9      	lsls	r1, r3, #31
 800e530:	d405      	bmi.n	800e53e <_vfiprintf_r+0x2a>
 800e532:	89ab      	ldrh	r3, [r5, #12]
 800e534:	059a      	lsls	r2, r3, #22
 800e536:	d402      	bmi.n	800e53e <_vfiprintf_r+0x2a>
 800e538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e53a:	f7ff feb2 	bl	800e2a2 <__retarget_lock_acquire_recursive>
 800e53e:	89ab      	ldrh	r3, [r5, #12]
 800e540:	071b      	lsls	r3, r3, #28
 800e542:	d501      	bpl.n	800e548 <_vfiprintf_r+0x34>
 800e544:	692b      	ldr	r3, [r5, #16]
 800e546:	b99b      	cbnz	r3, 800e570 <_vfiprintf_r+0x5c>
 800e548:	4629      	mov	r1, r5
 800e54a:	4630      	mov	r0, r6
 800e54c:	f000 fb72 	bl	800ec34 <__swsetup_r>
 800e550:	b170      	cbz	r0, 800e570 <_vfiprintf_r+0x5c>
 800e552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e554:	07dc      	lsls	r4, r3, #31
 800e556:	d504      	bpl.n	800e562 <_vfiprintf_r+0x4e>
 800e558:	f04f 30ff 	mov.w	r0, #4294967295
 800e55c:	b01d      	add	sp, #116	@ 0x74
 800e55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e562:	89ab      	ldrh	r3, [r5, #12]
 800e564:	0598      	lsls	r0, r3, #22
 800e566:	d4f7      	bmi.n	800e558 <_vfiprintf_r+0x44>
 800e568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e56a:	f7ff fe9b 	bl	800e2a4 <__retarget_lock_release_recursive>
 800e56e:	e7f3      	b.n	800e558 <_vfiprintf_r+0x44>
 800e570:	2300      	movs	r3, #0
 800e572:	9309      	str	r3, [sp, #36]	@ 0x24
 800e574:	2320      	movs	r3, #32
 800e576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e57a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e57e:	2330      	movs	r3, #48	@ 0x30
 800e580:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e730 <_vfiprintf_r+0x21c>
 800e584:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e588:	f04f 0901 	mov.w	r9, #1
 800e58c:	4623      	mov	r3, r4
 800e58e:	469a      	mov	sl, r3
 800e590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e594:	b10a      	cbz	r2, 800e59a <_vfiprintf_r+0x86>
 800e596:	2a25      	cmp	r2, #37	@ 0x25
 800e598:	d1f9      	bne.n	800e58e <_vfiprintf_r+0x7a>
 800e59a:	ebba 0b04 	subs.w	fp, sl, r4
 800e59e:	d00b      	beq.n	800e5b8 <_vfiprintf_r+0xa4>
 800e5a0:	465b      	mov	r3, fp
 800e5a2:	4622      	mov	r2, r4
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f7ff ffa1 	bl	800e4ee <__sfputs_r>
 800e5ac:	3001      	adds	r0, #1
 800e5ae:	f000 80a7 	beq.w	800e700 <_vfiprintf_r+0x1ec>
 800e5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5b4:	445a      	add	r2, fp
 800e5b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f000 809f 	beq.w	800e700 <_vfiprintf_r+0x1ec>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5cc:	f10a 0a01 	add.w	sl, sl, #1
 800e5d0:	9304      	str	r3, [sp, #16]
 800e5d2:	9307      	str	r3, [sp, #28]
 800e5d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5da:	4654      	mov	r4, sl
 800e5dc:	2205      	movs	r2, #5
 800e5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e2:	4853      	ldr	r0, [pc, #332]	@ (800e730 <_vfiprintf_r+0x21c>)
 800e5e4:	f7f1 fdf4 	bl	80001d0 <memchr>
 800e5e8:	9a04      	ldr	r2, [sp, #16]
 800e5ea:	b9d8      	cbnz	r0, 800e624 <_vfiprintf_r+0x110>
 800e5ec:	06d1      	lsls	r1, r2, #27
 800e5ee:	bf44      	itt	mi
 800e5f0:	2320      	movmi	r3, #32
 800e5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5f6:	0713      	lsls	r3, r2, #28
 800e5f8:	bf44      	itt	mi
 800e5fa:	232b      	movmi	r3, #43	@ 0x2b
 800e5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e600:	f89a 3000 	ldrb.w	r3, [sl]
 800e604:	2b2a      	cmp	r3, #42	@ 0x2a
 800e606:	d015      	beq.n	800e634 <_vfiprintf_r+0x120>
 800e608:	9a07      	ldr	r2, [sp, #28]
 800e60a:	4654      	mov	r4, sl
 800e60c:	2000      	movs	r0, #0
 800e60e:	f04f 0c0a 	mov.w	ip, #10
 800e612:	4621      	mov	r1, r4
 800e614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e618:	3b30      	subs	r3, #48	@ 0x30
 800e61a:	2b09      	cmp	r3, #9
 800e61c:	d94b      	bls.n	800e6b6 <_vfiprintf_r+0x1a2>
 800e61e:	b1b0      	cbz	r0, 800e64e <_vfiprintf_r+0x13a>
 800e620:	9207      	str	r2, [sp, #28]
 800e622:	e014      	b.n	800e64e <_vfiprintf_r+0x13a>
 800e624:	eba0 0308 	sub.w	r3, r0, r8
 800e628:	fa09 f303 	lsl.w	r3, r9, r3
 800e62c:	4313      	orrs	r3, r2
 800e62e:	9304      	str	r3, [sp, #16]
 800e630:	46a2      	mov	sl, r4
 800e632:	e7d2      	b.n	800e5da <_vfiprintf_r+0xc6>
 800e634:	9b03      	ldr	r3, [sp, #12]
 800e636:	1d19      	adds	r1, r3, #4
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	9103      	str	r1, [sp, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	bfbb      	ittet	lt
 800e640:	425b      	neglt	r3, r3
 800e642:	f042 0202 	orrlt.w	r2, r2, #2
 800e646:	9307      	strge	r3, [sp, #28]
 800e648:	9307      	strlt	r3, [sp, #28]
 800e64a:	bfb8      	it	lt
 800e64c:	9204      	strlt	r2, [sp, #16]
 800e64e:	7823      	ldrb	r3, [r4, #0]
 800e650:	2b2e      	cmp	r3, #46	@ 0x2e
 800e652:	d10a      	bne.n	800e66a <_vfiprintf_r+0x156>
 800e654:	7863      	ldrb	r3, [r4, #1]
 800e656:	2b2a      	cmp	r3, #42	@ 0x2a
 800e658:	d132      	bne.n	800e6c0 <_vfiprintf_r+0x1ac>
 800e65a:	9b03      	ldr	r3, [sp, #12]
 800e65c:	1d1a      	adds	r2, r3, #4
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	9203      	str	r2, [sp, #12]
 800e662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e666:	3402      	adds	r4, #2
 800e668:	9305      	str	r3, [sp, #20]
 800e66a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e740 <_vfiprintf_r+0x22c>
 800e66e:	7821      	ldrb	r1, [r4, #0]
 800e670:	2203      	movs	r2, #3
 800e672:	4650      	mov	r0, sl
 800e674:	f7f1 fdac 	bl	80001d0 <memchr>
 800e678:	b138      	cbz	r0, 800e68a <_vfiprintf_r+0x176>
 800e67a:	9b04      	ldr	r3, [sp, #16]
 800e67c:	eba0 000a 	sub.w	r0, r0, sl
 800e680:	2240      	movs	r2, #64	@ 0x40
 800e682:	4082      	lsls	r2, r0
 800e684:	4313      	orrs	r3, r2
 800e686:	3401      	adds	r4, #1
 800e688:	9304      	str	r3, [sp, #16]
 800e68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68e:	4829      	ldr	r0, [pc, #164]	@ (800e734 <_vfiprintf_r+0x220>)
 800e690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e694:	2206      	movs	r2, #6
 800e696:	f7f1 fd9b 	bl	80001d0 <memchr>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d03f      	beq.n	800e71e <_vfiprintf_r+0x20a>
 800e69e:	4b26      	ldr	r3, [pc, #152]	@ (800e738 <_vfiprintf_r+0x224>)
 800e6a0:	bb1b      	cbnz	r3, 800e6ea <_vfiprintf_r+0x1d6>
 800e6a2:	9b03      	ldr	r3, [sp, #12]
 800e6a4:	3307      	adds	r3, #7
 800e6a6:	f023 0307 	bic.w	r3, r3, #7
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	9303      	str	r3, [sp, #12]
 800e6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6b0:	443b      	add	r3, r7
 800e6b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6b4:	e76a      	b.n	800e58c <_vfiprintf_r+0x78>
 800e6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	2001      	movs	r0, #1
 800e6be:	e7a8      	b.n	800e612 <_vfiprintf_r+0xfe>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	3401      	adds	r4, #1
 800e6c4:	9305      	str	r3, [sp, #20]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	f04f 0c0a 	mov.w	ip, #10
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6d2:	3a30      	subs	r2, #48	@ 0x30
 800e6d4:	2a09      	cmp	r2, #9
 800e6d6:	d903      	bls.n	800e6e0 <_vfiprintf_r+0x1cc>
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0c6      	beq.n	800e66a <_vfiprintf_r+0x156>
 800e6dc:	9105      	str	r1, [sp, #20]
 800e6de:	e7c4      	b.n	800e66a <_vfiprintf_r+0x156>
 800e6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e7f0      	b.n	800e6cc <_vfiprintf_r+0x1b8>
 800e6ea:	ab03      	add	r3, sp, #12
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	462a      	mov	r2, r5
 800e6f0:	4b12      	ldr	r3, [pc, #72]	@ (800e73c <_vfiprintf_r+0x228>)
 800e6f2:	a904      	add	r1, sp, #16
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f3af 8000 	nop.w
 800e6fa:	4607      	mov	r7, r0
 800e6fc:	1c78      	adds	r0, r7, #1
 800e6fe:	d1d6      	bne.n	800e6ae <_vfiprintf_r+0x19a>
 800e700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e702:	07d9      	lsls	r1, r3, #31
 800e704:	d405      	bmi.n	800e712 <_vfiprintf_r+0x1fe>
 800e706:	89ab      	ldrh	r3, [r5, #12]
 800e708:	059a      	lsls	r2, r3, #22
 800e70a:	d402      	bmi.n	800e712 <_vfiprintf_r+0x1fe>
 800e70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e70e:	f7ff fdc9 	bl	800e2a4 <__retarget_lock_release_recursive>
 800e712:	89ab      	ldrh	r3, [r5, #12]
 800e714:	065b      	lsls	r3, r3, #25
 800e716:	f53f af1f 	bmi.w	800e558 <_vfiprintf_r+0x44>
 800e71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e71c:	e71e      	b.n	800e55c <_vfiprintf_r+0x48>
 800e71e:	ab03      	add	r3, sp, #12
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	462a      	mov	r2, r5
 800e724:	4b05      	ldr	r3, [pc, #20]	@ (800e73c <_vfiprintf_r+0x228>)
 800e726:	a904      	add	r1, sp, #16
 800e728:	4630      	mov	r0, r6
 800e72a:	f000 f879 	bl	800e820 <_printf_i>
 800e72e:	e7e4      	b.n	800e6fa <_vfiprintf_r+0x1e6>
 800e730:	080105f0 	.word	0x080105f0
 800e734:	080105fa 	.word	0x080105fa
 800e738:	00000000 	.word	0x00000000
 800e73c:	0800e4ef 	.word	0x0800e4ef
 800e740:	080105f6 	.word	0x080105f6

0800e744 <_printf_common>:
 800e744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e748:	4616      	mov	r6, r2
 800e74a:	4698      	mov	r8, r3
 800e74c:	688a      	ldr	r2, [r1, #8]
 800e74e:	690b      	ldr	r3, [r1, #16]
 800e750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e754:	4293      	cmp	r3, r2
 800e756:	bfb8      	it	lt
 800e758:	4613      	movlt	r3, r2
 800e75a:	6033      	str	r3, [r6, #0]
 800e75c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e760:	4607      	mov	r7, r0
 800e762:	460c      	mov	r4, r1
 800e764:	b10a      	cbz	r2, 800e76a <_printf_common+0x26>
 800e766:	3301      	adds	r3, #1
 800e768:	6033      	str	r3, [r6, #0]
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	0699      	lsls	r1, r3, #26
 800e76e:	bf42      	ittt	mi
 800e770:	6833      	ldrmi	r3, [r6, #0]
 800e772:	3302      	addmi	r3, #2
 800e774:	6033      	strmi	r3, [r6, #0]
 800e776:	6825      	ldr	r5, [r4, #0]
 800e778:	f015 0506 	ands.w	r5, r5, #6
 800e77c:	d106      	bne.n	800e78c <_printf_common+0x48>
 800e77e:	f104 0a19 	add.w	sl, r4, #25
 800e782:	68e3      	ldr	r3, [r4, #12]
 800e784:	6832      	ldr	r2, [r6, #0]
 800e786:	1a9b      	subs	r3, r3, r2
 800e788:	42ab      	cmp	r3, r5
 800e78a:	dc26      	bgt.n	800e7da <_printf_common+0x96>
 800e78c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e790:	6822      	ldr	r2, [r4, #0]
 800e792:	3b00      	subs	r3, #0
 800e794:	bf18      	it	ne
 800e796:	2301      	movne	r3, #1
 800e798:	0692      	lsls	r2, r2, #26
 800e79a:	d42b      	bmi.n	800e7f4 <_printf_common+0xb0>
 800e79c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7a0:	4641      	mov	r1, r8
 800e7a2:	4638      	mov	r0, r7
 800e7a4:	47c8      	blx	r9
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	d01e      	beq.n	800e7e8 <_printf_common+0xa4>
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	6922      	ldr	r2, [r4, #16]
 800e7ae:	f003 0306 	and.w	r3, r3, #6
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	bf02      	ittt	eq
 800e7b6:	68e5      	ldreq	r5, [r4, #12]
 800e7b8:	6833      	ldreq	r3, [r6, #0]
 800e7ba:	1aed      	subeq	r5, r5, r3
 800e7bc:	68a3      	ldr	r3, [r4, #8]
 800e7be:	bf0c      	ite	eq
 800e7c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7c4:	2500      	movne	r5, #0
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	bfc4      	itt	gt
 800e7ca:	1a9b      	subgt	r3, r3, r2
 800e7cc:	18ed      	addgt	r5, r5, r3
 800e7ce:	2600      	movs	r6, #0
 800e7d0:	341a      	adds	r4, #26
 800e7d2:	42b5      	cmp	r5, r6
 800e7d4:	d11a      	bne.n	800e80c <_printf_common+0xc8>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	e008      	b.n	800e7ec <_printf_common+0xa8>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	4652      	mov	r2, sl
 800e7de:	4641      	mov	r1, r8
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	47c8      	blx	r9
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d103      	bne.n	800e7f0 <_printf_common+0xac>
 800e7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f0:	3501      	adds	r5, #1
 800e7f2:	e7c6      	b.n	800e782 <_printf_common+0x3e>
 800e7f4:	18e1      	adds	r1, r4, r3
 800e7f6:	1c5a      	adds	r2, r3, #1
 800e7f8:	2030      	movs	r0, #48	@ 0x30
 800e7fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e7fe:	4422      	add	r2, r4
 800e800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e808:	3302      	adds	r3, #2
 800e80a:	e7c7      	b.n	800e79c <_printf_common+0x58>
 800e80c:	2301      	movs	r3, #1
 800e80e:	4622      	mov	r2, r4
 800e810:	4641      	mov	r1, r8
 800e812:	4638      	mov	r0, r7
 800e814:	47c8      	blx	r9
 800e816:	3001      	adds	r0, #1
 800e818:	d0e6      	beq.n	800e7e8 <_printf_common+0xa4>
 800e81a:	3601      	adds	r6, #1
 800e81c:	e7d9      	b.n	800e7d2 <_printf_common+0x8e>
	...

0800e820 <_printf_i>:
 800e820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e824:	7e0f      	ldrb	r7, [r1, #24]
 800e826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e828:	2f78      	cmp	r7, #120	@ 0x78
 800e82a:	4691      	mov	r9, r2
 800e82c:	4680      	mov	r8, r0
 800e82e:	460c      	mov	r4, r1
 800e830:	469a      	mov	sl, r3
 800e832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e836:	d807      	bhi.n	800e848 <_printf_i+0x28>
 800e838:	2f62      	cmp	r7, #98	@ 0x62
 800e83a:	d80a      	bhi.n	800e852 <_printf_i+0x32>
 800e83c:	2f00      	cmp	r7, #0
 800e83e:	f000 80d2 	beq.w	800e9e6 <_printf_i+0x1c6>
 800e842:	2f58      	cmp	r7, #88	@ 0x58
 800e844:	f000 80b9 	beq.w	800e9ba <_printf_i+0x19a>
 800e848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e84c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e850:	e03a      	b.n	800e8c8 <_printf_i+0xa8>
 800e852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e856:	2b15      	cmp	r3, #21
 800e858:	d8f6      	bhi.n	800e848 <_printf_i+0x28>
 800e85a:	a101      	add	r1, pc, #4	@ (adr r1, 800e860 <_printf_i+0x40>)
 800e85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e860:	0800e8b9 	.word	0x0800e8b9
 800e864:	0800e8cd 	.word	0x0800e8cd
 800e868:	0800e849 	.word	0x0800e849
 800e86c:	0800e849 	.word	0x0800e849
 800e870:	0800e849 	.word	0x0800e849
 800e874:	0800e849 	.word	0x0800e849
 800e878:	0800e8cd 	.word	0x0800e8cd
 800e87c:	0800e849 	.word	0x0800e849
 800e880:	0800e849 	.word	0x0800e849
 800e884:	0800e849 	.word	0x0800e849
 800e888:	0800e849 	.word	0x0800e849
 800e88c:	0800e9cd 	.word	0x0800e9cd
 800e890:	0800e8f7 	.word	0x0800e8f7
 800e894:	0800e987 	.word	0x0800e987
 800e898:	0800e849 	.word	0x0800e849
 800e89c:	0800e849 	.word	0x0800e849
 800e8a0:	0800e9ef 	.word	0x0800e9ef
 800e8a4:	0800e849 	.word	0x0800e849
 800e8a8:	0800e8f7 	.word	0x0800e8f7
 800e8ac:	0800e849 	.word	0x0800e849
 800e8b0:	0800e849 	.word	0x0800e849
 800e8b4:	0800e98f 	.word	0x0800e98f
 800e8b8:	6833      	ldr	r3, [r6, #0]
 800e8ba:	1d1a      	adds	r2, r3, #4
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	6032      	str	r2, [r6, #0]
 800e8c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e09d      	b.n	800ea08 <_printf_i+0x1e8>
 800e8cc:	6833      	ldr	r3, [r6, #0]
 800e8ce:	6820      	ldr	r0, [r4, #0]
 800e8d0:	1d19      	adds	r1, r3, #4
 800e8d2:	6031      	str	r1, [r6, #0]
 800e8d4:	0606      	lsls	r6, r0, #24
 800e8d6:	d501      	bpl.n	800e8dc <_printf_i+0xbc>
 800e8d8:	681d      	ldr	r5, [r3, #0]
 800e8da:	e003      	b.n	800e8e4 <_printf_i+0xc4>
 800e8dc:	0645      	lsls	r5, r0, #25
 800e8de:	d5fb      	bpl.n	800e8d8 <_printf_i+0xb8>
 800e8e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	da03      	bge.n	800e8f0 <_printf_i+0xd0>
 800e8e8:	232d      	movs	r3, #45	@ 0x2d
 800e8ea:	426d      	negs	r5, r5
 800e8ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8f0:	4859      	ldr	r0, [pc, #356]	@ (800ea58 <_printf_i+0x238>)
 800e8f2:	230a      	movs	r3, #10
 800e8f4:	e011      	b.n	800e91a <_printf_i+0xfa>
 800e8f6:	6821      	ldr	r1, [r4, #0]
 800e8f8:	6833      	ldr	r3, [r6, #0]
 800e8fa:	0608      	lsls	r0, r1, #24
 800e8fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800e900:	d402      	bmi.n	800e908 <_printf_i+0xe8>
 800e902:	0649      	lsls	r1, r1, #25
 800e904:	bf48      	it	mi
 800e906:	b2ad      	uxthmi	r5, r5
 800e908:	2f6f      	cmp	r7, #111	@ 0x6f
 800e90a:	4853      	ldr	r0, [pc, #332]	@ (800ea58 <_printf_i+0x238>)
 800e90c:	6033      	str	r3, [r6, #0]
 800e90e:	bf14      	ite	ne
 800e910:	230a      	movne	r3, #10
 800e912:	2308      	moveq	r3, #8
 800e914:	2100      	movs	r1, #0
 800e916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e91a:	6866      	ldr	r6, [r4, #4]
 800e91c:	60a6      	str	r6, [r4, #8]
 800e91e:	2e00      	cmp	r6, #0
 800e920:	bfa2      	ittt	ge
 800e922:	6821      	ldrge	r1, [r4, #0]
 800e924:	f021 0104 	bicge.w	r1, r1, #4
 800e928:	6021      	strge	r1, [r4, #0]
 800e92a:	b90d      	cbnz	r5, 800e930 <_printf_i+0x110>
 800e92c:	2e00      	cmp	r6, #0
 800e92e:	d04b      	beq.n	800e9c8 <_printf_i+0x1a8>
 800e930:	4616      	mov	r6, r2
 800e932:	fbb5 f1f3 	udiv	r1, r5, r3
 800e936:	fb03 5711 	mls	r7, r3, r1, r5
 800e93a:	5dc7      	ldrb	r7, [r0, r7]
 800e93c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e940:	462f      	mov	r7, r5
 800e942:	42bb      	cmp	r3, r7
 800e944:	460d      	mov	r5, r1
 800e946:	d9f4      	bls.n	800e932 <_printf_i+0x112>
 800e948:	2b08      	cmp	r3, #8
 800e94a:	d10b      	bne.n	800e964 <_printf_i+0x144>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	07df      	lsls	r7, r3, #31
 800e950:	d508      	bpl.n	800e964 <_printf_i+0x144>
 800e952:	6923      	ldr	r3, [r4, #16]
 800e954:	6861      	ldr	r1, [r4, #4]
 800e956:	4299      	cmp	r1, r3
 800e958:	bfde      	ittt	le
 800e95a:	2330      	movle	r3, #48	@ 0x30
 800e95c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e960:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e964:	1b92      	subs	r2, r2, r6
 800e966:	6122      	str	r2, [r4, #16]
 800e968:	f8cd a000 	str.w	sl, [sp]
 800e96c:	464b      	mov	r3, r9
 800e96e:	aa03      	add	r2, sp, #12
 800e970:	4621      	mov	r1, r4
 800e972:	4640      	mov	r0, r8
 800e974:	f7ff fee6 	bl	800e744 <_printf_common>
 800e978:	3001      	adds	r0, #1
 800e97a:	d14a      	bne.n	800ea12 <_printf_i+0x1f2>
 800e97c:	f04f 30ff 	mov.w	r0, #4294967295
 800e980:	b004      	add	sp, #16
 800e982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	f043 0320 	orr.w	r3, r3, #32
 800e98c:	6023      	str	r3, [r4, #0]
 800e98e:	4833      	ldr	r0, [pc, #204]	@ (800ea5c <_printf_i+0x23c>)
 800e990:	2778      	movs	r7, #120	@ 0x78
 800e992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	6831      	ldr	r1, [r6, #0]
 800e99a:	061f      	lsls	r7, r3, #24
 800e99c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9a0:	d402      	bmi.n	800e9a8 <_printf_i+0x188>
 800e9a2:	065f      	lsls	r7, r3, #25
 800e9a4:	bf48      	it	mi
 800e9a6:	b2ad      	uxthmi	r5, r5
 800e9a8:	6031      	str	r1, [r6, #0]
 800e9aa:	07d9      	lsls	r1, r3, #31
 800e9ac:	bf44      	itt	mi
 800e9ae:	f043 0320 	orrmi.w	r3, r3, #32
 800e9b2:	6023      	strmi	r3, [r4, #0]
 800e9b4:	b11d      	cbz	r5, 800e9be <_printf_i+0x19e>
 800e9b6:	2310      	movs	r3, #16
 800e9b8:	e7ac      	b.n	800e914 <_printf_i+0xf4>
 800e9ba:	4827      	ldr	r0, [pc, #156]	@ (800ea58 <_printf_i+0x238>)
 800e9bc:	e7e9      	b.n	800e992 <_printf_i+0x172>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	f023 0320 	bic.w	r3, r3, #32
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	e7f6      	b.n	800e9b6 <_printf_i+0x196>
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	e7bd      	b.n	800e948 <_printf_i+0x128>
 800e9cc:	6833      	ldr	r3, [r6, #0]
 800e9ce:	6825      	ldr	r5, [r4, #0]
 800e9d0:	6961      	ldr	r1, [r4, #20]
 800e9d2:	1d18      	adds	r0, r3, #4
 800e9d4:	6030      	str	r0, [r6, #0]
 800e9d6:	062e      	lsls	r6, r5, #24
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	d501      	bpl.n	800e9e0 <_printf_i+0x1c0>
 800e9dc:	6019      	str	r1, [r3, #0]
 800e9de:	e002      	b.n	800e9e6 <_printf_i+0x1c6>
 800e9e0:	0668      	lsls	r0, r5, #25
 800e9e2:	d5fb      	bpl.n	800e9dc <_printf_i+0x1bc>
 800e9e4:	8019      	strh	r1, [r3, #0]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	6123      	str	r3, [r4, #16]
 800e9ea:	4616      	mov	r6, r2
 800e9ec:	e7bc      	b.n	800e968 <_printf_i+0x148>
 800e9ee:	6833      	ldr	r3, [r6, #0]
 800e9f0:	1d1a      	adds	r2, r3, #4
 800e9f2:	6032      	str	r2, [r6, #0]
 800e9f4:	681e      	ldr	r6, [r3, #0]
 800e9f6:	6862      	ldr	r2, [r4, #4]
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f7f1 fbe8 	bl	80001d0 <memchr>
 800ea00:	b108      	cbz	r0, 800ea06 <_printf_i+0x1e6>
 800ea02:	1b80      	subs	r0, r0, r6
 800ea04:	6060      	str	r0, [r4, #4]
 800ea06:	6863      	ldr	r3, [r4, #4]
 800ea08:	6123      	str	r3, [r4, #16]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea10:	e7aa      	b.n	800e968 <_printf_i+0x148>
 800ea12:	6923      	ldr	r3, [r4, #16]
 800ea14:	4632      	mov	r2, r6
 800ea16:	4649      	mov	r1, r9
 800ea18:	4640      	mov	r0, r8
 800ea1a:	47d0      	blx	sl
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	d0ad      	beq.n	800e97c <_printf_i+0x15c>
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	079b      	lsls	r3, r3, #30
 800ea24:	d413      	bmi.n	800ea4e <_printf_i+0x22e>
 800ea26:	68e0      	ldr	r0, [r4, #12]
 800ea28:	9b03      	ldr	r3, [sp, #12]
 800ea2a:	4298      	cmp	r0, r3
 800ea2c:	bfb8      	it	lt
 800ea2e:	4618      	movlt	r0, r3
 800ea30:	e7a6      	b.n	800e980 <_printf_i+0x160>
 800ea32:	2301      	movs	r3, #1
 800ea34:	4632      	mov	r2, r6
 800ea36:	4649      	mov	r1, r9
 800ea38:	4640      	mov	r0, r8
 800ea3a:	47d0      	blx	sl
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	d09d      	beq.n	800e97c <_printf_i+0x15c>
 800ea40:	3501      	adds	r5, #1
 800ea42:	68e3      	ldr	r3, [r4, #12]
 800ea44:	9903      	ldr	r1, [sp, #12]
 800ea46:	1a5b      	subs	r3, r3, r1
 800ea48:	42ab      	cmp	r3, r5
 800ea4a:	dcf2      	bgt.n	800ea32 <_printf_i+0x212>
 800ea4c:	e7eb      	b.n	800ea26 <_printf_i+0x206>
 800ea4e:	2500      	movs	r5, #0
 800ea50:	f104 0619 	add.w	r6, r4, #25
 800ea54:	e7f5      	b.n	800ea42 <_printf_i+0x222>
 800ea56:	bf00      	nop
 800ea58:	08010601 	.word	0x08010601
 800ea5c:	08010612 	.word	0x08010612

0800ea60 <__sflush_r>:
 800ea60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea68:	0716      	lsls	r6, r2, #28
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	d454      	bmi.n	800eb1a <__sflush_r+0xba>
 800ea70:	684b      	ldr	r3, [r1, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	dc02      	bgt.n	800ea7c <__sflush_r+0x1c>
 800ea76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	dd48      	ble.n	800eb0e <__sflush_r+0xae>
 800ea7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	d045      	beq.n	800eb0e <__sflush_r+0xae>
 800ea82:	2300      	movs	r3, #0
 800ea84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea88:	682f      	ldr	r7, [r5, #0]
 800ea8a:	6a21      	ldr	r1, [r4, #32]
 800ea8c:	602b      	str	r3, [r5, #0]
 800ea8e:	d030      	beq.n	800eaf2 <__sflush_r+0x92>
 800ea90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	0759      	lsls	r1, r3, #29
 800ea96:	d505      	bpl.n	800eaa4 <__sflush_r+0x44>
 800ea98:	6863      	ldr	r3, [r4, #4]
 800ea9a:	1ad2      	subs	r2, r2, r3
 800ea9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea9e:	b10b      	cbz	r3, 800eaa4 <__sflush_r+0x44>
 800eaa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eaa8:	6a21      	ldr	r1, [r4, #32]
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b0      	blx	r6
 800eaae:	1c43      	adds	r3, r0, #1
 800eab0:	89a3      	ldrh	r3, [r4, #12]
 800eab2:	d106      	bne.n	800eac2 <__sflush_r+0x62>
 800eab4:	6829      	ldr	r1, [r5, #0]
 800eab6:	291d      	cmp	r1, #29
 800eab8:	d82b      	bhi.n	800eb12 <__sflush_r+0xb2>
 800eaba:	4a2a      	ldr	r2, [pc, #168]	@ (800eb64 <__sflush_r+0x104>)
 800eabc:	410a      	asrs	r2, r1
 800eabe:	07d6      	lsls	r6, r2, #31
 800eac0:	d427      	bmi.n	800eb12 <__sflush_r+0xb2>
 800eac2:	2200      	movs	r2, #0
 800eac4:	6062      	str	r2, [r4, #4]
 800eac6:	04d9      	lsls	r1, r3, #19
 800eac8:	6922      	ldr	r2, [r4, #16]
 800eaca:	6022      	str	r2, [r4, #0]
 800eacc:	d504      	bpl.n	800ead8 <__sflush_r+0x78>
 800eace:	1c42      	adds	r2, r0, #1
 800ead0:	d101      	bne.n	800ead6 <__sflush_r+0x76>
 800ead2:	682b      	ldr	r3, [r5, #0]
 800ead4:	b903      	cbnz	r3, 800ead8 <__sflush_r+0x78>
 800ead6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ead8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eada:	602f      	str	r7, [r5, #0]
 800eadc:	b1b9      	cbz	r1, 800eb0e <__sflush_r+0xae>
 800eade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eae2:	4299      	cmp	r1, r3
 800eae4:	d002      	beq.n	800eaec <__sflush_r+0x8c>
 800eae6:	4628      	mov	r0, r5
 800eae8:	f7ff fbf2 	bl	800e2d0 <_free_r>
 800eaec:	2300      	movs	r3, #0
 800eaee:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaf0:	e00d      	b.n	800eb0e <__sflush_r+0xae>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	47b0      	blx	r6
 800eaf8:	4602      	mov	r2, r0
 800eafa:	1c50      	adds	r0, r2, #1
 800eafc:	d1c9      	bne.n	800ea92 <__sflush_r+0x32>
 800eafe:	682b      	ldr	r3, [r5, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0c6      	beq.n	800ea92 <__sflush_r+0x32>
 800eb04:	2b1d      	cmp	r3, #29
 800eb06:	d001      	beq.n	800eb0c <__sflush_r+0xac>
 800eb08:	2b16      	cmp	r3, #22
 800eb0a:	d11e      	bne.n	800eb4a <__sflush_r+0xea>
 800eb0c:	602f      	str	r7, [r5, #0]
 800eb0e:	2000      	movs	r0, #0
 800eb10:	e022      	b.n	800eb58 <__sflush_r+0xf8>
 800eb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb16:	b21b      	sxth	r3, r3
 800eb18:	e01b      	b.n	800eb52 <__sflush_r+0xf2>
 800eb1a:	690f      	ldr	r7, [r1, #16]
 800eb1c:	2f00      	cmp	r7, #0
 800eb1e:	d0f6      	beq.n	800eb0e <__sflush_r+0xae>
 800eb20:	0793      	lsls	r3, r2, #30
 800eb22:	680e      	ldr	r6, [r1, #0]
 800eb24:	bf08      	it	eq
 800eb26:	694b      	ldreq	r3, [r1, #20]
 800eb28:	600f      	str	r7, [r1, #0]
 800eb2a:	bf18      	it	ne
 800eb2c:	2300      	movne	r3, #0
 800eb2e:	eba6 0807 	sub.w	r8, r6, r7
 800eb32:	608b      	str	r3, [r1, #8]
 800eb34:	f1b8 0f00 	cmp.w	r8, #0
 800eb38:	dde9      	ble.n	800eb0e <__sflush_r+0xae>
 800eb3a:	6a21      	ldr	r1, [r4, #32]
 800eb3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb3e:	4643      	mov	r3, r8
 800eb40:	463a      	mov	r2, r7
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b0      	blx	r6
 800eb46:	2800      	cmp	r0, #0
 800eb48:	dc08      	bgt.n	800eb5c <__sflush_r+0xfc>
 800eb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb52:	81a3      	strh	r3, [r4, #12]
 800eb54:	f04f 30ff 	mov.w	r0, #4294967295
 800eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5c:	4407      	add	r7, r0
 800eb5e:	eba8 0800 	sub.w	r8, r8, r0
 800eb62:	e7e7      	b.n	800eb34 <__sflush_r+0xd4>
 800eb64:	dfbffffe 	.word	0xdfbffffe

0800eb68 <_fflush_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	690b      	ldr	r3, [r1, #16]
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	460c      	mov	r4, r1
 800eb70:	b913      	cbnz	r3, 800eb78 <_fflush_r+0x10>
 800eb72:	2500      	movs	r5, #0
 800eb74:	4628      	mov	r0, r5
 800eb76:	bd38      	pop	{r3, r4, r5, pc}
 800eb78:	b118      	cbz	r0, 800eb82 <_fflush_r+0x1a>
 800eb7a:	6a03      	ldr	r3, [r0, #32]
 800eb7c:	b90b      	cbnz	r3, 800eb82 <_fflush_r+0x1a>
 800eb7e:	f7ff fa8b 	bl	800e098 <__sinit>
 800eb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d0f3      	beq.n	800eb72 <_fflush_r+0xa>
 800eb8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb8c:	07d0      	lsls	r0, r2, #31
 800eb8e:	d404      	bmi.n	800eb9a <_fflush_r+0x32>
 800eb90:	0599      	lsls	r1, r3, #22
 800eb92:	d402      	bmi.n	800eb9a <_fflush_r+0x32>
 800eb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb96:	f7ff fb84 	bl	800e2a2 <__retarget_lock_acquire_recursive>
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	f7ff ff5f 	bl	800ea60 <__sflush_r>
 800eba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eba4:	07da      	lsls	r2, r3, #31
 800eba6:	4605      	mov	r5, r0
 800eba8:	d4e4      	bmi.n	800eb74 <_fflush_r+0xc>
 800ebaa:	89a3      	ldrh	r3, [r4, #12]
 800ebac:	059b      	lsls	r3, r3, #22
 800ebae:	d4e1      	bmi.n	800eb74 <_fflush_r+0xc>
 800ebb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebb2:	f7ff fb77 	bl	800e2a4 <__retarget_lock_release_recursive>
 800ebb6:	e7dd      	b.n	800eb74 <_fflush_r+0xc>

0800ebb8 <__swbuf_r>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	460e      	mov	r6, r1
 800ebbc:	4614      	mov	r4, r2
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	b118      	cbz	r0, 800ebca <__swbuf_r+0x12>
 800ebc2:	6a03      	ldr	r3, [r0, #32]
 800ebc4:	b90b      	cbnz	r3, 800ebca <__swbuf_r+0x12>
 800ebc6:	f7ff fa67 	bl	800e098 <__sinit>
 800ebca:	69a3      	ldr	r3, [r4, #24]
 800ebcc:	60a3      	str	r3, [r4, #8]
 800ebce:	89a3      	ldrh	r3, [r4, #12]
 800ebd0:	071a      	lsls	r2, r3, #28
 800ebd2:	d501      	bpl.n	800ebd8 <__swbuf_r+0x20>
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	b943      	cbnz	r3, 800ebea <__swbuf_r+0x32>
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 f82a 	bl	800ec34 <__swsetup_r>
 800ebe0:	b118      	cbz	r0, 800ebea <__swbuf_r+0x32>
 800ebe2:	f04f 37ff 	mov.w	r7, #4294967295
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	6922      	ldr	r2, [r4, #16]
 800ebee:	1a98      	subs	r0, r3, r2
 800ebf0:	6963      	ldr	r3, [r4, #20]
 800ebf2:	b2f6      	uxtb	r6, r6
 800ebf4:	4283      	cmp	r3, r0
 800ebf6:	4637      	mov	r7, r6
 800ebf8:	dc05      	bgt.n	800ec06 <__swbuf_r+0x4e>
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f7ff ffb3 	bl	800eb68 <_fflush_r>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d1ed      	bne.n	800ebe2 <__swbuf_r+0x2a>
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	60a3      	str	r3, [r4, #8]
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	6022      	str	r2, [r4, #0]
 800ec12:	701e      	strb	r6, [r3, #0]
 800ec14:	6962      	ldr	r2, [r4, #20]
 800ec16:	1c43      	adds	r3, r0, #1
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d004      	beq.n	800ec26 <__swbuf_r+0x6e>
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	07db      	lsls	r3, r3, #31
 800ec20:	d5e1      	bpl.n	800ebe6 <__swbuf_r+0x2e>
 800ec22:	2e0a      	cmp	r6, #10
 800ec24:	d1df      	bne.n	800ebe6 <__swbuf_r+0x2e>
 800ec26:	4621      	mov	r1, r4
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f7ff ff9d 	bl	800eb68 <_fflush_r>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0d9      	beq.n	800ebe6 <__swbuf_r+0x2e>
 800ec32:	e7d6      	b.n	800ebe2 <__swbuf_r+0x2a>

0800ec34 <__swsetup_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4b29      	ldr	r3, [pc, #164]	@ (800ecdc <__swsetup_r+0xa8>)
 800ec38:	4605      	mov	r5, r0
 800ec3a:	6818      	ldr	r0, [r3, #0]
 800ec3c:	460c      	mov	r4, r1
 800ec3e:	b118      	cbz	r0, 800ec48 <__swsetup_r+0x14>
 800ec40:	6a03      	ldr	r3, [r0, #32]
 800ec42:	b90b      	cbnz	r3, 800ec48 <__swsetup_r+0x14>
 800ec44:	f7ff fa28 	bl	800e098 <__sinit>
 800ec48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec4c:	0719      	lsls	r1, r3, #28
 800ec4e:	d422      	bmi.n	800ec96 <__swsetup_r+0x62>
 800ec50:	06da      	lsls	r2, r3, #27
 800ec52:	d407      	bmi.n	800ec64 <__swsetup_r+0x30>
 800ec54:	2209      	movs	r2, #9
 800ec56:	602a      	str	r2, [r5, #0]
 800ec58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec62:	e033      	b.n	800eccc <__swsetup_r+0x98>
 800ec64:	0758      	lsls	r0, r3, #29
 800ec66:	d512      	bpl.n	800ec8e <__swsetup_r+0x5a>
 800ec68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec6a:	b141      	cbz	r1, 800ec7e <__swsetup_r+0x4a>
 800ec6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec70:	4299      	cmp	r1, r3
 800ec72:	d002      	beq.n	800ec7a <__swsetup_r+0x46>
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7ff fb2b 	bl	800e2d0 <_free_r>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec7e:	89a3      	ldrh	r3, [r4, #12]
 800ec80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec84:	81a3      	strh	r3, [r4, #12]
 800ec86:	2300      	movs	r3, #0
 800ec88:	6063      	str	r3, [r4, #4]
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	f043 0308 	orr.w	r3, r3, #8
 800ec94:	81a3      	strh	r3, [r4, #12]
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	b94b      	cbnz	r3, 800ecae <__swsetup_r+0x7a>
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eca4:	d003      	beq.n	800ecae <__swsetup_r+0x7a>
 800eca6:	4621      	mov	r1, r4
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f000 f893 	bl	800edd4 <__smakebuf_r>
 800ecae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecb2:	f013 0201 	ands.w	r2, r3, #1
 800ecb6:	d00a      	beq.n	800ecce <__swsetup_r+0x9a>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	60a2      	str	r2, [r4, #8]
 800ecbc:	6962      	ldr	r2, [r4, #20]
 800ecbe:	4252      	negs	r2, r2
 800ecc0:	61a2      	str	r2, [r4, #24]
 800ecc2:	6922      	ldr	r2, [r4, #16]
 800ecc4:	b942      	cbnz	r2, 800ecd8 <__swsetup_r+0xa4>
 800ecc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecca:	d1c5      	bne.n	800ec58 <__swsetup_r+0x24>
 800eccc:	bd38      	pop	{r3, r4, r5, pc}
 800ecce:	0799      	lsls	r1, r3, #30
 800ecd0:	bf58      	it	pl
 800ecd2:	6962      	ldrpl	r2, [r4, #20]
 800ecd4:	60a2      	str	r2, [r4, #8]
 800ecd6:	e7f4      	b.n	800ecc2 <__swsetup_r+0x8e>
 800ecd8:	2000      	movs	r0, #0
 800ecda:	e7f7      	b.n	800eccc <__swsetup_r+0x98>
 800ecdc:	2000002c 	.word	0x2000002c

0800ece0 <_raise_r>:
 800ece0:	291f      	cmp	r1, #31
 800ece2:	b538      	push	{r3, r4, r5, lr}
 800ece4:	4605      	mov	r5, r0
 800ece6:	460c      	mov	r4, r1
 800ece8:	d904      	bls.n	800ecf4 <_raise_r+0x14>
 800ecea:	2316      	movs	r3, #22
 800ecec:	6003      	str	r3, [r0, #0]
 800ecee:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf2:	bd38      	pop	{r3, r4, r5, pc}
 800ecf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ecf6:	b112      	cbz	r2, 800ecfe <_raise_r+0x1e>
 800ecf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecfc:	b94b      	cbnz	r3, 800ed12 <_raise_r+0x32>
 800ecfe:	4628      	mov	r0, r5
 800ed00:	f000 f830 	bl	800ed64 <_getpid_r>
 800ed04:	4622      	mov	r2, r4
 800ed06:	4601      	mov	r1, r0
 800ed08:	4628      	mov	r0, r5
 800ed0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed0e:	f000 b817 	b.w	800ed40 <_kill_r>
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d00a      	beq.n	800ed2c <_raise_r+0x4c>
 800ed16:	1c59      	adds	r1, r3, #1
 800ed18:	d103      	bne.n	800ed22 <_raise_r+0x42>
 800ed1a:	2316      	movs	r3, #22
 800ed1c:	6003      	str	r3, [r0, #0]
 800ed1e:	2001      	movs	r0, #1
 800ed20:	e7e7      	b.n	800ecf2 <_raise_r+0x12>
 800ed22:	2100      	movs	r1, #0
 800ed24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed28:	4620      	mov	r0, r4
 800ed2a:	4798      	blx	r3
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	e7e0      	b.n	800ecf2 <_raise_r+0x12>

0800ed30 <raise>:
 800ed30:	4b02      	ldr	r3, [pc, #8]	@ (800ed3c <raise+0xc>)
 800ed32:	4601      	mov	r1, r0
 800ed34:	6818      	ldr	r0, [r3, #0]
 800ed36:	f7ff bfd3 	b.w	800ece0 <_raise_r>
 800ed3a:	bf00      	nop
 800ed3c:	2000002c 	.word	0x2000002c

0800ed40 <_kill_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d07      	ldr	r5, [pc, #28]	@ (800ed60 <_kill_r+0x20>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	602b      	str	r3, [r5, #0]
 800ed4e:	f7f7 fc6d 	bl	800662c <_kill>
 800ed52:	1c43      	adds	r3, r0, #1
 800ed54:	d102      	bne.n	800ed5c <_kill_r+0x1c>
 800ed56:	682b      	ldr	r3, [r5, #0]
 800ed58:	b103      	cbz	r3, 800ed5c <_kill_r+0x1c>
 800ed5a:	6023      	str	r3, [r4, #0]
 800ed5c:	bd38      	pop	{r3, r4, r5, pc}
 800ed5e:	bf00      	nop
 800ed60:	2000074c 	.word	0x2000074c

0800ed64 <_getpid_r>:
 800ed64:	f7f7 bc5a 	b.w	800661c <_getpid>

0800ed68 <_sbrk_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	@ (800ed84 <_sbrk_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f7 fce2 	bl	800673c <_sbrk>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_sbrk_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_sbrk_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	2000074c 	.word	0x2000074c

0800ed88 <__swhatbuf_r>:
 800ed88:	b570      	push	{r4, r5, r6, lr}
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed90:	2900      	cmp	r1, #0
 800ed92:	b096      	sub	sp, #88	@ 0x58
 800ed94:	4615      	mov	r5, r2
 800ed96:	461e      	mov	r6, r3
 800ed98:	da0d      	bge.n	800edb6 <__swhatbuf_r+0x2e>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eda0:	f04f 0100 	mov.w	r1, #0
 800eda4:	bf14      	ite	ne
 800eda6:	2340      	movne	r3, #64	@ 0x40
 800eda8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edac:	2000      	movs	r0, #0
 800edae:	6031      	str	r1, [r6, #0]
 800edb0:	602b      	str	r3, [r5, #0]
 800edb2:	b016      	add	sp, #88	@ 0x58
 800edb4:	bd70      	pop	{r4, r5, r6, pc}
 800edb6:	466a      	mov	r2, sp
 800edb8:	f000 f848 	bl	800ee4c <_fstat_r>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	dbec      	blt.n	800ed9a <__swhatbuf_r+0x12>
 800edc0:	9901      	ldr	r1, [sp, #4]
 800edc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edca:	4259      	negs	r1, r3
 800edcc:	4159      	adcs	r1, r3
 800edce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edd2:	e7eb      	b.n	800edac <__swhatbuf_r+0x24>

0800edd4 <__smakebuf_r>:
 800edd4:	898b      	ldrh	r3, [r1, #12]
 800edd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edd8:	079d      	lsls	r5, r3, #30
 800edda:	4606      	mov	r6, r0
 800eddc:	460c      	mov	r4, r1
 800edde:	d507      	bpl.n	800edf0 <__smakebuf_r+0x1c>
 800ede0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ede4:	6023      	str	r3, [r4, #0]
 800ede6:	6123      	str	r3, [r4, #16]
 800ede8:	2301      	movs	r3, #1
 800edea:	6163      	str	r3, [r4, #20]
 800edec:	b003      	add	sp, #12
 800edee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf0:	ab01      	add	r3, sp, #4
 800edf2:	466a      	mov	r2, sp
 800edf4:	f7ff ffc8 	bl	800ed88 <__swhatbuf_r>
 800edf8:	9f00      	ldr	r7, [sp, #0]
 800edfa:	4605      	mov	r5, r0
 800edfc:	4639      	mov	r1, r7
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7ff fad2 	bl	800e3a8 <_malloc_r>
 800ee04:	b948      	cbnz	r0, 800ee1a <__smakebuf_r+0x46>
 800ee06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee0a:	059a      	lsls	r2, r3, #22
 800ee0c:	d4ee      	bmi.n	800edec <__smakebuf_r+0x18>
 800ee0e:	f023 0303 	bic.w	r3, r3, #3
 800ee12:	f043 0302 	orr.w	r3, r3, #2
 800ee16:	81a3      	strh	r3, [r4, #12]
 800ee18:	e7e2      	b.n	800ede0 <__smakebuf_r+0xc>
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	6020      	str	r0, [r4, #0]
 800ee1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	9b01      	ldr	r3, [sp, #4]
 800ee26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee2a:	b15b      	cbz	r3, 800ee44 <__smakebuf_r+0x70>
 800ee2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee30:	4630      	mov	r0, r6
 800ee32:	f000 f81d 	bl	800ee70 <_isatty_r>
 800ee36:	b128      	cbz	r0, 800ee44 <__smakebuf_r+0x70>
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	f023 0303 	bic.w	r3, r3, #3
 800ee3e:	f043 0301 	orr.w	r3, r3, #1
 800ee42:	81a3      	strh	r3, [r4, #12]
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	431d      	orrs	r5, r3
 800ee48:	81a5      	strh	r5, [r4, #12]
 800ee4a:	e7cf      	b.n	800edec <__smakebuf_r+0x18>

0800ee4c <_fstat_r>:
 800ee4c:	b538      	push	{r3, r4, r5, lr}
 800ee4e:	4d07      	ldr	r5, [pc, #28]	@ (800ee6c <_fstat_r+0x20>)
 800ee50:	2300      	movs	r3, #0
 800ee52:	4604      	mov	r4, r0
 800ee54:	4608      	mov	r0, r1
 800ee56:	4611      	mov	r1, r2
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	f7f7 fc47 	bl	80066ec <_fstat>
 800ee5e:	1c43      	adds	r3, r0, #1
 800ee60:	d102      	bne.n	800ee68 <_fstat_r+0x1c>
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	b103      	cbz	r3, 800ee68 <_fstat_r+0x1c>
 800ee66:	6023      	str	r3, [r4, #0]
 800ee68:	bd38      	pop	{r3, r4, r5, pc}
 800ee6a:	bf00      	nop
 800ee6c:	2000074c 	.word	0x2000074c

0800ee70 <_isatty_r>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	4d06      	ldr	r5, [pc, #24]	@ (800ee8c <_isatty_r+0x1c>)
 800ee74:	2300      	movs	r3, #0
 800ee76:	4604      	mov	r4, r0
 800ee78:	4608      	mov	r0, r1
 800ee7a:	602b      	str	r3, [r5, #0]
 800ee7c:	f7f7 fc46 	bl	800670c <_isatty>
 800ee80:	1c43      	adds	r3, r0, #1
 800ee82:	d102      	bne.n	800ee8a <_isatty_r+0x1a>
 800ee84:	682b      	ldr	r3, [r5, #0]
 800ee86:	b103      	cbz	r3, 800ee8a <_isatty_r+0x1a>
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	bd38      	pop	{r3, r4, r5, pc}
 800ee8c:	2000074c 	.word	0x2000074c

0800ee90 <_init>:
 800ee90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee92:	bf00      	nop
 800ee94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee96:	bc08      	pop	{r3}
 800ee98:	469e      	mov	lr, r3
 800ee9a:	4770      	bx	lr

0800ee9c <_fini>:
 800ee9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9e:	bf00      	nop
 800eea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eea2:	bc08      	pop	{r3}
 800eea4:	469e      	mov	lr, r3
 800eea6:	4770      	bx	lr
